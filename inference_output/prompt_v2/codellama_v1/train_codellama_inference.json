{"answer":"SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Which type of policy is most frequently used? Give me the policy type code.","context":"CREATE TABLE policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1","question":"Show the flight number and distance of the flight with maximum price.","context":"CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)","generation":"SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1"}
{"answer":"SELECT order_id, SUM(product_quantity) FROM Order_items GROUP BY order_id","question":"Show order ids and the total quantity in each order.","context":"CREATE TABLE Order_items (order_id VARCHAR, product_quantity INTEGER)","generation":"SELECT order_id, SUM(product_quantity) FROM Order_items GROUP BY order_id"}
{"answer":"SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20","question":"Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?","context":"CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR); CREATE TABLE driverstandings (driverid VARCHAR, points VARCHAR, position VARCHAR, wins VARCHAR)","generation":"SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20"}
{"answer":"SELECT COUNT(*) FROM follows","question":"How many followers does each user have?","context":"CREATE TABLE follows (Id VARCHAR)","generation":"SELECT COUNT(*) FROM follows"}
{"answer":"SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\"","question":"What is the description of the restaurant type Sandwich?","context":"CREATE TABLE Restaurant_Type (ResTypeDescription VARCHAR, ResTypeName VARCHAR)","generation":"SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\""}
{"answer":"SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'","question":"Find the department name of the instructor whose name contains 'Soisalon'.","context":"CREATE TABLE instructor (dept_name VARCHAR, name VARCHAR)","generation":"SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'"}
{"answer":"SELECT T1.part_name, COUNT(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name","question":"How many assets can each parts be used in? List the part name and the number.","context":"CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Asset_Parts (part_id VARCHAR)","generation":"SELECT T1.part_name, COUNT(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name"}
{"answer":"SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING COUNT(*) >= 2","question":"What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?","context":"CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR)","generation":"SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.time LIMIT 1"}
{"answer":"SELECT T1.part_id, T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which part fault requires the most number of skills to fix? List part id and name.","context":"CREATE TABLE Part_Faults (part_id VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR); CREATE TABLE Parts (part_id VARCHAR, part_name VARCHAR)","generation":"SELECT T1.part_id, T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T3.part_fault_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000","question":"What is the name of the movie produced after 2000 and directed by James Cameron?","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)","generation":"SELECT title FROM Movie WHERE YEAR > 2000 AND director = \"James Cameron\""}
{"answer":"SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'","question":"find all dependent names who have a spouse relation with some employee.","context":"CREATE TABLE dependent (Dependent_name VARCHAR, relationship VARCHAR)","generation":"SELECT Dependent_name FROM dependent WHERE relationship = 'spouse'"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\"","question":"What are the titles of papers published by \"Jeremy Gibbons\"?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN authors AS T3 ON T2.authid = T3.authid WHERE T3.fname = \"Jeremy\" AND T3.lname = \"Gibbons\""}
{"answer":"SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9","question":"Show the names of all the donors except those whose donation amount less than 9.","context":"CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)","generation":"SELECT donator_name FROM endowment WHERE amount >= 9"}
{"answer":"SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'","question":"Find the name of customers who have both saving and checking account types.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)","generation":"SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'"}
{"answer":"SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5","question":"List the top 5 genres by number of tracks. List genres name and total tracks.","context":"CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5"}
{"answer":"SELECT T1.Participant_ID, T1.Participant_Type_Code, COUNT(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID","question":"How many events have each participants attended? List the participant id, type and the number.","context":"CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR); CREATE TABLE Participants_in_Events (Participant_ID VARCHAR)","generation":"SELECT T1.Participant_ID, T1.Participant_Type_Code, COUNT(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID"}
{"answer":"SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\"","question":"What are the life spans of representatives from New York state or Indiana state?","context":"CREATE TABLE representative (Lifespan VARCHAR, State VARCHAR)","generation":"SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\""}
{"answer":"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\"","question":"How many credit cards does customer Blanche Huels have?","context":"CREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\""}
{"answer":"SELECT player FROM match_season ORDER BY College","question":"Return all players sorted by college in ascending alphabetical order.","context":"CREATE TABLE match_season (player VARCHAR, College VARCHAR)","generation":"SELECT player FROM match_season ORDER BY College"}
{"answer":"SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY COUNT(T2.decor) LIMIT 1","question":"What kind of decor has the least number of reservations?","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (decor VARCHAR, RoomId VARCHAR)","generation":"SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room GROUP BY T1.decor ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT Player FROM match_season WHERE College = \"UCLA\"","question":"Show the players from college UCLA.","context":"CREATE TABLE match_season (Player VARCHAR, College VARCHAR)","generation":"SELECT Player FROM match_season WHERE College = \"UCLA\""}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\"","question":"Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN authors AS T3 ON T2.authid = T3.authid JOIN inst AS T4 ON T2.instid = T4.instid WHERE T3.lname = \"Ohori\" AND T4.country = \"Japan\" ORDER BY T2.authorder"}
{"answer":"SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1","question":"Find the name of the most expensive product.","context":"CREATE TABLE products (product_name VARCHAR, product_price VARCHAR)","generation":"SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1"}
{"answer":"SELECT Roles.role_description, COUNT(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING COUNT(Employees.employee_id) > 1","question":"List roles that have more than one employee. List the role description and number of employees.","context":"CREATE TABLE ROLES (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT T1.Description, COUNT(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.Id = T2.RoleId GROUP BY T1.Description HAVING COUNT(*) > 1"}
{"answer":"SELECT origin, COUNT(*) FROM Flight GROUP BY origin","question":"Show all origins and the number of flights from each origin.","context":"CREATE TABLE Flight (origin VARCHAR)","generation":"SELECT origin, COUNT(*) FROM Flight GROUP BY origin"}
{"answer":"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown <> \"Santo Domingo\"","question":"What are the names of gymnasts whose hometown is not \"Santo Domingo\"?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Hometown VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID WHERE T1.Hometown <> \"Santo Domingo\""}
{"answer":"SELECT COUNT(*) FROM Employees","question":"How many employees do we have?","context":"CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Employees"}
{"answer":"SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8","question":"How many days had both mean humidity above 50 and mean visibility above 8?","context":"CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)","generation":"SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8"}
{"answer":"SELECT first_name FROM customer WHERE NOT customer_id IN (SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01')","question":"What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?","context":"CREATE TABLE customer (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER); CREATE TABLE rental (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER)","generation":"SELECT first_name FROM customer WHERE NOT customer_id IN (SELECT T1.customer_id FROM rental AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date > '2005-08-23 02:06:01')"}
{"answer":"SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full'","question":"Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, Accreditation_type VARCHAR)","generation":"SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE '%Full%'"}
{"answer":"SELECT Total_Horses FROM farm ORDER BY Total_Horses","question":"List the total number of horses on farms in ascending order.","context":"CREATE TABLE farm (Total_Horses VARCHAR)","generation":"SELECT Total_Horses FROM farm ORDER BY Total_Horses"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1","question":"What is the customer first, last name and id with least number of accounts.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_id FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the location shared by most counties?","context":"CREATE TABLE county_public_safety (LOCATION VARCHAR)","generation":"SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1","question":"Which catalog publisher has published the most catalogs?","context":"CREATE TABLE catalogs (catalog_publisher VARCHAR)","generation":"SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT detention_type_code FROM Detention","question":"Return all distinct detention type codes.","context":"CREATE TABLE Detention (detention_type_code VARCHAR)","generation":"SELECT DISTINCT detention_type_code FROM Detention"}
{"answer":"SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10","question":"Find the name and level of catalog structure with level between 5 and 10.","context":"CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)","generation":"SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10"}
{"answer":"SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000","question":"Find the names and average salaries of all departments whose average salary is greater than 42000.","context":"CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)","generation":"SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000"}
{"answer":"SELECT T1.staff_name, COUNT(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name","question":"How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.","context":"CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR)","generation":"SELECT T1.staff_name, COUNT(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T2.contact_staff_id"}
{"answer":"SELECT Major, COUNT(*) FROM Student GROUP BY Major HAVING COUNT(Major) BETWEEN 2 AND 30","question":"Which major has between 2 and 30 number of students? List major and the number of students.","context":"CREATE TABLE Student (Major VARCHAR)","generation":"SELECT Major, COUNT(*) FROM Student GROUP BY Major HAVING COUNT(*) BETWEEN 2 AND 30"}
{"answer":"SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id","question":"Show the apartment numbers, start dates, and end dates of all the apartment bookings.","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)","generation":"SELECT T1.apt_number, T2.booking_start_date, T2.booking_end_date FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id"}
{"answer":"SELECT T3.EMP_FNAME, T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\"","question":"What is the first and last name of the professor in biology department?","context":"CREATE TABLE professor (dept_code VARCHAR, EMP_NUM VARCHAR); CREATE TABLE department (dept_code VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_LNAME VARCHAR, EMP_NUM VARCHAR)","generation":"SELECT T1.EMP_FNAME, T1.EMP_LNAME FROM employee AS T1 JOIN professor AS T2 ON T1.EMP_NUM = T2.EMP_NUM JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = \"Biology\""}
{"answer":"SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"","question":"Find id of candidates whose assessment code is \"Pass\"?","context":"CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)","generation":"SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\""}
{"answer":"SELECT COUNT(*) FROM player","question":"How many players are there?","context":"CREATE TABLE player (Id VARCHAR)","generation":"SELECT COUNT(*) FROM player"}
{"answer":"SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'","question":"What are the distinct ages of the heads who are acting?","context":"CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)","generation":"SELECT DISTINCT T1.age FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 1"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300","question":"What are the names of body builders whose total score is higher than 300?","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)","generation":"SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Total > 300"}
{"answer":"SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3","question":"Show the top 3 most common colleges of players in match seasons.","context":"CREATE TABLE match_season (College VARCHAR)","generation":"SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3"}
{"answer":"SELECT service_type_code FROM services ORDER BY service_type_code","question":"List the type of the services in alphabetical order.","context":"CREATE TABLE services (service_type_code VARCHAR)","generation":"SELECT service_type_code FROM services ORDER BY service_type_code"}
{"answer":"SELECT Name FROM actor WHERE Age <> 20","question":"List the name of actors whose age is not 20.","context":"CREATE TABLE actor (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name FROM actor WHERE Age <> 20"}
{"answer":"SELECT COUNT(*) FROM Flight","question":"How many flights do we have?","context":"CREATE TABLE Flight (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Flight"}
{"answer":"SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)","question":"List the names of editors that are not on any journal committee.","context":"CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)","generation":"SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)"}
{"answer":"SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id","question":"Show the name of track and the number of races in each track.","context":"CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM track AS T1 JOIN race AS T2 ON T1.track_id = T2.track_id GROUP BY T1.name"}
{"answer":"SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\"","question":"What are the first names and last names of students with address in Wisconsin state?","context":"CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Students (first_name VARCHAR, last_name VARCHAR, address_id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.state_province_county = \"Wisconsin\""}
{"answer":"SELECT COUNT(*) FROM region","question":"How many regions do we have?","context":"CREATE TABLE region (Id VARCHAR)","generation":"SELECT COUNT(*) FROM region"}
{"answer":"SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1","question":"What is the highest acc percent score in the competition?","context":"CREATE TABLE basketball_match (acc_percent VARCHAR)","generation":"SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1"}
{"answer":"SELECT name, open_date, organized_by FROM Church","question":"Show the name, open date, and organizer for all churches.","context":"CREATE TABLE Church (name VARCHAR, open_date VARCHAR, organized_by VARCHAR)","generation":"SELECT name, open_date, organized_by FROM Church"}
{"answer":"SELECT COUNT(*) FROM customers WHERE state = \"CA\"","question":"How many customers in state of CA?","context":"CREATE TABLE customers (state VARCHAR)","generation":"SELECT COUNT(*) FROM customers WHERE state = \"CA\""}
{"answer":"SELECT SUM(enrollment), MIN(enrollment) FROM university","question":"What is the total and minimum enrollment of all schools?","context":"CREATE TABLE university (enrollment INTEGER)","generation":"SELECT SUM(enrollment), MIN(enrollment) FROM university"}
{"answer":"SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id","question":"Show all customer ids and the number of accounts for each customer.","context":"CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id"}
{"answer":"SELECT COUNT(*) FROM institution WHERE NOT institution_id IN (SELECT institution_id FROM protein)","question":"How many institutions do not have an associated protein in our record?","context":"CREATE TABLE protein (institution_id VARCHAR); CREATE TABLE institution (institution_id VARCHAR)","generation":"SELECT COUNT(*) FROM institution WHERE NOT institution_id IN (SELECT institution_id FROM protein)"}
{"answer":"SELECT name FROM club ORDER BY name DESC","question":"List all club names in descending alphabetical order.","context":"CREATE TABLE club (name VARCHAR)","generation":"SELECT name FROM club ORDER BY name DESC"}
{"answer":"SELECT DISTINCT T2.emp_fname, T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'","question":"Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.","context":"CREATE TABLE professor (prof_high_degree VARCHAR, emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR)","generation":"SELECT T1.emp_fname, T2.prof_high_degree FROM employee AS T1 JOIN CLASS AS T3 ON T1.emp_num = T3.prof_num JOIN professor AS T2 ON T3.prof_num = T2.emp_num JOIN department AS T4 ON T2.dept_code = T4.dept_code WHERE T4.dept_name = \"Computer Info. Systems\""}
{"answer":"SELECT DISTINCT District FROM election","question":"Show all the distinct districts for elections.","context":"CREATE TABLE election (District VARCHAR)","generation":"SELECT DISTINCT District FROM election"}
{"answer":"SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major <> 600 AND Sex = 'F'","question":"List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Sex VARCHAR, Age VARCHAR, Major VARCHAR)","generation":"SELECT Fname, Lname FROM Student WHERE Sex = 'F' AND Age > 18 AND Major <> '600'"}
{"answer":"SELECT address FROM shop ORDER BY open_year","question":"Show the shop addresses ordered by their opening year.","context":"CREATE TABLE shop (address VARCHAR, open_year VARCHAR)","generation":"SELECT address FROM shop ORDER BY open_year"}
{"answer":"SELECT AVG(t1.age), AVG(Years_working), t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type","question":"Find the average age and experience working length of journalists working on different role type.","context":"CREATE TABLE news_report (work_type VARCHAR, journalist_id VARCHAR); CREATE TABLE journalist (age INTEGER, journalist_id VARCHAR)","generation":"SELECT AVG(T1.age), AVG(T2.experience) FROM journalist AS T1 JOIN news_report AS T2 ON T1.journalist_id = T2.journalist_id GROUP BY T2.work_type"}
{"answer":"SELECT school_name FROM school ORDER BY enrollment LIMIT 1","question":"List the name of the school with the smallest enrollment.","context":"CREATE TABLE school (school_name VARCHAR, enrollment VARCHAR)","generation":"SELECT school_name FROM school ORDER BY enrollment LIMIT 1"}
{"answer":"SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the party that has the largest number of representatives?","context":"CREATE TABLE representative (Party VARCHAR)","generation":"SELECT Party FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3","question":"Give me the start station and end station for the trips with the three oldest id.","context":"CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)","generation":"SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3"}
{"answer":"SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id","question":"Show all member names who are not in charge of any event.","context":"CREATE TABLE member (member_name VARCHAR); CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)","generation":"SELECT member_name FROM member WHERE NOT member_id IN (SELECT member_in_charge_id FROM party_events)"}
{"answer":"SELECT T2.emp_fname, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code","question":"Find the first names of all instructors who have taught some course and the course description.","context":"CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T3.emp_fname, T1.crs_description FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN employee AS T3 ON T1.prof_num = T3.emp_num"}
{"answer":"SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype","question":"Show all allergy types and the number of allergies in each type.","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype"}
{"answer":"SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'","question":"What is the season of the game which causes the player 'Walter Samuel' to get injured?","context":"CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR); CREATE TABLE game (season VARCHAR, id VARCHAR)","generation":"SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'"}
{"answer":"SELECT Date, Venue FROM debate","question":"What are the date and venue of each debate?","context":"CREATE TABLE debate (Date VARCHAR, Venue VARCHAR)","generation":"SELECT Date, Venue FROM debate"}
{"answer":"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\"","question":"How many trips started from Mountain View city and ended at Palo Alto city?","context":"CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)","generation":"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id JOIN station AS T3 ON T2.end_station_id = T3.id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\""}
{"answer":"SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1","question":"Find the name and email of the user followed by the least number of people.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)","generation":"SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1"}
{"answer":"SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)","question":"Show the name, location, open year for all tracks with a seating higher than the average.","context":"CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)","generation":"SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)"}
{"answer":"SELECT SUM(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"","question":"What is the number of graduates in \"San Francisco State University\" in year 2004?","context":"CREATE TABLE discipline_enrollments (graduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)","generation":"SELECT SUM(T1.graduate) FROM discipline_enrollments AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T2.campus = \"San Francisco State University\" AND T1.year = 2004"}
{"answer":"SELECT school_name FROM school WHERE NOT school_id IN (SELECT school_id FROM endowment)","question":"List the names of the schools without any endowment.","context":"CREATE TABLE endowment (school_name VARCHAR, school_id VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)","generation":"SELECT school_name FROM school WHERE NOT school_id IN (SELECT school_id FROM endowment)"}
{"answer":"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1","question":"Show publishers that have more than one publication.","context":"CREATE TABLE publication (Publisher VARCHAR)","generation":"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1"}
{"answer":"SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'","question":"How many different courses offered by Physics department?","context":"CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)","generation":"SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = \"Physics\""}
{"answer":"SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64","question":"Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.","context":"CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)","generation":"SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64"}
{"answer":"SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959","question":"Show the minister who took office after 1961 or before 1959.","context":"CREATE TABLE party (minister VARCHAR, took_office VARCHAR)","generation":"SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959"}
{"answer":"SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20","question":"Show the host names for parties with number of hosts greater than 20.","context":"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Number_of_hosts INTEGER)","generation":"SELECT T1.Name FROM HOST AS T1 JOIN party_host AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T2.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20"}
{"answer":"SELECT COUNT(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'","question":"How many restaurant is the Sandwich type restaurant?","context":"CREATE TABLE Type_Of_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR); CREATE TABLE Restaurant_Type (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Restaurant AS T1 JOIN Restaurant_Type AS T2 ON T1.Id = T2.Id JOIN Type_Of_Restaurant AS T3 ON T2.Id = T3.Id WHERE T3.Type = \"Sandwich\""}
{"answer":"SELECT COUNT(*), customer_id FROM Accounts GROUP BY customer_id","question":"How many accounts does each customer have? List the number and customer id.","context":"CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT COUNT(*), customer_id FROM Accounts GROUP BY customer_id"}
{"answer":"SELECT COUNT(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\"","question":"How many professors are teaching class with code ACCT-211?","context":"CREATE TABLE CLASS (PROF_NUM VARCHAR, CRS_CODE VARCHAR)","generation":"SELECT COUNT(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\""}
{"answer":"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1","question":"List the countries that have more than one mountain.","context":"CREATE TABLE mountain (Country VARCHAR)","generation":"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1"}
{"answer":"SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32","question":"List the distinct carriers of phones with memories bigger than 32.","context":"CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)","generation":"SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32"}
{"answer":"SELECT Name FROM People ORDER BY Age DESC LIMIT 5","question":"List the names of the top 5 oldest people.","context":"CREATE TABLE People (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name FROM People ORDER BY Age DESC LIMIT 5"}
{"answer":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM checking)","question":"Find the name of accounts whose checking balance is below the average checking balance.","context":"CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)","generation":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM checking)"}
{"answer":"SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)","question":"Find the names of students who have taken any course in the fall semester of year 2003.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR); CREATE TABLE takes (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.semester = \"Fall\" AND T2.YEAR = 2003"}
{"answer":"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1","question":"List the writers who have written more than one book.","context":"CREATE TABLE book (Writer VARCHAR)","generation":"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1"}
{"answer":"SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING COUNT(*) >= 2","question":"Show the region name with at least two storms.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)","generation":"SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_name HAVING COUNT(*) >= 2"}
{"answer":"SELECT customer_details FROM customers ORDER BY customer_details","question":"List the names of all the customers in alphabetical order.","context":"CREATE TABLE customers (customer_details VARCHAR)","generation":"SELECT customer_details FROM customers ORDER BY customer_details"}
{"answer":"SELECT COUNT(*) FROM university WHERE LOCATION LIKE \"%NY%\"","question":"Find how many school locations have the word 'NY'.","context":"CREATE TABLE university (LOCATION VARCHAR)","generation":"SELECT COUNT(*) FROM university WHERE LOCATION LIKE '%NY%'"}
{"answer":"SELECT Name FROM People ORDER BY Height","question":"What are the names of people in ascending order of height?","context":"CREATE TABLE People (Name VARCHAR, Height VARCHAR)","generation":"SELECT Name FROM People ORDER BY Height"}
{"answer":"SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id","question":"List member names and their party names.","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)","generation":"SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id"}
{"answer":"SELECT SUM(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname","question":"Find the total amount of loans offered by each bank branch.","context":"CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)","generation":"SELECT SUM(T1.amount), T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.branch_id"}
{"answer":"SELECT COUNT(DISTINCT dept_name) FROM department","question":"How many departments does the college has?","context":"CREATE TABLE department (dept_name VARCHAR)","generation":"SELECT COUNT(*) FROM department"}
{"answer":"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3","question":"Find the names of all reviewers who have contributed three or more ratings.","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR)","generation":"SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID GROUP BY T1.name HAVING COUNT(*) >= 3"}
{"answer":"SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING COUNT(*) >= 4","question":"Show the account id and name with at least 4 transactions.","context":"CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)","generation":"SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING COUNT(*) >= 4"}
{"answer":"SELECT DISTINCT LOCATION FROM cinema","question":"What are all the locations with a cinema?","context":"CREATE TABLE cinema (LOCATION VARCHAR)","generation":"SELECT LOCATION FROM cinema"}
{"answer":"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99","question":"What is the aircraft name for the flight with number 99","context":"CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)","generation":"SELECT T1.name FROM Aircraft AS T1 JOIN Flight AS T2 ON T1.aid = T2.aid WHERE T2.flno = 99"}
{"answer":"SELECT COUNT(DISTINCT student_id) FROM Students_in_Detention","question":"How many distinct students have been in detention?","context":"CREATE TABLE Students_in_Detention (student_id VARCHAR)","generation":"SELECT COUNT(DISTINCT student_id) FROM Students_in_Detention"}
{"answer":"SELECT Official_Name FROM city ORDER BY Population DESC","question":"List official names of cities in descending order of population.","context":"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)","generation":"SELECT Official_Name FROM city ORDER BY Population DESC"}
{"answer":"SELECT COUNT(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'","question":"How many classes are professor whose last name is Graztevski has?","context":"CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_NUM VARCHAR, EMP_LNAME VARCHAR)","generation":"SELECT COUNT(*) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROF_NUM = T2.EMP_NUM WHERE T2.EMP_LNAME = \"Graztevski\""}
{"answer":"SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636","question":"What is the total and maximum duration of trips with bike id 636?","context":"CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)","generation":"SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636"}
{"answer":"SELECT AVG(rating), MAX(rating) FROM review","question":"Find the average and maximum rating of all reviews.","context":"CREATE TABLE review (rating INTEGER)","generation":"SELECT AVG(rating), MAX(rating) FROM review"}
{"answer":"SELECT institution, LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'","question":"Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".","context":"CREATE TABLE institution (institution VARCHAR, LOCATION VARCHAR, founded VARCHAR, TYPE VARCHAR)","generation":"SELECT institution, LOCATION FROM institution WHERE founded > 1990 AND TYPE = \"Private\""}
{"answer":"SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'","question":"What is the genre name of the film HUNGER ROOF?","context":"CREATE TABLE film_category (category_id VARCHAR, film_id VARCHAR); CREATE TABLE film (film_id VARCHAR, title VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)","generation":"SELECT T3.name FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = \"HUNGER ROOF\""}
{"answer":"SELECT age, COUNT(*) FROM Student GROUP BY age","question":"Show all ages and corresponding number of students.","context":"CREATE TABLE Student (age VARCHAR)","generation":"SELECT age, COUNT(*) FROM Student GROUP BY age"}
{"answer":"SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID","question":"Show the names of people, and dates and venues of debates they are on the affirmative side.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)","generation":"SELECT T1.Name, T2.Date, T2.Venue FROM people AS T1 JOIN debate_people AS T3 ON T1.People_ID = T3.Debate_ID JOIN debate AS T2 ON T3.Debate_ID = T2.Debate_ID WHERE T3.Affirmative = 'Yes'"}
{"answer":"SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)","question":"How many artists do not have any album?","context":"CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)","generation":"SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)"}
{"answer":"SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200","question":"Find the ids and names of stations from which at least 200 trips started.","context":"CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)","generation":"SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_id HAVING COUNT(*) >= 200"}
{"answer":"SELECT decor, COUNT(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor","question":"Find the number of rooms with king bed for each decor type.","context":"CREATE TABLE Rooms (decor VARCHAR, bedType VARCHAR)","generation":"SELECT COUNT(*), decor FROM Rooms WHERE bedType = \"King\" GROUP BY decor"}
{"answer":"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"","question":"Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".","context":"CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)","generation":"SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = \"Close a policy\" OR T3.service_name = \"Upgrade a policy\""}
{"answer":"SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC","question":"Show theme and year for all exhibitions in an descending order of ticket price.","context":"CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price VARCHAR)","generation":"SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC"}
{"answer":"SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the storm name and max speed which affected the greatest number of regions?","context":"CREATE TABLE storm (name VARCHAR, max_speed VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR)","generation":"SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.'","question":"How many professors do have a Ph.D. degree?","context":"CREATE TABLE professor (prof_high_degree VARCHAR)","generation":"SELECT COUNT(*) FROM professor WHERE prof_high_degree = \"Ph.D.\""}
{"answer":"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\"","question":"Show all flight numbers with aircraft Airbus A340-300.","context":"CREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\""}
{"answer":"SELECT COUNT(*) FROM editor","question":"How many editors are there?","context":"CREATE TABLE editor (Id VARCHAR)","generation":"SELECT COUNT(*) FROM editor"}
{"answer":"SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC","question":"Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC"}
{"answer":"SELECT T1.stu_fname, T1.stu_lname, T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code","question":"Find names of all students who took some course and the course description.","context":"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)","generation":"SELECT T1.stu_fname, T1.stu_lname, T2.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code"}
{"answer":"SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"","question":"Which city does student Linda Smith live in?","context":"CREATE TABLE Student (city_code VARCHAR, Fname VARCHAR, Lname VARCHAR)","generation":"SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\""}
{"answer":"SELECT COUNT(DISTINCT Birth_Place) FROM people","question":"How many distinct birth places are there?","context":"CREATE TABLE people (Birth_Place VARCHAR)","generation":"SELECT COUNT(DISTINCT Birth_Place) FROM people"}
{"answer":"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"","question":"How many students attend course English?","context":"CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)","generation":"SELECT COUNT(*) FROM student_course_attendance AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = \"English\""}
{"answer":"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT MAX(start_date) FROM policies)","question":"Which customer is associated with the latest policy?","context":"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (start_date INTEGER); CREATE TABLE policies (customer_id VARCHAR, start_date INTEGER)","generation":"SELECT T1.customer_details FROM customers AS T1 JOIN policies AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.start_date DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"","question":"How many customers does Steve Johnson support?","context":"CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)","generation":"SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\""}
{"answer":"SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most popular full name of the actors?","context":"CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR)","generation":"SELECT first_name, last_name FROM actor ORDER BY first_name, last_name LIMIT 1"}
{"answer":"SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'","question":"What is the first name of students who got grade C in any class?","context":"CREATE TABLE student (stu_num VARCHAR); CREATE TABLE enroll (stu_num VARCHAR)","generation":"SELECT T1.first_name FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.grade = 'C'"}
{"answer":"SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the most common age of editors.","context":"CREATE TABLE editor (Age VARCHAR)","generation":"SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT AVG(no_of_customers) FROM bank","question":"Find the average number of customers cross all banks.","context":"CREATE TABLE bank (no_of_customers INTEGER)","generation":"SELECT AVG(no_of_customers) FROM bank"}
{"answer":"SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1","question":"Which department has more than 1 head at a time? List the id, name and the number of heads.","context":"CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)","generation":"SELECT T1.department_id, T1.name, COUNT(*) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1"}
{"answer":"SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)","question":"Find the average credit score of the customers who have some loan.","context":"CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)","generation":"SELECT AVG(T1.credit_score) FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id"}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'","question":"Find the name of tracks which are in both Movies and music playlists.","context":"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = \"Movies\" INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = \"Music\""}
{"answer":"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1","question":"Find the names of users who have more than one tweet.","context":"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.name HAVING COUNT(*) > 1"}
{"answer":"SELECT T2.school_name, T1.budgeted, T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002","question":"Show each school name, its budgeted amount, and invested amount in year 2002 or after.","context":"CREATE TABLE budget (budgeted VARCHAR, invested VARCHAR, school_id VARCHAR, year VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)","generation":"SELECT T1.school_name, T2.budgeted, T2.invested FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE T2.year >= 2002"}
{"answer":"SELECT document_id, COUNT(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY COUNT(copy_number) DESC LIMIT 1","question":"Which document has the most draft copies? List its document id and number of draft copies.","context":"CREATE TABLE Draft_Copies (document_id VARCHAR, copy_number VARCHAR)","generation":"SELECT document_id, COUNT(*) FROM Draft_Copies GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT flno FROM Flight ORDER BY distance LIMIT 3","question":"Show the flight number of flights with three lowest distances.","context":"CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)","generation":"SELECT flno FROM Flight ORDER BY distance LIMIT 3"}
{"answer":"SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1","question":"Which trip started from the station with the largest dock count? Give me the trip id.","context":"CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)","generation":"SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1"}
{"answer":"SELECT DISTINCT Nominee FROM musical WHERE Award <> \"Tony Award\"","question":"What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?","context":"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","generation":"SELECT DISTINCT Nominee FROM musical WHERE Award <> \"Tony Award\""}
{"answer":"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the name of track with most number of races.","context":"CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)","generation":"SELECT T1.name FROM track AS T1 JOIN race AS T2 ON T1.track_id = T2.track_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT customer_name, customer_phone, customer_email FROM Customers ORDER BY date_became_customer","question":"List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.","context":"CREATE TABLE Customers (customer_name VARCHAR, customer_phone VARCHAR, customer_email VARCHAR, date_became_customer VARCHAR)","generation":"SELECT customer_name, customer_phone, customer_email FROM Customers ORDER BY date_became_customer"}
{"answer":"SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1","question":"Find the name of the department that offers the highest total credits?","context":"CREATE TABLE course (dept_name VARCHAR, credits INTEGER)","generation":"SELECT dept_name FROM course ORDER BY SUM(credits) DESC LIMIT 1"}
{"answer":"SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10","question":"List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.","context":"CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T2.customer_id ORDER BY SUM(T2.total) DESC LIMIT 10"}
{"answer":"SELECT DISTINCT country FROM artist","question":"What are all distinct country for artists?","context":"CREATE TABLE artist (country VARCHAR)","generation":"SELECT DISTINCT country FROM artist"}
{"answer":"SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010","question":"Find courses that ran in Fall 2009 but not in Spring 2010.","context":"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010"}
{"answer":"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> \"San Francisco\"","question":"Count the number of trips that did not end in San Francisco city.","context":"CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)","generation":"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> \"San Francisco\""}
{"answer":"SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which store owns most items?","context":"CREATE TABLE inventory (store_id VARCHAR)","generation":"SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT T1.player_name, T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5","question":"List the names and birthdays of the top five players in terms of potential.","context":"CREATE TABLE Player_Attributes (player_api_id VARCHAR); CREATE TABLE Player (player_name VARCHAR, birthday VARCHAR, player_api_id VARCHAR)","generation":"SELECT T1.player_name, T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.potential DESC LIMIT 5"}
{"answer":"SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the claim processing stage that most of the claims are on?","context":"CREATE TABLE claims_processing (claim_stage_id VARCHAR); CREATE TABLE claims_processing_stages (claim_status_name VARCHAR, claim_stage_id VARCHAR)","generation":"SELECT T1.claim_status_name FROM claims_processing_stages AS T1 JOIN claims_processing AS T2 ON T1.claim_stage_id = T2.claim_stage_id GROUP BY T1.claim_status_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"","question":"List name of all tracks in Balls to the Wall.","context":"CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)","generation":"SELECT T1.name FROM tracks AS T1 JOIN albums AS T2 ON T1.genre_id = T2.id WHERE T2.title = \"Balls to the Wall\""}
{"answer":"SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"","question":"Find all the catalog publishers whose name contains \"Murray\"","context":"CREATE TABLE catalogs (catalog_publisher VARCHAR)","generation":"SELECT catalog_publisher FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\""}
{"answer":"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the card type code with most number of cards?","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT AVG(balance) FROM checking","question":"Find the average checking balance.","context":"CREATE TABLE checking (balance INTEGER)","generation":"SELECT AVG(balance) FROM checking"}
{"answer":"SELECT T1.id, T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id and name of the browser that is compatible with the most web accelerators?","context":"CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR)","generation":"SELECT T1.id, T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T2.browser_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) LIMIT 1","question":"What is the least common media type in all tracks?","context":"CREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)","generation":"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T1.Name ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3","question":"Find the names of reviewers who had given higher than 3 star ratings.","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars INTEGER)","generation":"SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars > 3"}
{"answer":"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000","question":"Show the names of editors that are on the committee of journals with sales bigger than 3000.","context":"CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)","generation":"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000"}
{"answer":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT MAX(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")","question":"Find the names of the campus which has more faculties in 2002 than every campus in Orange county.","context":"CREATE TABLE campuses (campus VARCHAR, id VARCHAR, county VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)","generation":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 GROUP BY T1.campus HAVING COUNT(*) > (SELECT COUNT(*) FROM campuses AS T3 JOIN faculty AS T4 ON T3.id = T4.campus WHERE T4.year = 2002 AND T3.county = 'Orange')"}
{"answer":"SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'","question":"What is the code of the course which the student whose last name is Smithson took?","context":"CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR, class_code VARCHAR)","generation":"SELECT T3.crs_code FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T1.stu_lname = \"Smithson\""}
{"answer":"SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common nationality of pilots.","context":"CREATE TABLE pilot (Nationality VARCHAR)","generation":"SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT city FROM Addresses ORDER BY city","question":"List all cities of addresses in alphabetical order.","context":"CREATE TABLE Addresses (city VARCHAR)","generation":"SELECT city FROM Addresses ORDER BY city"}
{"answer":"SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id","question":"Show the name and date for each race and its track name.","context":"CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)","generation":"SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id"}
{"answer":"SELECT name FROM enzyme WHERE product <> 'Heme'","question":"What are the names of enzymes who does not produce 'Heme'?","context":"CREATE TABLE enzyme (name VARCHAR, product VARCHAR)","generation":"SELECT name FROM enzyme WHERE product <> 'Heme'"}
{"answer":"SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1","question":"What is the id of the student who most recently registered course 301?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)","generation":"SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1"}
{"answer":"SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011","question":"What are the names of races held between 2009 and 2011?","context":"CREATE TABLE races (name VARCHAR, YEAR INTEGER)","generation":"SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011"}
{"answer":"SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500","question":"Show the status shared by cities with population bigger than 1500 and smaller than 500.","context":"CREATE TABLE city (Status VARCHAR, Population INTEGER)","generation":"SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500"}
{"answer":"SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'","question":"How many students enrolled in class ACCT-211?","context":"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)","generation":"SELECT COUNT(*) FROM enroll AS T1 JOIN CLASS AS T2 ON T1.class_code = T2.class_code WHERE T2.crs_code = 'ACCT-211'"}
{"answer":"SELECT name, street_address, floors FROM building ORDER BY floors","question":"Show the name, street address, and number of floors for all buildings ordered by the number of floors.","context":"CREATE TABLE building (name VARCHAR, street_address VARCHAR, floors VARCHAR)","generation":"SELECT name, street_address, floors FROM building ORDER BY floors"}
{"answer":"SELECT T2.protein_name, T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id","question":"Show the protein name and the institution name.","context":"CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (protein_name VARCHAR, institution_id VARCHAR)","generation":"SELECT T1.protein_name, T2.institution FROM protein AS T1 JOIN institution AS T2 ON T1.institution_id = T2.institution_id"}
{"answer":"SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"","question":"What are the names of countries that have both players with position forward and players with position defender?","context":"CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)","generation":"SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""}
{"answer":"SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")","question":"Find the first name and gender of the student who has allergy to milk but not cat.","context":"CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT T1.fname, T1.sex FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = \"Milk\" EXCEPT SELECT T1.fname, T1.sex FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = \"Cat\""}
{"answer":"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'","question":"Find the names of all directors whose movies are rated by Sarah Martinez.","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (director VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T2.rID = T3.rID WHERE T3.name = \"Sarah Martinez\""}
{"answer":"SELECT T2.dept_name, T2.dept_address, COUNT(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 3","question":"Find the name, address, number of students in the departments that have the top 3 highest number of students.","context":"CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)","generation":"SELECT T1.dept_name, T1.dept_address, COUNT(*) FROM department AS T1 JOIN student AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 3"}
{"answer":"SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation","question":"Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.","context":"CREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)","generation":"SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation"}
{"answer":"SELECT name, salary FROM Employee ORDER BY salary","question":"Show name and salary for all employees sorted by salary.","context":"CREATE TABLE Employee (name VARCHAR, salary VARCHAR)","generation":"SELECT name, salary FROM Employee ORDER BY salary"}
{"answer":"SELECT COUNT(*) FROM actor","question":"How many actors are there?","context":"CREATE TABLE actor (Id VARCHAR)","generation":"SELECT COUNT(*) FROM actor"}
{"answer":"SELECT Name FROM phone ORDER BY Price","question":"List the names of phones in ascending order of price.","context":"CREATE TABLE phone (Name VARCHAR, Price VARCHAR)","generation":"SELECT Name FROM phone ORDER BY Price"}
{"answer":"SELECT Name FROM People ORDER BY Name","question":"What are the names of people in ascending alphabetical order?","context":"CREATE TABLE People (Name VARCHAR)","generation":"SELECT Name FROM People ORDER BY Name"}
{"answer":"SELECT COUNT(*) FROM customers","question":"Find the number of customers in total.","context":"CREATE TABLE customers (Id VARCHAR)","generation":"SELECT COUNT(*) FROM customers"}
{"answer":"SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing","question":"How many distinct claim outcome codes are there?","context":"CREATE TABLE claims_processing (claim_outcome_code VARCHAR)","generation":"SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing"}
{"answer":"SELECT COUNT(*), crs_code FROM CLASS GROUP BY crs_code","question":"How many sections does each course has?","context":"CREATE TABLE CLASS (crs_code VARCHAR)","generation":"SELECT COUNT(*), crs_code FROM CLASS GROUP BY crs_code"}
{"answer":"SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested","question":"List the names of entrepreneurs and their companies in descending order of money requested?","context":"CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name, T2.Company FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Money_Requested DESC"}
{"answer":"SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = 'modern'","question":"What is the total number of people who could stay in the modern rooms in this inn?","context":"CREATE TABLE Rooms (maxOccupancy INTEGER, decor VARCHAR)","generation":"SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = \"modern\""}
{"answer":"SELECT Attendance FROM performance WHERE LOCATION = \"TD Garden\" OR LOCATION = \"Bell Centre\"","question":"Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"","context":"CREATE TABLE performance (Attendance VARCHAR, LOCATION VARCHAR)","generation":"SELECT Attendance FROM performance WHERE LOCATION = \"TD Garden\" OR LOCATION = \"Bell Centre\""}
{"answer":"SELECT title FROM course ORDER BY title, credits","question":"List the names of all courses ordered by their titles and credits.","context":"CREATE TABLE course (title VARCHAR, credits VARCHAR)","generation":"SELECT title FROM course ORDER BY title, credits"}
{"answer":"SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\"","question":"Which institution does \"Katsuhiro Ueno\" belong to?","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)","generation":"SELECT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = \"Katsuhiro\" AND T1.lname = \"Ueno\""}
{"answer":"SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200","question":"List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.","context":"CREATE TABLE people (weight VARCHAR, people_id VARCHAR, height VARCHAR); CREATE TABLE body_builder (people_id VARCHAR, snatch VARCHAR)","generation":"SELECT T1.weight FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id WHERE T2.snatch > 140 OR T1.height > 200"}
{"answer":"SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC","question":"List all the cities in a decreasing order of each city's stations' highest latitude.","context":"CREATE TABLE station (city VARCHAR, lat INTEGER)","generation":"SELECT city FROM station ORDER BY lat DESC"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1","question":"What is the name of the perpetrator with the biggest weight.","context":"CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM user_profiles","question":"How many users are there?","context":"CREATE TABLE user_profiles (Id VARCHAR)","generation":"SELECT COUNT(*) FROM user_profiles"}
{"answer":"SELECT role_code FROM ROLES","question":"What are all role codes?","context":"CREATE TABLE ROLES (role_code VARCHAR)","generation":"SELECT role_code FROM ROLES"}
{"answer":"SELECT COUNT(*) FROM bank","question":"How many bank branches are there?","context":"CREATE TABLE bank (Id VARCHAR)","generation":"SELECT COUNT(*) FROM bank"}
{"answer":"SELECT T3.name, T2.title, T1.date, T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id","question":"Show cinema name, film title, date, and price for each record in schedule.","context":"CREATE TABLE schedule (date VARCHAR, price VARCHAR, film_id VARCHAR, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)","generation":"SELECT T1.name, T2.title, T3.date, T3.price FROM cinema AS T1 JOIN film AS T2 ON T1.cinema_id = T2.cinema_id JOIN schedule AS T3 ON T2.film_id = T3.film_id"}
{"answer":"SELECT COUNT(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\"","question":"List the number of invoices from Chicago, IL.","context":"CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)","generation":"SELECT COUNT(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\""}
{"answer":"SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee","question":"Show different nominees and the number of musicals they have been nominated.","context":"CREATE TABLE musical (Nominee VARCHAR)","generation":"SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee"}
{"answer":"SELECT first_name FROM people ORDER BY first_name","question":"List the first names of people in alphabetical order?","context":"CREATE TABLE people (first_name VARCHAR)","generation":"SELECT first_name FROM people ORDER BY first_name"}
{"answer":"SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1","question":"Show the member names which are in both the party with id 3 and the party with id 1.","context":"CREATE TABLE member (member_name VARCHAR, party_id VARCHAR)","generation":"SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1"}
{"answer":"SELECT Name FROM GENRE","question":"List the names of all music genres.","context":"CREATE TABLE GENRE (Name VARCHAR)","generation":"SELECT Name FROM GENRE"}
{"answer":"SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental LIMIT 1","question":"What is the cell phone number of the student whose address has the lowest monthly rental?","context":"CREATE TABLE Students (cell_mobile_number VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR, monthly_rental VARCHAR)","generation":"SELECT T1.cell_mobile_number FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id = T2.student_id ORDER BY T2.monthly_rental LIMIT 1"}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount)","question":"List the name of all different customers who have some loan sorted by their total loan amount.","context":"CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)","generation":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount)"}
{"answer":"SELECT DISTINCT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15","question":"List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, used_kb INTEGER)","generation":"SELECT T1.Hardware_Model_name, T1.Company_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.used_kb BETWEEN 10 AND 15"}
{"answer":"SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM Financial_transactions","question":"What is the average, minimum, maximum, and total transaction amount?","context":"CREATE TABLE Financial_transactions (transaction_amount INTEGER)","generation":"SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM Financial_transactions"}
{"answer":"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)","question":"What are all the policy types of the customer that has the most policies listed?","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)","generation":"SELECT T3.policy_type_code FROM customers_policies AS T1 JOIN available_policies AS T2 ON T1.policy_id = T2.policy_id JOIN available_policies AS T3 ON T2.policy_type_code = T3.policy_type_code GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Apartment_Bookings","question":"How many apartment bookings are there in total?","context":"CREATE TABLE Apartment_Bookings (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Apartment_Bookings"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID","question":"What are the names of perpetrators?","context":"CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID"}
{"answer":"SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"","question":"What is the id of the reviewer whose name has substring \u201cMike\u201d?","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)","generation":"SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\""}
{"answer":"SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1","question":"What is the starting year of the oldest technicians?","context":"CREATE TABLE technician (Starting_Year VARCHAR, Age VARCHAR)","generation":"SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1"}
{"answer":"SELECT AVG(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200","question":"What is the average total score of body builders with height bigger than 200?","context":"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE body_builder (Total INTEGER, People_ID VARCHAR)","generation":"SELECT AVG(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200"}
{"answer":"SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions","question":"What is the average and total transaction amount?","context":"CREATE TABLE Financial_transactions (transaction_amount INTEGER)","generation":"SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions"}
{"answer":"SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking","question":"Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.","context":"CREATE TABLE market (District VARCHAR, Market_ID VARCHAR, Ranking VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)","generation":"SELECT T3.Name, T1.District FROM market AS T1 JOIN phone_market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T2.Phone_ID = T3.Phone_ID ORDER BY T1.Ranking"}
{"answer":"SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"","question":"What are the names of races held after 12:00:00 or before 09:00:00?","context":"CREATE TABLE races (name VARCHAR, TIME VARCHAR)","generation":"SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\""}
{"answer":"SELECT COUNT(*), class_room FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2","question":"Find the number of classes offered for all class rooms that held at least 2 classes.","context":"CREATE TABLE CLASS (class_room VARCHAR)","generation":"SELECT COUNT(*) FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2"}
{"answer":"SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)","question":"Find the names of users who did not leave any review.","context":"CREATE TABLE review (name VARCHAR, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)"}
{"answer":"SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which engineer has visited the most times? Show the engineer id, first name and last name.","context":"CREATE TABLE Maintenance_Engineers (engineer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Engineer_Visits (Id VARCHAR)","generation":"SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.Id GROUP BY T1.engineer_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'","question":"Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"","context":"CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)","generation":"SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Glenn\" INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Triton\""}
{"answer":"SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT AVG(balance) FROM savings)","question":"Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.","context":"CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, T1.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT AVG(balance) FROM savings)"}
{"answer":"SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3","question":"What is the id and trade name of the medicines can interact with at least 3 enzymes?","context":"CREATE TABLE medicine (id VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)","generation":"SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id GROUP BY T2.medicine_id HAVING COUNT(*) >= 3"}
{"answer":"SELECT T1.part_name, T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING COUNT(*) > 2","question":"Which parts have more than 2 faults? Show the part name and id.","context":"CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)","generation":"SELECT T1.part_name, T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING COUNT(*) > 2"}
{"answer":"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76","question":"What is the product description of the product booked with an amount of 102.76?","context":"CREATE TABLE products_for_hire (product_description VARCHAR, product_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booked_amount VARCHAR)","generation":"SELECT T1.product_description FROM products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id WHERE T2.booked_amount = 102.76"}
{"answer":"SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2","question":"Show the name of the party that has at least two records.","context":"CREATE TABLE party (Party VARCHAR)","generation":"SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2"}
{"answer":"SELECT name FROM Employee ORDER BY salary LIMIT 3","question":"Show the name of employees with three lowest salaries.","context":"CREATE TABLE Employee (name VARCHAR, salary VARCHAR)","generation":"SELECT name FROM Employee ORDER BY salary LIMIT 3"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT AVG(rating) FROM review)","question":"Find the titles of items whose rating is higher than the average review rating of all items.","context":"CREATE TABLE review (rating INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT AVG(rating) FROM review)"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5","question":"Find the names of the products with length smaller than 3 or height greater than 5.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)","generation":"SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5"}
{"answer":"SELECT name, salary FROM Employee WHERE eid = 242518965","question":"What is the name and salary for employee with id 242518965?","context":"CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)","generation":"SELECT name, salary FROM Employee WHERE eid = 242518965"}
{"answer":"SELECT t1.product_name, t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name and price of the product that has been ordered the greatest number of times.","context":"CREATE TABLE products (product_name VARCHAR, product_price VARCHAR, product_id VARCHAR); CREATE TABLE regular_order_products (product_id VARCHAR)","generation":"SELECT T1.product_name, T1.product_price FROM products AS T1 JOIN regular_order_products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title","question":"For directors who had more than one movie, return the titles and produced years of all movies directed by them.","context":"CREATE TABLE Movie (director VARCHAR, title VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, director VARCHAR)","generation":"SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title"}
{"answer":"SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'","question":"Find names of all students who took some course and got A or C.","context":"CREATE TABLE enroll (stu_num VARCHAR, enroll_grade VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)","generation":"SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' OR T2.enroll_grade = 'C'"}
{"answer":"SELECT SUM(faculty) FROM faculty WHERE YEAR = 2002","question":"How many faculty is there in total in the year of 2002?","context":"CREATE TABLE faculty (faculty INTEGER, YEAR VARCHAR)","generation":"SELECT SUM(faculty) FROM faculty WHERE YEAR = 2002"}
{"answer":"SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7","question":"What is the mail date of the document with id 7?","context":"CREATE TABLE Documents_Mailed (mailing_date VARCHAR, document_id VARCHAR)","generation":"SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7"}
{"answer":"SELECT COUNT(DISTINCT language_id) FROM film","question":"How many languages are in these films?","context":"CREATE TABLE film (language_id VARCHAR)","generation":"SELECT COUNT(DISTINCT language_id) FROM film"}
{"answer":"SELECT MIN(age), AVG(age), MAX(age) FROM Student","question":"Show the minimum, average, and maximum age of all students.","context":"CREATE TABLE Student (age INTEGER)","generation":"SELECT MIN(age), AVG(age), MAX(age) FROM Student"}
{"answer":"SELECT COUNT(DISTINCT city) FROM EMPLOYEE","question":"How many distinct cities does the employees live in?","context":"CREATE TABLE EMPLOYEE (city VARCHAR)","generation":"SELECT COUNT(DISTINCT city) FROM EMPLOYEE"}
{"answer":"SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING COUNT(DISTINCT dept_name) < 5","question":"Find the number of different departments in each school whose number of different departments is less than 5.","context":"CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)","generation":"SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING COUNT(DISTINCT dept_name) < 5"}
{"answer":"SELECT COUNT(*), building FROM classroom WHERE capacity > 50 GROUP BY building","question":"Find the number of rooms with more than 50 capacity for each building.","context":"CREATE TABLE classroom (building VARCHAR, capacity INTEGER)","generation":"SELECT COUNT(*), building FROM classroom WHERE capacity > 50 GROUP BY building"}
{"answer":"SELECT Injured FROM perpetrator ORDER BY Injured","question":"List the number of people injured by perpetrators in ascending order.","context":"CREATE TABLE perpetrator (Injured VARCHAR)","generation":"SELECT Injured FROM perpetrator ORDER BY Injured"}
{"answer":"SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'","question":"What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","context":"CREATE TABLE enzyme (name VARCHAR, location VARCHAR, product VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR)","generation":"SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'inhibitor'"}
{"answer":"SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3","question":"Show the top 3 apartment type codes sorted by the average number of rooms in descending order.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)","generation":"SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3"}
{"answer":"SELECT Player_name FROM player ORDER BY Votes","question":"List the names of players in ascending order of votes.","context":"CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)","generation":"SELECT Player_name FROM player ORDER BY Votes"}
{"answer":"SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3","question":"List the publication dates of publications with 3 lowest prices.","context":"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)","generation":"SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3"}
{"answer":"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998","question":"What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?","context":"CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998"}
{"answer":"SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'","question":"Where does the customer with the first name Linda live? And what is her email?","context":"CREATE TABLE customer (email VARCHAR, address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)","generation":"SELECT T1.email, T2.address FROM customer AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = \"Linda\""}
{"answer":"SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12","question":"What are the id and name of the stations that have ever had more than 12 bikes available?","context":"CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)","generation":"SELECT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12"}
{"answer":"SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5","question":"What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?","context":"CREATE TABLE drivers (surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)","generation":"SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5"}
{"answer":"SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy","question":"What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.","context":"CREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)","generation":"SELECT T3.Allergy, T3.AllergyType FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_type AS T3 ON T2.Allergy = T3.Allergy WHERE T1.Fname = \"Lisa\" ORDER BY T3.Allergy"}
{"answer":"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name <> \"Progress Party\"","question":"Show member names that are not in the Progress Party.","context":"CREATE TABLE party (party_id VARCHAR, Party_name VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)","generation":"SELECT member_name FROM Member WHERE NOT party_id = (SELECT party_id FROM party WHERE Party_name = \"Progress Party\")"}
{"answer":"SELECT shipping_agent_name FROM Ref_Shipping_Agents","question":"What are the shipping agent names?","context":"CREATE TABLE Ref_Shipping_Agents (shipping_agent_name VARCHAR)","generation":"SELECT shipping_agent_name FROM Ref_Shipping_Agents"}
{"answer":"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance","question":"List the id of students who attended  statistics courses in the order of attendance date.","context":"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)","generation":"SELECT T1.student_id FROM student_course_attendance AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = \"statistics\" ORDER BY T1.date_of_attendance"}
{"answer":"SELECT MIN(Crime_rate), MAX(Crime_rate) FROM county_public_safety","question":"What are the minimum and maximum crime rate of counties?","context":"CREATE TABLE county_public_safety (Crime_rate INTEGER)","generation":"SELECT MIN(Crime_rate), MAX(Crime_rate) FROM county_public_safety"}
{"answer":"SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'","question":"Show all storm names affecting region \"Denmark\".","context":"CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = \"Denmark\""}
{"answer":"SELECT T1.date, T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC","question":"For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.","context":"CREATE TABLE game (date VARCHAR, id VARCHAR, season VARCHAR); CREATE TABLE injury_accident (player VARCHAR, game_id VARCHAR)","generation":"SELECT T1.date, T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC"}
{"answer":"SELECT COUNT(DISTINCT church_id) FROM wedding WHERE YEAR = 2016","question":"How many churches have a wedding in year 2016?","context":"CREATE TABLE wedding (church_id VARCHAR, YEAR VARCHAR)","generation":"SELECT COUNT(DISTINCT church_id) FROM wedding WHERE YEAR = 2016"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\"","question":"Which papers have \"Stephanie Weirich\" as an author?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN authors AS T3 ON T2.authid = T3.authid WHERE T3.fname = \"Stephanie\" AND T3.lname = \"Weirich\""}
{"answer":"SELECT COUNT(DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010","question":"Find the total number of instructors who teach a course in the Spring 2010 semester.","context":"CREATE TABLE teaches (ID VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT COUNT(DISTINCT ID) FROM teaches WHERE semester = \"Spring\" AND YEAR = 2010"}
{"answer":"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY AVG(t2.unsure_rate) DESC LIMIT 1","question":"which gender got the highest average uncertain ratio.","context":"CREATE TABLE candidate (people_id VARCHAR, unsure_rate INTEGER); CREATE TABLE people (sex VARCHAR, people_id VARCHAR)","generation":"SELECT T1.sex FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id GROUP BY T1.sex ORDER BY AVG(T2.unsure_rate) DESC LIMIT 1"}
{"answer":"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'","question":"Find the name of students who took some course offered by Statistics department.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (course_id VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)","generation":"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.dept_name = \"Statistics\""}
{"answer":"SELECT origin FROM Flight WHERE destination = \"Honolulu\"","question":"Show origins of all flights with destination Honolulu.","context":"CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)","generation":"SELECT origin FROM Flight WHERE destination = \"Honolulu\""}
{"answer":"SELECT T2.title, MAX(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id","question":"What are the title and maximum price of each film?","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE schedule (price INTEGER, film_id VARCHAR)","generation":"SELECT T1.title, MAX(T2.price) FROM film AS T1 JOIN schedule AS T2 ON T1.film_id = T2.film_id GROUP BY T1.title"}
{"answer":"SELECT COUNT(*) FROM body_builder","question":"How many body builders are there?","context":"CREATE TABLE body_builder (Id VARCHAR)","generation":"SELECT COUNT(*) FROM body_builder"}
{"answer":"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000","question":"What are the unique names of races that held after 2000 and the circuits were in Spain?","context":"CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)","generation":"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = \"left\" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90","question":"List the names of all left-footed players who have overall rating between 85 and 90.","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating VARCHAR, preferred_foot VARCHAR)","generation":"SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = \"left\" AND T2.overall_rating BETWEEN 85 AND 90"}
{"answer":"SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'","question":"Find the name of department that offers the class whose description has the word \"Statistics\".","context":"CREATE TABLE course (dept_code VARCHAR, crs_description VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT T1.dept_name FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE T2.crs_description LIKE \"%Statistics%\""}
{"answer":"SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"","question":"Find the names of all artists that have \"a\" in their names.","context":"CREATE TABLE ARTIST (Name VARCHAR)","generation":"SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\""}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'","question":"Find the name of customers who have loans of both Mortgages and Auto.","context":"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = \"Mortgage\" INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = \"Auto\""}
{"answer":"SELECT T3.Name, T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID","question":"Show the names of journalists and the dates of the events they reported.","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Date VARCHAR, Event_ID VARCHAR)","generation":"SELECT T1.Name, T3.Date FROM journalist AS T1 JOIN news_report AS T2 ON T1.journalist_ID = T2.journalist_ID JOIN event AS T3 ON T2.Event_ID = T3.Event_ID"}
{"answer":"SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID","question":"List the distinct hometowns that are not associated with any gymnast.","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR)","generation":"SELECT DISTINCT T1.Hometown FROM people AS T1 JOIN gymnast AS T2 ON T1.Hometown = T2.Hometown"}
{"answer":"SELECT MAX(YEAR) FROM perpetrator","question":"In which year did the most recent crime happen?","context":"CREATE TABLE perpetrator (YEAR INTEGER)","generation":"SELECT YEAR FROM perpetrator ORDER BY YEAR DESC LIMIT 1"}
{"answer":"SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'","question":"Find the first name and office of the professor who is in the history department and has a Ph.D. degree.","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = \"History\" AND T2.prof_high_degree = \"Ph.D.\""}
{"answer":"SELECT Date FROM debate WHERE Num_of_Audience > 150","question":"List the dates of debates with number of audience bigger than 150","context":"CREATE TABLE debate (Date VARCHAR, Num_of_Audience INTEGER)","generation":"SELECT Date FROM debate WHERE Num_of_Audience > 150"}
{"answer":"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"","question":"How many tracks belong to rock genre?","context":"CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)","generation":"SELECT COUNT(*) FROM TRACK AS T1 JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = \"Rock\""}
{"answer":"SELECT Name FROM city ORDER BY White DESC LIMIT 5","question":"List the names of the city with the top 5 white percentages.","context":"CREATE TABLE city (Name VARCHAR, White VARCHAR)","generation":"SELECT Name FROM city ORDER BY White DESC LIMIT 5"}
{"answer":"SELECT name FROM student WHERE NOT id IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')","question":"Find the name of students who didn't take any course from Biology department.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)","generation":"SELECT name FROM student WHERE NOT id IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')"}
{"answer":"SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)","question":"Find the average number of followers for the users who do not have any tweet.","context":"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)","generation":"SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)"}
{"answer":"SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000","question":"Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.","context":"CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)","generation":"SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000"}
{"answer":"SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\"","question":"What is the first name and last name employee helps the customer with first name Leonie?","context":"CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)","generation":"SELECT T1.FirstName, T1.LastName FROM EMPLOYEE AS T1 JOIN CUSTOMER AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.FirstName = \"Leonie\""}
{"answer":"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"","question":"Find the names of all the products whose stock number starts with \"2\".","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)","generation":"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\""}
{"answer":"SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'","question":"What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?","context":"CREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)","generation":"SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'"}
{"answer":"SELECT cell_mobile_number, email_address FROM STUDENTS","question":"Return the cell phone number and email address for all students.","context":"CREATE TABLE STUDENTS (cell_mobile_number VARCHAR, email_address VARCHAR)","generation":"SELECT cell_mobile_number, email_address FROM STUDENTS"}
{"answer":"SELECT SUM(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code","question":"Find the total credits of all classes offered by each department.","context":"CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER, crs_code VARCHAR)","generation":"SELECT SUM(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code"}
{"answer":"SELECT student_id FROM student_course_attendance","question":"List the id of students who attended some courses?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR)","generation":"SELECT student_id FROM student_course_attendance"}
{"answer":"SELECT COUNT(*) FROM company","question":"How many gas companies are there?","context":"CREATE TABLE company (Id VARCHAR)","generation":"SELECT COUNT(*) FROM company"}
{"answer":"SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Functional%\"","question":"Find the first names of all the authors who have written a paper with title containing the word \"Functional\".","context":"CREATE TABLE authors (fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR)","generation":"SELECT T1.fname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title LIKE \"%Functional%\""}
{"answer":"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1","question":"List the name of the phone model launched in year 2002 and with the highest RAM size.","context":"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR)","generation":"SELECT T1.Hardware_Model_name FROM phone AS T1 JOIN chip_model AS T2 ON T1.chip_model = T2.Model_name WHERE T2.Launch_year = 2002 ORDER BY T2.RAM_MiB DESC LIMIT 1"}
{"answer":"SELECT fname FROM authors ORDER BY fname","question":"Find the first names of all the authors ordered in alphabetical order.","context":"CREATE TABLE authors (fname VARCHAR)","generation":"SELECT fname FROM authors ORDER BY fname"}
{"answer":"SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year","question":"Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.","context":"CREATE TABLE Movie (mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)","generation":"SELECT T1.year FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 4 OR T2.stars = 5 ORDER BY T1.year"}
{"answer":"SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'","question":"What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?","context":"CREATE TABLE Electoral_Register (electoral_register_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)","generation":"SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'"}
{"answer":"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3","question":"Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.","context":"CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3"}
{"answer":"SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1","question":"Retrieve the country that has published the most papers.","context":"CREATE TABLE inst (country VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT T1.country FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.country ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids","question":"List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.","context":"CREATE TABLE Rooms (RoomId VARCHAR, maxOccupancy VARCHAR); CREATE TABLE Reservations (Room VARCHAR, Adults VARCHAR, Kids VARCHAR)","generation":"SELECT COUNT(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Adults + T1.Kids = T2.maxOccupancy"}
{"answer":"SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\"","question":"Show the addresses and phones of all the buildings managed by \"Brenden\".","context":"CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_phone VARCHAR, building_manager VARCHAR)","generation":"SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\""}
{"answer":"SELECT Memory_in_G, Carrier FROM phone","question":"What are the memories and carriers of phones?","context":"CREATE TABLE phone (Memory_in_G VARCHAR, Carrier VARCHAR)","generation":"SELECT Memory_in_G, Carrier FROM phone"}
{"answer":"SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005","question":"Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.","context":"CREATE TABLE pilot (POSITION VARCHAR, Join_Year INTEGER)","generation":"SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005"}
{"answer":"SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY SUM(t2.settlement_amount) DESC LIMIT 1","question":"What is the effective date of the claim that has the largest amount of total settlement?","context":"CREATE TABLE settlements (claim_id VARCHAR, settlement_amount INTEGER); CREATE TABLE claims (Effective_Date VARCHAR, claim_id VARCHAR)","generation":"SELECT T1.Effective_Date FROM claims AS T1 JOIN settlements AS T2 ON T1.claim_id = T2.claim_id ORDER BY T2.settlement_amount DESC LIMIT 1"}
{"answer":"SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID","question":"Please show the names and the players of clubs.","context":"CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Player_id VARCHAR, Club_ID VARCHAR)","generation":"SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID"}
{"answer":"SELECT COUNT(*) FROM race","question":"How many races are there?","context":"CREATE TABLE race (Id VARCHAR)","generation":"SELECT COUNT(*) FROM race"}
{"answer":"SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)","question":"On which day and in which zip code was the min dew point lower than any day in zip code 94107?","context":"CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)","generation":"SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)"}
{"answer":"SELECT t1.customer_name, t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'","question":"Find the names and phone numbers of customers living in California state.","context":"CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)","generation":"SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id WHERE T3.state_province_county = \"California\""}
{"answer":"SELECT title FROM albums","question":"List every album's title.","context":"CREATE TABLE albums (title VARCHAR)","generation":"SELECT title FROM albums"}
{"answer":"SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\"","question":"What are the ids of the movies that are not reviewed by Brittany Harris.","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT mID FROM Rating WHERE NOT rID = (SELECT rID FROM Reviewer WHERE name = \"Brittany Harris\")"}
{"answer":"SELECT COUNT(DISTINCT Publication_Date) FROM publication","question":"What is the number of distinct publication dates?","context":"CREATE TABLE publication (Publication_Date VARCHAR)","generation":"SELECT COUNT(DISTINCT Publication_Date) FROM publication"}
{"answer":"SELECT t1.name, t1.sex, MIN(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex","question":"Find the name of the candidates whose oppose percentage is the lowest for each sex.","context":"CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)","generation":"SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id ORDER BY T1.sex, T2.oppose_percentage"}
{"answer":"SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"","question":"What country does Roberto Almeida live?","context":"CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\""}
{"answer":"SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC","question":"List the total points of gymnasts in descending order of floor exercise points.","context":"CREATE TABLE gymnast (Total_Points VARCHAR, Floor_Exercise_Points VARCHAR)","generation":"SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"}
{"answer":"SELECT Name FROM wrestler ORDER BY Days_held LIMIT 1","question":"What is the name of the wrestler with the fewest days held?","context":"CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)","generation":"SELECT Name FROM wrestler ORDER BY Days_held LIMIT 1"}
{"answer":"SELECT MAX(Silver), MIN(Silver) FROM club_rank","question":"What are the maximum and minimum number of silver medals for clubs.","context":"CREATE TABLE club_rank (Silver INTEGER)","generation":"SELECT MAX(Silver), MIN(Silver) FROM club_rank"}
{"answer":"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id","question":"Find distinct cities of address of students?","context":"CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)","generation":"SELECT DISTINCT T3.city FROM people_addresses AS T1 JOIN addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T1.person_id = T3.student_id"}
{"answer":"SELECT T1.student_id, T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and last name of the student that has the most behavior incidents?","context":"CREATE TABLE Students (last_name VARCHAR, student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)","generation":"SELECT T1.student_id, T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT MAX(Points) FROM climber WHERE Country = \"United Kingdom\"","question":"What is the maximum point for climbers whose country is United Kingdom?","context":"CREATE TABLE climber (Points INTEGER, Country VARCHAR)","generation":"SELECT MAX(Points) FROM climber WHERE Country = \"United Kingdom\""}
{"answer":"SELECT COUNT(*) FROM pilot","question":"How many pilots are there?","context":"CREATE TABLE pilot (Id VARCHAR)","generation":"SELECT COUNT(*) FROM pilot"}
{"answer":"SELECT school, nickname FROM university ORDER BY founded","question":"List all schools and their nicknames in the order of founded year.","context":"CREATE TABLE university (school VARCHAR, nickname VARCHAR, founded VARCHAR)","generation":"SELECT school, nickname FROM university ORDER BY founded"}
{"answer":"SELECT COUNT(*) FROM head WHERE age > 56","question":"How many heads of the departments are older than 56 ?","context":"CREATE TABLE head (age INTEGER)","generation":"SELECT COUNT(*) FROM head WHERE age > 56"}
{"answer":"SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","question":"What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?","context":"CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)","generation":"SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"}
{"answer":"SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING SUM(T1.Num_of_stock) >= 2000 ORDER BY SUM(T1.Num_of_stock) DESC","question":"Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.","context":"CREATE TABLE phone_market (Phone_ID VARCHAR, Num_of_stock INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)","generation":"SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > 2000 ORDER BY T2.Num_of_stock DESC"}
{"answer":"SELECT Player_name FROM player WHERE NOT Player_ID IN (SELECT Player_ID FROM player_coach)","question":"List the names of players that do not have coaches.","context":"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Player_name VARCHAR, Player_ID VARCHAR)","generation":"SELECT Player_name FROM player WHERE NOT Player_ID IN (SELECT Player_ID FROM player_coach)"}
{"answer":"SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'","question":"Find the last name and hire date of the professor who is in office DRE 102.","context":"CREATE TABLE professor (emp_num VARCHAR, prof_office VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_hiredate VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = \"DRE 102\""}
{"answer":"SELECT SUM(stu_hrs), dept_code FROM student GROUP BY dept_code","question":"Find the total number of hours have done for all students in each department.","context":"CREATE TABLE student (dept_code VARCHAR, stu_hrs INTEGER)","generation":"SELECT SUM(stu_hrs), dept_code FROM student GROUP BY dept_code"}
{"answer":"SELECT COUNT(*) FROM Financial_transactions","question":"How many transactions do we have?","context":"CREATE TABLE Financial_transactions (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Financial_transactions"}
{"answer":"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name","question":"list all female (sex is F) candidate names in the alphabetical order.","context":"CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR, sex VARCHAR)","generation":"SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T1.sex = \"F\" ORDER BY T1.name"}
{"answer":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"","question":"List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.","context":"CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)","generation":"SELECT T1.document_id FROM Documents AS T1 JOIN Ref_Shipping_Agents AS T2 ON T1.document_id = T2.document_id WHERE T1.document_status_code = 'Done' AND T1.document_type_code = 'Paper' AND T2.document_shipping_agent_name = 'USPS'"}
{"answer":"SELECT FirstName, LastName FROM EMPLOYEE WHERE City = \"Calgary\"","question":"What are the first names and last names of the employees who live in Calgary city.","context":"CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)","generation":"SELECT FirstName, LastName FROM EMPLOYEE WHERE City = \"Calgary\""}
{"answer":"SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10","question":"What are the region names affected by the storm with a number of deaths of least 10?","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, number_deaths VARCHAR)","generation":"SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T2.storm_id = T3.storm_id WHERE T3.number_deaths >= 10"}
{"answer":"SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\"","question":"Find the number of papers published by the institution \"University of Pennsylvania\".","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT COUNT(*) FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T3.name = \"University of Pennsylvania\""}
{"answer":"SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5","question":"What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.","context":"CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)","generation":"SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5"}
{"answer":"SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the year which offers the largest number of courses.","context":"CREATE TABLE SECTION (YEAR VARCHAR)","generation":"SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'","question":"How many sections does course ACCT-211 has?","context":"CREATE TABLE CLASS (class_section VARCHAR, crs_code VARCHAR)","generation":"SELECT COUNT(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'"}
{"answer":"SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5","question":"Find the name of the first 5 customers.","context":"CREATE TABLE Customers (customer_name VARCHAR, date_became_customer VARCHAR)","generation":"SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5"}
{"answer":"SELECT name, followers FROM user_profiles ORDER BY followers DESC","question":"List the name and number of followers for each user, and sort the results by the number of followers in descending order.","context":"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)","generation":"SELECT name, followers FROM user_profiles ORDER BY followers DESC"}
{"answer":"SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1","question":"What is the document status description of the document with id 1?","context":"CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Document_Status (Id VARCHAR)","generation":"SELECT T2.Description FROM Documents AS T1 JOIN Ref_Document_Status AS T2 ON T1.Document_Status = T2.Id WHERE T1.Id = 1"}
{"answer":"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')","question":"Find the name of students who have taken the prerequisite course of the course with title International Finance.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)","generation":"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id JOIN prereq AS T4 ON T3.course_id = T4.course_id JOIN course AS T5 ON T4.prereq_id = T5.course_id WHERE T5.title = \"International Finance\""}
{"answer":"SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"","question":"What are the building full names that contain the word \"court\"?","context":"CREATE TABLE Apartment_Buildings (building_full_name VARCHAR)","generation":"SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\""}
{"answer":"SELECT MAX(support_rate), MIN(consider_rate), MIN(oppose_rate) FROM candidate","question":"find the highest support percentage, lowest consider rate and oppose rate of all candidates.","context":"CREATE TABLE candidate (support_rate INTEGER, consider_rate INTEGER, oppose_rate INTEGER)","generation":"SELECT MAX(support_rate), MIN(consider_rate), MIN(oppose_rate) FROM candidate"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = \"right\"","question":"List the names of all players who have a crossing score higher than 90 and prefer their right foot.","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, crossing VARCHAR, preferred_foot VARCHAR)","generation":"SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = \"Right\""}
{"answer":"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10","question":"List the customers first and last name of 10 least expensive invoices.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY total_amount LIMIT 10"}
{"answer":"SELECT creation, name, budget_in_billions FROM department","question":"List the creation year, name and budget of each department.","context":"CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)","generation":"SELECT creation, name, budget_in_billions FROM department"}
{"answer":"SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'","question":"What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?","context":"CREATE TABLE customer (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE rental (staff_id VARCHAR, customer_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)","generation":"SELECT T3.first_name, T3.last_name FROM rental AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id JOIN staff AS T3 ON T1.staff_id = T3.staff_id WHERE T2.first_name = \"April\" AND T2.last_name = \"Burns\""}
{"answer":"SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1","question":"Find the number and averaged salary of all instructors who are in the department with the highest budget.","context":"CREATE TABLE department (dept_name VARCHAR, budget VARCHAR); CREATE TABLE instructor (salary INTEGER, dept_name VARCHAR)","generation":"SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1"}
{"answer":"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\"","question":"What city does the employee who helps the customer with postal code 70174 live in?","context":"CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)","generation":"SELECT T1.City FROM EMPLOYEE AS T1 JOIN CUSTOMER AS T2 ON T1.EmployeeId = T2.SupportRepId WHERE T2.PostalCode = \"70174\""}
{"answer":"SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15","question":"List the name and the number of stations for all the cities that have at least 15 stations.","context":"CREATE TABLE station (city VARCHAR)","generation":"SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15"}
{"answer":"SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100","question":"What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?","context":"CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)","generation":"SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT T1.name FROM station AS T1 JOIN trip AS T2 ON T1.name = T2.end_station_name WHERE T2.city = \"Palo Alto\" GROUP BY T2.end_station_name HAVING COUNT(*) > 100"}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'","question":"Find the name of tracks which are in Movies playlist but not in music playlist.","context":"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = \"Movies\" EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = \"Music\""}
{"answer":"SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless ,  Painless\"","question":"Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR)","generation":"SELECT T1.fname, T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title = \"Nameless, Painless\""}
{"answer":"SELECT DISTINCT CLASS FROM race","question":"What are the distinct classes that races can have?","context":"CREATE TABLE race (CLASS VARCHAR)","generation":"SELECT DISTINCT CLASS FROM race"}
{"answer":"SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"","question":"Which college have both players with position midfielder and players with position defender?","context":"CREATE TABLE match_season (College VARCHAR, POSITION VARCHAR)","generation":"SELECT College FROM match_season WHERE POSITION = \"midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"defender\""}
{"answer":"SELECT COUNT(DISTINCT product_type_code) FROM products_for_hire","question":"How many different product types are there?","context":"CREATE TABLE products_for_hire (product_type_code VARCHAR)","generation":"SELECT COUNT(DISTINCT product_type_code) FROM products_for_hire"}
{"answer":"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2","question":"Show the addresses of the buildings that have apartments with more than 2 bathrooms.","context":"CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_id VARCHAR); CREATE TABLE Apartments (building_id VARCHAR, bathroom_count INTEGER)","generation":"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2"}
{"answer":"SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1","question":"List the name of the company that produced more than one phone model.","context":"CREATE TABLE phone (Company_name VARCHAR)","generation":"SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1"}
{"answer":"SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) LIMIT 1","question":"What are the movie titles and average rating of the movies with the lowest average rating?","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT T1.title, AVG(T2.stars) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.title ORDER BY AVG(T2.stars) LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM club","question":"How many clubs are there?","context":"CREATE TABLE club (Id VARCHAR)","generation":"SELECT COUNT(*) FROM club"}
{"answer":"SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT(*) >= 2","question":"Show the names of people who have been on the negative side of debates at least twice.","context":"CREATE TABLE debate_people (Negative VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Negative GROUP BY T2.Negative HAVING COUNT(*) >= 2"}
{"answer":"SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20","question":"Please show the employee last names that serves no more than 20 customers.","context":"CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)","generation":"SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.LastName HAVING COUNT(*) <= 20"}
{"answer":"SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT MAX(balance) FROM checking)","question":"Find the name and id of accounts whose checking balance is below the maximum checking balance.","context":"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)","generation":"SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT MAX(balance) FROM checking)"}
{"answer":"SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*)","question":"Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR)","generation":"SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"}
{"answer":"SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name and country for the artist with most number of exhibitions?","context":"CREATE TABLE exhibition (artist_id VARCHAR); CREATE TABLE artist (name VARCHAR, country VARCHAR, artist_id VARCHAR)","generation":"SELECT T1.name, T1.country FROM artist AS T1 JOIN exhibition AS T2 ON T1.artist_id = T2.artist_id GROUP BY T2.artist_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT customer_id, SUM(amount_paid) FROM Payments GROUP BY customer_id ORDER BY SUM(amount_paid) DESC LIMIT 1","question":"What is the maximum total amount paid by a customer? List the customer id and amount.","context":"CREATE TABLE Payments (customer_id VARCHAR, amount_paid INTEGER)","generation":"SELECT customer_id, SUM(amount_paid) FROM Payments GROUP BY customer_id ORDER BY SUM(amount_paid) DESC LIMIT 1"}
{"answer":"SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the race class with most number of races.","context":"CREATE TABLE race (CLASS VARCHAR)","generation":"SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT LOCATION) FROM perpetrator","question":"How many distinct locations of perpetrators are there?","context":"CREATE TABLE perpetrator (LOCATION VARCHAR)","generation":"SELECT COUNT(DISTINCT LOCATION) FROM perpetrator"}
{"answer":"SELECT DISTINCT forename FROM drivers ORDER BY forename","question":"List the forenames of all distinct drivers in alphabetical order?","context":"CREATE TABLE drivers (forename VARCHAR)","generation":"SELECT DISTINCT forename FROM drivers ORDER BY forename"}
{"answer":"SELECT COUNT(*) FROM candidate","question":"How many candidates are there?","context":"CREATE TABLE candidate (Id VARCHAR)","generation":"SELECT COUNT(*) FROM candidate"}
{"answer":"SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003","question":"Show the names of buildings except for those having an institution founded in 2003.","context":"CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE building (name VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded VARCHAR)","generation":"SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC","question":"List the names of perpetrators in descending order of the year.","context":"CREATE TABLE perpetrator (People_ID VARCHAR, Year VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC"}
{"answer":"SELECT MAX(weight), MIN(weight) FROM Player","question":"What is the maximum and minimum height of all players?","context":"CREATE TABLE Player (weight INTEGER)","generation":"SELECT MAX(weight), MIN(weight) FROM Player"}
{"answer":"SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)","question":"List the names of mountains that do not have any climber.","context":"CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)"}
{"answer":"SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)","question":"How many departments are led by heads who are not mentioned?","context":"CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)","generation":"SELECT COUNT(*) FROM management AS T1 JOIN department AS T2 ON T1.department_id = T2.department_id WHERE NOT T2.head_id IN (SELECT head_id FROM management)"}
{"answer":"SELECT lname FROM authors ORDER BY lname","question":"Retrieve all the last names of authors in alphabetical order.","context":"CREATE TABLE authors (lname VARCHAR)","generation":"SELECT lname FROM authors ORDER BY lname"}
{"answer":"SELECT region_name FROM region WHERE NOT region_id IN (SELECT region_id FROM affected_region)","question":"Show the name for regions not affected.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_name VARCHAR, region_id VARCHAR)","generation":"SELECT region_name FROM region WHERE NOT region_id IN (SELECT region_id FROM affected_region)"}
{"answer":"SELECT Party_Theme FROM party ORDER BY Number_of_hosts","question":"List the themes of parties in ascending order of number of hosts.","context":"CREATE TABLE party (Party_Theme VARCHAR, Number_of_hosts VARCHAR)","generation":"SELECT Party_Theme FROM party ORDER BY Number_of_hosts"}
{"answer":"SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common position of players in match seasons.","context":"CREATE TABLE match_season (POSITION VARCHAR)","generation":"SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'","question":"Find the name of the storm that affected both Afghanistan and Albania regions.","context":"CREATE TABLE storm (Name VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE region (region_id VARCHAR, Region_name VARCHAR)","generation":"SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id JOIN region AS T3 ON T2.region_id = T3.region_id WHERE T3.Region_name = \"Afghanistan\" INTERSECT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id JOIN region AS T3 ON T2.region_id = T3.region_id WHERE T3.Region_name = \"Albania\""}
{"answer":"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"","question":"What is the phone and email for customer with first name Aniyah and last name Feest?","context":"CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\""}
{"answer":"SELECT COUNT(*) FROM perpetrator","question":"How many perpetrators are there?","context":"CREATE TABLE perpetrator (Id VARCHAR)","generation":"SELECT COUNT(*) FROM perpetrator"}
{"answer":"SELECT receipt_date FROM Documents WHERE document_id = 3","question":"What is the receipt date of the document with id 3?","context":"CREATE TABLE Documents (receipt_date VARCHAR, document_id VARCHAR)","generation":"SELECT receipt_date FROM Documents WHERE document_id = 3"}
{"answer":"SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2","question":"What states have at least two representatives?","context":"CREATE TABLE representative (State VARCHAR)","generation":"SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2"}
{"answer":"SELECT apt_number, room_count FROM Apartments","question":"Return the apartment number and the number of rooms for each apartment.","context":"CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)","generation":"SELECT apt_number, room_count FROM Apartments"}
{"answer":"SELECT id FROM trip ORDER BY duration LIMIT 1","question":"What is the id of the trip that has the shortest duration?","context":"CREATE TABLE trip (id VARCHAR, duration VARCHAR)","generation":"SELECT id FROM trip ORDER BY duration LIMIT 1"}
{"answer":"SELECT T2.Name, COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name","question":"Show the names of people and the number of times they have been on the affirmative side of debates.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate_people (Affirmative VARCHAR)","generation":"SELECT T1.Name, COUNT(*) FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Affirmative GROUP BY T1.Name"}
{"answer":"SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1","question":"Which destination has least number of flights?","context":"CREATE TABLE Flight (destination VARCHAR)","generation":"SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT Name, LOCATION FROM wrestler","question":"What are the names and location of the wrestlers?","context":"CREATE TABLE wrestler (Name VARCHAR, LOCATION VARCHAR)","generation":"SELECT Name, LOCATION FROM wrestler"}
{"answer":"SELECT COUNT(*) FROM claims_processing_stages","question":"How many claim processing stages are there in total?","context":"CREATE TABLE claims_processing_stages (Id VARCHAR)","generation":"SELECT COUNT(*) FROM claims_processing_stages"}
{"answer":"SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY COUNT(*) LIMIT 1","question":"Which kind of part has the least number of faults? List the part name.","context":"CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)","generation":"SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards","question":"Show ids, customer ids, card type codes, card numbers for all cards.","context":"CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)","generation":"SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards"}
{"answer":"SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC","question":"Show each gender code and the corresponding count of guests sorted by the count in descending order.","context":"CREATE TABLE Guests (gender_code VARCHAR)","generation":"SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"}
{"answer":"SELECT gender, COUNT(*) FROM Customers GROUP BY gender","question":"Show the number of customers for each gender.","context":"CREATE TABLE Customers (gender VARCHAR)","generation":"SELECT gender, COUNT(*) FROM Customers GROUP BY gender"}
{"answer":"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date","question":"List the id of students who registered course statistics in the order of registration date.","context":"CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)","generation":"SELECT T1.student_id FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T2.course_name = \"Statistics\" ORDER BY T1.registration_date"}
{"answer":"SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'","question":"Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)","generation":"SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'"}
{"answer":"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the investor that has invested in the most number of entrepreneurs?","context":"CREATE TABLE entrepreneur (Investor VARCHAR)","generation":"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM entrepreneur","question":"How many entrepreneurs are there?","context":"CREATE TABLE entrepreneur (Id VARCHAR)","generation":"SELECT COUNT(*) FROM entrepreneur"}
{"answer":"SELECT T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")","question":"What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?","context":"CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)","generation":"SELECT T1.title, T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars > (SELECT AVG(T3.stars) FROM Movie AS T3 JOIN Rating AS T4 ON T3.mID = T4.mID WHERE T3.director = \"James Cameron\")"}
{"answer":"SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1","question":"What is the first and last name of the oldest employee?","context":"CREATE TABLE employee (emp_fname VARCHAR, emp_lname VARCHAR, emp_dob VARCHAR)","generation":"SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1"}
{"answer":"SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher","question":"Show different publishers together with the number of publications they have.","context":"CREATE TABLE publication (Publisher VARCHAR)","generation":"SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher"}
{"answer":"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Monadic%\"","question":"Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)","generation":"SELECT T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title LIKE \"%Monadic%\""}
{"answer":"SELECT apt_type_code, MAX(room_count), MIN(room_count) FROM Apartments GROUP BY apt_type_code","question":"Show each apartment type code, and the maximum and minimum number of rooms for each type.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)","generation":"SELECT apt_type_code, MAX(room_count), MIN(room_count) FROM Apartments GROUP BY apt_type_code"}
{"answer":"SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID","question":"Show the delegates and the names of the party they belong to.","context":"CREATE TABLE election (Delegate VARCHAR, Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID"}
{"answer":"SELECT Status, AVG(Population) FROM city GROUP BY Status","question":"Please show the different statuses of cities and the average population of cities with each status.","context":"CREATE TABLE city (Status VARCHAR, Population INTEGER)","generation":"SELECT Status, AVG(Population) FROM city GROUP BY Status"}
{"answer":"SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(amount) LIMIT 1","question":"Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.","context":"CREATE TABLE payment (customer_id VARCHAR); CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(amount) LIMIT 1"}
{"answer":"SELECT COUNT(*), dept_code FROM student GROUP BY dept_code","question":"Find the number of students for each department.","context":"CREATE TABLE student (dept_code VARCHAR)","generation":"SELECT dept_code, COUNT(*) FROM student GROUP BY dept_code"}
{"answer":"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1","question":"Show the names of players coached by the rank 1 coach.","context":"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (Coach_ID VARCHAR, Rank VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)","generation":"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1"}
{"answer":"SELECT region_name FROM region ORDER BY region_name","question":"List all region names in alphabetical order.","context":"CREATE TABLE region (region_name VARCHAR)","generation":"SELECT region_name FROM region ORDER BY region_name"}
{"answer":"SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"","question":"Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (date_opened VARCHAR, date_closed VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.date_opened, T1.date_closed FROM customers_policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name LIKE \"%Diana%\""}
{"answer":"SELECT COUNT(*) FROM budget WHERE budgeted < invested","question":"How many budget record has a budget amount smaller than the invested amount?","context":"CREATE TABLE budget (budgeted INTEGER, invested VARCHAR)","generation":"SELECT COUNT(*) FROM budget WHERE budgeted < invested"}
{"answer":"SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)","question":"How many enzymes do not have any interactions?","context":"CREATE TABLE medicine_enzyme_interaction (id VARCHAR, enzyme_id VARCHAR); CREATE TABLE enzyme (id VARCHAR, enzyme_id VARCHAR)","generation":"SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)"}
{"answer":"SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')","question":"Find the title of course whose prerequisite is course Differential Geometry.","context":"CREATE TABLE prereq (course_id VARCHAR, prereq_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)","generation":"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id JOIN course AS T3 ON T2.prereq_id = T3.course_id WHERE T3.title = \"Differential Geometry\""}
{"answer":"SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID","question":"Show names of technicians and series of machines they are assigned to repair.","context":"CREATE TABLE machine (Machine_series VARCHAR, machine_id VARCHAR); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)","generation":"SELECT T1.Name, T2.Machine_series FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_ID = T2.technician_ID JOIN machine AS T3 ON T2.machine_id = T3.machine_id"}
{"answer":"SELECT director FROM Movie GROUP BY director HAVING COUNT(*) = 1","question":"What are the names of the directors who made exactly one movie?","context":"CREATE TABLE Movie (director VARCHAR)","generation":"SELECT director FROM Movie GROUP BY director HAVING COUNT(*) = 1"}
{"answer":"SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'","question":"What is the partition id of the user named \"Iron Man\".","context":"CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)","generation":"SELECT partitionid FROM user_profiles WHERE name = \"Iron Man\""}
{"answer":"SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000","question":"Find the campus fee of \"San Jose State University\" in year 2000.","context":"CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)","generation":"SELECT T1.campusfee FROM csu_fees AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T2.campus = \"San Jose State University\" AND T1.year = 2000"}
{"answer":"SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'","question":"What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?","context":"CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)","generation":"SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'"}
{"answer":"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common hometown of gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Hometown FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID GROUP BY T1.Hometown ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Student WHERE age = 18","question":"How many students are age 18?","context":"CREATE TABLE Student (age VARCHAR)","generation":"SELECT COUNT(*) FROM Student WHERE age = 18"}
{"answer":"SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1","question":"Show the name and the nationality of the oldest host.","context":"CREATE TABLE HOST (Name VARCHAR, Nationality VARCHAR, Age VARCHAR)","generation":"SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1"}
{"answer":"SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob","question":"List the first name of all employees with job code PROF ordered by their date of birth.","context":"CREATE TABLE employee (emp_fname VARCHAR, emp_jobcode VARCHAR, emp_dob VARCHAR)","generation":"SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob"}
{"answer":"SELECT COUNT(*), T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1","question":"How many engineer visits are required at most for a single fault log? List the number and the log entry id.","context":"CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR); CREATE TABLE Engineer_Visits (fault_log_entry_id VARCHAR)","generation":"SELECT COUNT(*), T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015","question":"Show all church names except for those that had a wedding in year 2015.","context":"CREATE TABLE church (name VARCHAR); CREATE TABLE wedding (church_id VARCHAR, year VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)","generation":"SELECT name FROM church WHERE NOT church_id IN (SELECT church_id FROM wedding WHERE year = 2015)"}
{"answer":"SELECT COUNT(*), t1.network_name, t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id","question":"Find the number of trains for each station, as well as the station network name and services.","context":"CREATE TABLE route (station_id VARCHAR); CREATE TABLE station (network_name VARCHAR, services VARCHAR, id VARCHAR)","generation":"SELECT COUNT(*), T1.network_name, T1.services FROM station AS T1 JOIN route AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id"}
{"answer":"SELECT COUNT(DISTINCT bike_id) FROM trip","question":"From the trip record, find the number of unique bikes.","context":"CREATE TABLE trip (bike_id VARCHAR)","generation":"SELECT COUNT(DISTINCT bike_id) FROM trip"}
{"answer":"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1","question":"List the time of elimination of the wrestlers with largest days held.","context":"CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held VARCHAR); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)","generation":"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"","question":"How many distinct official languages are there among countries of players whose positions are defenders.","context":"CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)","generation":"SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\""}
{"answer":"SELECT COUNT(*) FROM inventory WHERE store_id = 1","question":"How many items in inventory does store 1 have?","context":"CREATE TABLE inventory (store_id VARCHAR)","generation":"SELECT COUNT(*) FROM inventory WHERE store_id = 1"}
{"answer":"SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"","question":"What are the names of parties that have both delegates on \"Appropriations\" committee and","context":"CREATE TABLE election (Party VARCHAR, Committee VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = \"Appropriations\" INTERSECT SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = \"Appropriations\""}
{"answer":"SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC","question":"Show the titles of books in descending order of publication price.","context":"CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)","generation":"SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC"}
{"answer":"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid","question":"Find the name of each user and number of tweets tweeted by each of them.","context":"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.name"}
{"answer":"SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20","question":"Find all the customer last names that do not have invoice totals larger than 20.","context":"CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)","generation":"SELECT LastName FROM CUSTOMER WHERE NOT CustomerId IN (SELECT CustomerId FROM Invoice WHERE total > 20)"}
{"answer":"SELECT origin, destination FROM Flight WHERE price > 300","question":"Show origin and destination for flights with price higher than 300.","context":"CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)","generation":"SELECT origin, destination FROM Flight WHERE price > 300"}
{"answer":"SELECT Name FROM people WHERE NOT People_id IN (SELECT Affirmative FROM debate_people)","question":"List the names of people that have not been on the affirmative side of debates.","context":"CREATE TABLE debate_people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR); CREATE TABLE people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR)","generation":"SELECT Name FROM people WHERE NOT People_id IN (SELECT People_id FROM debate_people WHERE Affirmative = 'Affirmative')"}
{"answer":"SELECT DISTINCT TYPE FROM institution","question":"Show all the distinct institution types.","context":"CREATE TABLE institution (TYPE VARCHAR)","generation":"SELECT DISTINCT TYPE FROM institution"}
{"answer":"SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id","question":"Find the names of users who do not have a first notification of loss record.","context":"CREATE TABLE first_notification_of_loss (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR)","generation":"SELECT customer_name FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM first_notification_of_loss)"}
{"answer":"SELECT DISTINCT Venue FROM debate","question":"Show the distinct venues of debates","context":"CREATE TABLE debate (Venue VARCHAR)","generation":"SELECT DISTINCT Venue FROM debate"}
{"answer":"SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')","question":"Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.","context":"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)","generation":"SELECT name FROM instructor WHERE salary > (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Biology')"}
{"answer":"SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code","question":"Find the number of records of each policy type and its type code.","context":"CREATE TABLE policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code"}
{"answer":"SELECT T2.Name, SUM(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name","question":"For each phone, show its names and total number of stocks.","context":"CREATE TABLE phone_market (Num_of_stock INTEGER, Phone_ID VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)","generation":"SELECT T1.Name, SUM(T2.Num_of_stock) FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T1.Phone_ID"}
{"answer":"SELECT * FROM customer_master_index ORDER BY cmi_details DESC","question":"List all information about customer master index, and sort them by details in descending order.","context":"CREATE TABLE customer_master_index (cmi_details VARCHAR)","generation":"SELECT * FROM customer_master_index ORDER BY cmi_details DESC"}
{"answer":"SELECT DISTINCT donator_name FROM endowment","question":"Show all donor names.","context":"CREATE TABLE endowment (donator_name VARCHAR)","generation":"SELECT donator_name FROM endowment"}
{"answer":"SELECT COUNT(*) FROM STUDENTS WHERE NOT student_id IN (SELECT student_id FROM Behavior_Incident)","question":"How many students are not involved in any behavior incident?","context":"CREATE TABLE STUDENTS (student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)","generation":"SELECT COUNT(*) FROM STUDENTS WHERE NOT student_id IN (SELECT student_id FROM Behavior_Incident)"}
{"answer":"SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"","question":"What is the email of the student with first name \"Emma\" and last name \"Rohan\"?","context":"CREATE TABLE Students (email_address VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\""}
{"answer":"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1","question":"Which artist has the most albums?","context":"CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)","generation":"SELECT T1.Name FROM ARTIST AS T1 JOIN ALBUM AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and surname of the driver who participated the most number of races?","context":"CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)","generation":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T2.driverid ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1","question":"Who is the youngest employee in the company? List employee's first and last name.","context":"CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)","generation":"SELECT first_name, last_name FROM employees ORDER BY birth_date LIMIT 1"}
{"answer":"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) DESC LIMIT 1","question":"Find the name and id of the item with the highest average rating.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) DESC LIMIT 1"}
{"answer":"SELECT T2.title, T1.stars, T2.director, MAX(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director <> \"null\" GROUP BY director","question":"For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)","generation":"SELECT T1.director, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director IS NOT NULL GROUP BY T2.director ORDER BY MAX(T1.stars) DESC"}
{"answer":"SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code","question":"For each zip code, return how many times max wind speed reached 25?","context":"CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)","generation":"SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code"}
{"answer":"SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'","question":"Find the checking balance and saving balance in the Brown\u2019s account.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)","generation":"SELECT T1.balance, T3.balance FROM checking AS T1 JOIN accounts AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T2.custid = T3.custid WHERE T2.name = \"Brown\""}
{"answer":"SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)","question":"Show the name of cities in the county that has the largest number of police officers.","context":"CREATE TABLE city (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR); CREATE TABLE county_public_safety (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR)","generation":"SELECT T1.name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.county_ID = T2.county_ID ORDER BY T2.Police_officers DESC LIMIT 1"}
{"answer":"SELECT company, rank FROM company ORDER BY Sales_billion DESC","question":"List the company name and rank for all companies in the decreasing order of their sales.","context":"CREATE TABLE company (company VARCHAR, rank VARCHAR, Sales_billion VARCHAR)","generation":"SELECT company, rank FROM company ORDER BY Sales_billion DESC"}
{"answer":"SELECT DISTINCT payment_type_code FROM payments","question":"What are all the distinct payment types?","context":"CREATE TABLE payments (payment_type_code VARCHAR)","generation":"SELECT DISTINCT payment_type_code FROM payments"}
{"answer":"SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM school","question":"Show the average, maximum, minimum enrollment of all schools.","context":"CREATE TABLE school (enrollment INTEGER)","generation":"SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM school"}
{"answer":"SELECT advisor, COUNT(*) FROM Student GROUP BY advisor","question":"Show all advisors and corresponding number of students.","context":"CREATE TABLE Student (advisor VARCHAR)","generation":"SELECT advisor, COUNT(*) FROM Student GROUP BY advisor"}
{"answer":"SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3","question":"Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.","context":"CREATE TABLE journalist (Nationality VARCHAR, Years_working INTEGER)","generation":"SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3"}
{"answer":"SELECT AVG(acc_bal), acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type","question":"For each account type, find the average account balance of customers with credit score lower than 50.","context":"CREATE TABLE customer (acc_type VARCHAR, acc_bal INTEGER, credit_score INTEGER)","generation":"SELECT acc_type, AVG(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"}
{"answer":"SELECT COUNT(DISTINCT participant_id) FROM participants_in_Events","question":"What are all the distinct participant ids who attended any events?","context":"CREATE TABLE participants_in_Events (participant_id VARCHAR)","generation":"SELECT DISTINCT participant_id FROM participants_in_Events"}
{"answer":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"","question":"List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.","context":"CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)","generation":"SELECT document_id FROM Documents WHERE document_status_code = 'done' AND document_type_code = 'Paper' EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.document_id = Ref_Shipping_Agents.document_id WHERE Ref_Shipping_Agents.document_status_code = 'done' AND Ref_Shipping_Agents.document_type_code = 'Paper' AND Ref_Shipping_Agents.shipping_agent_name = 'USPS'"}
{"answer":"SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the customer id with most number of cards, and how many does he have?","context":"CREATE TABLE Customers_cards (customer_id VARCHAR)","generation":"SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT MAX(home_games), MIN(home_games), AVG(home_games) FROM stadium","question":"What are the maximum, minimum and average home games each stadium held?","context":"CREATE TABLE stadium (home_games INTEGER)","generation":"SELECT MAX(home_games), MIN(home_games), AVG(home_games) FROM stadium"}
{"answer":"SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000","question":"Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.","context":"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)","generation":"SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000"}
{"answer":"SELECT COUNT(*) FROM Customers_cards","question":"Show the number of customer cards.","context":"CREATE TABLE Customers_cards (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Customers_cards"}
{"answer":"SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500","question":"Are the customers holding coupons with amount 500 bad or good?","context":"CREATE TABLE discount_coupons (coupon_id VARCHAR, coupon_amount VARCHAR); CREATE TABLE customers (good_or_bad_customer VARCHAR, coupon_id VARCHAR)","generation":"SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500"}
{"answer":"SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id","question":"Show the id, name of each editor and the number of journal committees they are on.","context":"CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)","generation":"SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id"}
{"answer":"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'","question":"When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?","context":"CREATE TABLE accelerator_compatible_browser (compatible_since_year VARCHAR, browser_id VARCHAR, accelerator_id VARCHAR); CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR)","generation":"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T2.name = 'Internet Explorer' AND T3.name = 'CACHEbox'"}
{"answer":"SELECT TYPE, COUNT(*), SUM(enrollment) FROM institution GROUP BY TYPE","question":"Show institution types, along with the number of institutions and total enrollment for each type.","context":"CREATE TABLE institution (TYPE VARCHAR, enrollment INTEGER)","generation":"SELECT TYPE, COUNT(*), SUM(enrollment) FROM institution GROUP BY TYPE"}
{"answer":"SELECT dept_address FROM department WHERE dept_name = 'History'","question":"what is the address of history department?","context":"CREATE TABLE department (dept_address VARCHAR, dept_name VARCHAR)","generation":"SELECT dept_address FROM department WHERE dept_name = \"History\""}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING COUNT(*) > 1","question":"Find the name of customers who have more than one loan.","context":"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T2.cust_id HAVING COUNT(*) > 1"}
{"answer":"SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\"","question":"Find the address of all customers that live in Germany and have invoice.","context":"CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)","generation":"SELECT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\""}
{"answer":"SELECT model_name FROM chip_model ORDER BY launch_year","question":"List all the model names sorted by their launch year.","context":"CREATE TABLE chip_model (model_name VARCHAR, launch_year VARCHAR)","generation":"SELECT model_name FROM chip_model ORDER BY launch_year"}
{"answer":"SELECT AVG(Population) FROM county","question":"Show the average population of all counties.","context":"CREATE TABLE county (Population INTEGER)","generation":"SELECT AVG(Population) FROM county"}
{"answer":"SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'","question":"What are the daily hire costs for the products with substring 'Book' in its name?","context":"CREATE TABLE Products_for_hire (daily_hire_cost VARCHAR, product_name VARCHAR)","generation":"SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'"}
{"answer":"SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"","question":"Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?","context":"CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)","generation":"SELECT T1.driverid, T1.forename FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid JOIN results AS T4 ON T1.driverid = T4.driverid JOIN races AS T5 ON T4.raceid = T5.raceid WHERE T3.name = \"Australian Grand Prix\" AND T5.name = \"Chinese Grand Prix\""}
{"answer":"SELECT DISTINCT allergytype FROM Allergy_type","question":"Show all allergy types.","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT DISTINCT allergytype FROM Allergy_type"}
{"answer":"SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\"","question":"In which distinct years was the governor \"Eliot Spitzer\"?","context":"CREATE TABLE party (YEAR VARCHAR, Governor VARCHAR)","generation":"SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\""}
{"answer":"SELECT asset_make, asset_model, asset_details FROM Assets ORDER BY asset_disposed_date","question":"List the all the assets make, model, details by the disposed date ascendingly.","context":"CREATE TABLE Assets (asset_make VARCHAR, asset_model VARCHAR, asset_details VARCHAR, asset_disposed_date VARCHAR)","generation":"SELECT asset_make, asset_model, asset_details FROM Assets ORDER BY asset_disposed_date"}
{"answer":"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2","question":"List the nominees that have been nominated more than two musicals.","context":"CREATE TABLE musical (Nominee VARCHAR)","generation":"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2"}
{"answer":"SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1","question":"What are the names of products whose availability equals to 1?","context":"CREATE TABLE view_product_availability (product_id VARCHAR, available_yn VARCHAR); CREATE TABLE products_for_hire (product_name VARCHAR, product_id VARCHAR)","generation":"SELECT T1.product_name FROM products_for_hire AS T1 JOIN view_product_availability AS T2 ON T1.product_id = T2.product_id WHERE T2.available_yn = 1"}
{"answer":"SELECT COUNT(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code","question":"Find the number of professors with a Ph.D. degree in each department.","context":"CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR)","generation":"SELECT dept_code, COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code"}
{"answer":"SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1","question":"what is the name of the instructor who is in Statistics department and earns the lowest salary?","context":"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)","generation":"SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1"}
{"answer":"SELECT name FROM club ORDER BY Start_year","question":"List all club names in ascending order of start year.","context":"CREATE TABLE club (name VARCHAR, Start_year VARCHAR)","generation":"SELECT name FROM club ORDER BY Start_year"}
{"answer":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'","question":"Find the first name of student who is taking classes from accounting and Computer Info. Systems departments","context":"CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)","generation":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN course AS T3 ON T2.class_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN course AS T3 ON T2.class_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Computer Info. Systems'"}
{"answer":"SELECT Delegate FROM election WHERE District = 1","question":"Show the delegate from district 1 in election.","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR)","generation":"SELECT Delegate FROM election WHERE District = 1"}
{"answer":"SELECT DISTINCT building_description FROM Apartment_Buildings","question":"Show all distinct building descriptions.","context":"CREATE TABLE Apartment_Buildings (building_description VARCHAR)","generation":"SELECT DISTINCT building_description FROM Apartment_Buildings"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC","question":"What are the names of body builders in descending order of total scores?","context":"CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Total DESC"}
{"answer":"SELECT Team, Starting_Year FROM technician","question":"What are the team and starting year of technicians?","context":"CREATE TABLE technician (Team VARCHAR, Starting_Year VARCHAR)","generation":"SELECT Team, Starting_Year FROM technician"}
{"answer":"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010","question":"What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?","context":"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE SECTION (course_id VARCHAR)","generation":"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T2.building = \"Chandler\" AND T2.term = \"Fall\" AND T2.year = 2010"}
{"answer":"SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939","question":"Which campus was opened between 1935 and 1939?","context":"CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)","generation":"SELECT campus FROM campuses WHERE YEAR BETWEEN 1935 AND 1939"}
{"answer":"SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\"","question":"What is the description of the claim status \"Open\"?","context":"CREATE TABLE claims_processing_stages (claim_status_description VARCHAR, claim_status_name VARCHAR)","generation":"SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\""}
{"answer":"SELECT title, directed_by FROM film WHERE NOT film_id IN (SELECT film_id FROM schedule)","question":"What are the title and director of the films without any schedule?","context":"CREATE TABLE schedule (title VARCHAR, directed_by VARCHAR, film_id VARCHAR); CREATE TABLE film (title VARCHAR, directed_by VARCHAR, film_id VARCHAR)","generation":"SELECT title, directed_by FROM film WHERE NOT film_id IN (SELECT film_id FROM schedule)"}
{"answer":"SELECT T1.name, AVG(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id","question":"For each user, return the name and the average rating of reviews given by them.","context":"CREATE TABLE review (rating INTEGER, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT T1.name, AVG(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T1.u_id"}
{"answer":"SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people)","question":"find the name of people whose height is lower than the average.","context":"CREATE TABLE people (name VARCHAR, height INTEGER)","generation":"SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people)"}
{"answer":"SELECT customer_id, customer_name FROM customers ORDER BY customer_id","question":"List all the customers in increasing order of IDs.","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)","generation":"SELECT customer_id, customer_name FROM customers ORDER BY customer_id"}
{"answer":"SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id","question":"Show the order ids and the number of items in each order.","context":"CREATE TABLE Order_items (order_id VARCHAR)","generation":"SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id"}
{"answer":"SELECT campus FROM campuses WHERE YEAR = 1958","question":"Find all the campuses opened in 1958.","context":"CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)","generation":"SELECT campus FROM campuses WHERE YEAR = 1958"}
{"answer":"SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name","question":"find the number of medicines offered by each trade.","context":"CREATE TABLE medicine (trade_name VARCHAR)","generation":"SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name"}
{"answer":"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"","question":"What are names of stations that have average bike availability above 10 and are not located in San Jose city?","context":"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)","generation":"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id JOIN station AS T3 ON T2.station_id = T3.id WHERE T3.city <> \"San Jose\" GROUP BY T2.station_id HAVING AVG(T3.bikes_available) > 10"}
{"answer":"SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE YEAR < 2009","question":"Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.","context":"CREATE TABLE exhibition (ticket_price INTEGER, YEAR INTEGER)","generation":"SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE YEAR < 2009"}
{"answer":"SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1","question":"When was the school with the largest enrollment founded?","context":"CREATE TABLE university (founded VARCHAR, enrollment VARCHAR)","generation":"SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1"}
{"answer":"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\"","question":"Show names for all aircrafts of which John Williams has certificates.","context":"CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)","generation":"SELECT T3.name FROM Certificate AS T1 JOIN Employee AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T1.aid = T3.aid WHERE T2.name = \"John Williams\""}
{"answer":"SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY SUM(T1.show_times_per_day) DESC LIMIT 1","question":"Show director with the largest number of show times in total.","context":"CREATE TABLE schedule (film_id VARCHAR, show_times_per_day INTEGER); CREATE TABLE film (directed_by VARCHAR, film_id VARCHAR)","generation":"SELECT T1.directed_by FROM film AS T1 JOIN schedule AS T2 ON T1.film_id = T2.film_id GROUP BY T1.directed_by ORDER BY SUM(T2.show_times_per_day) DESC LIMIT 1"}
{"answer":"SELECT T1.source_system_code, T1.master_customer_id, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id","question":"Wat is the tax source system code and master customer id of the taxes related to each parking fine id?","context":"CREATE TABLE CMI_Cross_References (source_system_code VARCHAR, master_customer_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Parking_Fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)","generation":"SELECT T1.source_system_code, T1.master_customer_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id"}
{"answer":"SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force","question":"Please show the police forces and the number of counties with each police force.","context":"CREATE TABLE county_public_safety (Police_force VARCHAR)","generation":"SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force"}
{"answer":"SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"","question":"Find the IDs of customers whose name contains \"Diana\".","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)","generation":"SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\""}
{"answer":"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'","question":"Show the manager name for gas stations belonging to the ExxonMobil company.","context":"CREATE TABLE gas_station (manager_name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, company VARCHAR)","generation":"SELECT T1.manager_name FROM gas_station AS T1 JOIN station_company AS T2 ON T1.station_id = T2.station_id JOIN company AS T3 ON T2.company_id = T3.company_id WHERE T3.company = \"ExxonMobil\""}
{"answer":"SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1","question":"Show the id and name of the employee with maximum salary.","context":"CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)","generation":"SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM browser WHERE market_share >= 5","question":"How many main stream browsers whose market share is at least 5 exist?","context":"CREATE TABLE browser (market_share VARCHAR)","generation":"SELECT COUNT(*) FROM browser WHERE market_share >= 5"}
{"answer":"SELECT SUM(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state","question":"For each state, find the total account balance of customers whose credit score is above 100.","context":"CREATE TABLE customer (state VARCHAR, acc_bal INTEGER, credit_score INTEGER)","generation":"SELECT SUM(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state"}
{"answer":"SELECT COUNT(*) FROM Products_for_hire WHERE NOT product_id IN (SELECT product_id FROM products_booked WHERE booked_amount > 200)","question":"How many products are never booked with amount higher than 200?","context":"CREATE TABLE products_booked (product_id VARCHAR, booked_amount INTEGER); CREATE TABLE Products_for_hire (product_id VARCHAR, booked_amount INTEGER)","generation":"SELECT COUNT(*) FROM Products_for_hire WHERE NOT product_id IN (SELECT product_id FROM products_booked WHERE booked_amount > 200)"}
{"answer":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\"","question":"Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.","context":"CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = \"Airbus A340-300\""}
{"answer":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'","question":"What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?","context":"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR, stu_lname VARCHAR)","generation":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'"}
{"answer":"SELECT mID, AVG(stars) FROM Rating WHERE NOT mID IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY mID","question":"Find the average rating star for each movie that are not reviewed by Brittany Harris.","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT AVG(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name <> \"Brittany Harris\""}
{"answer":"SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","question":"Show names of climbers and the names of mountains they climb.","context":"CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"}
{"answer":"SELECT * FROM item","question":"List all information in the item table.","context":"CREATE TABLE item (Id VARCHAR)","generation":"SELECT * FROM item"}
{"answer":"SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","question":"Show the names of climbers and the heights of mountains they climb.","context":"CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID"}
{"answer":"SELECT DISTINCT main_industry FROM company","question":"Show all main industry for all companies.","context":"CREATE TABLE company (main_industry VARCHAR)","generation":"SELECT DISTINCT main_industry FROM company"}
{"answer":"SELECT mID, AVG(stars) FROM Rating GROUP BY mID HAVING COUNT(*) >= 2","question":"Find the average rating star for each movie that received at least 2 ratings.","context":"CREATE TABLE Rating (mID VARCHAR, stars INTEGER)","generation":"SELECT mID, AVG(stars) FROM Rating GROUP BY mID HAVING COUNT(*) >= 2"}
{"answer":"SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)","question":"How many schools do not participate in the basketball match?","context":"CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (school_id VARCHAR)","generation":"SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)"}
{"answer":"SELECT name, CLASS, date FROM race","question":"Show name, class, and date for all races.","context":"CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)","generation":"SELECT name, CLASS, date FROM race"}
{"answer":"SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) = 2 INTERSECT SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) < 2","question":"Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.","context":"CREATE TABLE Assets (asset_id VARCHAR, asset_details VARCHAR); CREATE TABLE Asset_Parts (asset_id VARCHAR); CREATE TABLE Fault_Log (asset_id VARCHAR)","generation":"SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) = 2 INTERSECT SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) < 2"}
{"answer":"SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1","question":"What is the latitude, longitude, city of the station from which the shortest trip started?","context":"CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)","generation":"SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1"}
{"answer":"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1","question":"Which allergy type has most number of allergies?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT region_id) FROM affected_region","question":"How many regions are affected?","context":"CREATE TABLE affected_region (region_id VARCHAR)","generation":"SELECT COUNT(*) FROM affected_region"}
{"answer":"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3","question":"Show names of musicals which have at least three actors.","context":"CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT T1.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Name HAVING COUNT(*) >= 3"}
{"answer":"SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000","question":"Which delegates are from counties with population smaller than 100000?","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)","generation":"SELECT T1.Delegate FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_id WHERE T2.Population < 100000"}
{"answer":"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2","question":"Show the names of editors that are on at least two journal committees.","context":"CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)","generation":"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2"}
{"answer":"SELECT County_name FROM county ORDER BY County_name DESC","question":"Return the names of all counties sorted by county name in descending alphabetical order.","context":"CREATE TABLE county (County_name VARCHAR)","generation":"SELECT County_name FROM county ORDER BY County_name DESC"}
{"answer":"SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?","context":"CREATE TABLE Detention (teacher_id VARCHAR, detention_type_code VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR)","generation":"SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Party, COUNT(*) FROM representative GROUP BY Party","question":"What are the different parties of representative? Show the party name and the number of representatives in each party.","context":"CREATE TABLE representative (Party VARCHAR)","generation":"SELECT Party, COUNT(*) FROM representative GROUP BY Party"}
{"answer":"SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which store has most the customers?","context":"CREATE TABLE customer (store_id VARCHAR)","generation":"SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\"","question":"What are the customer phone numbers under the policy \"Life Insurance\"?","context":"CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)","generation":"SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\""}
{"answer":"SELECT name FROM instructor ORDER BY salary DESC LIMIT 1","question":"Who is the instructor with the highest salary?","context":"CREATE TABLE instructor (name VARCHAR, salary VARCHAR)","generation":"SELECT name FROM instructor ORDER BY salary DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM exhibition WHERE YEAR >= 2005","question":"How many exhibition are there in year 2005 or after?","context":"CREATE TABLE exhibition (YEAR VARCHAR)","generation":"SELECT COUNT(*) FROM exhibition WHERE YEAR >= 2005"}
{"answer":"SELECT COUNT(DISTINCT dept_name) FROM course","question":"How many departments offer courses?","context":"CREATE TABLE course (dept_name VARCHAR)","generation":"SELECT COUNT(DISTINCT dept_name) FROM course"}
{"answer":"SELECT name FROM browser ORDER BY market_share DESC","question":"List the name of browsers in descending order by market share.","context":"CREATE TABLE browser (name VARCHAR, market_share VARCHAR)","generation":"SELECT name FROM browser ORDER BY market_share DESC"}
{"answer":"SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)","question":"Find the name of customers whose credit score is below the average credit scores of all customers.","context":"CREATE TABLE customer (cust_name VARCHAR, credit_score INTEGER)","generation":"SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)"}
{"answer":"SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2","question":"Show the residences that have at least two players.","context":"CREATE TABLE player (Residence VARCHAR)","generation":"SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2"}
{"answer":"SELECT MIN(rank) FROM review","question":"Find the highest rank of all reviews.","context":"CREATE TABLE review (rank INTEGER)","generation":"SELECT MAX(rank) FROM review"}
{"answer":"SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern'","question":"Find the names of all modern rooms with a base price below $160 and two beds.","context":"CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, basePrice VARCHAR, beds VARCHAR)","generation":"SELECT roomName FROM Rooms WHERE decor = \"modern\" AND basePrice < 160 AND beds = 2"}
{"answer":"SELECT COUNT(DISTINCT i_id) FROM review","question":"How many different items were reviewed by some users?","context":"CREATE TABLE review (i_id VARCHAR)","generation":"SELECT COUNT(DISTINCT i_id) FROM review"}
{"answer":"SELECT * FROM body_builder","question":"Show all information about each body builder.","context":"CREATE TABLE body_builder (Id VARCHAR)","generation":"SELECT * FROM body_builder"}
{"answer":"SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010","question":"Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.","context":"CREATE TABLE teaches (id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT id FROM teaches WHERE semester = \"Fall\" AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = \"Spring\" AND YEAR = 2010"}
{"answer":"SELECT city, state FROM bank WHERE bname = 'morningside'","question":"Find the city and state of the bank branch named morningside.","context":"CREATE TABLE bank (city VARCHAR, state VARCHAR, bname VARCHAR)","generation":"SELECT city, state FROM bank WHERE bname = \"morningside\""}
{"answer":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"","question":"Show names for all employees who have certificate of Boeing 737-800.","context":"CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name = \"Boeing 737-800\""}
{"answer":"SELECT * FROM basketball_match","question":"List all information regarding the basketball match.","context":"CREATE TABLE basketball_match (Id VARCHAR)","generation":"SELECT * FROM basketball_match"}
{"answer":"SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'","question":"Which services type had both successful and failure event details?","context":"CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR); CREATE TABLE services (service_type_code VARCHAR, service_id VARCHAR)","generation":"SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = \"Success\" INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = \"Failure\""}
{"answer":"SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\"","question":"Show the parties that have both representatives in New York state and representatives in Pennsylvania state.","context":"CREATE TABLE representative (Party VARCHAR, State VARCHAR)","generation":"SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\""}
{"answer":"SELECT COUNT(DISTINCT crs_code) FROM CLASS","question":"How many courses are offered?","context":"CREATE TABLE CLASS (crs_code VARCHAR)","generation":"SELECT COUNT(DISTINCT crs_code) FROM CLASS"}
{"answer":"SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"","question":"What is the total amount of money spent by Lucas Mancini?","context":"CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT SUM(T1.total) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.first_name = \"Lucas\" AND T2.last_name = \"Mancini\""}
{"answer":"SELECT Country_name, Capital FROM country","question":"Show the country name and capital of all countries.","context":"CREATE TABLE country (Country_name VARCHAR, Capital VARCHAR)","generation":"SELECT Country_name, Capital FROM country"}
{"answer":"SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1","question":"List the official name and status of the city with the largest population.","context":"CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)","generation":"SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1"}
{"answer":"SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220'","question":"How many credits does course CIS-220 have, and what its description?","context":"CREATE TABLE course (crs_credit VARCHAR, crs_description VARCHAR, crs_code VARCHAR)","generation":"SELECT crs_credit, crs_description FROM course WHERE crs_code = \"CIS-220\""}
{"answer":"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of member in charge of greatest number of events?","context":"CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)","generation":"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts","question":"Show customer ids who don't have an account.","context":"CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT customer_id FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)"}
{"answer":"SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY SUM(degrees) DESC LIMIT 1","question":"Which year has the most degrees conferred?","context":"CREATE TABLE degrees (YEAR VARCHAR, degrees INTEGER)","generation":"SELECT YEAR FROM degrees ORDER BY degrees DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM campuses","question":"How many CSU campuses are there?","context":"CREATE TABLE campuses (Id VARCHAR)","generation":"SELECT COUNT(*) FROM campuses"}
{"answer":"SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3","question":"What are the names of the states where at least 3 heads were born?","context":"CREATE TABLE head (born_state VARCHAR)","generation":"SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3"}
{"answer":"SELECT T2.Name, T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC","question":"Show the names of members and the dates of performances they attended in descending order of attendance of the performances.","context":"CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR, Attendance VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT T3.Name, T1.Date FROM member_attendance AS T1 JOIN performance AS T2 ON T1.Performance_ID = T2.Performance_ID JOIN member AS T3 ON T1.Member_ID = T3.Member_ID ORDER BY T2.Attendance DESC"}
{"answer":"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50","question":"Show times of elimination of wrestlers with days held more than 50.","context":"CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held INTEGER); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)","generation":"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50"}
{"answer":"SELECT COUNT(*) FROM papers","question":"How many papers are published in total?","context":"CREATE TABLE papers (Id VARCHAR)","generation":"SELECT COUNT(*) FROM papers"}
{"answer":"SELECT Census_Ranking FROM city WHERE Status <> \"Village\"","question":"Show the census ranking of cities whose status are not \"Village\".","context":"CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)","generation":"SELECT Census_Ranking FROM city WHERE Status <> \"Village\""}
{"answer":"SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1","question":"Find the name, account type, and account balance of the customer who has the highest credit score.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, acc_bal VARCHAR, credit_score VARCHAR)","generation":"SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1"}
{"answer":"SELECT lname FROM authors WHERE fname = \"Amal\"","question":"Find the last name of the author with first name \"Amal\".","context":"CREATE TABLE authors (lname VARCHAR, fname VARCHAR)","generation":"SELECT lname FROM authors WHERE fname = \"Amal\""}
{"answer":"SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4","question":"What address was the document with id 4 mailed to?","context":"CREATE TABLE Addresses (document_id VARCHAR); CREATE TABLE Documents_Mailed (document_id VARCHAR)","generation":"SELECT T1.address FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = 4"}
{"answer":"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\"","question":"Show the positions of the players from the team with name \"Ryley Goldner\".","context":"CREATE TABLE match_season (Position VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)","generation":"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\""}
{"answer":"SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING COUNT(*) < 3","question":"Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR, rental_rate VARCHAR); CREATE TABLE inventory (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)","generation":"SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate = 0.99 GROUP BY T1.film_id HAVING COUNT(*) < 3"}
{"answer":"SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING SUM(T2.amount) > 5000","question":"Find the name and account balance of the customers who have loans with a total amount of more than 5000.","context":"CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, cust_id VARCHAR)","generation":"SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_id HAVING SUM(T2.amount) > 5000"}
{"answer":"SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5","question":"Find the names of Japanese constructors that have once earned more than 5 points?","context":"CREATE TABLE constructorstandings (constructorid VARCHAR, points VARCHAR); CREATE TABLE constructors (name VARCHAR, constructorid VARCHAR, nationality VARCHAR)","generation":"SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5"}
{"answer":"SELECT origin, COUNT(*) FROM train GROUP BY origin","question":"Find the number of trains starting from each origin.","context":"CREATE TABLE train (origin VARCHAR)","generation":"SELECT origin, COUNT(*) FROM train GROUP BY origin"}
{"answer":"SELECT train_number, name FROM train ORDER BY TIME","question":"show all train numbers and names ordered by their time from early to late.","context":"CREATE TABLE train (train_number VARCHAR, name VARCHAR, TIME VARCHAR)","generation":"SELECT train_number, name FROM train ORDER BY TIME"}
{"answer":"SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the full name of employee who supported the most number of customers.","context":"CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T2.support_rep_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\"","question":"Find the different first names and cities of the students who have allergy to milk or cat.","context":"CREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)","generation":"SELECT DISTINCT T1.fname, T2.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\""}
{"answer":"SELECT LOCATION, COUNT(*) FROM gas_station GROUP BY LOCATION ORDER BY COUNT(*)","question":"Show all locations and the number of gas stations in each location ordered by the count.","context":"CREATE TABLE gas_station (LOCATION VARCHAR)","generation":"SELECT LOCATION, COUNT(*) FROM gas_station GROUP BY LOCATION ORDER BY COUNT(*) DESC"}
{"answer":"SELECT TIME, train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME","question":"Give me the times and numbers of all trains that go to Chennai, ordered by time.","context":"CREATE TABLE train (TIME VARCHAR, train_number VARCHAR, destination VARCHAR)","generation":"SELECT TIME, train_number FROM train WHERE destination = \"Chennai\" ORDER BY TIME"}
{"answer":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1","question":"What is the id and family name of the driver who has the longest laptime?","context":"CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR)","generation":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1"}
{"answer":"SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING COUNT(*) > 2","question":"What is the order id and order details for the order more than two invoices.","context":"CREATE TABLE Orders (order_id VARCHAR, order_details VARCHAR); CREATE TABLE Invoices (order_id VARCHAR)","generation":"SELECT T1.order_id, T1.order_details FROM Orders AS T1 JOIN Invoices AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(*) > 2"}
{"answer":"SELECT COUNT(DISTINCT city) FROM bank","question":"Find the number of different cities which banks are located at.","context":"CREATE TABLE bank (city VARCHAR)","generation":"SELECT COUNT(DISTINCT city) FROM bank"}
{"answer":"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) = 2","question":"Find the title of courses that have two prerequisites?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)","generation":"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T1.title HAVING COUNT(*) = 2"}
{"answer":"SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"","question":"find the full name of employees who report to Nancy Edwards?","context":"CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)","generation":"SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T2.first_name = \"Nancy\" AND T2.last_name = \"Edwards\""}
{"answer":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) > 1","question":"Find the locations that have more than one movie theater with capacity above 300.","context":"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) > 1"}
{"answer":"SELECT T2.roomName, COUNT(*), T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room","question":"Return the name and number of reservations made for each of the rooms.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT T1.roomName, COUNT(*) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room GROUP BY T1.roomName"}
{"answer":"SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"","question":"Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_id VARCHAR, gender_code VARCHAR)","generation":"SELECT T1.booking_start_date, T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\""}
{"answer":"SELECT head_id, name FROM head WHERE name LIKE '%Ha%'","question":"Which head's name has the substring 'Ha'? List the id and name.","context":"CREATE TABLE head (head_id VARCHAR, name VARCHAR)","generation":"SELECT head_id, name FROM head WHERE name LIKE '%Ha%'"}
{"answer":"SELECT name, age, country FROM artist ORDER BY Year_Join","question":"Show all artist name, age, and country ordered by the yeared they joined.","context":"CREATE TABLE artist (name VARCHAR, age VARCHAR, country VARCHAR, Year_Join VARCHAR)","generation":"SELECT name, age, country FROM artist ORDER BY Year_Join"}
{"answer":"SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC","question":"What are the lifespans of representatives in descending order of vote percent?","context":"CREATE TABLE election (Representative_ID VARCHAR); CREATE TABLE representative (Lifespan VARCHAR, Representative_ID VARCHAR)","generation":"SELECT T1.Lifespan FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY T2.Vote_Percent DESC"}
{"answer":"SELECT account_id, customer_id, account_name FROM Accounts","question":"Show ids, customer ids, names for all accounts.","context":"CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)","generation":"SELECT account_id, customer_id, account_name FROM Accounts"}
{"answer":"SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id","question":"Find the name of bank branches that provided some loans.","context":"CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)","generation":"SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id"}
{"answer":"SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)","question":"Find the address and staff number of the shops that do not have any happy hour.","context":"CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)","generation":"SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)"}
{"answer":"SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the film title and inventory id of the item in the inventory which was rented most frequently?","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (inventory_id VARCHAR, film_id VARCHAR); CREATE TABLE rental (inventory_id VARCHAR)","generation":"SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T3.inventory_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10","question":"List top 10 employee work longest in the company. List employee's first and last name.","context":"CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)","generation":"SELECT first_name, last_name FROM employees ORDER BY hire_date DESC LIMIT 10"}
{"answer":"SELECT COUNT(*) FROM catalog_contents","question":"How many products are there in the records?","context":"CREATE TABLE catalog_contents (Id VARCHAR)","generation":"SELECT COUNT(*) FROM catalog_contents"}
{"answer":"SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1","question":"Show the company of the tallest entrepreneur.","context":"CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)","generation":"SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1"}
{"answer":"SELECT Phone FROM EMPLOYEE","question":"List the phone numbers of all employees.","context":"CREATE TABLE EMPLOYEE (Phone VARCHAR)","generation":"SELECT Phone FROM EMPLOYEE"}
{"answer":"SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title ORDER BY T1.director, T1.title","question":"For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR); CREATE TABLE Movie (director VARCHAR, title VARCHAR)","generation":"SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title ORDER BY T1.director, T1.title"}
{"answer":"SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Full'","question":"Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.","context":"CREATE TABLE phone (screen_mode VARCHAR, Accreditation_type VARCHAR); CREATE TABLE screen_mode (pixels VARCHAR, Graphics_mode VARCHAR)","generation":"SELECT T1.pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = \"Full\" INTERSECT SELECT T1.pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = \"Provisional\""}
{"answer":"SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2","question":"Show first name and id for all customers with at least 2 accounts.","context":"CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT T1.customer_first_name, T1.customer_id FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2"}
{"answer":"SELECT MAX(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","question":"What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?","context":"CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)","generation":"SELECT T1.name, T1.year, T2.fastestlapspeed FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2004 ORDER BY T1.year"}
{"answer":"SELECT flno FROM Flight WHERE origin = \"Los Angeles\"","question":"Show all flight number from Los Angeles.","context":"CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)","generation":"SELECT flno FROM Flight WHERE origin = \"Los Angeles\""}
{"answer":"SELECT COUNT(*) FROM authors","question":"How many authors are there?","context":"CREATE TABLE authors (Id VARCHAR)","generation":"SELECT COUNT(*) FROM authors"}
{"answer":"SELECT COUNT(*) FROM customer WHERE active = '1'","question":"How many customers have an active value of 1?","context":"CREATE TABLE customer (active VARCHAR)","generation":"SELECT COUNT(*) FROM customer WHERE active = 1"}
{"answer":"SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1","question":"What is the first, last name, gpa of the youngest one among students whose GPA is above 3?","context":"CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_gpa INTEGER, stu_dob VARCHAR)","generation":"SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob LIMIT 1"}
{"answer":"SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5","question":"List the types of competition that have at most five competitions of that type.","context":"CREATE TABLE competition (Competition_type VARCHAR)","generation":"SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5"}
{"answer":"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the status of the city that has hosted the greatest number of competitions.","context":"CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)","generation":"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 2005","question":"What is the average fee on a CSU campus in 2005?","context":"CREATE TABLE csu_fees (campusfee INTEGER, YEAR VARCHAR)","generation":"SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 2005"}
{"answer":"SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\"","question":"What is the type of allergy Cat?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)","generation":"SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\""}
{"answer":"SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\"","question":"Show the customer ids and firstname without a credit card.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)","generation":"SELECT T1.customer_id, T1.customer_first_name FROM Customers AS T1 JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_type_code <> 'C'"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5","question":"Find the titles of items that received any rating below 5.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5"}
{"answer":"SELECT school_code FROM department WHERE dept_name = \"Accounting\"","question":"What is the code of the school where the accounting department belongs to?","context":"CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)","generation":"SELECT school_code FROM department WHERE dept_name = 'Accounting'"}
{"answer":"SELECT T3.Pilot_name, T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID","question":"Show the names of pilots and models of aircrafts they have flied with.","context":"CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Model VARCHAR, Aircraft_ID VARCHAR)","generation":"SELECT T1.Pilot_name, T2.Model FROM pilot AS T1 JOIN pilot_record AS T2 ON T1.Pilot_ID = T2.Pilot_ID JOIN aircraft AS T3 ON T2.Aircraft_ID = T3.Aircraft_ID"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8","question":"Name all the products with next entry ID greater than 8.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)","generation":"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8"}
{"answer":"SELECT Name FROM editor WHERE Age = 24 OR Age = 25","question":"Show the names of editors of age either 24 or 25.","context":"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name FROM editor WHERE Age = 24 OR Age = 25"}
{"answer":"SELECT name FROM artist WHERE NOT artist_id IN (SELECT artist_id FROM exhibition)","question":"Show names for artists without any exhibition.","context":"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (name VARCHAR, artist_id VARCHAR)","generation":"SELECT name FROM artist WHERE NOT artist_id IN (SELECT artist_id FROM exhibition)"}
{"answer":"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rank) DESC LIMIT 1","question":"Find the name and id of the good with the highest average rank.","context":"CREATE TABLE review (i_id VARCHAR, rank INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR)","generation":"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T1.i_id ORDER BY AVG(T2.rank) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT product_size FROM Products","question":"Show all product sizes.","context":"CREATE TABLE Products (product_size VARCHAR)","generation":"SELECT DISTINCT product_size FROM Products"}
{"answer":"SELECT COUNT(*) FROM game WHERE NOT id IN (SELECT game_id FROM injury_accident)","question":"How many games are free of injury accidents?","context":"CREATE TABLE injury_accident (id VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, game_id VARCHAR)","generation":"SELECT COUNT(*) FROM game WHERE NOT id IN (SELECT game_id FROM injury_accident)"}
{"answer":"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of party with most number of members?","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_id VARCHAR)","generation":"SELECT T1.party_name FROM party AS T1 JOIN Member AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1","question":"What is the date of the performance with the highest number of attendees?","context":"CREATE TABLE performance (Date VARCHAR, Attendance VARCHAR)","generation":"SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1"}
{"answer":"SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"","question":"What is the address of employee Nancy Edwards?","context":"CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""}
{"answer":"SELECT SUM(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\"","question":"Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".","context":"CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_short_name VARCHAR); CREATE TABLE Apartments (room_count INTEGER, building_id VARCHAR)","generation":"SELECT SUM(T1.room_count) FROM Apartments AS T1 JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T2.building_short_name = \"Columbus Square\""}
{"answer":"SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor","question":"What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?","context":"CREATE TABLE entrepreneur (Investor VARCHAR)","generation":"SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor"}
{"answer":"SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4","question":"Find the policy type used by more than 4 customers.","context":"CREATE TABLE available_policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4"}
{"answer":"SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY SUM(T1.amount) DESC LIMIT 1","question":"Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.","context":"CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER)","generation":"SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T2.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T1.bname ORDER BY SUM(T2.amount) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT name FROM instructor ORDER BY name","question":"List in alphabetic order the names of all distinct instructors.","context":"CREATE TABLE instructor (name VARCHAR)","generation":"SELECT DISTINCT name FROM instructor ORDER BY name"}
{"answer":"SELECT Name FROM climber WHERE Country <> \"Switzerland\"","question":"List the names of climbers whose country is not Switzerland.","context":"CREATE TABLE climber (Name VARCHAR, Country VARCHAR)","generation":"SELECT Name FROM climber WHERE Country <> \"Switzerland\""}
{"answer":"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1","question":"Show the height of the mountain climbed by the climber with the maximum points.","context":"CREATE TABLE climber (Mountain_ID VARCHAR, Points VARCHAR); CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT T1.Height FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Points DESC LIMIT 1"}
{"answer":"SELECT order_id, COUNT(DISTINCT product_id) FROM Order_items GROUP BY order_id","question":"Show order ids and the number of products in each order.","context":"CREATE TABLE Order_items (order_id VARCHAR, product_id VARCHAR)","generation":"SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id"}
{"answer":"SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)","question":"Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.","context":"CREATE TABLE student (stu_fname VARCHAR, stu_gpa INTEGER)","generation":"SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)"}
{"answer":"SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10","question":"What are the ids of stations that are located in San Francisco and have average bike availability above 10.","context":"CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)","generation":"SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.station_id = T2.station_id WHERE T1.city = \"San Francisco\" AND T2.bikes_available > 10"}
{"answer":"SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC","question":"List the names of wrestlers and the teams in elimination in descending order of days held.","context":"CREATE TABLE elimination (Team VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR, Days_held VARCHAR)","generation":"SELECT T1.Name, T2.Team FROM wrestler AS T1 JOIN elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T1.Days_held DESC"}
{"answer":"SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'","question":"What are the names for tracks without a race in class 'GT'.","context":"CREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)","generation":"SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race WHERE class = 'GT')"}
{"answer":"SELECT name, LOCATION FROM enzyme","question":"List the names and the locations that the enzymes can make an effect.","context":"CREATE TABLE enzyme (name VARCHAR, LOCATION VARCHAR)","generation":"SELECT name, LOCATION FROM enzyme"}
{"answer":"SELECT name, LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1","question":"What are the name and location of the cinema with the largest capacity?","context":"CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity VARCHAR)","generation":"SELECT name, LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM chip_model WHERE wifi = 'No'","question":"How many models do not have the wifi function?","context":"CREATE TABLE chip_model (wifi VARCHAR)","generation":"SELECT COUNT(*) FROM chip_model WHERE wifi <> \"yes\""}
{"answer":"SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1","question":"What is the product with the highest height? Give me the catalog entry name.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)","generation":"SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1"}
{"answer":"SELECT name FROM station WHERE lat < 37.5","question":"What are the names of stations that have latitude lower than 37.5?","context":"CREATE TABLE station (name VARCHAR, lat INTEGER)","generation":"SELECT name FROM station WHERE lat < 37.5"}
{"answer":"SELECT campus FROM campuses WHERE county = \"Los Angeles\"","question":"Report the name of all campuses in Los Angeles county.","context":"CREATE TABLE campuses (campus VARCHAR, county VARCHAR)","generation":"SELECT campus FROM campuses WHERE county = \"Los Angeles\""}
{"answer":"SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","question":"Show the first names and last names of customers without any account.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT customer_first_name, customer_last_name FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)"}
{"answer":"SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1","question":"Find the name of customer who has the lowest credit score.","context":"CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR)","generation":"SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1"}
{"answer":"SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches WHERE semester = 'Spring')","question":"Find the names of instructors who didn't each any courses in any Spring semester.","context":"CREATE TABLE teaches (name VARCHAR, id VARCHAR, semester VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR, semester VARCHAR)","generation":"SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches WHERE semester = 'Spring')"}
{"answer":"SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\"","question":"What is the gender of the teacher with last name \"Medhurst\"?","context":"CREATE TABLE TEACHERS (gender VARCHAR, last_name VARCHAR)","generation":"SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\""}
{"answer":"SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'","question":"Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?","context":"CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)","generation":"SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'"}
{"answer":"SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating)","question":"Find the titles of all movies that have no ratings.","context":"CREATE TABLE Rating (title VARCHAR, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating)"}
{"answer":"SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the customer last name, id and phone number with most number of orders?","context":"CREATE TABLE Orders (customer_id VARCHAR); CREATE TABLE Customers (customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_last_name, T1.customer_id, T1.phone_number FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")","question":"Find the first name and major of the students who are not allegry to soy.","context":"CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT T1.fname, T1.major FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy <> \"Soy\""}
{"answer":"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\"","question":"Show the times used by climbers to climb mountains in Country Uganda.","context":"CREATE TABLE mountain (Mountain_ID VARCHAR, Country VARCHAR); CREATE TABLE climber (Time VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\""}
{"answer":"SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004","question":"What is the theme, date, and attendance for the exhibition in year 2004?","context":"CREATE TABLE exhibition_record (date VARCHAR, attendance VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR, year VARCHAR)","generation":"SELECT T1.theme, T2.date, T2.attendance FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.year = 2004"}
{"answer":"SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1","question":"Show names of pilots that have more than one record.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)","generation":"SELECT T1.Pilot_name FROM pilot AS T1 JOIN pilot_record AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T1.Pilot_name HAVING COUNT(*) > 1"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes)","question":"List all player names who have an overall rating higher than the average.","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating INTEGER)","generation":"SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes)"}
{"answer":"SELECT product_name, product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20","question":"What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?","context":"CREATE TABLE products_for_hire (product_name VARCHAR, product_description VARCHAR, product_type_code VARCHAR, daily_hire_cost VARCHAR)","generation":"SELECT product_name, product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20"}
{"answer":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\"","question":"List the document ids for any documents with the status code done and the type code paper.","context":"CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)","generation":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"paper\""}
{"answer":"SELECT MAX(stu_gpa), AVG(stu_gpa), MIN(stu_gpa), dept_code FROM student GROUP BY dept_code","question":"Find the max, average, and minimum gpa of all students in each department.","context":"CREATE TABLE student (dept_code VARCHAR, stu_gpa INTEGER)","generation":"SELECT dept_code, MAX(stu_gpa), AVG(stu_gpa), MIN(stu_gpa) FROM student GROUP BY dept_code"}
{"answer":"SELECT average_attendance FROM stadium WHERE capacity_percentage > 100","question":"What is the average attendance of stadiums with capacity percentage higher than 100%?","context":"CREATE TABLE stadium (average_attendance VARCHAR, capacity_percentage INTEGER)","generation":"SELECT average_attendance FROM stadium WHERE capacity_percentage > 100"}
{"answer":"SELECT T1.emp_lname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'","question":"What is the last name and office of the professor from the history department?","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_num VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)","generation":"SELECT T3.emp_lname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = \"History\""}
{"answer":"SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"","question":"Eduardo Martins is a customer at which company?","context":"CREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\""}
{"answer":"SELECT COUNT(*) FROM technician","question":"How many technicians are there?","context":"CREATE TABLE technician (Id VARCHAR)","generation":"SELECT COUNT(*) FROM technician"}
{"answer":"SELECT SUM(balance) FROM checking","question":"What is the total checking balance in all accounts?","context":"CREATE TABLE checking (balance INTEGER)","generation":"SELECT SUM(balance) FROM checking"}
{"answer":"SELECT COUNT(*) FROM Customers","question":"How many customers do we have?","context":"CREATE TABLE Customers (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Customers"}
{"answer":"SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700","question":"Find the name and capacity of products with price greater than 700 (in USD).","context":"CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)","generation":"SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700"}
{"answer":"SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID","question":"Show the album names and ids for albums that contain tracks with unit price bigger than 1.","context":"CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)","generation":"SELECT T1.Title, T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1"}
{"answer":"SELECT Party FROM people ORDER BY Age LIMIT 1","question":"What is the party of the youngest people?","context":"CREATE TABLE people (Party VARCHAR, Age VARCHAR)","generation":"SELECT Party FROM people ORDER BY Age LIMIT 1"}
{"answer":"SELECT DISTINCT YEAR FROM competition WHERE Competition_type <> \"Tournament\"","question":"What are the distinct years in which the competitions type is not \"Tournament\"?","context":"CREATE TABLE competition (YEAR VARCHAR, Competition_type VARCHAR)","generation":"SELECT DISTINCT YEAR FROM competition WHERE Competition_type <> \"Tournament\""}
{"answer":"SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1","question":"Find the name of the room with the maximum occupancy.","context":"CREATE TABLE Rooms (roomName VARCHAR, maxOccupancy VARCHAR)","generation":"SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1"}
{"answer":"SELECT bname FROM bank WHERE state = 'New York'","question":"Find the branch names of banks in the New York state.","context":"CREATE TABLE bank (bname VARCHAR, state VARCHAR)","generation":"SELECT bname FROM bank WHERE state = \"New York\""}
{"answer":"SELECT StuID FROM Student WHERE age > 20","question":"Show all student ids who are older than 20.","context":"CREATE TABLE Student (StuID VARCHAR, age INTEGER)","generation":"SELECT StuID FROM Student WHERE age > 20"}
{"answer":"SELECT local_authority, services FROM station","question":"list the local authorities and services provided by all stations.","context":"CREATE TABLE station (local_authority VARCHAR, services VARCHAR)","generation":"SELECT local_authority, services FROM station"}
{"answer":"SELECT COUNT(*), T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id","question":"How many assets does each third party company supply? List the count and the company id.","context":"CREATE TABLE Assets (supplier_company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR)","generation":"SELECT COUNT(*), T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id"}
{"answer":"SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2","question":"Show all storm names except for those with at least two affected regions.","context":"CREATE TABLE storm (name VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT name FROM storm WHERE NOT storm_id IN (SELECT storm_id FROM affected_region GROUP BY storm_id HAVING COUNT(*) >= 2)"}
{"answer":"SELECT Fname, Lname FROM Student","question":"Show first name and last name for all students.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)","generation":"SELECT Fname, Lname FROM Student"}
{"answer":"SELECT open_date, COUNT(*) FROM church GROUP BY open_date","question":"Show all opening years and the number of churches that opened in that year.","context":"CREATE TABLE church (open_date VARCHAR)","generation":"SELECT open_date, COUNT(*) FROM church GROUP BY open_date"}
{"answer":"SELECT payment_date FROM payment ORDER BY payment_date LIMIT 1","question":"When did the first payment happen?","context":"CREATE TABLE payment (payment_date VARCHAR)","generation":"SELECT payment_date FROM payment ORDER BY payment_date LIMIT 1"}
{"answer":"SELECT T2.title, T1.stars, T2.director, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director","question":"Find the title and score of the movie with the lowest rating among all movies directed by each director.","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)","generation":"SELECT T1.title, T2.stars FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director ORDER BY MIN(T2.stars)"}
{"answer":"SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID","question":"Show the names of members and the location of the performances they attended.","context":"CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT T1.Name, T2.Location FROM member AS T1 JOIN member_attendance AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T2.Performance_ID = T3.Performance_ID"}
{"answer":"SELECT region_code, region_name FROM region ORDER BY region_code","question":"Show all region code and region name sorted by the codes.","context":"CREATE TABLE region (region_code VARCHAR, region_name VARCHAR)","generation":"SELECT region_code, region_name FROM region ORDER BY region_code"}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000","question":"Find the the name of the customers who have a loan with amount more than 3000.","context":"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_amount > 3000"}
{"answer":"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"","question":"How many accounts does the customer with first name Art and last name Turcotte have?","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""}
{"answer":"SELECT T1.id, COUNT(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id","question":"How many games has each stadium held?","context":"CREATE TABLE stadium (id VARCHAR); CREATE TABLE game (stadium_id VARCHAR)","generation":"SELECT COUNT(*), T1.id FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id"}
{"answer":"SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000","question":"How many aircrafts have distance between 1000 and 5000?","context":"CREATE TABLE Aircraft (distance INTEGER)","generation":"SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000"}
{"answer":"SELECT Publication_Date FROM publication ORDER BY Price DESC","question":"What are the dates of publications in descending order of price?","context":"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)","generation":"SELECT Publication_Date FROM publication ORDER BY Price DESC"}
{"answer":"SELECT COUNT(*) FROM book","question":"How many books are there?","context":"CREATE TABLE book (Id VARCHAR)","generation":"SELECT COUNT(*) FROM book"}
{"answer":"SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"","question":"How long does track Fast As a Shark has?","context":"CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)","generation":"SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\""}
{"answer":"SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'","question":"Find the name and salary of the instructors who are advisors of any student from History department?","context":"CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)","generation":"SELECT T1.name, T1.salary FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id JOIN student AS T3 ON T2.s_id = T3.id WHERE T3.dept_name = \"History\""}
{"answer":"SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'","question":"What are the names and trade names of the medicines which has 'Yes' value in the FDA record?","context":"CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, FDA_approved VARCHAR)","generation":"SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'"}
{"answer":"SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2","question":"What is the name of the shipping agent of the document with id 2?","context":"CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)","generation":"SELECT T2.Name FROM Documents AS T1 JOIN Ref_Shipping_Agents AS T2 ON T1.Shipping_Agent_Id = T2.Id WHERE T1.Id = 2"}
{"answer":"SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'","question":"What is the membership card held by both members living in Hartford and ones living in Waterbury address?","context":"CREATE TABLE member (membership_card VARCHAR, address VARCHAR)","generation":"SELECT membership_card FROM member WHERE address = \"Hartford\" INTERSECT SELECT membership_card FROM member WHERE address = \"Waterbury\""}
{"answer":"SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1","question":"Find the branch name of the bank that has the most number of customers.","context":"CREATE TABLE bank (bname VARCHAR, no_of_customers VARCHAR)","generation":"SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM classroom WHERE building <> 'Lamberton'","question":"Count the number of rooms that are not in the Lamberton building.","context":"CREATE TABLE classroom (building VARCHAR)","generation":"SELECT COUNT(*) FROM classroom WHERE building <> \"Lamberton\""}
{"answer":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"","question":"Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".","context":"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","generation":"SELECT Nominee FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\""}
{"answer":"SELECT Delegate, Committee FROM election","question":"Show the delegate and committee information of elections.","context":"CREATE TABLE election (Delegate VARCHAR, Committee VARCHAR)","generation":"SELECT Delegate, Committee FROM election"}
{"answer":"SELECT T2.title, T2.film_id, T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which film has the most number of actors or actresses? List the film name, film id and description.","context":"CREATE TABLE film_actor (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR, description VARCHAR)","generation":"SELECT T1.title, T1.film_id, T1.description FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT MAX(Population), MIN(Population) FROM county","question":"Return the maximum and minimum population among all counties.","context":"CREATE TABLE county (Population INTEGER)","generation":"SELECT MAX(Population), MIN(Population) FROM county"}
{"answer":"SELECT Weight FROM people ORDER BY Height LIMIT 1","question":"What is the weight of the shortest person?","context":"CREATE TABLE people (Weight VARCHAR, Height VARCHAR)","generation":"SELECT Weight FROM people ORDER BY Height LIMIT 1"}
{"answer":"SELECT Player_name, residence FROM player WHERE Occupation <> \"Researcher\"","question":"List the name and residence for players whose occupation is not \"Researcher\".","context":"CREATE TABLE player (Player_name VARCHAR, residence VARCHAR, Occupation VARCHAR)","generation":"SELECT Player_name, residence FROM player WHERE Occupation <> \"Researcher\""}
{"answer":"SELECT COUNT(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\"","question":"How many students live in HKG or CHI?","context":"CREATE TABLE Student (city_code VARCHAR)","generation":"SELECT COUNT(*) FROM Student WHERE city_code = 'HKG' OR city_code = 'CHI'"}
{"answer":"SELECT director FROM Movie WHERE title = 'Avatar'","question":"Who is the director of movie Avatar?","context":"CREATE TABLE Movie (director VARCHAR, title VARCHAR)","generation":"SELECT director FROM Movie WHERE title = \"Avatar\""}
{"answer":"SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID","question":"Find the names of all instructors who have taught some course and the course_id.","context":"CREATE TABLE instructor (ID VARCHAR); CREATE TABLE teaches (ID VARCHAR)","generation":"SELECT T1.ID, T2.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID"}
{"answer":"SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place","question":"List each birth place along with the number of people from there.","context":"CREATE TABLE people (Birth_Place VARCHAR)","generation":"SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place"}
{"answer":"SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the range that has the most number of mountains.","context":"CREATE TABLE mountain (Range VARCHAR)","generation":"SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'","question":"Show all headquarters without a company in banking industry.","context":"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)","generation":"SELECT headquarters FROM company WHERE main_industry <> 'Banking'"}
{"answer":"SELECT amount, donator_name FROM endowment ORDER BY amount DESC LIMIT 1","question":"List the amount and donor name for the largest amount of donation.","context":"CREATE TABLE endowment (amount VARCHAR, donator_name VARCHAR)","generation":"SELECT amount, donator_name FROM endowment ORDER BY amount DESC LIMIT 1"}
{"answer":"SELECT Name FROM HOST WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host)","question":"List the names of hosts who did not serve as a host of any party in our record.","context":"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Name VARCHAR, Host_ID VARCHAR)","generation":"SELECT Name FROM HOST WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host)"}
{"answer":"SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'","question":"How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?","context":"CREATE TABLE institution (institution_id VARCHAR, founded VARCHAR, type VARCHAR); CREATE TABLE protein (institution_id VARCHAR)","generation":"SELECT COUNT(*) FROM protein AS T1 JOIN institution AS T2 ON T1.institution_id = T2.institution_id WHERE T2.founded > 1880 OR T2.type = \"Private\""}
{"answer":"SELECT date_incident_start, date_incident_end FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"","question":"What are the start and end dates for incidents with incident type code \"NOISE\"?","context":"CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, date_incident_end VARCHAR, incident_type_code VARCHAR)","generation":"SELECT date_incident_start, date_incident_end FROM Behavior_Incident WHERE incident_type_code = \"NOISE\""}
{"answer":"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred","question":"Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.","context":"CREATE TABLE student (id VARCHAR, dept_name VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT T3.name FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id JOIN instructor AS T3 ON T1.i_id = T3.id WHERE T2.dept_name = 'Math' ORDER BY T2.tot_cred"}
{"answer":"SELECT T2.city, COUNT(*), T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which city has the most addresses? List the city name, number of addresses, and city id.","context":"CREATE TABLE address (city_id VARCHAR); CREATE TABLE city (city VARCHAR, city_id VARCHAR)","generation":"SELECT T1.city, COUNT(*), T1.city_id FROM city AS T1 JOIN address AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT AVG(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'","question":"What is the average gpa of the students enrolled in the course with code ACCT-211?","context":"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, stu_num VARCHAR)","generation":"SELECT AVG(T1.stu_gpa) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'"}
{"answer":"SELECT COUNT(*) FROM track","question":"How many tracks do we have?","context":"CREATE TABLE track (Id VARCHAR)","generation":"SELECT COUNT(*) FROM track"}
{"answer":"SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5","question":"Which membership card has more than 5 members?","context":"CREATE TABLE member (Membership_card VARCHAR)","generation":"SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5"}
{"answer":"SELECT eid, salary FROM Employee WHERE name = 'Mark Young'","question":"Show the id and salary of Mark Young.","context":"CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)","generation":"SELECT eid, salary FROM Employee WHERE name = \"Mark Young\""}
{"answer":"SELECT company, headquarters FROM company ORDER BY market_value DESC","question":"Show all company names and headquarters in the descending order of market value.","context":"CREATE TABLE company (company VARCHAR, headquarters VARCHAR, market_value VARCHAR)","generation":"SELECT company, headquarters FROM company ORDER BY market_value DESC"}
{"answer":"SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1","question":"Find the name of the target user with the lowest trust score.","context":"CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1"}
{"answer":"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100","question":"Show all locations where a gas station for company with market value greater than 100 is located.","context":"CREATE TABLE gas_station (location VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, market_value INTEGER); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR)","generation":"SELECT T1.location FROM gas_station AS T1 JOIN station_company AS T2 ON T1.station_id = T2.station_id JOIN company AS T3 ON T2.company_id = T3.company_id WHERE T3.market_value > 100"}
{"answer":"SELECT HOST FROM performance ORDER BY Attendance","question":"List the hosts of performances in ascending order of attendance.","context":"CREATE TABLE performance (HOST VARCHAR, Attendance VARCHAR)","generation":"SELECT HOST FROM performance ORDER BY Attendance"}
{"answer":"SELECT MAX(T1.stars), T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MAX(YEAR) FROM Movie)","question":"What is the maximum stars and year for the most recent movie?","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (YEAR INTEGER); CREATE TABLE Movie (year VARCHAR, mID VARCHAR)","generation":"SELECT T1.stars, T2.YEAR FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T2.YEAR DESC LIMIT 1"}
{"answer":"SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE openning_year >= 2011","question":"Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.","context":"CREATE TABLE cinema (capacity INTEGER, openning_year VARCHAR)","generation":"SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE openning_year >= 2011"}
{"answer":"SELECT COUNT(DISTINCT city) FROM station","question":"What is the number of distinct cities the stations are located at?","context":"CREATE TABLE station (city VARCHAR)","generation":"SELECT COUNT(DISTINCT city) FROM station"}
{"answer":"SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"","question":"What is employee Nancy Edwards's phone number?","context":"CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""}
{"answer":"SELECT AVG(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","question":"What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?","context":"CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)","generation":"SELECT T1.name, AVG(T1.fastestlapspeed), T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2004 GROUP BY T1.name ORDER BY T1.year"}
{"answer":"SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")","question":"Find the last name and age of the student who has allergy to both milk and cat.","context":"CREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT T1.lname, T1.age FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = \"milk\" INTERSECT SELECT T1.lname, T1.age FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = \"cat\""}
{"answer":"SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"","question":"What are the papers published under the institution \"Indiana University\"?","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T3.name = \"Indiana University\""}
{"answer":"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"","question":"Find the names of catalog entries with level number 8.","context":"CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)","generation":"SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id WHERE T2.catalog_level_number = 8"}
{"answer":"SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')","question":"Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.","context":"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)","generation":"SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')"}
{"answer":"SELECT id, market_share FROM browser WHERE name = 'Safari'","question":"What is the id and market share of the browser Safari?","context":"CREATE TABLE browser (id VARCHAR, market_share VARCHAR, name VARCHAR)","generation":"SELECT id, market_share FROM browser WHERE name = \"Safari\""}
{"answer":"SELECT id FROM instructor EXCEPT SELECT id FROM teaches","question":"Find the id of instructors who didn't teach any courses?","context":"CREATE TABLE teaches (id VARCHAR); CREATE TABLE instructor (id VARCHAR)","generation":"SELECT id FROM instructor WHERE NOT id IN (SELECT id FROM teaches)"}
{"answer":"SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'","question":"Find the city and name of bank branches that provide business loans.","context":"CREATE TABLE bank (bname VARCHAR, city VARCHAR, branch_id VARCHAR); CREATE TABLE loan (branch_id VARCHAR, loan_type VARCHAR)","generation":"SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = \"Business\""}
{"answer":"SELECT SUM(no_of_customers) FROM bank","question":"How many customers are there?","context":"CREATE TABLE bank (no_of_customers INTEGER)","generation":"SELECT no_of_customers FROM bank"}
{"answer":"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate","question":"Find the names of the candidates whose support percentage is lower than their oppose rate.","context":"CREATE TABLE candidate (people_id VARCHAR, support_rate INTEGER, oppose_rate VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)","generation":"SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.support_rate < T2.oppose_rate"}
{"answer":"SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = \"Democratic\"","question":"Show the lieutenant governor and comptroller from the democratic party.","context":"CREATE TABLE party (Lieutenant_Governor VARCHAR, Comptroller VARCHAR, Party VARCHAR)","generation":"SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = \"Democratic\""}
{"answer":"SELECT * FROM election","question":"Show all the information about election.","context":"CREATE TABLE election (Id VARCHAR)","generation":"SELECT * FROM election"}
{"answer":"SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements","question":"What are the maximum and minimum settlement amount on record?","context":"CREATE TABLE settlements (settlement_amount INTEGER)","generation":"SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements"}
{"answer":"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000","question":"What are the names of representatives with more than 10000 votes in election?","context":"CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)","generation":"SELECT T1.Name FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Votes > 10000"}
{"answer":"SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1","question":"Find the founded year of the newest non public school.","context":"CREATE TABLE university (founded VARCHAR, affiliation VARCHAR)","generation":"SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1"}
{"answer":"SELECT T2.name, T1.category_id, COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id","question":"How many films are there in each category? List the genre name, genre id and the count.","context":"CREATE TABLE film_category (category_id VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)","generation":"SELECT T1.name, T1.category_id, COUNT(*) FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id"}
{"answer":"SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID","question":"Show the names of players and names of their coaches.","context":"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)","generation":"SELECT T1.Player_name, T2.coach_name FROM player AS T1 JOIN player_coach AS T3 ON T1.Player_ID = T3.Player_ID JOIN coach AS T2 ON T3.Coach_ID = T2.Coach_ID"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country <> \"China\"","question":"What are the names of perpetrators whose country is not \"China\"?","context":"CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country <> \"China\""}
{"answer":"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2","question":"Show names for all aircraft with at least two flights.","context":"CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)","generation":"SELECT T1.name FROM Aircraft AS T1 JOIN Flight AS T2 ON T1.aid = T2.aid GROUP BY T1.name HAVING COUNT(*) >= 2"}
{"answer":"SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000","question":"What are the distinct publishers of publications with price higher than 5000000?","context":"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)","generation":"SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000"}
{"answer":"SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1","question":"Which allergy has most number of students affected?","context":"CREATE TABLE Has_allergy (Allergy VARCHAR)","generation":"SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7","question":"Return the unique name for stations that have ever had 7 bikes available.","context":"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)","generation":"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7"}
{"answer":"SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\"","question":"Show the distinct position of players from college UCLA or Duke.","context":"CREATE TABLE match_season (POSITION VARCHAR, College VARCHAR)","generation":"SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\""}
{"answer":"SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num","question":"Find the first names of all instructors who have taught some course and the course code.","context":"CREATE TABLE CLASS (crs_code VARCHAR, prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_fname, T2.crs_code FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num"}
{"answer":"SELECT MIN(age), MAX(age), AVG(age) FROM people","question":"Show the minimum, maximum, and average age for all people.","context":"CREATE TABLE people (age INTEGER)","generation":"SELECT MIN(age), MAX(age), AVG(age) FROM people"}
{"answer":"SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\"","question":"List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT T1.Hardware_Model_name, T1.Company_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Graphics\""}
{"answer":"SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'","question":"What are the hosts of competitions whose theme is not \"Aliens\"?","context":"CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)","generation":"SELECT Hosts FROM farm_competition WHERE Theme <> \"Aliens\""}
{"answer":"SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)","question":"What are the names of teams that do no have match season record?","context":"CREATE TABLE match_season (Name VARCHAR, Team_id VARCHAR, Team VARCHAR); CREATE TABLE team (Name VARCHAR, Team_id VARCHAR, Team VARCHAR)","generation":"SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)"}
{"answer":"SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code","question":"Show all card type codes and the number of customers holding cards in each type.","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)","generation":"SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code"}
{"answer":"SELECT mascot FROM school WHERE enrollment > (SELECT AVG(enrollment) FROM school)","question":"What are the mascots for schools with enrollments above the average?","context":"CREATE TABLE school (mascot VARCHAR, enrollment INTEGER)","generation":"SELECT mascot FROM school WHERE enrollment > (SELECT AVG(enrollment) FROM school)"}
{"answer":"SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id","question":"For each station, find its latitude and the minimum duration of trips that ended at the station.","context":"CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)","generation":"SELECT T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T1.id"}
{"answer":"SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"","question":"Show all official native languages that contain the word \"English\".","context":"CREATE TABLE country (Official_native_language VARCHAR)","generation":"SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\""}
{"answer":"SELECT region_name FROM region WHERE region_name <> 'Denmark'","question":"Show names for all regions except for Denmark.","context":"CREATE TABLE region (region_name VARCHAR)","generation":"SELECT region_name FROM region WHERE region_name <> 'Denmark'"}
{"answer":"SELECT T3.Player_name, T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011","question":"Show the names and genders of players with a coach starting after 2011.","context":"CREATE TABLE player (Player_name VARCHAR, gender VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR, Starting_year INTEGER); CREATE TABLE coach (Coach_ID VARCHAR)","generation":"SELECT T1.Player_name, T1.gender FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID = T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID = T3.Coach_ID WHERE T3.Starting_year > 2011"}
{"answer":"SELECT COUNT(*) FROM employee","question":"Find the total number of employees.","context":"CREATE TABLE employee (Id VARCHAR)","generation":"SELECT COUNT(*) FROM employee"}
{"answer":"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the account id with most number of transactions.","context":"CREATE TABLE Financial_transactions (account_id VARCHAR)","generation":"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'","question":"How many students are enrolled in the class taught by some professor from the accounting department?","context":"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)","generation":"SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = \"Accounting\""}
{"answer":"SELECT name, distance FROM Aircraft","question":"Show name and distance for all aircrafts.","context":"CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)","generation":"SELECT name, distance FROM Aircraft"}
{"answer":"SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315","question":"What are the heights of body builders with total score smaller than 315?","context":"CREATE TABLE people (Height VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)","generation":"SELECT T1.Height FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Total < 315"}
{"answer":"SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> \"Fog\" AND EVENTS <> \"Rain\"","question":"In zip code 94107, on which day neither Fog nor Rain was not observed?","context":"CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)","generation":"SELECT date FROM weather WHERE zip_code = 94107 AND NOT EVENTS = 'Fog' AND NOT EVENTS = 'Rain'"}
{"answer":"SELECT SUM(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'","question":"Find the total account balance of each customer from Utah or Texas.","context":"CREATE TABLE customer (acc_bal INTEGER, state VARCHAR)","generation":"SELECT SUM(acc_bal) FROM customer WHERE state = \"Utah\" OR state = \"Texas\""}
{"answer":"SELECT text FROM tweets WHERE text LIKE '%intern%'","question":"Return the text of tweets about the topic 'intern'.","context":"CREATE TABLE tweets (text VARCHAR)","generation":"SELECT text FROM tweets WHERE text LIKE '%intern%'"}
{"answer":"SELECT AVG(num_of_staff), AVG(score) FROM shop","question":"What are the average score and average staff number of all shops?","context":"CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)","generation":"SELECT AVG(num_of_staff), AVG(score) FROM shop"}
{"answer":"SELECT AVG(weight) FROM Player","question":"What is the average weight of all players?","context":"CREATE TABLE Player (weight INTEGER)","generation":"SELECT AVG(weight) FROM Player"}
{"answer":"SELECT COUNT(DISTINCT Status) FROM city","question":"How many different statuses do cities have?","context":"CREATE TABLE city (Status VARCHAR)","generation":"SELECT COUNT(DISTINCT Status) FROM city"}
{"answer":"SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2","question":"What are the investors that have invested in at least two entrepreneurs?","context":"CREATE TABLE entrepreneur (Investor VARCHAR)","generation":"SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2"}
{"answer":"SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'","question":"Find the name of customers who do not have an saving account.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)","generation":"SELECT cust_name FROM customer WHERE acc_type <> 'Saving'"}
{"answer":"SELECT COUNT(DISTINCT rating) FROM film","question":"How many kinds of different ratings are listed?","context":"CREATE TABLE film (rating VARCHAR)","generation":"SELECT COUNT(DISTINCT rating) FROM film"}
{"answer":"SELECT AVG(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"","question":"What is the average price for flights from Los Angeles to Honolulu.","context":"CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)","generation":"SELECT AVG(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""}
{"answer":"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2","question":"List the locations that are shared by more than two wrestlers.","context":"CREATE TABLE wrestler (LOCATION VARCHAR)","generation":"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2"}
{"answer":"SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000","question":"Show the names of mountains with height more than 5000 or prominence more than 1000.","context":"CREATE TABLE mountain (Name VARCHAR, Height VARCHAR, Prominence VARCHAR)","generation":"SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000"}
{"answer":"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\"","question":"Show all allergies with type food.","context":"CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)","generation":"SELECT allergy FROM Allergy_type WHERE allergytype = \"food\""}
{"answer":"SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1","question":"Find the name of the product that has the smallest capacity.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)","generation":"SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1"}
{"answer":"SELECT T2.product_name, SUM(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name","question":"Show all product names and the total quantity ordered for each product name.","context":"CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_quantity INTEGER, product_id VARCHAR)","generation":"SELECT T1.product_name, SUM(T2.product_quantity) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name"}
{"answer":"SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants","question":"What are all the the participant ids, type code and details?","context":"CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR, Participant_Details VARCHAR)","generation":"SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants"}
{"answer":"SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = \"918\"","question":"What are the email addresses of teachers whose address has zip code \"918\"?","context":"CREATE TABLE Addresses (address_id VARCHAR, zip_postcode VARCHAR); CREATE TABLE Teachers (email_address VARCHAR, address_id VARCHAR)","generation":"SELECT T1.email_address FROM Teachers AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.zip_postcode = \"918\""}
{"answer":"SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code","question":"Show the card type codes and the number of transactions.","context":"CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)","generation":"SELECT T1.card_type_code, COUNT(*) FROM Customers_cards AS T1 JOIN Financial_transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T1.card_type_code"}
{"answer":"SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"","question":"Which accelerator name contains substring \"Opera\"?","context":"CREATE TABLE web_client_accelerator (name VARCHAR)","generation":"SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""}
{"answer":"SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'","question":"Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)","generation":"SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"}
{"answer":"SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1","question":"What is the name of the highest mountain?","context":"CREATE TABLE mountain (Name VARCHAR, Height VARCHAR)","generation":"SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"}
{"answer":"SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date LIMIT 1","question":"When was the first asset acquired?","context":"CREATE TABLE Assets (asset_acquired_date VARCHAR)","generation":"SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date LIMIT 1"}
{"answer":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"","question":"Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".","context":"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","generation":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\""}
{"answer":"SELECT MIN(seating), MAX(seating), AVG(seating) FROM track","question":"What is the minimum, maximum, and average seating for all tracks.","context":"CREATE TABLE track (seating INTEGER)","generation":"SELECT MIN(seating), MAX(seating), AVG(seating) FROM track"}
{"answer":"SELECT player, number_of_matches, SOURCE FROM injury_accident WHERE injury <> 'Knee problem'","question":"What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?","context":"CREATE TABLE injury_accident (player VARCHAR, number_of_matches VARCHAR, SOURCE VARCHAR, injury VARCHAR)","generation":"SELECT player, number_of_matches, SOURCE FROM injury_accident WHERE injury <> 'Knee problem'"}
{"answer":"SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'","question":"Find the total budgets of the Marketing or Finance department.","context":"CREATE TABLE department (budget INTEGER, dept_name VARCHAR)","generation":"SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'"}
{"answer":"SELECT course_name FROM courses ORDER BY course_name","question":"List the names of courses in alphabetical order?","context":"CREATE TABLE courses (course_name VARCHAR)","generation":"SELECT course_name FROM courses ORDER BY course_name"}
{"answer":"SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1","question":"How many faculty lines are there in the university that conferred the least number of degrees in year 2001?","context":"CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)","generation":"SELECT COUNT(*) FROM faculty AS T1 JOIN degrees AS T2 ON T1.faculty = T2.Id JOIN campuses AS T3 ON T2.campus = T3.id WHERE T3.year = 2001 ORDER BY T2.degrees LIMIT 1"}
{"answer":"SELECT Date, LOCATION FROM performance","question":"What are the dates and locations of performances?","context":"CREATE TABLE performance (Date VARCHAR, LOCATION VARCHAR)","generation":"SELECT Date, LOCATION FROM performance"}
{"answer":"SELECT Party, COUNT(*) FROM people GROUP BY Party","question":"Show different parties of people along with the number of people in each party.","context":"CREATE TABLE people (Party VARCHAR)","generation":"SELECT Party, COUNT(*) FROM people GROUP BY Party"}
{"answer":"SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1","question":"What are the forename and surname of the driver who has the smallest laptime?","context":"CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR); CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR)","generation":"SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1"}
{"answer":"SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of route that has the highest number of deliveries.","context":"CREATE TABLE Delivery_Routes (route_name VARCHAR, route_id VARCHAR); CREATE TABLE Delivery_Route_Locations (route_id VARCHAR)","generation":"SELECT T1.route_name FROM Delivery_Routes AS T1 JOIN Delivery_Route_Locations AS T2 ON T1.route_id = T2.route_id GROUP BY T1.route_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Pilot_name FROM pilot WHERE NOT Pilot_ID IN (SELECT Pilot_ID FROM pilot_record)","question":"List the names of pilots that do not have any record.","context":"CREATE TABLE pilot_record (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR)","generation":"SELECT Pilot_name FROM pilot WHERE NOT Pilot_ID IN (SELECT Pilot_ID FROM pilot_record)"}
{"answer":"SELECT COUNT(DISTINCT source_system_code) FROM CMI_cross_references","question":"How many different source system code for the cmi cross references are there?","context":"CREATE TABLE CMI_cross_references (source_system_code VARCHAR)","generation":"SELECT COUNT(DISTINCT source_system_code) FROM CMI_cross_references"}
{"answer":"SELECT COUNT(*) FROM EVENTS WHERE NOT event_id IN (SELECT event_id FROM Participants_in_Events)","question":"How many events did not have any participants?","context":"CREATE TABLE EVENTS (event_id VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR)","generation":"SELECT COUNT(*) FROM EVENTS WHERE NOT event_id IN (SELECT event_id FROM Participants_in_Events)"}
{"answer":"SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1","question":"Find the id of the candidate who got the lowest oppose rate.","context":"CREATE TABLE candidate (Candidate_ID VARCHAR, oppose_rate VARCHAR)","generation":"SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1"}
{"answer":"SELECT company, main_industry FROM company WHERE NOT company_id IN (SELECT company_id FROM station_company)","question":"Show company name and main industry without a gas station.","context":"CREATE TABLE station_company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR); CREATE TABLE company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR)","generation":"SELECT T1.company, T1.main_industry FROM company AS T1 JOIN station_company AS T2 ON T1.company_id = T2.company_id WHERE T2.main_industry <> \"Gas Station\""}
{"answer":"SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType","question":"What is the average base price of different bed type? List bed type and average base price.","context":"CREATE TABLE Rooms (bedType VARCHAR, basePrice INTEGER)","generation":"SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType"}
{"answer":"SELECT COUNT(*) FROM web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser)","question":"How many accelerators are not compatible with the browsers listed ?","context":"CREATE TABLE accelerator_compatible_browser (id VARCHAR, accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, accelerator_id VARCHAR)","generation":"SELECT COUNT(*) FROM web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser)"}
{"answer":"SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers","question":"Show ids, first names, last names, and phones for all customers.","context":"CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)","generation":"SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers"}
{"answer":"SELECT SUM(amount_piad), AVG(amount_piad) FROM claim_headers","question":"Find the total and average amount paid in claim headers.","context":"CREATE TABLE claim_headers (amount_piad INTEGER)","generation":"SELECT SUM(amount_paid), AVG(amount_paid) FROM claim_headers"}
{"answer":"SELECT POSITION, AVG(Points) FROM player GROUP BY POSITION","question":"List the position of players and the average number of points of players of each position.","context":"CREATE TABLE player (POSITION VARCHAR, Points INTEGER)","generation":"SELECT POSITION, AVG(Points) FROM player GROUP BY POSITION"}
{"answer":"SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id","question":"What is the average latitude and longitude of the starting points of all trips?","context":"CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)","generation":"SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id"}
{"answer":"SELECT SUM(no_of_customers) FROM bank WHERE city = 'New York City'","question":"Find the number of customers in the banks at New York City.","context":"CREATE TABLE bank (no_of_customers INTEGER, city VARCHAR)","generation":"SELECT SUM(no_of_customers) FROM bank WHERE city = \"New York City\""}
{"answer":"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'","question":"What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?","context":"CREATE TABLE enzyme (id VARCHAR, name VARCHAR); CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR, medicine_id VARCHAR, enzyme_id VARCHAR)","generation":"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T2.name = 'Aripiprazole' AND T3.name = 'ALA synthase'"}
{"answer":"SELECT Name FROM technician WHERE Team <> \"NYY\"","question":"List the name of technicians whose team is not \"NYY\".","context":"CREATE TABLE technician (Name VARCHAR, Team VARCHAR)","generation":"SELECT Name FROM technician WHERE Team <> \"NYY\""}
{"answer":"SELECT Party FROM party WHERE NOT Party_ID IN (SELECT Party FROM election)","question":"What are the names of parties that do not have delegates in election?","context":"CREATE TABLE election (Party VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT Party FROM party WHERE NOT Party_ID IN (SELECT Party FROM election)"}
{"answer":"SELECT COUNT(DISTINCT acc_type) FROM customer","question":"How many distinct types of accounts are there?","context":"CREATE TABLE customer (acc_type VARCHAR)","generation":"SELECT COUNT(DISTINCT acc_type) FROM customer"}
{"answer":"SELECT product_id, COUNT(DISTINCT order_id) FROM Order_items GROUP BY product_id","question":"Show the product ids and the number of unique orders containing each product.","context":"CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR)","generation":"SELECT product_id, COUNT(DISTINCT order_id) FROM Order_items GROUP BY product_id"}
{"answer":"SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name","question":"Please list the name and id of all artists that have at least 3 albums in alphabetical order.","context":"CREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)","generation":"SELECT T1.Name, T1.ArtistID FROM ARTIST AS T1 JOIN ALBUM AS T2 ON T1.ArtistID = T2.ArtistId GROUP BY T1.ArtistID HAVING COUNT(*) >= 3 ORDER BY T1.Name"}
{"answer":"SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1","question":"What is the name of the player with the largest number of votes?","context":"CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)","generation":"SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1"}
{"answer":"SELECT DISTINCT POSITION FROM match_season","question":"Show all distinct positions of matches.","context":"CREATE TABLE match_season (POSITION VARCHAR)","generation":"SELECT DISTINCT POSITION FROM match_season"}
{"answer":"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1","question":"Find the name of instructor who is the advisor of the student who has the highest number of total credits.","context":"CREATE TABLE student (id VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT T3.name FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id JOIN instructor AS T3 ON T1.i_id = T3.id ORDER BY T2.tot_cred DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM party_events","question":"How many party events do we have?","context":"CREATE TABLE party_events (Id VARCHAR)","generation":"SELECT COUNT(*) FROM party_events"}
{"answer":"SELECT SUM(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\"","question":"How long does student Linda Smith spend on the restaurant in total?","context":"CREATE TABLE Visits_Restaurant (Spent INTEGER); CREATE TABLE Student (Spent INTEGER)","generation":"SELECT SUM(T1.Spent) FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.Spent = T2.Spent WHERE T1.Name = \"Linda Smith\""}
{"answer":"SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Which policy type has the most records in the database?","context":"CREATE TABLE available_policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT s_id) FROM advisor","question":"How many students have advisors?","context":"CREATE TABLE advisor (s_id VARCHAR)","generation":"SELECT COUNT(*) FROM advisor"}
{"answer":"SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date LIMIT 1","question":"Which company started the earliest the maintenance contract? Show the company name.","context":"CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_start_date VARCHAR)","generation":"SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date LIMIT 1"}
{"answer":"SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year","question":"Show gas station id, location, and manager_name for all gas stations ordered by open year.","context":"CREATE TABLE gas_station (station_id VARCHAR, LOCATION VARCHAR, manager_name VARCHAR, open_year VARCHAR)","generation":"SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year"}
{"answer":"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\"","question":"Return all the committees that have delegates from Democratic party.","context":"CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)","generation":"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\""}
{"answer":"SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80","question":"When and in what zip code did max temperature reach 80?","context":"CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)","generation":"SELECT date, zip_code FROM weather WHERE max_temperature_f = 80"}
{"answer":"SELECT T3.service_id, T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY COUNT(*) LIMIT 1","question":"Which service id and type has the least number of participants?","context":"CREATE TABLE Participants_in_Events (Participant_ID VARCHAR, Event_ID VARCHAR); CREATE TABLE services (Service_Type_Code VARCHAR, service_id VARCHAR); CREATE TABLE EVENTS (service_id VARCHAR, Event_ID VARCHAR); CREATE TABLE participants (Participant_ID VARCHAR)","generation":"SELECT T1.service_id, T1.Service_Type_Code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id JOIN Participants_in_Events AS T3 ON T2.Event_ID = T3.Event_ID JOIN participants AS T4 ON T3.Participant_ID = T4.Participant_ID GROUP BY T1.service_id ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT T1.staff_name, T3.first_name, T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id","question":"Which staff have contacted which engineers? List the staff name and the engineer first name and last name.","context":"CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR, engineer_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)","generation":"SELECT T1.staff_name, T2.first_name, T2.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T3 ON T1.staff_id = T3.contact_staff_id JOIN Maintenance_Engineers AS T2 ON T3.engineer_id = T2.engineer_id"}
{"answer":"SELECT COUNT(*) FROM follows GROUP BY f1","question":"Find the number of followers for each user.","context":"CREATE TABLE follows (f1 VARCHAR)","generation":"SELECT COUNT(*) FROM follows GROUP BY f1"}
{"answer":"SELECT T1.teacher_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3","question":"Find the ids and first names of the 3 teachers that have the most number of assessment notes?","context":"CREATE TABLE Assessment_Notes (teacher_id VARCHAR); CREATE TABLE Teachers (first_name VARCHAR, teacher_id VARCHAR)","generation":"SELECT T1.teacher_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3"}
{"answer":"SELECT name, open_date FROM church ORDER BY open_date DESC LIMIT 3","question":"Show the name and opening year for three churches that opened most recently.","context":"CREATE TABLE church (name VARCHAR, open_date VARCHAR)","generation":"SELECT name, open_date FROM church ORDER BY open_date DESC LIMIT 3"}
{"answer":"SELECT ResName, Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1","question":"Which restaurants have highest rating? List the restaurant name and its rating.","context":"CREATE TABLE Restaurant (ResName VARCHAR, Rating VARCHAR)","generation":"SELECT ResName, Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1"}
{"answer":"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION <> \"Tokyo , Japan\"","question":"What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?","context":"CREATE TABLE wrestler (Reign VARCHAR, LOCATION VARCHAR)","generation":"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION <> \"Tokyo,Japan\""}
{"answer":"SELECT dept_name FROM department ORDER BY dept_name","question":"list names of all departments ordered by their names.","context":"CREATE TABLE department (dept_name VARCHAR)","generation":"SELECT dept_name FROM department ORDER BY dept_name"}
{"answer":"SELECT COUNT(*) FROM Accounts","question":"How many accounts do we have?","context":"CREATE TABLE Accounts (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Accounts"}
{"answer":"SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards","question":"Show the number of card types.","context":"CREATE TABLE Customers_Cards (card_type_code VARCHAR)","generation":"SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards"}
{"answer":"SELECT title FROM item WHERE NOT i_id IN (SELECT i_id FROM review)","question":"Find the names of the items that did not receive any review.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (title VARCHAR, i_id VARCHAR)","generation":"SELECT title FROM item WHERE NOT i_id IN (SELECT i_id FROM review)"}
{"answer":"SELECT COUNT(*) FROM savings WHERE balance > (SELECT AVG(balance) FROM savings)","question":"How many accounts have a savings balance above the average savings balance?","context":"CREATE TABLE savings (balance INTEGER)","generation":"SELECT COUNT(*) FROM savings WHERE balance > (SELECT AVG(balance) FROM savings)"}
{"answer":"SELECT COUNT(DISTINCT customer_id) FROM Accounts","question":"How many customers have an account?","context":"CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT COUNT(DISTINCT customer_id) FROM Accounts"}
{"answer":"SELECT COUNT(DISTINCT last_name) FROM actor","question":"How many different last names do the actors and actresses have?","context":"CREATE TABLE actor (last_name VARCHAR)","generation":"SELECT COUNT(DISTINCT last_name) FROM actor"}
{"answer":"SELECT COUNT(*), nationality FROM constructors GROUP BY nationality","question":"What are the numbers of constructors for different nationalities?","context":"CREATE TABLE constructors (nationality VARCHAR)","generation":"SELECT COUNT(*), nationality FROM constructors GROUP BY nationality"}
{"answer":"SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING COUNT(*) > 1","question":"Find the name of the students who have more than one advisor?","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE advisor (s_id VARCHAR)","generation":"SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING COUNT(*) > 1"}
{"answer":"SELECT COUNT(DISTINCT Country) FROM climber","question":"How many distinct countries are the climbers from?","context":"CREATE TABLE climber (Country VARCHAR)","generation":"SELECT COUNT(DISTINCT Country) FROM climber"}
{"answer":"SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions)","question":"Show ids for all transactions whose amounts are greater than the average.","context":"CREATE TABLE Financial_transactions (transaction_id VARCHAR, transaction_amount INTEGER)","generation":"SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions)"}
{"answer":"SELECT T1.region_name, COUNT(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id","question":"Show the name for regions and the number of storms for each region.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)","generation":"SELECT T1.region_name, COUNT(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_name"}
{"answer":"SELECT T3.Name, T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance","question":"Show the names of journalists and the names of the events they reported in ascending order","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Name VARCHAR, Event_ID VARCHAR, Event_Attendance VARCHAR)","generation":"SELECT T1.Name, T2.Name FROM journalist AS T1 JOIN news_report AS T2 ON T1.journalist_ID = T2.journalist_ID JOIN event AS T3 ON T2.Event_ID = T3.Event_ID ORDER BY T3.Event_Attendance"}
{"answer":"SELECT dept_name FROM department ORDER BY budget LIMIT 1","question":"Which department has the lowest budget?","context":"CREATE TABLE department (dept_name VARCHAR, budget VARCHAR)","generation":"SELECT dept_name FROM department ORDER BY budget LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM club_rank WHERE Total < 10","question":"How many clubs have total medals less than 10?","context":"CREATE TABLE club_rank (Total INTEGER)","generation":"SELECT COUNT(*) FROM club_rank WHERE Total < 10"}
{"answer":"SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'","question":"How many different locations does the school with code BUS has?","context":"CREATE TABLE department (dept_address VARCHAR, school_code VARCHAR)","generation":"SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'"}
{"answer":"SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3","question":"Find the names of the top 3 departments that provide the largest amount of courses?","context":"CREATE TABLE course (dept_name VARCHAR)","generation":"SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3"}
{"answer":"SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"","question":"Show the players and years played for players from team \"Columbus Crew\".","context":"CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)","generation":"SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""}
{"answer":"SELECT name FROM people WHERE NOT people_id IN (SELECT people_id FROM candidate)","question":"what are the names of people who did not participate in the candidate election.","context":"CREATE TABLE candidate (name VARCHAR, people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)","generation":"SELECT name FROM people WHERE NOT people_id IN (SELECT people_id FROM candidate)"}
{"answer":"SELECT email FROM user_profiles WHERE name = 'Mary'","question":"Find the emails of the user named \"Mary\".","context":"CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)","generation":"SELECT email FROM user_profiles WHERE name = \"Mary\""}
{"answer":"SELECT T1.line_1, AVG(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id","question":"What are the line 1 and average monthly rentals of all student addresses?","context":"CREATE TABLE Addresses (line_1 VARCHAR, address_id VARCHAR); CREATE TABLE Student_Addresses (monthly_rental INTEGER, address_id VARCHAR)","generation":"SELECT T1.line_1, AVG(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T1.line_1"}
{"answer":"SELECT COUNT(*) FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)","question":"Find the number of users who did not write any review.","context":"CREATE TABLE review (u_id VARCHAR); CREATE TABLE useracct (u_id VARCHAR)","generation":"SELECT COUNT(*) FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)"}
{"answer":"SELECT Advisor FROM Student WHERE StuID = 1004","question":"Who is the advisor of student with ID 1004?","context":"CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)","generation":"SELECT Advisor FROM Student WHERE StuID = 1004"}
{"answer":"SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY SUM(T2.amount) DESC LIMIT 1","question":"Find the name of bank branch that provided the greatest total amount of loans.","context":"CREATE TABLE loan (branch_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)","generation":"SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY SUM(T2.amount) DESC LIMIT 1"}
{"answer":"SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree <> 'Ph.D.'","question":"Find the first name and office of history professor who did not get a Ph.D. degree.","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = \"History\" AND T2.prof_high_degree <> \"Ph.D.\""}
{"answer":"SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200","question":"Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.","context":"CREATE TABLE film (title VARCHAR, replacement_cost INTEGER, LENGTH VARCHAR, rating VARCHAR)","generation":"SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200"}
{"answer":"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5","question":"Find out 5 customers who most recently purchased something. List customers' first and last name.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)","generation":"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.invoice_date DESC LIMIT 5"}
{"answer":"SELECT name FROM church ORDER BY open_date DESC","question":"List all church names in descending order of opening date.","context":"CREATE TABLE church (name VARCHAR, open_date VARCHAR)","generation":"SELECT name FROM church ORDER BY open_date DESC"}
{"answer":"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3","question":"Find the list of attribute data types possessed by more than 3 attribute definitions.","context":"CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)","generation":"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3"}
{"answer":"SELECT Height, Weight FROM people ORDER BY Height DESC","question":"List the height and weight of people in descending order of height.","context":"CREATE TABLE people (Height VARCHAR, Weight VARCHAR)","generation":"SELECT Height, Weight FROM people ORDER BY Height DESC"}
{"answer":"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK","question":"What are the durations of the longest and the shortest tracks in milliseconds?","context":"CREATE TABLE TRACK (Milliseconds INTEGER)","generation":"SELECT Milliseconds FROM TRACK ORDER BY Milliseconds DESC LIMIT 1"}
{"answer":"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\"","question":"Find the first names of all customers that live in Brazil and have an invoice.","context":"CREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)","generation":"SELECT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\""}
{"answer":"SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common apartment type code among apartments with more than 1 bathroom.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count INTEGER)","generation":"SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = \"Nokia Corporation\" AND T1.Type <> \"Text\"","question":"List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT T1.Hardware_Model_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.Type <> \"Text\" AND T1.Hardware_Model_name LIKE \"%Nokia Corporation%\""}
{"answer":"SELECT COUNT(*) FROM county_public_safety","question":"How many counties are there?","context":"CREATE TABLE county_public_safety (Id VARCHAR)","generation":"SELECT COUNT(*) FROM county_public_safety"}
{"answer":"SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID","question":"Show the title and publication dates of books.","context":"CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)","generation":"SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID"}
{"answer":"SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num","question":"What is the first names of the professors from the history department who do not teach a class.","context":"CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num"}
{"answer":"SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121","question":"Find the id of courses which are registered or attended by student whose id is 121?","context":"CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)","generation":"SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121"}
{"answer":"SELECT COUNT(*) FROM Rooms WHERE bedType = \"King\"","question":"Find the number of rooms with a king bed.","context":"CREATE TABLE Rooms (bedType VARCHAR)","generation":"SELECT COUNT(*) FROM Rooms WHERE bedType = \"King\""}
{"answer":"SELECT SUM(beds) FROM Rooms WHERE bedtype = 'King'","question":"How many king beds are there?","context":"CREATE TABLE Rooms (beds INTEGER, bedtype VARCHAR)","generation":"SELECT SUM(beds) FROM Rooms WHERE bedtype = \"King\""}
{"answer":"SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\"","question":"What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?","context":"CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)","generation":"SELECT AVG(Milliseconds) FROM TRACK AS T1 JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = \"Latin\" OR T2.Name = \"Pop\""}
{"answer":"SELECT T1.club_id, T1.club_name, COUNT(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id","question":"How many coaches does each club has? List the club id, name and the number of coaches.","context":"CREATE TABLE club (club_id VARCHAR, club_name VARCHAR); CREATE TABLE coach (club_id VARCHAR)","generation":"SELECT T1.club_id, T1.club_name, COUNT(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id"}
{"answer":"SELECT apt_number FROM Apartments ORDER BY room_count","question":"Return all the apartment numbers sorted by the room count in ascending order.","context":"CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)","generation":"SELECT apt_number FROM Apartments ORDER BY room_count"}
{"answer":"SELECT t2.state_province_county, COUNT(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county","question":"List the state names and the number of customers living in each state.","context":"CREATE TABLE customer_addresses (address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR)","generation":"SELECT T1.state_province_county, COUNT(*) FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T1.state_province_county"}
{"answer":"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" OR t2.Company_name = \"Nokia Corporation\"","question":"List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT T1.Hardware_Model_name FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode = T2.Graphics_mode WHERE T2.Type = \"Nokia Corporation\" OR T2.Type = \"Graphics\""}
{"answer":"SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY COUNT(*) LIMIT 1","question":"Which school has the smallest amount of professors?","context":"CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)","generation":"SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT T2.account_name, T1.account_id, COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id","question":"Show the account name, id and the number of transactions for each account.","context":"CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)","generation":"SELECT T1.account_name, T1.account_id, COUNT(*) FROM Accounts AS T1 JOIN Financial_transactions AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id"}
{"answer":"SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\"","question":"Show the names of pilots from team \"Bradley\" or \"Fordham\".","context":"CREATE TABLE pilot (Pilot_name VARCHAR, Team VARCHAR)","generation":"SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\""}
{"answer":"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country","question":"What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.","context":"CREATE TABLE perpetrator (Country VARCHAR)","generation":"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country"}
{"answer":"SELECT i_id FROM item WHERE title = \"orange\"","question":"Find the id of the item whose title is \"orange\".","context":"CREATE TABLE item (i_id VARCHAR, title VARCHAR)","generation":"SELECT i_id FROM item WHERE title = \"orange\""}
{"answer":"SELECT COUNT(DISTINCT T2.id), COUNT(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name","question":"Find the total number of students and total number of instructors for each department.","context":"CREATE TABLE department (dept_name VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR); CREATE TABLE instructor (dept_name VARCHAR, id VARCHAR)","generation":"SELECT T1.dept_name, COUNT(*) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T1.dept_name UNION SELECT T1.dept_name, COUNT(*) FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name GROUP BY T1.dept_name"}
{"answer":"SELECT LOCATION, COUNT(*) FROM performance GROUP BY LOCATION","question":"Show different locations and the number of performances at each location.","context":"CREATE TABLE performance (LOCATION VARCHAR)","generation":"SELECT LOCATION, COUNT(*) FROM performance GROUP BY LOCATION"}
{"answer":"SELECT campus FROM campuses WHERE YEAR < 1800","question":"Find the name of the campuses opened before 1800.","context":"CREATE TABLE campuses (campus VARCHAR, YEAR INTEGER)","generation":"SELECT campus FROM campuses WHERE YEAR < 1800"}
{"answer":"SELECT T3.Party_Theme, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID","question":"Show the themes of parties and the names of the party hosts.","context":"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_Theme VARCHAR, Party_ID VARCHAR)","generation":"SELECT T1.Party_Theme, T2.Name FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID JOIN HOST AS T3 ON T2.Host_ID = T3.Host_ID"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1","question":"What is the name of the body builder with the greatest body weight?","context":"CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1"}
{"answer":"SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1","question":"which poll source does the highest oppose rate come from?","context":"CREATE TABLE candidate (poll_source VARCHAR, oppose_rate VARCHAR)","generation":"SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1"}
{"answer":"SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common birth place of people?","context":"CREATE TABLE people (Birth_Place VARCHAR)","generation":"SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1","question":"What is the description of the type of the company who concluded its contracts most recently?","context":"CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_end_date VARCHAR); CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR, company_type_code VARCHAR); CREATE TABLE Ref_Company_Types (company_type_code VARCHAR)","generation":"SELECT T1.company_type_code, T2.company_name FROM Ref_Company_Types AS T1 JOIN Third_Party_Companies AS T2 ON T1.company_type_code = T2.company_type_code JOIN Maintenance_Contracts AS T3 ON T2.company_id = T3.maintenance_contract_company_id ORDER BY T3.contract_end_date DESC LIMIT 1"}
{"answer":"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1","question":"Find id of the candidate who most recently accessed the course?","context":"CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)","generation":"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1"}
{"answer":"SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3","question":"Show teams that have suffered more than three eliminations.","context":"CREATE TABLE elimination (Team VARCHAR)","generation":"SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3"}
{"answer":"SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"","question":"What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?","context":"CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (ROM_MiB INTEGER, Model_name VARCHAR)","generation":"SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\""}
{"answer":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance","question":"Find the name of accounts whose checking balance is higher than corresponding saving balance.","context":"CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance INTEGER)","generation":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance"}
{"answer":"SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(*) LIMIT 1","question":"Which staff handled least number of payments? List the full name and the id.","context":"CREATE TABLE payment (staff_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM artist","question":"How many artists do we have?","context":"CREATE TABLE artist (Id VARCHAR)","generation":"SELECT COUNT(*) FROM artist"}
{"answer":"SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes LIMIT 1","question":"What is the party of the representative that has the smallest number of votes.","context":"CREATE TABLE representative (Party VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)","generation":"SELECT T1.Party FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY T2.Votes LIMIT 1"}
{"answer":"SELECT company, main_industry FROM company WHERE headquarters <> 'USA'","question":"Show the company name and the main industry for all companies whose headquarters are not from USA.","context":"CREATE TABLE company (company VARCHAR, main_industry VARCHAR, headquarters VARCHAR)","generation":"SELECT company, main_industry FROM company WHERE headquarters <> \"USA\""}
{"answer":"SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code","question":"Show all card type codes and the number of cards in each type.","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code"}
{"answer":"SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1","question":"Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count VARCHAR, bedroom_count VARCHAR, room_count INTEGER)","generation":"SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments ORDER BY room_count DESC LIMIT 1"}
{"answer":"SELECT headquarters, COUNT(*) FROM company GROUP BY headquarters","question":"List all headquarters and the number of companies in each headquarter.","context":"CREATE TABLE company (headquarters VARCHAR)","generation":"SELECT headquarters, COUNT(*) FROM company GROUP BY headquarters"}
{"answer":"SELECT COUNT(DISTINCT Governor) FROM party","question":"How many distinct governors are there?","context":"CREATE TABLE party (Governor VARCHAR)","generation":"SELECT COUNT(DISTINCT Governor) FROM party"}
{"answer":"SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'","question":"Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.","context":"CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR)","generation":"SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'"}
{"answer":"SELECT document_id, COUNT(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id","question":"For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.","context":"CREATE TABLE Circulation_History (document_id VARCHAR, employee_id VARCHAR)","generation":"SELECT document_id, COUNT(*) FROM Circulation_History GROUP BY document_id"}
{"answer":"SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\"","question":"Who belong to the institution \"University of Oxford\"? Show the first names and last names.","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)","generation":"SELECT T1.fname, T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T3.name = \"University of Oxford\""}
{"answer":"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'","question":"What is the id of the instructor who advises of all students from History department?","context":"CREATE TABLE advisor (s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)","generation":"SELECT T1.id FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id JOIN student AS T3 ON T2.s_id = T3.id WHERE T3.dept_name = \"History\""}
{"answer":"SELECT MAX(booked_count), MIN(booked_count), AVG(booked_count) FROM products_booked","question":"What are the maximum, minimum, and average booked count for the products booked?","context":"CREATE TABLE products_booked (booked_count INTEGER)","generation":"SELECT MAX(booked_count), MIN(booked_count), AVG(booked_count) FROM products_booked"}
{"answer":"SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id","question":"Show the account id and the number of transactions for each account","context":"CREATE TABLE Financial_transactions (account_id VARCHAR)","generation":"SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id"}
{"answer":"SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb ,  Becker and Wyman'","question":"What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?","context":"CREATE TABLE customer_master_index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE cmi_cross_references (source_system_code VARCHAR, master_customer_id VARCHAR)","generation":"SELECT DISTINCT T1.source_system_code FROM cmi_cross_references AS T1 JOIN customer_master_index AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.cmi_details = 'Gottlieb, Becker and Wyman'"}
{"answer":"SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5","question":"Find the names and publication dates of all catalogs that have catalog level number greater than 5.","context":"CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)","generation":"SELECT T1.catalog_name, T1.date_of_publication FROM catalogs AS T1 JOIN catalog_structure AS T2 ON T1.catalog_id = T2.catalog_id WHERE T2.catalog_level > 5"}
{"answer":"SELECT Character, Duration FROM actor","question":"What are the characters and duration of actors?","context":"CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)","generation":"SELECT Character, Duration FROM actor"}
{"answer":"SELECT COUNT(*) FROM climber","question":"How many climbers are there?","context":"CREATE TABLE climber (Id VARCHAR)","generation":"SELECT COUNT(*) FROM climber"}
{"answer":"SELECT Age FROM people ORDER BY Height DESC LIMIT 1","question":"What is the age of the tallest person?","context":"CREATE TABLE people (Age VARCHAR, Height VARCHAR)","generation":"SELECT Age FROM people ORDER BY Height DESC LIMIT 1"}
{"answer":"SELECT T1.cmi_cross_ref_id, T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING COUNT(*) >= 1","question":"What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.","context":"CREATE TABLE Council_Tax (cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)","generation":"SELECT T1.cmi_cross_ref_id, T2.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id"}
{"answer":"SELECT departure_date, arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"","question":"Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.","context":"CREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)","generation":"SELECT departure_date, arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\""}
{"answer":"SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name and address of the department that has the highest number of students.","context":"CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)","generation":"SELECT T1.dept_name, T1.dept_address FROM department AS T1 JOIN student AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT city_code FROM Student","question":"Show all cities where students live.","context":"CREATE TABLE Student (city_code VARCHAR)","generation":"SELECT DISTINCT city_code FROM Student"}
{"answer":"SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\"","question":"How many papers are published by the institution \"Tokohu University\"?","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT COUNT(*) FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T3.name = \"Tokohu University\""}
{"answer":"SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common interaction type between enzymes and medicine? And how many are there?","context":"CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR)","generation":"SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\"","question":"List all tracks bought by customer Daan Peeters.","context":"CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T2.invoice_id = T3.id JOIN customers AS T4 ON T3.customer_id = T4.id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\""}
{"answer":"SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1","question":"List the main industry with highest total market value and its number of companies.","context":"CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)","generation":"SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1"}
{"answer":"SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'","question":"Where does the staff member with the first name Elsa live?","context":"CREATE TABLE staff (address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)","generation":"SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = \"Elsa\""}
{"answer":"SELECT Name FROM phone WHERE Carrier = \"Sprint\" OR Carrier = \"TMobile\"","question":"Show the names of phones with carrier either \"Sprint\" or \"TMobile\".","context":"CREATE TABLE phone (Name VARCHAR, Carrier VARCHAR)","generation":"SELECT Name FROM phone WHERE Carrier = \"Sprint\" OR Carrier = \"TMobile\""}
{"answer":"SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"","question":"Find all the papers published by the institution \"Google\".","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T3.name = \"Google\""}
{"answer":"SELECT T2.name, COUNT(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id","question":"Show all artist names and the number of exhibitions for each artist.","context":"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (artist_id VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM artist AS T1 JOIN exhibition AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.name"}
{"answer":"SELECT Name FROM county_public_safety ORDER BY Population DESC","question":"List the names of counties in descending order of population.","context":"CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)","generation":"SELECT Name FROM county_public_safety ORDER BY Population DESC"}
{"answer":"SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\"","question":"Find the number of professors in accounting department.","context":"CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR)","generation":"SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = \"Accounting\""}
{"answer":"SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) LIMIT 1","question":"Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.","context":"CREATE TABLE phone (Company_name VARCHAR)","generation":"SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3","question":"List the distinct ranges of the mountains with the top 3 prominence.","context":"CREATE TABLE mountain (Range VARCHAR, Prominence VARCHAR)","generation":"SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3"}
{"answer":"SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)","question":"Show names for all aircrafts with distances more than the average.","context":"CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)","generation":"SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)"}
{"answer":"SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"","question":"Find the dates of assessment notes for students with first name \"Fanny\".","context":"CREATE TABLE Students (student_id VARCHAR, first_name VARCHAR); CREATE TABLE Assessment_Notes (date_of_notes VARCHAR, student_id VARCHAR)","generation":"SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\""}
{"answer":"SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department","question":"What are the maximum and minimum budget of the departments?","context":"CREATE TABLE department (budget_in_billions INTEGER)","generation":"SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department"}
{"answer":"SELECT director FROM Movie WHERE director <> \"null\" GROUP BY director HAVING COUNT(*) = 1","question":"What are the names of the directors who made exactly one movie excluding director NULL?","context":"CREATE TABLE Movie (director VARCHAR)","generation":"SELECT director FROM Movie GROUP BY director HAVING COUNT(*) = 1"}
{"answer":"SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common nationality for journalists.","context":"CREATE TABLE journalist (Nationality VARCHAR)","generation":"SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Fname, Lname FROM Student WHERE Major = 600","question":"List all students' first names and last names who majored in 600.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Major VARCHAR)","generation":"SELECT Fname, Lname FROM Student WHERE Major = 600"}
{"answer":"SELECT COUNT(*) FROM building WHERE height_feet > (SELECT AVG(height_feet) FROM building) OR floors > (SELECT AVG(floors) FROM building)","question":"Show the number of buildings with a height above the average or a number of floors above the average.","context":"CREATE TABLE building (height_feet INTEGER, floors INTEGER)","generation":"SELECT COUNT(*) FROM building WHERE height_feet > (SELECT AVG(height_feet) FROM building) OR floors > (SELECT AVG(floors) FROM building)"}
{"answer":"SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30","question":"Show the country where people older than 30 and younger than 25 are from.","context":"CREATE TABLE people (country VARCHAR, age INTEGER)","generation":"SELECT country FROM people WHERE age > 30 INTERSECT SELECT country FROM people WHERE age < 25"}
{"answer":"SELECT Date FROM perpetrator ORDER BY Killed DESC","question":"List the date of perpetrators in descending order of the number of people killed.","context":"CREATE TABLE perpetrator (Date VARCHAR, Killed VARCHAR)","generation":"SELECT Date FROM perpetrator ORDER BY Killed DESC"}
{"answer":"SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","question":"Show names of cities and names of counties they are in.","context":"CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)","generation":"SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"}
{"answer":"SELECT COUNT(*) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = \"England\"","question":"How many leagues are there in England?","context":"CREATE TABLE League (country_id VARCHAR); CREATE TABLE Country (id VARCHAR, name VARCHAR)","generation":"SELECT COUNT(*) FROM League AS T1 JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = \"England\""}
{"answer":"SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches)","question":"Find the name of instructors who didn't teach any courses?","context":"CREATE TABLE teaches (name VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches)"}
{"answer":"SELECT COUNT(DISTINCT party_name) FROM party","question":"How many parties do we have?","context":"CREATE TABLE party (party_name VARCHAR)","generation":"SELECT COUNT(*) FROM party"}
{"answer":"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10","question":"List title of albums have the number of tracks greater than 10.","context":"CREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)","generation":"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.title HAVING COUNT(*) > 10"}
{"answer":"SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id","question":"List the employees who have not showed up in any circulation history of documents. List the employee's name.","context":"CREATE TABLE Circulation_History (employee_name VARCHAR); CREATE TABLE Employees (employee_name VARCHAR)","generation":"SELECT employee_name FROM Employees WHERE NOT employee_name IN (SELECT employee_name FROM Circulation_History)"}
{"answer":"SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1","question":"What are the birth date and birth place of the body builder with the highest total points?","context":"CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, Birth_Place VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Birth_Date, T1.Birth_Place FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Total DESC LIMIT 1"}
{"answer":"SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'","question":"Find the title of course that is provided by both Statistics and Psychology departments.","context":"CREATE TABLE course (title VARCHAR, dept_name VARCHAR)","generation":"SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'"}
{"answer":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC","question":"Show names of actors in descending order of the year their musical is awarded.","context":"CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC"}
{"answer":"SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown","question":"What are the hometowns of gymnasts and the corresponding number of gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Hometown, COUNT(*) FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID GROUP BY T1.Hometown"}
{"answer":"SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1","question":"Find the name and gender of the candidate who got the highest support rate.","context":"CREATE TABLE candidate (people_id VARCHAR, support_rate VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)","generation":"SELECT T1.name, T1.sex FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id ORDER BY T2.support_rate DESC LIMIT 1"}
{"answer":"SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id","question":"Show the name of each county along with the corresponding number of delegates from that county.","context":"CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_name"}
{"answer":"SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"","question":"What is the average unit price of rock tracks?","context":"CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)","generation":"SELECT AVG(T1.UnitPrice) FROM TRACK AS T1 JOIN GENRE AS T2 ON T1.GenreId = T2.GenreId WHERE T2.Name = \"Rock\""}
{"answer":"SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\"","question":"What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?","context":"CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR)","generation":"SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\""}
{"answer":"SELECT COUNT(DISTINCT payment_method) FROM customers","question":"How many different payment methods are there?","context":"CREATE TABLE customers (payment_method VARCHAR)","generation":"SELECT COUNT(DISTINCT payment_method) FROM customers"}
{"answer":"SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE Budgeted > 6000 OR YEAR < 2003 ORDER BY T2.total_budget_percent_invested, T2.total_budget_percent_budgeted","question":"List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.","context":"CREATE TABLE school (School_name VARCHAR, Mascot VARCHAR, IHSAA_Football_Class VARCHAR, school_id VARCHAR); CREATE TABLE budget (school_id VARCHAR, total_budget_percent_invested VARCHAR, total_budget_percent_budgeted VARCHAR)","generation":"SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE T2.total_budget_percent_budgeted > 6000 OR T1.School_name < 2003 ORDER BY T2.total_budget_percent_invested, T2.total_budget_percent_budgeted"}
{"answer":"SELECT title FROM Movie WHERE director = \"James Cameron\" OR YEAR < 1980","question":"What are names of the movies that are either made before 1980 or directed by James Cameron?","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)","generation":"SELECT title FROM Movie WHERE YEAR < 1980 OR director = \"James Cameron\""}
{"answer":"SELECT AVG(RAM_MiB) FROM chip_model WHERE NOT model_name IN (SELECT chip_model FROM phone)","question":"Find the average ram mib size of the chip models that are never used by any phone.","context":"CREATE TABLE chip_model (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR); CREATE TABLE phone (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR)","generation":"SELECT AVG(RAM_MiB) FROM chip_model WHERE NOT chip_model IN (SELECT chip_model FROM phone)"}
{"answer":"SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31","question":"What are the dates in which the mean sea level pressure was between 30.3 and 31?","context":"CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)","generation":"SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"}
{"answer":"SELECT DISTINCT card_type_code FROM Customers_Cards","question":"Show all card type codes.","context":"CREATE TABLE Customers_Cards (card_type_code VARCHAR)","generation":"SELECT DISTINCT card_type_code FROM Customers_Cards"}
{"answer":"SELECT Company, Investor FROM entrepreneur","question":"List the companies and the investors of entrepreneurs.","context":"CREATE TABLE entrepreneur (Company VARCHAR, Investor VARCHAR)","generation":"SELECT Company, Investor FROM entrepreneur"}
{"answer":"SELECT school_name FROM school ORDER BY school_name","question":"Show all school names in alphabetical order.","context":"CREATE TABLE school (school_name VARCHAR)","generation":"SELECT school_name FROM school ORDER BY school_name"}
{"answer":"SELECT COUNT(*) FROM address WHERE district = 'California'","question":"How many addresses are in the district of California?","context":"CREATE TABLE address (district VARCHAR)","generation":"SELECT COUNT(*) FROM address WHERE district = \"California\""}
{"answer":"SELECT T1.name, COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id","question":"For each user, find their name and the number of reviews written by them.","context":"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T1.u_id"}
{"answer":"SELECT COUNT(*) FROM useracct","question":"How many users are there?","context":"CREATE TABLE useracct (Id VARCHAR)","generation":"SELECT COUNT(*) FROM useracct"}
{"answer":"SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5","question":"What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.","context":"CREATE TABLE Movie (director VARCHAR, title VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)","generation":"SELECT T1.director, T2.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5"}
{"answer":"SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"","question":"What is the gender of the student Linda Smith?","context":"CREATE TABLE Student (Sex VARCHAR, Fname VARCHAR, Lname VARCHAR)","generation":"SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\""}
{"answer":"SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = \"null\"","question":"Find the names of all reviewers who have ratings with a NULL value for the date.","context":"CREATE TABLE Rating (rID VARCHAR); CREATE TABLE Reviewer (rID VARCHAR)","generation":"SELECT T1.rName FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.date IS NULL"}
{"answer":"SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\"","question":"Return the apartment numbers of the apartments with type code \"Flat\".","context":"CREATE TABLE Apartments (apt_number VARCHAR, apt_type_code VARCHAR)","generation":"SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\""}
{"answer":"SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id","question":"Find the name and credit score of the customers who have some loans.","context":"CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id"}
{"answer":"SELECT COUNT(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\"","question":"How many papers have \"Atsushi Ohori\" published?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT COUNT(*) FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = \"Atsushi\" AND T1.lname = \"Ohori\""}
{"answer":"SELECT COUNT(*) FROM ASSESSMENT_NOTES","question":"How many assessment notes are there in total?","context":"CREATE TABLE ASSESSMENT_NOTES (Id VARCHAR)","generation":"SELECT COUNT(*) FROM ASSESSMENT_NOTES"}
{"answer":"SELECT COUNT(*), T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id","question":"How many assets does each maintenance contract contain? List the number and the contract id.","context":"CREATE TABLE Assets (maintenance_contract_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_id VARCHAR)","generation":"SELECT COUNT(*), T1.maintenance_contract_id FROM Assets AS T1 JOIN Maintenance_Contracts AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id"}
{"answer":"SELECT fname FROM authors WHERE lname = \"Ueno\"","question":"What is the first name of the author with last name \"Ueno\"?","context":"CREATE TABLE authors (fname VARCHAR, lname VARCHAR)","generation":"SELECT fname FROM authors WHERE lname = \"Ueno\""}
{"answer":"SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'","question":"Find the location and all games score of the school that has Clemson as its team name.","context":"CREATE TABLE basketball_match (All_Games VARCHAR, school_id VARCHAR); CREATE TABLE university (location VARCHAR, school_id VARCHAR)","generation":"SELECT T1.location, T2.All_Games FROM university AS T1 JOIN basketball_match AS T2 ON T1.school_id = T2.school_id WHERE T2.All_Games = \"Clemson\""}
{"answer":"SELECT minister FROM party WHERE party_name <> 'Progress Party'","question":"Show all ministers who do not belong to Progress Party.","context":"CREATE TABLE party (minister VARCHAR, party_name VARCHAR)","generation":"SELECT minister FROM party WHERE party_name <> 'Progress Party'"}
{"answer":"SELECT T2.dept_name, AVG(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY AVG(T1.stu_gpa) DESC LIMIT 1","question":"What is the name and the average gpa of department whose students have the highest average gpa?","context":"CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, dept_code VARCHAR)","generation":"SELECT T1.dept_name, AVG(T2.stu_gpa) FROM department AS T1 JOIN student AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_name ORDER BY AVG(T2.stu_gpa) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM tweets","question":"Find the number of tweets in record.","context":"CREATE TABLE tweets (Id VARCHAR)","generation":"SELECT COUNT(*) FROM tweets"}
{"answer":"SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2","question":"Show the name of colleges that have at least two players.","context":"CREATE TABLE match_season (College VARCHAR)","generation":"SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2"}
{"answer":"SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\"","question":"Show the names of journalists from \"England\" or \"Wales\".","context":"CREATE TABLE journalist (Name VARCHAR, Nationality VARCHAR)","generation":"SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\""}
{"answer":"SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id","question":"Find the last names of teachers who are not involved in any detention.","context":"CREATE TABLE Teachers (last_name VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR); CREATE TABLE Detention (teacher_id VARCHAR)","generation":"SELECT last_name FROM Teachers WHERE NOT teacher_id IN (SELECT teacher_id FROM Detention)"}
{"answer":"SELECT COUNT(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR","question":"Find the number of courses provided in each semester and year.","context":"CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)","generation":"SELECT COUNT(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR"}
{"answer":"SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance","question":"What are the id of students who registered courses or attended courses?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance"}
{"answer":"SELECT Name FROM TRACK WHERE Name LIKE '%you%'","question":"Find the names of all the tracks that contain the word \"you\".","context":"CREATE TABLE TRACK (Name VARCHAR)","generation":"SELECT Name FROM TRACK WHERE Name LIKE \"%you%\""}
{"answer":"SELECT COUNT(*) FROM products WHERE NOT product_id IN (SELECT product_id FROM Order_items)","question":"How many products were not included in any order?","context":"CREATE TABLE products (product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR)","generation":"SELECT COUNT(*) FROM products WHERE NOT product_id IN (SELECT product_id FROM Order_items)"}
{"answer":"SELECT first_name, last_name FROM Maintenance_Engineers WHERE NOT engineer_id IN (SELECT engineer_id FROM Engineer_Visits)","question":"Which engineers have never visited to maintain the assets? List the engineer first name and last name.","context":"CREATE TABLE Engineer_Visits (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id"}
{"answer":"SELECT COUNT(*) FROM Student","question":"How many students are there?","context":"CREATE TABLE Student (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Student"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1","question":"What is the customer id, first and last name with least number of accounts.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'","question":"What is the phone number and postal code of the address 1031 Daugavpils Parkway?","context":"CREATE TABLE address (phone VARCHAR, postal_code VARCHAR, address VARCHAR)","generation":"SELECT phone, postal_code FROM address WHERE address = \"1031 Daugavpils Parkway\""}
{"answer":"SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1","question":"What is the entry name of the most expensive catalog (in USD)?","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)","generation":"SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1"}
{"answer":"SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\"","question":"Show the dates of performances with attending members whose roles are \"Violin\".","context":"CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Member_ID VARCHAR, Role VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT T1.Date FROM performance AS T1 JOIN member_attendance AS T2 ON T1.Performance_ID = T2.Performance_ID JOIN member AS T3 ON T2.Member_ID = T3.Member_ID WHERE T3.Role = \"Violin\""}
{"answer":"SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB LIMIT 1","question":"Which model has the least amount of RAM? List the model name and the amount of RAM.","context":"CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR)","generation":"SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB LIMIT 1"}
{"answer":"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB > 32","question":"List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.","context":"CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT T1.Hardware_Model_name FROM phone AS T1 JOIN chip_model AS T2 ON T1.chip_model = T2.Model_name JOIN screen_mode AS T3 ON T1.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T2.RAM_MiB > 32"}
{"answer":"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"","question":"Hom many albums does the artist \"Metallica\" have?","context":"CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)","generation":"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\""}
{"answer":"SELECT County_name FROM county ORDER BY Population LIMIT 3","question":"Show the 3 counties with the smallest population.","context":"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)","generation":"SELECT County_name FROM county ORDER BY Population LIMIT 3"}
{"answer":"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5","question":"What are the distinct hometowns of gymnasts with total points more than 57.5?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points INTEGER); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT DISTINCT T1.Hometown FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID WHERE T2.Total_Points > 57.5"}
{"answer":"SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'","question":"Find the name and email of the user whose name contains the word \u2018Swift\u2019.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)","generation":"SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'"}
{"answer":"SELECT Case_burden FROM county_public_safety ORDER BY Population DESC","question":"Show the case burden of counties in descending order of population.","context":"CREATE TABLE county_public_safety (Case_burden VARCHAR, Population VARCHAR)","generation":"SELECT Case_burden FROM county_public_safety ORDER BY Population DESC"}
{"answer":"SELECT Total FROM body_builder ORDER BY Total","question":"List the total scores of body builders in ascending order.","context":"CREATE TABLE body_builder (Total VARCHAR)","generation":"SELECT Total FROM body_builder ORDER BY Total"}
{"answer":"SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the customer who has the most policies listed?","context":"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)","generation":"SELECT T1.customer_name FROM customers AS T1 JOIN customers_policies AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\"","question":"What is the role of the employee named Koby?","context":"CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR); CREATE TABLE Employees (role_code VARCHAR, employee_name VARCHAR)","generation":"SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\""}
{"answer":"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height","question":"List the names of gymnasts in ascending order by their heights.","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Height VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID ORDER BY T1.Height"}
{"answer":"SELECT city_code, COUNT(*) FROM Student GROUP BY city_code","question":"Show all cities and corresponding number of students.","context":"CREATE TABLE Student (city_code VARCHAR)","generation":"SELECT city_code, COUNT(*) FROM Student GROUP BY city_code"}
{"answer":"SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date LIMIT 1","question":"What is the first name and the last name of the customer who made the earliest rental?","context":"CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR); CREATE TABLE rental (customer_id VARCHAR, rental_date VARCHAR)","generation":"SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date LIMIT 1"}
{"answer":"SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'","question":"List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.","context":"CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name FROM browser AS T1 JOIN web_client_accelerator AS T2 ON T1.id = T2.id JOIN accelerator_compatible_browser AS T3 ON T2.id = T3.accelerator_id WHERE T3.browser_id = (SELECT T4.id FROM browser AS T4 JOIN web_client_accelerator AS T5 ON T4.id = T5.id JOIN accelerator_compatible_browser AS T6 ON T5.id = T6.accelerator_id WHERE T6.browser_id = (SELECT T7.id FROM browser AS T7 WHERE T7.name = 'CACHEbox')) INTERSECT SELECT T8.name FROM browser AS T8 JOIN web_client_accelerator AS T9 ON T8.id = T9.id JOIN accelerator_compatible_browser AS T10 ON T9.id = T10.accelerator_id WHERE T10.browser_id = (SELECT T11.id FROM browser AS T11 WHERE T11.name = 'Fasterfox')"}
{"answer":"SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10","question":"Find the zip code in which the average mean visibility is lower than 10.","context":"CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)","generation":"SELECT zip_code FROM weather WHERE mean_visibility_miles < 10"}
{"answer":"SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num","question":"Find the first names and offices of all instructors who have taught some course and also find the course description.","context":"CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_fname, T2.prof_office, T3.crs_description FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num JOIN course AS T3 ON T2.crs_code = T3.crs_code"}
{"answer":"SELECT forename, surname FROM drivers WHERE nationality = \"German\"","question":"Find the forename and surname of drivers whose nationality is German?","context":"CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, nationality VARCHAR)","generation":"SELECT forename, surname FROM drivers WHERE nationality = \"German\""}
{"answer":"SELECT AVG(damage_millions_USD), MAX(damage_millions_USD) FROM storm WHERE max_speed > 1000","question":"Show the average and maximum damage for all storms with max speed higher than 1000.","context":"CREATE TABLE storm (damage_millions_USD INTEGER, max_speed INTEGER)","generation":"SELECT AVG(damage_millions_USD), MAX(max_speed) FROM storm WHERE max_speed > 1000"}
{"answer":"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*) > 2","question":"Find all the policy types that are used by more than 2 customers.","context":"CREATE TABLE policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*) > 2"}
{"answer":"SELECT Name FROM people WHERE Age = 35 OR Age = 36","question":"Show the names of people aged either 35 or 36.","context":"CREATE TABLE people (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name FROM people WHERE Age = 35 OR Age = 36"}
{"answer":"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1","question":"Find the name of the user who tweeted more than once, and number of tweets tweeted by them.","context":"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.name HAVING COUNT(*) > 1"}
{"answer":"SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1","question":"What is the nationality of the journalist with the largest number of years working?","context":"CREATE TABLE journalist (Nationality VARCHAR, Years_working VARCHAR)","generation":"SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1"}
{"answer":"SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme","question":"Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.","context":"CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)","generation":"SELECT T1.Name, T1.age, T2.Theme FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T2.Journal_ID = T3.Journal_ID ORDER BY T3.Theme"}
{"answer":"SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\"","question":"What is the description of document type 'Paper'?","context":"CREATE TABLE Ref_Document_Types (document_type_description VARCHAR, document_type_code VARCHAR)","generation":"SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = 'Paper'"}
{"answer":"SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000","question":"Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.","context":"CREATE TABLE entrepreneur (Investor VARCHAR, Money_Requested INTEGER)","generation":"SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000"}
{"answer":"SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code","question":"Show the booking status code and the corresponding number of bookings.","context":"CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR)","generation":"SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"}
{"answer":"SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)","question":"What is the average longitude of stations that never had bike availability more than 10?","context":"CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)","generation":"SELECT AVG(T1.long) FROM station AS T1 JOIN status AS T2 ON T1.station_id = T2.station_id WHERE T2.bikes_available > 10"}
{"answer":"SELECT T3.Name, COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name","question":"Show the names of journalists and the number of events they reported.","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)","generation":"SELECT T1.Name, COUNT(*) FROM journalist AS T1 JOIN news_report AS T2 ON T1.journalist_ID = T2.journalist_ID JOIN event AS T3 ON T2.Event_ID = T3.Event_ID GROUP BY T1.Name"}
{"answer":"SELECT T2.title, T1.rID, T1.stars, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID","question":"Find the title and star rating of the movie that got the least rating star for each reviewer.","context":"CREATE TABLE Rating (rID VARCHAR, stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT T1.title, T2.stars FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T2.rID ORDER BY MIN(T2.stars)"}
{"answer":"SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5","question":"What is the first name, gpa and phone number of the top 5 students with highest gpa?","context":"CREATE TABLE student (stu_gpa VARCHAR, stu_phone VARCHAR, stu_fname VARCHAR)","generation":"SELECT stu_fname, stu_gpa, stu_phone FROM student ORDER BY stu_gpa DESC LIMIT 5"}
{"answer":"SELECT team_name FROM basketball_match ORDER BY All_Home DESC","question":"List names of all teams in the basketball competition, ordered by all home scores in descending order.","context":"CREATE TABLE basketball_match (team_name VARCHAR, All_Home VARCHAR)","generation":"SELECT team_name FROM basketball_match ORDER BY All_Home DESC"}
{"answer":"SELECT AVG(Gold) FROM club_rank","question":"What is the average number of gold medals for clubs?","context":"CREATE TABLE club_rank (Gold INTEGER)","generation":"SELECT AVG(Gold) FROM club_rank"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\"","question":"Show the first name and last name for the customer with account name 900.","context":"CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_name = \"900\""}
{"answer":"SELECT Name FROM editor WHERE Age > 25","question":"List the names of editors who are older than 25.","context":"CREATE TABLE editor (Name VARCHAR, Age INTEGER)","generation":"SELECT Name FROM editor WHERE Age > 25"}
{"answer":"SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount > 8.5 GROUP BY school_id HAVING COUNT(*) > 1)","question":"Find the number of schools that have more than one donator whose donation amount is less than 8.5.","context":"CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)","generation":"SELECT COUNT(*) FROM endowment AS T1 JOIN endowment AS T2 ON T1.school_id = T2.school_id WHERE T1.amount < 8.5 AND T2.amount < 8.5"}
{"answer":"SELECT name, date FROM races ORDER BY date DESC LIMIT 1","question":"What is the name and date of the most recent race?","context":"CREATE TABLE races (name VARCHAR, date VARCHAR)","generation":"SELECT name, date FROM races ORDER BY date DESC LIMIT 1"}
{"answer":"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'","question":"What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?","context":"CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, medicine_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'"}
{"answer":"SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100","question":"Find the room number of the rooms which can sit 50 to 100 students and their buildings.","context":"CREATE TABLE classroom (building VARCHAR, room_number VARCHAR, capacity INTEGER)","generation":"SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100"}
{"answer":"SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase","question":"Find the purchase time, age and address of each member, and show the results in the order of purchase time.","context":"CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)","generation":"SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase"}
{"answer":"SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID","question":"Show the names of phones and the districts of markets they are on.","context":"CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE market (District VARCHAR, Market_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)","generation":"SELECT T1.Name, T2.District FROM phone AS T1 JOIN phone_market AS T3 ON T1.Phone_ID = T3.Phone_ID JOIN market AS T2 ON T3.Market_ID = T2.Market_ID"}
{"answer":"SELECT county, COUNT(*), SUM(enrollment) FROM school GROUP BY county","question":"Show each county along with the number of schools and total enrollment in each county.","context":"CREATE TABLE school (county VARCHAR, enrollment INTEGER)","generation":"SELECT county, COUNT(*), SUM(enrollment) FROM school GROUP BY county"}
{"answer":"SELECT state_province_county FROM addresses WHERE NOT address_id IN (SELECT employee_address_id FROM Employees)","question":"Find the states which do not have any employee in their record.","context":"CREATE TABLE Employees (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR)","generation":"SELECT state_province_county FROM addresses WHERE NOT address_id IN (SELECT employee_address_id FROM Employees)"}
{"answer":"SELECT council_tax_id, cmi_cross_ref_id FROM parking_fines","question":"List the council tax ids and their related cmi cross references of all the parking fines.","context":"CREATE TABLE parking_fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)","generation":"SELECT council_tax_id, cmi_cross_ref_id FROM parking_fines"}
{"answer":"SELECT AVG(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"","question":"What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?","context":"CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (raceid VARCHAR, year VARCHAR, name VARCHAR)","generation":"SELECT AVG(T1.fastestlapspeed) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Monaco Grand Prix' AND T2.year = 2008"}
{"answer":"SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1","question":"Find the dates on which more than one revisions were made.","context":"CREATE TABLE Catalogs (date_of_latest_revision VARCHAR)","generation":"SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1"}
{"answer":"SELECT draft_details FROM Document_Drafts WHERE document_id = 7","question":"What is draft detail of the document with id 7?","context":"CREATE TABLE Document_Drafts (draft_details VARCHAR, document_id VARCHAR)","generation":"SELECT draft_details FROM Document_Drafts WHERE document_id = 7"}
{"answer":"SELECT COUNT(*) FROM Allergy_type WHERE allergytype = \"animal\"","question":"How many allergies have type animal?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT COUNT(*) FROM Allergy_type WHERE allergytype = \"animal\""}
{"answer":"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15","question":"What distinct accelerator names are compatible with the browswers that have market share higher than 15?","context":"CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE browser (id VARCHAR, market_share INTEGER)","generation":"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15"}
{"answer":"SELECT SUM(credits), dept_name FROM course GROUP BY dept_name","question":"Find the total credits of courses provided by different department.","context":"CREATE TABLE course (dept_name VARCHAR, credits INTEGER)","generation":"SELECT SUM(credits), dept_name FROM course GROUP BY dept_name"}
{"answer":"SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")","question":"List the first and last name of the students who do not have any food type allergy.","context":"CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT T1.fname, T1.lname FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T3.allergytype = \"Food\""}
{"answer":"SELECT preferred_foot, AVG(overall_rating) FROM Player_Attributes GROUP BY preferred_foot","question":"What is the average rating for right-footed players and left-footed players?","context":"CREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)","generation":"SELECT AVG(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'Right'"}
{"answer":"SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS","question":"Show the race class and number of races in each class.","context":"CREATE TABLE race (CLASS VARCHAR)","generation":"SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS"}
{"answer":"SELECT Title FROM book WHERE Writer <> \"Elaine Lee\"","question":"What are the titles of the books whose writer is not \"Elaine Lee\"?","context":"CREATE TABLE book (Title VARCHAR, Writer VARCHAR)","generation":"SELECT Title FROM book WHERE Writer <> \"Elaine Lee\""}
{"answer":"SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC","question":"List the companies of entrepreneurs in descending order of money requested.","context":"CREATE TABLE entrepreneur (Company VARCHAR, Money_Requested VARCHAR)","generation":"SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC"}
{"answer":"SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) LIMIT 1","question":"What is the name of department where has the smallest number of professors?","context":"CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT T1.dept_name FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_name ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000","question":"How many employees have salary between 100000 and 200000?","context":"CREATE TABLE Employee (salary INTEGER)","generation":"SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000"}
{"answer":"SELECT amount FROM payment ORDER BY amount DESC LIMIT 1","question":"What is the largest payment amount?","context":"CREATE TABLE payment (amount VARCHAR)","generation":"SELECT MAX(amount) FROM payment"}
{"answer":"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id","question":"Find distinct cities of addresses of people?","context":"CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)","generation":"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id"}
{"answer":"SELECT * FROM Assessment_Notes ORDER BY date_of_notes","question":"List all information about the assessment notes sorted by date in ascending order.","context":"CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)","generation":"SELECT * FROM Assessment_Notes ORDER BY date_of_notes"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\"","question":"Find the papers which have \"Olin Shivers\" as an author.","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN authors AS T3 ON T2.authid = T3.authid WHERE T3.fname = \"Olin\" AND T3.lname = \"Shivers\""}
{"answer":"SELECT T1.date_incident_start, date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\"","question":"Find the start and end dates of behavior incidents of students with last name \"Fahey\".","context":"CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, last_name VARCHAR)","generation":"SELECT T1.date_incident_start, T1.date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\""}
{"answer":"SELECT COUNT(*) FROM participants WHERE participant_type_code = 'Organizer'","question":"How many participants belong to the type 'Organizer'?","context":"CREATE TABLE participants (participant_type_code VARCHAR)","generation":"SELECT COUNT(*) FROM participants WHERE participant_type_code = 'Organizer'"}
{"answer":"SELECT SUM(amount) FROM payment","question":"What is the total amount of all payments?","context":"CREATE TABLE payment (amount INTEGER)","generation":"SELECT SUM(amount) FROM payment"}
{"answer":"SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)","question":"Find the id and address of the shops whose score is below the average score.","context":"CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)","generation":"SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)"}
{"answer":"SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017","question":"Find the distinct names of all races held between 2014 and 2017?","context":"CREATE TABLE races (name VARCHAR, YEAR INTEGER)","generation":"SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017"}
{"answer":"SELECT COUNT(DISTINCT id) FROM teaches","question":"How many different instructors have taught some course?","context":"CREATE TABLE teaches (id VARCHAR)","generation":"SELECT COUNT(DISTINCT id) FROM teaches"}
{"answer":"SELECT Party_Theme, LOCATION FROM party","question":"What are the themes and locations of parties?","context":"CREATE TABLE party (Party_Theme VARCHAR, LOCATION VARCHAR)","generation":"SELECT Party_Theme, LOCATION FROM party"}
{"answer":"SELECT other_account_details FROM Accounts WHERE account_name = \"338\"","question":"Show other account details for account with name 338.","context":"CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)","generation":"SELECT other_account_details FROM Accounts WHERE account_name = \"338\""}
{"answer":"SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the institution type with the largest number of institutions.","context":"CREATE TABLE institution (TYPE VARCHAR)","generation":"SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Character FROM actor ORDER BY age DESC","question":"What are the characters of actors in descending order of age?","context":"CREATE TABLE actor (Character VARCHAR, age VARCHAR)","generation":"SELECT Character FROM actor ORDER BY age DESC"}
{"answer":"SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch","question":"List the snatch score and clean jerk score of body builders in ascending order of snatch score.","context":"CREATE TABLE body_builder (Snatch VARCHAR, Clean_Jerk VARCHAR)","generation":"SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2","question":"Show id, first and last names for all customers with at least two cards.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2"}
{"answer":"SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING AVG(T1.attendance) > 200","question":"Show all artist names with an average exhibition attendance over 200.","context":"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)","generation":"SELECT T1.name FROM artist AS T1 JOIN exhibition AS T2 ON T1.artist_id = T2.artist_id JOIN exhibition_record AS T3 ON T2.exhibition_id = T3.exhibition_id GROUP BY T1.name HAVING AVG(T3.attendance) > 200"}
{"answer":"SELECT COUNT(*) FROM customers WHERE city = \"Prague\"","question":"How many customers live in Prague city?","context":"CREATE TABLE customers (city VARCHAR)","generation":"SELECT COUNT(*) FROM customers WHERE city = \"Prague\""}
{"answer":"SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"","question":"Show names for all employees who do not have certificate of Boeing 737-800.","context":"CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT name FROM Employee WHERE NOT eid IN (SELECT eid FROM Certificate WHERE aid = 'Boeing 737-800')"}
{"answer":"SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1","question":"Find the name and checking balance of the account with the lowest saving balance.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"}
{"answer":"SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1","question":"What is the level name of the cheapest catalog (in USD)?","context":"CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)","generation":"SELECT T1.catalog_level_name FROM catalog_structure AS T1 JOIN catalog_contents AS T2 ON T1.catalog_level_number = T2.catalog_level_number ORDER BY T2.price_in_dollars LIMIT 1"}
{"answer":"SELECT Adults FROM Reservations WHERE CheckIn = \"2010-10-23\" AND FirstName = \"CONRAD\" AND LastName = \"SELBIG\"","question":"How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?","context":"CREATE TABLE Reservations (Adults VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)","generation":"SELECT Adults FROM Reservations WHERE LastName = \"SELBIG\" AND FirstName = \"CONRAD\" AND CheckIn = \"2010-10-23\""}
{"answer":"SELECT DISTINCT Major FROM Student","question":"Show all majors.","context":"CREATE TABLE Student (Major VARCHAR)","generation":"SELECT DISTINCT Major FROM Student"}
{"answer":"SELECT COUNT(DISTINCT incident_type_code) FROM Behavior_Incident","question":"How many distinct incident type codes are there?","context":"CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)","generation":"SELECT COUNT(DISTINCT incident_type_code) FROM Behavior_Incident"}
{"answer":"SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID","question":"Show the album names, ids and the number of tracks for each album.","context":"CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)","generation":"SELECT T1.Title, T1.AlbumId, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumID GROUP BY T1.AlbumId"}
{"answer":"SELECT MAX(t1.low_temperature), AVG(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"","question":"Give me the maximum low temperature and average precipitation at the Amersham station.","context":"CREATE TABLE weekly_weather (low_temperature INTEGER, precipitation INTEGER, station_id VARCHAR); CREATE TABLE station (id VARCHAR, network_name VARCHAR)","generation":"SELECT T1.low_temperature, T1.precipitation FROM weekly_weather AS T1 JOIN station AS T2 ON T1.station_id = T2.id WHERE T2.network_name = \"Met Office\" AND T2.id = \"Amersham\" ORDER BY T1.low_temperature DESC LIMIT 1"}
{"answer":"SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150","question":"Find the name of rooms whose base price is between 120 and 150.","context":"CREATE TABLE rooms (roomname VARCHAR, baseprice INTEGER)","generation":"SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150"}
{"answer":"SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1","question":"List name, dates active, and number of deaths for all storms with at least 1 death.","context":"CREATE TABLE storm (name VARCHAR, dates_active VARCHAR, number_deaths VARCHAR)","generation":"SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths > 0"}
{"answer":"SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2","question":"What are the booking start and end dates of the apartments with more than 2 bedrooms?","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)","generation":"SELECT T1.booking_start_date, T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2"}
{"answer":"SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"","question":"What is the title, phone and hire date of Nancy Edwards?","context":"CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""}
{"answer":"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\"","question":"How many tracks are in the AAC audio file media type?","context":"CREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)","generation":"SELECT COUNT(*) FROM TRACK AS T1 JOIN MEDIATYPE AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T2.Name = \"AAC audio file\""}
{"answer":"SELECT asset_model FROM Assets WHERE NOT asset_id IN (SELECT asset_id FROM Fault_Log)","question":"Which assets did not incur any fault log? List the asset model.","context":"CREATE TABLE Fault_Log (asset_model VARCHAR, asset_id VARCHAR); CREATE TABLE Assets (asset_model VARCHAR, asset_id VARCHAR)","generation":"SELECT asset_model FROM Assets WHERE NOT asset_id IN (SELECT asset_id FROM Fault_Log)"}
{"answer":"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1","question":"Find the id and name of the most expensive base price room.","context":"CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)","generation":"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1"}
{"answer":"SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\"","question":"What is the reviewer id of Daniel Lewis?","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)","generation":"SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\""}
{"answer":"SELECT title FROM Movie WHERE director = 'Steven Spielberg'","question":"Find the titles of all movies directed by steven spielberg.","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR)","generation":"SELECT title FROM Movie WHERE director = \"Steven Spielberg\""}
{"answer":"SELECT COUNT(*) FROM people WHERE is_male = 'F' AND age > 30","question":"How many female people are older than 30 in our record?","context":"CREATE TABLE people (is_male VARCHAR, age VARCHAR)","generation":"SELECT COUNT(*) FROM people WHERE is_male = \"F\" AND age > 30"}
{"answer":"SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'","question":"Find the names of departments that are located in Houston.","context":"CREATE TABLE dept_locations (dnumber VARCHAR, dlocation VARCHAR); CREATE TABLE department (dname VARCHAR, dnumber VARCHAR)","generation":"SELECT T1.dname FROM department AS T1 JOIN dept_locations AS T2 ON T1.dnumber = T2.dnumber WHERE T2.dlocation = \"Houston\""}
{"answer":"SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500","question":"Show the theme for exhibitions with both records of an attendance below 100 and above 500.","context":"CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)","generation":"SELECT T1.theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.attendance < 100 INTERSECT SELECT T1.theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.attendance > 500"}
{"answer":"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate","question":"Show ids for all employees who don't have a certificate.","context":"CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)","generation":"SELECT eid FROM Employee WHERE NOT eid IN (SELECT eid FROM Certificate)"}
{"answer":"SELECT MIN(salary), dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)","question":"Find the minimum salary for the departments whose average salary is above the average payment of all instructors.","context":"CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)","generation":"SELECT MIN(salary) FROM instructor WHERE dept_name IN (SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor))"}
{"answer":"SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country","question":"Show the season, the player, and the name of the country that player belongs to.","context":"CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)","generation":"SELECT T1.Season, T1.Player, T2.Country_name FROM match_season AS T1 JOIN country AS T2 ON T1.Country = T2.Country_id"}
{"answer":"SELECT name FROM people ORDER BY date_of_birth","question":"List all people names in the order of their date of birth from old to young.","context":"CREATE TABLE people (name VARCHAR, date_of_birth VARCHAR)","generation":"SELECT name FROM people ORDER BY date_of_birth"}
{"answer":"SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)","question":"Find the name of the courses that do not have any prerequisite?","context":"CREATE TABLE prereq (title VARCHAR, course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)","generation":"SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)"}
{"answer":"SELECT T1.name, AVG(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id","question":"Find each target user's name and average trust score.","context":"CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT T1.name, AVG(T2.trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T1.name"}
{"answer":"SELECT COUNT(*) FROM enzyme","question":"How many kinds of enzymes are there?","context":"CREATE TABLE enzyme (Id VARCHAR)","generation":"SELECT COUNT(DISTINCT Id) FROM enzyme"}
{"answer":"SELECT COUNT(DISTINCT Team) FROM match_season","question":"How many distinct teams are involved in match seasons?","context":"CREATE TABLE match_season (Team VARCHAR)","generation":"SELECT COUNT(DISTINCT Team) FROM match_season"}
{"answer":"SELECT SUM(number_deaths), SUM(damage_millions_USD) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)","question":"What is the total number of deaths and damage for all storms with a max speed greater than the average?","context":"CREATE TABLE storm (number_deaths INTEGER, damage_millions_USD INTEGER, max_speed INTEGER)","generation":"SELECT SUM(number_deaths), SUM(damage_millions_USD) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)"}
{"answer":"SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1","question":"List the name of the county with the largest population.","context":"CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)","generation":"SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1"}
{"answer":"SELECT T1.name, COUNT(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id","question":"For each building, show the name of the building and the number of institutions in it.","context":"CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id"}
{"answer":"SELECT name, LOCATION FROM track","question":"Show the name and location for all tracks.","context":"CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)","generation":"SELECT name, LOCATION FROM track"}
{"answer":"SELECT Team, COUNT(*) FROM technician GROUP BY Team","question":"Show different teams of technicians and the number of technicians in each team.","context":"CREATE TABLE technician (Team VARCHAR)","generation":"SELECT Team, COUNT(*) FROM technician GROUP BY Team"}
{"answer":"SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING COUNT(*) >= 2","question":"Show the names and heights of buildings with at least two institutions founded after 1880.","context":"CREATE TABLE building (name VARCHAR, height_feet VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded INTEGER)","generation":"SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING COUNT(*) >= 2"}
{"answer":"SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY COUNT(*) LIMIT 1","question":"What are the code and description of the least frequent detention type ?","context":"CREATE TABLE Ref_Detention_Type (detention_type_description VARCHAR, detention_type_code VARCHAR); CREATE TABLE Detention (detention_type_code VARCHAR)","generation":"SELECT T1.detention_type_code, T1.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id","question":"Show all product names without an order.","context":"CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR); CREATE TABLE Products (product_name VARCHAR)","generation":"SELECT product_name FROM Products WHERE NOT product_id IN (SELECT product_id FROM Order_items)"}
{"answer":"SELECT Title FROM ALBUM ORDER BY Title","question":"Please list all album titles in alphabetical order.","context":"CREATE TABLE ALBUM (Title VARCHAR)","generation":"SELECT Title FROM ALBUM ORDER BY Title"}
{"answer":"SELECT T1.student_id, T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","question":"What are the id and first name of the student whose addresses have the highest average monthly rental?","context":"CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR)","generation":"SELECT T1.student_id, T1.first_name FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"}
{"answer":"SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'","question":"Which address do not have any member with the black membership card?","context":"CREATE TABLE member (address VARCHAR, Membership_card VARCHAR)","generation":"SELECT address FROM member WHERE NOT Membership_card = 'Black'"}
{"answer":"SELECT name FROM Aircraft ORDER BY distance LIMIT 3","question":"Show the name of aircrafts with top three lowest distances.","context":"CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)","generation":"SELECT name FROM Aircraft ORDER BY distance LIMIT 3"}
{"answer":"SELECT id, name, market_share FROM browser","question":"List the ids, names and market shares of all browsers.","context":"CREATE TABLE browser (id VARCHAR, name VARCHAR, market_share VARCHAR)","generation":"SELECT id, name, market_share FROM browser"}
{"answer":"SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'","question":"Show the names for all females from Canada having a wedding in year 2016.","context":"CREATE TABLE people (name VARCHAR, people_id VARCHAR, country VARCHAR, is_male VARCHAR); CREATE TABLE wedding (female_id VARCHAR, year VARCHAR)","generation":"SELECT T1.name FROM people AS T1 JOIN wedding AS T2 ON T1.people_id = T2.female_id WHERE T1.country = \"Canada\" AND T2.year = 2016"}
{"answer":"SELECT COUNT(*) FROM journalist","question":"How many journalists are there?","context":"CREATE TABLE journalist (Id VARCHAR)","generation":"SELECT COUNT(*) FROM journalist"}
{"answer":"SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","question":"Show distinct first and last names for all customers with an account.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"}
{"answer":"SELECT document_id, COUNT(*) FROM Draft_Copies GROUP BY document_id HAVING COUNT(*) > 1","question":"Which documents have more than 1 draft copies? List document id and number of draft copies.","context":"CREATE TABLE Draft_Copies (document_id VARCHAR)","generation":"SELECT document_id, COUNT(*) FROM Draft_Copies GROUP BY document_id HAVING COUNT(*) > 1"}
{"answer":"SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount LIMIT 1","question":"Which part has the least chargeable amount? List the part id and amount.","context":"CREATE TABLE Parts (part_id VARCHAR, chargeable_amount VARCHAR)","generation":"SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount LIMIT 1"}
{"answer":"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1","question":"Find the name and checking balance of the account with the lowest savings balance.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"}
{"answer":"SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT AVG(ticket_price) FROM exhibition)","question":"What is the theme and artist name for the exhibition with a ticket price higher than the average?","context":"CREATE TABLE exhibition (ticket_price INTEGER); CREATE TABLE exhibition (theme VARCHAR, artist_id VARCHAR, ticket_price INTEGER); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)","generation":"SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT AVG(ticket_price) FROM exhibition)"}
{"answer":"SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid","question":"Find the name, checking balance and saving balance of all accounts in the bank.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid"}
{"answer":"SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name","question":"Find number of tracks in each genre?","context":"CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.id"}
{"answer":"SELECT AVG(Years_working) FROM journalist","question":"What is the average number of years spent working as a journalist?","context":"CREATE TABLE journalist (Years_working INTEGER)","generation":"SELECT AVG(Years_working) FROM journalist"}
{"answer":"SELECT campus FROM campuses WHERE LOCATION = \"Chico\"","question":"What are the names of all campuses located at Chico?","context":"CREATE TABLE campuses (campus VARCHAR, LOCATION VARCHAR)","generation":"SELECT campus FROM campuses WHERE LOCATION = \"Chico\""}
{"answer":"SELECT decor, AVG(basePrice), MIN(basePrice) FROM Rooms GROUP BY decor","question":"Find the average and minimum price of the rooms in different decor.","context":"CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)","generation":"SELECT AVG(basePrice), MIN(basePrice) FROM Rooms GROUP BY decor"}
{"answer":"SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which film has the most copies in the inventory? List both title and id.","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (film_id VARCHAR)","generation":"SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title","question":"Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.","context":"CREATE TABLE SECTION (building VARCHAR, room_number VARCHAR, semester VARCHAR, year VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR, title VARCHAR)","generation":"SELECT T1.building, T1.room_number, T1.semester, T1.year FROM SECTION AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = \"Psychology\" ORDER BY T2.title"}
{"answer":"SELECT open_date FROM church GROUP BY open_date HAVING COUNT(*) >= 2","question":"Show the opening year in whcih at least two churches opened.","context":"CREATE TABLE church (open_date VARCHAR)","generation":"SELECT open_date FROM church GROUP BY open_date HAVING COUNT(*) >= 2"}
{"answer":"SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\"","question":"Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".","context":"CREATE TABLE phone (screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE screen_mode (Char_cells VARCHAR, Pixels VARCHAR, Hardware_colours VARCHAR, Graphics_mode VARCHAR)","generation":"SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\""}
{"answer":"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\"","question":"Which artist does the album \"Balls to the Wall\" belong to?","context":"CREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)","generation":"SELECT T1.Name FROM ARTIST AS T1 JOIN ALBUM AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Title = \"Balls to the Wall\""}
{"answer":"SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1","question":"Return the apartment number with the largest number of bedrooms.","context":"CREATE TABLE Apartments (apt_number VARCHAR, bedroom_count VARCHAR)","generation":"SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1"}
{"answer":"SELECT Theme FROM farm_competition ORDER BY YEAR","question":"What are the themes of farm competitions sorted by year in ascending order?","context":"CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)","generation":"SELECT Theme FROM farm_competition ORDER BY YEAR"}
{"answer":"SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50","question":"Show the names of phones that are on market with number of shops greater than 50.","context":"CREATE TABLE market (Market_ID VARCHAR, Num_of_shops INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)","generation":"SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50"}
{"answer":"SELECT COUNT(*) FROM farm","question":"How many farms are there?","context":"CREATE TABLE farm (Id VARCHAR)","generation":"SELECT COUNT(*) FROM farm"}
{"answer":"SELECT COUNT(DISTINCT team) FROM elimination","question":"What is the number of distinct teams that suffer elimination?","context":"CREATE TABLE elimination (team VARCHAR)","generation":"SELECT COUNT(DISTINCT team) FROM elimination"}
{"answer":"SELECT title FROM albums ORDER BY title","question":"List every album ordered by album title in ascending order.","context":"CREATE TABLE albums (title VARCHAR)","generation":"SELECT title FROM albums ORDER BY title"}
{"answer":"SELECT DISTINCT T1.driverid, T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000","question":"Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?","context":"CREATE TABLE laptimes (driverid VARCHAR, milliseconds INTEGER); CREATE TABLE drivers (driverid VARCHAR, nationality VARCHAR)","generation":"SELECT T1.driverid, T2.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000 GROUP BY T1.driverid"}
{"answer":"SELECT Name FROM county_public_safety WHERE NOT County_ID IN (SELECT County_ID FROM city)","question":"List the names of counties that do not have any cities.","context":"CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)","generation":"SELECT Name FROM county_public_safety WHERE NOT County_ID IN (SELECT County_ID FROM city)"}
{"answer":"SELECT Name FROM technician WHERE Age = 36 OR Age = 37","question":"Show the name of technicians aged either 36 or 37","context":"CREATE TABLE technician (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name FROM technician WHERE Age = 36 OR Age = 37"}
{"answer":"SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"","question":"How many stations does Mountain View city has?","context":"CREATE TABLE station (city VARCHAR)","generation":"SELECT COUNT(*) FROM station WHERE city = \"Mountain View\""}
{"answer":"SELECT COUNT(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Glenn\"","question":"How many donors have endowment for school named \"Glenn\"?","context":"CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)","generation":"SELECT COUNT(*) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Glenn\""}
{"answer":"SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0","question":"Find the first and last names of people who payed more than the rooms' base prices.","context":"CREATE TABLE Reservations (firstname VARCHAR, lastname VARCHAR, Room VARCHAR, Rate VARCHAR); CREATE TABLE Rooms (RoomId VARCHAR, basePrice VARCHAR)","generation":"SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate > T2.basePrice"}
{"answer":"SELECT student_id FROM student_course_attendance WHERE course_id = 301","question":"What are the id of students who registered course 301?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)","generation":"SELECT student_id FROM student_course_attendance WHERE course_id = 301"}
{"answer":"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3","question":"Find the name and id of the top 3 expensive rooms.","context":"CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)","generation":"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3"}
{"answer":"SELECT name FROM storm WHERE NOT storm_id IN (SELECT storm_id FROM affected_region)","question":"Show the name of storms which don't have affected region in record.","context":"CREATE TABLE affected_region (name VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT name FROM storm WHERE NOT storm_id IN (SELECT storm_id FROM affected_region)"}
{"answer":"SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM perpetrator)","question":"List the names of people that are not perpetrators.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE perpetrator (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM perpetrator)"}
{"answer":"SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC","question":"List the total points of gymnasts in descending order.","context":"CREATE TABLE gymnast (Total_Points VARCHAR)","generation":"SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"}
{"answer":"SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of the organization that has published the largest number of papers.","context":"CREATE TABLE inst (name VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT T1.name FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'","question":"List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.","context":"CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR)","generation":"SELECT T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T3.player = 'Thiago Motta'"}
{"answer":"SELECT name FROM races WHERE YEAR = 2017","question":"Find the names of all races held in 2017.","context":"CREATE TABLE races (name VARCHAR, YEAR VARCHAR)","generation":"SELECT name FROM races WHERE YEAR = 2017"}
{"answer":"SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts","question":"Show the id, the date of account opened, the account name, and other account detail for all accounts.","context":"CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR)","generation":"SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\"","question":"Find all the papers published by \"Aaron Turon\".","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN authors AS T3 ON T2.authid = T3.authid WHERE T3.fname = \"Aaron\" AND T3.lname = \"Turon\""}
{"answer":"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq","question":"Find the id of the courses that do not have any prerequisite?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)","generation":"SELECT course_id FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)"}
{"answer":"SELECT T1.WiFi, T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\"","question":"What are the wifi and screen mode type of the hardware model named \"LG-P760\"?","context":"CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE chip_model (WiFi VARCHAR, Model_name VARCHAR); CREATE TABLE screen_mode (Type VARCHAR, Graphics_mode VARCHAR)","generation":"SELECT T1.WiFi, T2.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.Graphics_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\""}
{"answer":"SELECT DISTINCT (BillingCountry) FROM INVOICE","question":"What are the distinct billing countries of the invoices?","context":"CREATE TABLE INVOICE (BillingCountry VARCHAR)","generation":"SELECT DISTINCT BillingCountry FROM INVOICE"}
{"answer":"SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"","question":"What is the age of student Linda Smith?","context":"CREATE TABLE Student (Age VARCHAR, Fname VARCHAR, Lname VARCHAR)","generation":"SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\""}
{"answer":"SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the most common genre in all tracks?","context":"CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)","generation":"SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\"","question":"What are the total scores of the body builders whose birthday contains the string \"January\" ?","context":"CREATE TABLE people (people_id VARCHAR, Birth_Date VARCHAR); CREATE TABLE body_builder (total VARCHAR, people_id VARCHAR)","generation":"SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\""}
{"answer":"SELECT Date, Name, venue FROM event ORDER BY Event_Attendance DESC","question":"Show the dates, places, and names of events in descending order of the attendance.","context":"CREATE TABLE event (Date VARCHAR, Name VARCHAR, venue VARCHAR, Event_Attendance VARCHAR)","generation":"SELECT Date, Name, venue FROM event ORDER BY Event_Attendance DESC"}
{"answer":"SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'","question":"What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'","context":"CREATE TABLE payments (payment_date VARCHAR, amount_paid VARCHAR, payment_type_code VARCHAR)","generation":"SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'"}
{"answer":"SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance","question":"Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.","context":"CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, T1.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance"}
{"answer":"SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1","question":"what is the salary and name of the employee who has the most number of aircraft certificates?","context":"CREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)","generation":"SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T2.eid ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)","question":"What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?","context":"CREATE TABLE SECTION (course_id VARCHAR, building VARCHAR, room_number VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, course_id VARCHAR); CREATE TABLE classroom (capacity INTEGER, building VARCHAR, room_number VARCHAR); CREATE TABLE classroom (capacity INTEGER)","generation":"SELECT T1.title, T1.credits FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id JOIN classroom AS T3 ON T2.building = T3.building AND T2.room_number = T3.room_number ORDER BY T3.capacity DESC LIMIT 1"}
{"answer":"SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) > 1","question":"Find the title, credit, and department name of courses that have more than one prerequisites?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, dept_name VARCHAR, course_id VARCHAR)","generation":"SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) > 1"}
{"answer":"SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"","question":"Give me a list of names and years of races that had any driver whose forename is Lewis?","context":"CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (name VARCHAR, year VARCHAR, raceid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)","generation":"SELECT T3.name, T3.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\""}
{"answer":"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4","question":"What are the names of reviewers who had rated 3 star and 4 star?","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)","generation":"SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 3 INTERSECT SELECT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE T2.stars = 4"}
{"answer":"SELECT fname, lname, address FROM employee ORDER BY Bdate","question":"list the first and last names, and the addresses of all employees in the ascending order of their birth date.","context":"CREATE TABLE employee (fname VARCHAR, lname VARCHAR, address VARCHAR, Bdate VARCHAR)","generation":"SELECT fname, lname, address FROM employee ORDER BY Bdate"}
{"answer":"SELECT flno FROM Flight WHERE distance > 2000","question":"Show flight number for all flights with more than 2000 distance.","context":"CREATE TABLE Flight (flno VARCHAR, distance INTEGER)","generation":"SELECT flno FROM Flight WHERE distance > 2000"}
{"answer":"SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the name of aircraft which fewest people have its certificate.","context":"CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)","generation":"SELECT T1.name FROM Aircraft AS T1 JOIN Certificate AS T2 ON T1.aid = T2.aid GROUP BY T1.name ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"","question":"Which authors belong to the institution \"Google\"? Show the first names and last names.","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)","generation":"SELECT T1.fname, T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T3.name = \"Google\""}
{"answer":"SELECT first_name, last_name FROM Teachers ORDER BY last_name","question":"Find the first names and last names of teachers in alphabetical order of last name.","context":"CREATE TABLE Teachers (first_name VARCHAR, last_name VARCHAR)","generation":"SELECT first_name, last_name FROM Teachers ORDER BY last_name"}
{"answer":"SELECT document_type_code FROM Ref_Document_Types","question":"What document type codes do we have?","context":"CREATE TABLE Ref_Document_Types (document_type_code VARCHAR)","generation":"SELECT document_type_code FROM Ref_Document_Types"}
{"answer":"SELECT Rating FROM Restaurant WHERE ResName = \"Subway\"","question":"What is the rating of the restaurant Subway?","context":"CREATE TABLE Restaurant (Rating VARCHAR, ResName VARCHAR)","generation":"SELECT Rating FROM Restaurant WHERE ResName = \"Subway\""}
{"answer":"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" OR T1.name = \"Susan\"","question":"Find the id of users who are followed by Mary or Susan.","context":"CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)","generation":"SELECT T1.uid FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T2.f2 = \"Mary\" OR T2.f2 = \"Susan\""}
{"answer":"SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\")","question":"Find the average age of the students who have allergies with food and animal types.","context":"CREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT AVG(T1.age) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T3.allergytype = \"Food\" INTERSECT SELECT AVG(T1.age) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T3.allergytype = \"Animal\""}
{"answer":"SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance","question":"Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)","generation":"SELECT SUM(T1.balance), T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.custid ORDER BY SUM(T1.balance) ASC"}
{"answer":"SELECT COUNT(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = \"United Kingdom\" AND t3.Event_Name = \"Annaual Meeting\"","question":"How many Annual Meeting events happened in the United Kingdom region?","context":"CREATE TABLE party_events (party_id VARCHAR, Event_Name VARCHAR); CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE party (region_id VARCHAR, party_id VARCHAR)","generation":"SELECT COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id JOIN region AS T3 ON T2.region_id = T3.region_id WHERE T3.region_name = \"United Kingdom\" AND T1.Event_Name = \"Annual Meeting\""}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3","question":"Who are the top 3 players in terms of overall rating?","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR)","generation":"SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 3"}
{"answer":"SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id","question":"For each trip, return its ending station's installation date.","context":"CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)","generation":"SELECT T1.installation_date, T2.id FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id"}
{"answer":"SELECT Votes FROM election ORDER BY Votes DESC","question":"List the votes of elections in descending order.","context":"CREATE TABLE election (Votes VARCHAR)","generation":"SELECT Votes FROM election ORDER BY Votes DESC"}
{"answer":"SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'","question":"What are the coupon amount of the coupons owned by both good and bad customers?","context":"CREATE TABLE Discount_Coupons (coupon_amount VARCHAR, coupon_id VARCHAR); CREATE TABLE customers (coupon_id VARCHAR, good_or_bad_customer VARCHAR)","generation":"SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = \"good\" INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = \"bad\""}
{"answer":"SELECT Hispanic FROM city WHERE Black > 10","question":"What are the percentage of hispanics in cities with the black percentage higher than 10?","context":"CREATE TABLE city (Hispanic VARCHAR, Black INTEGER)","generation":"SELECT (Hispanic \/ (Hispanic + Black)) FROM city WHERE Black > 10"}
{"answer":"SELECT minister FROM party ORDER BY left_office DESC LIMIT 1","question":"Return the minister who left office at the latest time.","context":"CREATE TABLE party (minister VARCHAR, left_office VARCHAR)","generation":"SELECT minister FROM party ORDER BY left_office DESC LIMIT 1"}
{"answer":"SELECT COUNT(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code","question":"Find the number of classes in each department.","context":"CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR)","generation":"SELECT COUNT(*), dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_name"}
{"answer":"SELECT T1.customer_id, T1.first_name, COUNT(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id","question":"How many bookings did each customer make? List the customer id, first name, and the count.","context":"CREATE TABLE bookings (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR)","generation":"SELECT T1.customer_id, T1.first_name, COUNT(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"}
{"answer":"SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC","question":"What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.","context":"CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR, FDA_approved VARCHAR)","generation":"SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id GROUP BY T2.medicine_id ORDER BY COUNT(*) DESC"}
{"answer":"SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1","question":"Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.","context":"CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)","generation":"SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM school","question":"How many schools are there?","context":"CREATE TABLE school (Id VARCHAR)","generation":"SELECT COUNT(*) FROM school"}
{"answer":"SELECT customer_phone FROM available_policies","question":"Find all the phone numbers.","context":"CREATE TABLE available_policies (customer_phone VARCHAR)","generation":"SELECT customer_phone FROM available_policies"}
{"answer":"SELECT Venue FROM debate ORDER BY Num_of_Audience","question":"List the venues of debates in ascending order of the number of audience.","context":"CREATE TABLE debate (Venue VARCHAR, Num_of_Audience VARCHAR)","generation":"SELECT Venue FROM debate ORDER BY Num_of_Audience"}
{"answer":"SELECT T1.staff_name, T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name, T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id","question":"What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?","context":"CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Fault_Log (recorded_by_staff_id VARCHAR)","generation":"SELECT T1.staff_name, T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id WHERE NOT T2.recorded_by_staff_id IN (SELECT contact_staff_id FROM Engineer_Visits)"}
{"answer":"SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)","question":"What are all the customer phone numbers under the most popular policy type?","context":"CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)","generation":"SELECT customer_phone FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005","question":"How many gas station are opened between 2000 and 2005?","context":"CREATE TABLE gas_station (open_year INTEGER)","generation":"SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005"}
{"answer":"SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')","question":"Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.","context":"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)","generation":"SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')"}
{"answer":"SELECT name, dept_name FROM student ORDER BY tot_cred","question":"Find the name of the students and their department names sorted by their total credits in ascending order.","context":"CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)","generation":"SELECT name, dept_name FROM student ORDER BY tot_cred"}
{"answer":"SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'","question":"What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?","context":"CREATE TABLE enzyme (product VARCHAR, chromosome VARCHAR, porphyria VARCHAR, LOCATION VARCHAR)","generation":"SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'"}
{"answer":"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\"","question":"What are the official languages of the countries of players from Maryland or Duke college?","context":"CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, College VARCHAR)","generation":"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\""}
{"answer":"SELECT Nationality, COUNT(*) FROM journalist GROUP BY Nationality","question":"Show the different nationalities and the number of journalists of each nationality.","context":"CREATE TABLE journalist (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(*) FROM journalist GROUP BY Nationality"}
{"answer":"SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'","question":"How many professors who has a either Ph.D. or MA degree?","context":"CREATE TABLE professor (prof_high_degree VARCHAR)","generation":"SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'"}
{"answer":"SELECT T2.cmi_cross_ref_id, T2.master_customer_id, COUNT(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id","question":"How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","context":"CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR); CREATE TABLE Business_Rates (cmi_cross_ref_id VARCHAR)","generation":"SELECT T1.cmi_cross_ref_id, T1.master_customer_id, COUNT(*) FROM CMI_Cross_References AS T1 JOIN Business_Rates AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id"}
{"answer":"SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"","question":"How many distinct colleges are associated with players from the team with name \"Columbus Crew\".","context":"CREATE TABLE match_season (College VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)","generation":"SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\""}
{"answer":"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')","question":"What is the title of the prerequisite class of International Finance course?","context":"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)","generation":"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id JOIN course AS T3 ON T2.prereq_id = T3.course_id WHERE T3.title = \"International Finance\""}
{"answer":"SELECT Name, Age FROM editor","question":"What are the names and ages of editors?","context":"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name, Age FROM editor"}
{"answer":"SELECT route_name FROM Delivery_Routes ORDER BY route_name","question":"List the names of all routes in alphabetic order.","context":"CREATE TABLE Delivery_Routes (route_name VARCHAR)","generation":"SELECT route_name FROM Delivery_Routes ORDER BY route_name"}
{"answer":"SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","question":"Show white percentages of cities and the crime rates of counties they are in.","context":"CREATE TABLE city (White VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR)","generation":"SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID"}
{"answer":"SELECT COUNT(DISTINCT state) FROM bank","question":"Find the number of different states which banks are located at.","context":"CREATE TABLE bank (state VARCHAR)","generation":"SELECT COUNT(DISTINCT state) FROM bank"}
{"answer":"SELECT role_description FROM ROLES WHERE role_code = \"ED\"","question":"What is the description of role code ED?","context":"CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR)","generation":"SELECT role_description FROM ROLES WHERE role_code = 'ED'"}
{"answer":"SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20","question":"How many proteins are associated with an institution in a building with at least 20 floors?","context":"CREATE TABLE institution (institution_id VARCHAR, building_id VARCHAR); CREATE TABLE building (building_id VARCHAR, floors VARCHAR); CREATE TABLE protein (institution_id VARCHAR)","generation":"SELECT COUNT(*) FROM institution AS T1 JOIN building AS T2 ON T1.building_id = T2.building_id JOIN protein AS T3 ON T1.institution_id = T3.institution_id WHERE T2.floors >= 20"}
{"answer":"SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1","question":"Find all the forenames of distinct drivers who was in position 1 as standing and won?","context":"CREATE TABLE driverstandings (driverid VARCHAR, position VARCHAR, wins VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)","generation":"SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1"}
{"answer":"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"","question":"Find all the policy type codes associated with the customer \"Dayana Robel\"","context":"CREATE TABLE customers (customer_id VARCHAR, customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)","generation":"SELECT T1.policy_type_code FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_details = \"Dayana Robel\""}
{"answer":"SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3","question":"what are the top 3 highest support rates?","context":"CREATE TABLE candidate (support_rate VARCHAR)","generation":"SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"}
{"answer":"SELECT COUNT(DISTINCT driverId) FROM results WHERE NOT raceId IN (SELECT raceId FROM races WHERE YEAR <> 2009)","question":"How many drivers did not participate in the races held in 2009?","context":"CREATE TABLE races (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR); CREATE TABLE results (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR)","generation":"SELECT COUNT(*) FROM results WHERE NOT raceId IN (SELECT raceId FROM races WHERE YEAR = 2009)"}
{"answer":"SELECT MAX(followers), SUM(followers) FROM user_profiles","question":"Find the maximum and total number of followers of all users.","context":"CREATE TABLE user_profiles (followers INTEGER)","generation":"SELECT MAX(followers), SUM(followers) FROM user_profiles"}
{"answer":"SELECT COUNT(*) FROM country","question":"How many countries are there in total?","context":"CREATE TABLE country (Id VARCHAR)","generation":"SELECT COUNT(*) FROM country"}
{"answer":"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1","question":"List the publisher of the publication with the highest price.","context":"CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)","generation":"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1"}
{"answer":"SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States'","question":"What is the average and minimum age of all artists from United States.","context":"CREATE TABLE artist (age INTEGER, country VARCHAR)","generation":"SELECT AVG(age), MIN(age) FROM artist WHERE country = \"United States\""}
{"answer":"SELECT SUM(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\"","question":"How many undergraduates are there in \"San Jose State University\" in year 2004?","context":"CREATE TABLE discipline_enrollments (undergraduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)","generation":"SELECT SUM(T1.undergraduate) FROM discipline_enrollments AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T2.campus = \"San Jose State University\" AND T1.year = 2004"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = \"4560596484842\"","question":"What is the first name, last name, and phone of the customer with card 4560596484842.","context":"CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)","generation":"SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 JOIN Customers_cards AS T2 ON T1.customer_id = T2.customer_id WHERE T2.card_number = \"4560596484842\""}
{"answer":"SELECT name, email FROM user_profiles WHERE followers > 1000","question":"Find the name and email of the users who have more than 1000 followers.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)","generation":"SELECT name, email FROM user_profiles WHERE followers > 1000"}
{"answer":"SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1","question":"which shop has happy hour most frequently? List its id and number of happy hours.","context":"CREATE TABLE happy_hour (shop_id VARCHAR)","generation":"SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\"","question":"Find the texts of assessment notes for teachers with last name \"Schuster\".","context":"CREATE TABLE Assessment_Notes (text_of_notes VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)","generation":"SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\""}
{"answer":"SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000","question":"Find the names of all instructors in Comp. Sci. department with salary > 80000.","context":"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)","generation":"SELECT name FROM instructor WHERE dept_name = \"Comp. Sci.\" AND salary > 80000"}
{"answer":"SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2","question":"find the event names that have more than 2 records.","context":"CREATE TABLE party_events (event_name VARCHAR)","generation":"SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2"}
{"answer":"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5","question":"Show card type codes with at least 5 cards.","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5"}
{"answer":"SELECT Major, COUNT(*) FROM Student GROUP BY Major ORDER BY COUNT(Major) LIMIT 1","question":"Which major has least number of students? List the major and the number of students.","context":"CREATE TABLE Student (Major VARCHAR)","generation":"SELECT Major, COUNT(*) FROM Student GROUP BY Major ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4","question":"find the ids of reviewers who did not give 4 star.","context":"CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)","generation":"SELECT rID FROM Rating WHERE stars <> 4"}
{"answer":"SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the nominee who has been nominated the greatest number of times.","context":"CREATE TABLE musical (Nominee VARCHAR)","generation":"SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id","question":"Show id, first name and last name for all customers and the number of accounts.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name, COUNT(*) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"}
{"answer":"SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'","question":"Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.","context":"CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE T2.course_code = \"CIS-220\" INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE T2.course_code = \"QM-261\""}
{"answer":"SELECT SUM(enrollment), AVG(enrollment) FROM school","question":"What are the total and average enrollment of all schools?","context":"CREATE TABLE school (enrollment INTEGER)","generation":"SELECT SUM(enrollment), AVG(enrollment) FROM school"}
{"answer":"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1","question":"List all employees in the circulation history of the document with id 1. List the employee's name.","context":"CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT T1.Name FROM Employees AS T1 JOIN Circulation_History AS T2 ON T1.Id = T2.Employee_Id WHERE T2.Document_Id = 1"}
{"answer":"SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1","question":"what is id of students who registered some courses but the least number of courses in these students?","context":"CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1"}
{"answer":"SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000","question":"Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.","context":"CREATE TABLE track (year_opened VARCHAR, seating INTEGER)","generation":"SELECT year_opened FROM track WHERE seating >= 5000 INTERSECT SELECT year_opened FROM track WHERE seating <= 4000"}
{"answer":"SELECT AVG(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID","question":"What is the average age of all gymnasts?","context":"CREATE TABLE people (Age INTEGER, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR)","generation":"SELECT AVG(T1.Age) FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID"}
{"answer":"SELECT T2.Hardware_Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32","question":"List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.","context":"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, chip_model VARCHAR)","generation":"SELECT T1.Hardware_Model_name, T1.Company_name FROM phone AS T1 JOIN chip_model AS T2 ON T1.chip_model = T2.Model_name WHERE T2.Launch_year = 2002 OR T2.RAM_MiB > 32"}
{"answer":"SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)","question":"What is the name and building of the departments whose budget is more than the average budget?","context":"CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget INTEGER)","generation":"SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)"}
{"answer":"SELECT T1.driverid, T1.forename, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) >= 2","question":"Find the id, forename and number of races of all drivers who have at least participated in two races?","context":"CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)","generation":"SELECT T1.driverid, T1.forename, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) >= 2"}
{"answer":"SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"","question":"What is the name of the institution that \"Matthias Blume\" belongs to?","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)","generation":"SELECT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = \"Matthias\" AND T1.lname = \"Blume\""}
{"answer":"SELECT name FROM artist ORDER BY year_join DESC LIMIT 1","question":"What is the name of the artist who joined latest?","context":"CREATE TABLE artist (name VARCHAR, year_join VARCHAR)","generation":"SELECT name FROM artist ORDER BY year_join DESC LIMIT 1"}
{"answer":"SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'","question":"List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.","context":"CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)","generation":"SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id JOIN department AS T3 ON T2.department_id = T3.department_id WHERE T3.name = 'Treasury' INTERSECT SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_id = T2.head_id JOIN department AS T3 ON T2.department_id = T3.department_id WHERE T3.name = 'Homeland Security'"}
{"answer":"SELECT Name FROM technician ORDER BY Age","question":"List the names of technicians in ascending order of age.","context":"CREATE TABLE technician (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name FROM technician ORDER BY Age"}
{"answer":"SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","question":"What are the ids, scores, and dates of the games which caused at least two injury accidents?","context":"CREATE TABLE game (id VARCHAR, score VARCHAR, date VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)","generation":"SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY T1.id HAVING COUNT(*) >= 2"}
{"answer":"SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality","question":"Show different nationalities along with the number of hosts of each nationality.","context":"CREATE TABLE HOST (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality"}
{"answer":"SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'","question":"what are the details of the cmi masters that have the cross reference code 'Tax'?","context":"CREATE TABLE CMI_Cross_References (master_customer_id VARCHAR, source_system_code VARCHAR); CREATE TABLE Customer_Master_Index (cmi_details VARCHAR, master_customer_id VARCHAR)","generation":"SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'"}
{"answer":"SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most frequently used carrier of the phones.","context":"CREATE TABLE phone (Carrier VARCHAR)","generation":"SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT name FROM CLub WHERE NOT Club_ID IN (SELECT Club_ID FROM player)","question":"List the names of clubs that do not have any players.","context":"CREATE TABLE player (name VARCHAR, Club_ID VARCHAR); CREATE TABLE CLub (name VARCHAR, Club_ID VARCHAR)","generation":"SELECT name FROM CLub WHERE NOT Club_ID IN (SELECT Club_ID FROM player)"}
{"answer":"SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title","question":"list in alphabetic order all course names and their instructors' names in year 2008.","context":"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE teaches (course_id VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE T1.title = '2008'"}
{"answer":"SELECT name, lat, city FROM station ORDER BY lat LIMIT 1","question":"What are the name, latitude, and city of the station with the lowest latitude?","context":"CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)","generation":"SELECT name, lat, city FROM station ORDER BY lat LIMIT 1"}
{"answer":"SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)","question":"Find the salaries of all distinct instructors that are less than the largest salary.","context":"CREATE TABLE instructor (salary INTEGER)","generation":"SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)"}
{"answer":"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"","question":"List the name of tracks belongs to genre Rock or genre Jazz.","context":"CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)","generation":"SELECT T1.name FROM tracks AS T1 JOIN genres AS T2 ON T1.genre_id = T2.id WHERE T2.name = \"Rock\" OR T2.name = \"Jazz\""}
{"answer":"SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId","question":"Find the names of artists that do not have any albums.","context":"CREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)","generation":"SELECT Name FROM ARTIST WHERE NOT ArtistId IN (SELECT ArtistId FROM ALBUM)"}
{"answer":"SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT(*) >= 2","question":"Show headquarters with at least two companies in the banking industry.","context":"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)","generation":"SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT(*) >= 2"}
{"answer":"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID","question":"What are the names of entrepreneurs?","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE entrepreneur (People_ID VARCHAR)","generation":"SELECT T1.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID"}
{"answer":"SELECT name FROM building ORDER BY height_feet DESC LIMIT 1","question":"What is the name of the tallest building?","context":"CREATE TABLE building (name VARCHAR, height_feet VARCHAR)","generation":"SELECT name FROM building ORDER BY height_feet DESC LIMIT 1"}
{"answer":"SELECT LOCATION FROM gas_station ORDER BY open_year","question":"order all gas station locations by the opening year.","context":"CREATE TABLE gas_station (LOCATION VARCHAR, open_year VARCHAR)","generation":"SELECT LOCATION FROM gas_station ORDER BY open_year"}
{"answer":"SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT(*) > 2","question":"Find the name of services that have been used for more than 2 times in first notification of loss.","context":"CREATE TABLE services (service_name VARCHAR, service_id VARCHAR); CREATE TABLE first_notification_of_loss (service_id VARCHAR)","generation":"SELECT T1.service_name FROM services AS T1 JOIN first_notification_of_loss AS T2 ON T1.service_id = T2.service_id GROUP BY T2.service_id HAVING COUNT(*) > 2"}
{"answer":"SELECT COUNT(*) FROM gymnast","question":"How many gymnasts are there?","context":"CREATE TABLE gymnast (Id VARCHAR)","generation":"SELECT COUNT(*) FROM gymnast"}
{"answer":"SELECT fname, lname FROM employee WHERE salary > 30000","question":"Return the first names and last names of employees who earn more than 30000 in salary.","context":"CREATE TABLE employee (fname VARCHAR, lname VARCHAR, salary INTEGER)","generation":"SELECT fname, lname FROM employee WHERE salary > 30000"}
{"answer":"SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1","question":"What is the transaction type that has processed the greatest total amount in transactions?","context":"CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)","generation":"SELECT transaction_type FROM Financial_transactions ORDER BY transaction_amount DESC LIMIT 1"}
{"answer":"SELECT Employees.employee_name, COUNT(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id, Circulation_History.draft_number, Circulation_History.copy_number ORDER BY COUNT(*) DESC LIMIT 1","question":"Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.","context":"CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT T1.Name, COUNT(*) FROM Employees AS T1 JOIN Circulation_History AS T2 ON T1.Id = T2.Employee_Id GROUP BY T2.Document_Id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT MAX(market_share), MIN(market_share), AVG(market_share) FROM browser","question":"What is the maximum, minimum and average market share of the listed browsers?","context":"CREATE TABLE browser (market_share INTEGER)","generation":"SELECT MAX(market_share), MIN(market_share), AVG(market_share) FROM browser"}
{"answer":"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"","question":"List Aerosmith's albums.","context":"CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)","generation":"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name = \"Aerosmith\""}
{"answer":"SELECT COUNT(DISTINCT allergy) FROM Allergy_type","question":"How many allergies are there?","context":"CREATE TABLE Allergy_type (allergy VARCHAR)","generation":"SELECT COUNT(DISTINCT allergy) FROM Allergy_type"}
{"answer":"SELECT T1.club_id, T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY COUNT(*) DESC LIMIT 1","question":"How many gold medals has the club with the most coaches won?","context":"CREATE TABLE match_result (club_id VARCHAR, gold VARCHAR); CREATE TABLE coach (club_id VARCHAR)","generation":"SELECT T1.club_id, T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Pilot_name FROM pilot ORDER BY Rank","question":"List the names of pilots in ascending order of rank.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, Rank VARCHAR)","generation":"SELECT Pilot_name FROM pilot ORDER BY Rank"}
{"answer":"SELECT title FROM film WHERE rating = 'R'","question":"What are all the movies rated as R? List the titles.","context":"CREATE TABLE film (title VARCHAR, rating VARCHAR)","generation":"SELECT title FROM film WHERE rating = \"R\""}
{"answer":"SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\"","question":"What are the names of the county that the delegates on \"Appropriations\" committee belong to?","context":"CREATE TABLE election (District VARCHAR, Committee VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\""}
{"answer":"SELECT Kids FROM Reservations WHERE CheckIn = \"2010-09-21\" AND FirstName = \"DAMIEN\" AND LastName = \"TRACHSEL\"","question":"How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?","context":"CREATE TABLE Reservations (Kids VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)","generation":"SELECT Kids FROM Reservations WHERE LastName = \"TRACHSEL\" AND FirstName = \"DAMIEN\" AND CheckIn = \"2010-09-21\""}
{"answer":"SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING SUM(T1.amount) <= 10","question":"List all the names of schools with an endowment amount smaller than or equal to 10.","context":"CREATE TABLE school (school_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)","generation":"SELECT T1.school_name FROM school AS T1 JOIN endowment AS T2 ON T1.school_id = T2.school_id WHERE T2.amount <= 10"}
{"answer":"SELECT COUNT(*) FROM Documents WHERE document_status_code = \"done\"","question":"How many documents have the status code done?","context":"CREATE TABLE Documents (document_status_code VARCHAR)","generation":"SELECT COUNT(*) FROM Documents WHERE document_status_code = \"done\""}
{"answer":"SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010","question":"Find courses that ran in Fall 2009 and in Spring 2010.","context":"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT course_id FROM SECTION WHERE semester = \"Fall\" AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = \"Spring\" AND YEAR = 2010"}
{"answer":"SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2","question":"Show the locations that have at least two performances.","context":"CREATE TABLE performance (LOCATION VARCHAR)","generation":"SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\"","question":"What is the first name, last name, and phone of the customer with account name 162?","context":"CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)","generation":"SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_name = \"162\""}
{"answer":"SELECT DISTINCT POSITION FROM pilot WHERE Age > 30","question":"List the distinct positions of pilots older than 30.","context":"CREATE TABLE pilot (POSITION VARCHAR, Age INTEGER)","generation":"SELECT DISTINCT POSITION FROM pilot WHERE Age > 30"}
{"answer":"SELECT COUNT(*) FROM party","question":"How many parties are there?","context":"CREATE TABLE party (Id VARCHAR)","generation":"SELECT COUNT(*) FROM party"}
{"answer":"SELECT name FROM people WHERE height > 200 OR height < 190","question":"find the names of people who are taller than 200 or lower than 190.","context":"CREATE TABLE people (name VARCHAR, height VARCHAR)","generation":"SELECT name FROM people WHERE height > 200 OR height < 190"}
{"answer":"SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM elimination)","question":"List the names of wrestlers that have not been eliminated.","context":"CREATE TABLE elimination (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR)","generation":"SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM elimination)"}
{"answer":"SELECT city_code FROM Student WHERE LName = \"Kim\"","question":"Which city does the student whose last name is \"Kim\" live in?","context":"CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)","generation":"SELECT city_code FROM Student WHERE LName = \"Kim\""}
{"answer":"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings))","question":"Find the checking balance of the accounts whose savings balance is higher than the average savings balance.","context":"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER)","generation":"SELECT T1.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings)"}
{"answer":"SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY AVG(trust) DESC LIMIT 1","question":"Find the name of the source user with the highest average trust score.","context":"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE trust (source_u_id VARCHAR)","generation":"SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY AVG(trust) DESC LIMIT 1"}
{"answer":"SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'","question":"Find the title of course that is provided by Statistics but not Psychology departments.","context":"CREATE TABLE course (title VARCHAR, dept_name VARCHAR)","generation":"SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'"}
{"answer":"SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90","question":"Show the crime rate of counties with a city having white percentage more than 90.","context":"CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR); CREATE TABLE city (County_ID VARCHAR, White INTEGER)","generation":"SELECT T1.Crime_rate FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID = T2.County_ID WHERE T2.White > 90"}
{"answer":"SELECT COUNT(DISTINCT UID) FROM tweets","question":"Find the number of users who posted some tweets.","context":"CREATE TABLE tweets (UID VARCHAR)","generation":"SELECT COUNT(DISTINCT UID) FROM tweets"}
{"answer":"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"","question":"How many cards does customer Art Turcotte have?","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\""}
{"answer":"SELECT Join_Year FROM pilot ORDER BY Rank LIMIT 1","question":"What is the joined year of the pilot of the highest rank?","context":"CREATE TABLE pilot (Join_Year VARCHAR, Rank VARCHAR)","generation":"SELECT Join_Year FROM pilot ORDER BY Rank DESC LIMIT 1"}
{"answer":"SELECT name, distance FROM Aircraft WHERE aid = 12","question":"What is the name and distance for aircraft with id 12?","context":"CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)","generation":"SELECT name, distance FROM Aircraft WHERE aid = 12"}
{"answer":"SELECT T2.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party","question":"Show the name of each party and the corresponding number of delegates from that party.","context":"CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT T1.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party GROUP BY T1.Party"}
{"answer":"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"","question":"What are the last names of the author of the paper titled \"Binders Unbound\"?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)","generation":"SELECT T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title = \"Binders Unbound\""}
{"answer":"SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011","question":"Show all the locations where some cinemas were opened in both year 2010 and year 2011.","context":"CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)","generation":"SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011"}
{"answer":"SELECT COUNT(*) FROM services","question":"How many services are there?","context":"CREATE TABLE services (Id VARCHAR)","generation":"SELECT COUNT(*) FROM services"}
{"answer":"SELECT COUNT(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name","question":"Find the number of checking accounts for each account name.","context":"CREATE TABLE checking (custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name, COUNT(*) FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name"}
{"answer":"SELECT Name FROM Representative WHERE Party <> \"Republican\"","question":"What are the names of representatives whose party is not \"Republican\"?","context":"CREATE TABLE Representative (Name VARCHAR, Party VARCHAR)","generation":"SELECT Name FROM Representative WHERE Party <> \"Republican\""}
{"answer":"SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","question":"What are the ids and names of the medicine that can interact with two or more enzymes?","context":"CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR)","generation":"SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id GROUP BY T2.medicine_id HAVING COUNT(*) >= 2"}
{"answer":"SELECT Carrier, COUNT(*) FROM phone GROUP BY Carrier","question":"Show different carriers of phones together with the number of phones with each carrier.","context":"CREATE TABLE phone (Carrier VARCHAR)","generation":"SELECT Carrier, COUNT(*) FROM phone GROUP BY Carrier"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the customer id, first and last name with most number of accounts.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT aid FROM Aircraft WHERE distance > 1000","question":"Show ids for all aircrafts with more than 1000 distance.","context":"CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)","generation":"SELECT aid FROM Aircraft WHERE distance > 1000"}
{"answer":"SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"","question":"How many orders does Lucas Mancini has?","context":"CREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT COUNT(*) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id WHERE T2.first_name = \"Lucas\" AND T2.last_name = \"Mancini\""}
{"answer":"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC\/DC\"","question":"Find the title of all the albums of the artist \"AC\/DC\".","context":"CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)","generation":"SELECT T1.Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC\/DC\""}
{"answer":"SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name","question":"Show the names of pilots and the number of records they have.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)","generation":"SELECT T1.Pilot_name, COUNT(*) FROM pilot AS T1 JOIN pilot_record AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T1.Pilot_name"}
{"answer":"SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which bike traveled the most often in zip code 94002?","context":"CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)","generation":"SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING SUM(T2.number_city_affected) >= 10","question":"Show storm name with at least two regions and 10 cities affected.","context":"CREATE TABLE affected_region (storm_id VARCHAR, number_city_affected INTEGER); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2 AND SUM(T2.number_city_affected) >= 10"}
{"answer":"SELECT roomName, bedType FROM Rooms WHERE decor = \"traditional\"","question":"List the type of bed and name of all traditional rooms.","context":"CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR, decor VARCHAR)","generation":"SELECT bedType, roomName FROM Rooms WHERE decor = \"Traditional\""}
{"answer":"SELECT Age, COUNT(*) FROM editor GROUP BY Age","question":"What are the different ages of editors? Show each age along with the number of editors of that age.","context":"CREATE TABLE editor (Age VARCHAR)","generation":"SELECT Age, COUNT(*) FROM editor GROUP BY Age"}
{"answer":"SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'","question":"Which events id does not have any participant with detail 'Kenyatta Kuhn'?","context":"CREATE TABLE Participants (Participant_ID VARCHAR); CREATE TABLE EVENTS (event_id VARCHAR, Participant_Details VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR, Participant_ID VARCHAR)","generation":"SELECT event_id FROM EVENTS WHERE NOT event_id IN (SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T2.Participant_Details = 'Kenyatta Kuhn')"}
{"answer":"SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\"","question":"What is the decor of room Recluse and defiance?","context":"CREATE TABLE Rooms (decor VARCHAR, roomName VARCHAR)","generation":"SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\""}
{"answer":"SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC","question":"List name and damage for all storms in a descending order of max speed.","context":"CREATE TABLE storm (name VARCHAR, damage_millions_USD VARCHAR, max_speed VARCHAR)","generation":"SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC"}
{"answer":"SELECT COUNT(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code","question":"What is the number of professors for different school?","context":"CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)","generation":"SELECT COUNT(DISTINCT T1.school_code), COUNT(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code"}
{"answer":"SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions","question":"Show the number of transaction types.","context":"CREATE TABLE Financial_Transactions (transaction_type VARCHAR)","generation":"SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions"}
{"answer":"SELECT COUNT(DISTINCT school_code) FROM department","question":"how many schools exist in total?","context":"CREATE TABLE department (school_code VARCHAR)","generation":"SELECT COUNT(DISTINCT school_code) FROM department"}
{"answer":"SELECT AVG(credit_score) FROM customer WHERE NOT cust_id IN (SELECT cust_id FROM loan)","question":"Find the average credit score of the customers who do not have any loan.","context":"CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)","generation":"SELECT AVG(credit_score) FROM customer WHERE NOT cust_id IN (SELECT cust_id FROM loan)"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING AVG(T2.rating) > 5","question":"Find the names of items whose rank is higher than 3 and whose average rating is above 5.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rank INTEGER, rating INTEGER)","generation":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 AND T2.rating > 5"}
{"answer":"SELECT SUM(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name <> 'Brown'","question":"Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.","context":"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR)","generation":"SELECT SUM(T1.balance) FROM savings AS T1 JOIN accounts AS T2 ON T1.custid = T2.custid WHERE T2.name <> 'Brown'"}
{"answer":"SELECT AVG(floors), MAX(floors), MIN(floors) FROM building","question":"What are the average, maximum, and minimum number of floors for all buildings?","context":"CREATE TABLE building (floors INTEGER)","generation":"SELECT AVG(floors), MAX(floors), MIN(floors) FROM building"}
{"answer":"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004","question":"the names of models that launched between 2002 and 2004.","context":"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year INTEGER)","generation":"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004"}
{"answer":"SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION <> \"East\"","question":"List the distinct police forces of counties whose location is not on east side.","context":"CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)","generation":"SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION <> 'East'"}
{"answer":"SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements","question":"Find the total and average amount of settlements.","context":"CREATE TABLE settlements (settlement_amount INTEGER)","generation":"SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements"}
{"answer":"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'","question":"List the name of albums that are released by aritist whose name has 'Led'","context":"CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)","generation":"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name LIKE '%Led%'"}
{"answer":"SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7","question":"What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?","context":"CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)","generation":"SELECT station_id FROM station WHERE lat > 37.4 EXCEPT SELECT T1.station_id FROM station AS T1 JOIN status AS T2 ON T1.station_id = T2.station_id WHERE T2.bikes_available < 7"}
{"answer":"SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200","question":"Show the names of people that are on affirmative side of debates with number of audience bigger than 200.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Debate_ID VARCHAR, Num_of_Audience INTEGER); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)","generation":"SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200"}
{"answer":"SELECT T1.incident_type_code, T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What are the code and description of the most frequent behavior incident type?","context":"CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR); CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)","generation":"SELECT T1.incident_type_code, T1.incident_type_description FROM Ref_Incident_Type AS T1 JOIN Behavior_Incident AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2","question":"What are the hometowns that are shared by at least two gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Hometown FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID GROUP BY T1.Hometown HAVING COUNT(*) >= 2"}
{"answer":"SELECT AVG(Money_Requested) FROM entrepreneur","question":"What is the average money requested by all entrepreneurs?","context":"CREATE TABLE entrepreneur (Money_Requested INTEGER)","generation":"SELECT AVG(Money_Requested) FROM entrepreneur"}
{"answer":"SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'","question":"Find the names of all instructors in the Art department who have taught some course and the course_id.","context":"CREATE TABLE instructor (ID VARCHAR, dept_name VARCHAR); CREATE TABLE teaches (ID VARCHAR)","generation":"SELECT T1.ID, T2.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.dept_name = 'Art' JOIN course AS T3 ON T3.course_id = T2.course_id"}
{"answer":"SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name","question":"Show the names of members and the location of performances they attended in ascending alphabetical order of their names.","context":"CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT T1.Name, T2.Location FROM member AS T1 JOIN member_attendance AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T2.Performance_ID = T3.Performance_ID ORDER BY T1.Name"}
{"answer":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1","question":"Which campus has the most faculties in year 2003?","context":"CREATE TABLE faculty (campus VARCHAR, year VARCHAR, faculty VARCHAR); CREATE TABLE campuses (campus VARCHAR, id VARCHAR)","generation":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 GROUP BY T1.campus ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000","question":"How many degrees were conferred in \"San Jose State University\" in 2000?","context":"CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)","generation":"SELECT COUNT(*) FROM degrees AS T1 JOIN campuses AS T2 ON T1.CampusId = T2.Id WHERE T2.Name = \"San Jose State University\" AND T1.Year = 2000"}
{"answer":"SELECT MAX(T1.RAM_MiB), MIN(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"","question":"What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?","context":"CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (RAM_MiB INTEGER, Model_name VARCHAR)","generation":"SELECT T1.Model_name, MAX(T2.RAM_MiB), MIN(T2.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\" GROUP BY T1.Model_name"}
{"answer":"SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)","question":"List the official names of cities that have not held any competition.","context":"CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)","generation":"SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)"}
{"answer":"SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950","question":"Which university is in Los Angeles county and opened after 1950?","context":"CREATE TABLE campuses (campus VARCHAR, county VARCHAR, YEAR VARCHAR)","generation":"SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950"}
{"answer":"SELECT DISTINCT Theme FROM journal","question":"Show the distinct themes of journals.","context":"CREATE TABLE journal (Theme VARCHAR)","generation":"SELECT DISTINCT Theme FROM journal"}
{"answer":"SELECT T2.Name, T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID","question":"What are the names of representatives and the dates of elections they participated in.","context":"CREATE TABLE election (Date VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)","generation":"SELECT T1.Name, T2.Date FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID"}
{"answer":"SELECT DISTINCT T3.name, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name","question":"For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.","context":"CREATE TABLE Rating (stars VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, director VARCHAR)","generation":"SELECT T1.name, T2.title, T1.stars FROM Reviewer AS T1 JOIN Movie AS T2 ON T1.rID = T2.mID JOIN Rating AS T3 ON T2.mID = T3.mID WHERE T1.name = T2.director"}
{"answer":"SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40","question":"Which address has both members younger than 30 and members older than 40?","context":"CREATE TABLE member (address VARCHAR, age INTEGER)","generation":"SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40"}
{"answer":"SELECT ResTypeName FROM Restaurant_Type","question":"List all restaurant types.","context":"CREATE TABLE Restaurant_Type (ResTypeName VARCHAR)","generation":"SELECT ResTypeName FROM Restaurant_Type"}
{"answer":"SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200","question":"Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.","context":"CREATE TABLE mountain (Country VARCHAR, Height INTEGER)","generation":"SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200"}
{"answer":"SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\"","question":"What is the description of document status code 'working'?","context":"CREATE TABLE Ref_Document_Status (document_status_description VARCHAR, document_status_code VARCHAR)","generation":"SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = 'working'"}
{"answer":"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the country that has the most perpetrators?","context":"CREATE TABLE perpetrator (Country VARCHAR)","generation":"SELECT Country FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID","question":"What are the names of body builders?","context":"CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID = T2.People_ID"}
{"answer":"SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1","question":"What is the name, location and seating for the most recently opened track?","context":"CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)","generation":"SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM ALBUM","question":"How many albums are there?","context":"CREATE TABLE ALBUM (Id VARCHAR)","generation":"SELECT COUNT(*) FROM ALBUM"}
{"answer":"SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3","question":"What is the 3 most common cloud cover rates in the region of zip code 94107?","context":"CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)","generation":"SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3"}
{"answer":"SELECT detention_summary FROM Detention","question":"Return all detention summaries.","context":"CREATE TABLE Detention (detention_summary VARCHAR)","generation":"SELECT detention_summary FROM Detention"}
{"answer":"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'","question":"Find the name of the instructors who taught C Programming course before.","context":"CREATE TABLE teaches (id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = \"C Programming\""}
{"answer":"SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'","question":"What is department name and office for the professor whose last name is Heffington?","context":"CREATE TABLE employee (emp_num VARCHAR, emp_lname VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)","generation":"SELECT T3.dept_name, T1.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = \"Heffington\""}
{"answer":"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2","question":"What are the countries that have at least two perpetrators?","context":"CREATE TABLE perpetrator (Country VARCHAR)","generation":"SELECT Country FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2"}
{"answer":"SELECT SUM(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\"","question":"List total amount of  invoice from Chicago, IL.","context":"CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)","generation":"SELECT SUM(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\""}
{"answer":"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT MIN(amount_piad) FROM claim_headers)","question":"What is the name of the customer who has made the minimum amount of payment in one claim?","context":"CREATE TABLE claim_headers (amount_piad INTEGER); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_piad INTEGER)","generation":"SELECT T1.customer_details FROM customers AS T1 JOIN policies AS T2 ON T1.customer_id = T2.customer_id JOIN claim_headers AS T3 ON T2.policy_id = T3.policy_id ORDER BY T3.amount_piad LIMIT 1"}
{"answer":"SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1","question":"Which month has the most happy hours?","context":"CREATE TABLE happy_hour (MONTH VARCHAR)","generation":"SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Elimination_Move FROM Elimination WHERE Team = \"Team Orton\"","question":"What are the elimination moves of wrestlers whose team is \"Team Orton\"?","context":"CREATE TABLE Elimination (Elimination_Move VARCHAR, Team VARCHAR)","generation":"SELECT Elimination_Move FROM Elimination WHERE Team = \"Team Orton\""}
{"answer":"SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code","question":"Find the number of departments in each school.","context":"CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)","generation":"SELECT COUNT(*), school_code FROM department GROUP BY school_code"}
{"answer":"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor <> \"Rachel Elnaugh\"","question":"What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?","context":"CREATE TABLE entrepreneur (People_ID VARCHAR, Investor VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name <> \"Rachel Elnaugh\""}
{"answer":"SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details <> 'Schmidt ,  Kertzmann and Lubowitz'","question":"What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","context":"CREATE TABLE Rent_Arrears (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Customer_Master_Index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR)","generation":"SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T2.master_customer_id = T3.master_customer_id WHERE T3.cmi_details <> 'Schmidt, Kertzmann and Lubowitz'"}
{"answer":"SELECT T1.event_id, T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING COUNT(*) > 1","question":"What are the ids and details of events that have more than one participants?","context":"CREATE TABLE EVENTS (event_id VARCHAR, event_details VARCHAR, Event_ID VARCHAR); CREATE TABLE Participants_in_Events (Event_ID VARCHAR)","generation":"SELECT T1.event_id, T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.event_id HAVING COUNT(*) > 1"}
{"answer":"SELECT Date FROM game ORDER BY home_team DESC","question":"List the dates of games by the home team name in descending order.","context":"CREATE TABLE game (Date VARCHAR, home_team VARCHAR)","generation":"SELECT Date FROM game ORDER BY home_team DESC"}
{"answer":"SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70","question":"Find all the zip codes in which the max dew point have never reached 70.","context":"CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)","generation":"SELECT zip_code FROM weather WHERE max_dew_point_f < 70"}
{"answer":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) >= 2","question":"Show all the locations with at least two cinemas with capacity above 300.","context":"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) >= 2"}
{"answer":"SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\"","question":"Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.","context":"CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\""}
{"answer":"SELECT COUNT(*) FROM campuses WHERE county = \"Los Angeles\"","question":"How many campuses are there in Los Angeles county?","context":"CREATE TABLE campuses (county VARCHAR)","generation":"SELECT COUNT(*) FROM campuses WHERE county = \"Los Angeles\""}
{"answer":"SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\"","question":"Show the names of clubs that have players with position \"Right Wing\".","context":"CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Club_ID VARCHAR, Position VARCHAR)","generation":"SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\""}
{"answer":"SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'","question":"Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.","context":"CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR, enzyme_id VARCHAR); CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE enzyme (id VARCHAR, product VARCHAR)","generation":"SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id JOIN enzyme AS T3 ON T2.enzyme_id = T3.id WHERE T3.product <> 'Heme'"}
{"answer":"SELECT COUNT(DISTINCT SOURCE) FROM injury_accident","question":"How many different kinds of information sources are there for injury accidents?","context":"CREATE TABLE injury_accident (SOURCE VARCHAR)","generation":"SELECT COUNT(DISTINCT SOURCE) FROM injury_accident"}
{"answer":"SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996","question":"What is the campus fee of \"San Francisco State University\" in year 1996?","context":"CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)","generation":"SELECT T1.fee FROM csu_fees AS T1 JOIN campuses AS T2 ON T1.year = T2.year WHERE T2.name = \"San Francisco State University\" AND T1.year = 1996"}
{"answer":"SELECT DISTINCT start_station_name FROM trip WHERE duration < 100","question":"List all the distinct stations from which a trip of duration below 100 started.","context":"CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)","generation":"SELECT DISTINCT start_station_name FROM trip WHERE duration < 100"}
{"answer":"SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'","question":"Show first name, last name, age for all female students. Their sex is F.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)","generation":"SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'"}
{"answer":"SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC","question":"What are the weights of entrepreneurs in descending order of money requested?","context":"CREATE TABLE entrepreneur (People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Weight VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Weight FROM people AS T1 JOIN entrepreneur AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Money_Requested DESC"}
{"answer":"SELECT DISTINCT region_name FROM region ORDER BY Label","question":"Show all distinct region names ordered by their labels.","context":"CREATE TABLE region (region_name VARCHAR, Label VARCHAR)","generation":"SELECT DISTINCT region_name FROM region ORDER BY Label"}
{"answer":"SELECT T1.first_name, T1.last_name, T1.other_details, T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","question":"List all every engineer's first name, last name, details and coresponding skill description.","context":"CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, other_details VARCHAR, engineer_id VARCHAR); CREATE TABLE Engineer_Skills (engineer_id VARCHAR, skill_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)","generation":"SELECT T1.first_name, T1.last_name, T1.other_details, T2.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) LIMIT 1","question":"Find the name of the item with the lowest average rating.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT class_code) FROM CLASS","question":"How many different classes are there?","context":"CREATE TABLE CLASS (class_code VARCHAR)","generation":"SELECT COUNT(DISTINCT class_code) FROM CLASS"}
{"answer":"SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)","question":"List the id of students who never attends courses?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)","generation":"SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)"}
{"answer":"SELECT name FROM playlists","question":"List the name of all playlist.","context":"CREATE TABLE playlists (name VARCHAR)","generation":"SELECT name FROM playlists"}
{"answer":"SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10","question":"How many exhibitions have a attendance more than 100 or have a ticket price below 10?","context":"CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, ticket_price VARCHAR)","generation":"SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10"}
{"answer":"SELECT T3.location, T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3","question":"find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.","context":"CREATE TABLE gas_station (location VARCHAR, Representative_Name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, Assets_billion VARCHAR)","generation":"SELECT T1.location, T1.Representative_Name FROM gas_station AS T1 JOIN station_company AS T2 ON T1.station_id = T2.station_id JOIN company AS T3 ON T2.company_id = T3.company_id ORDER BY T3.Assets_billion DESC LIMIT 3"}
{"answer":"SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1","question":"How many faculty lines are there in the university that conferred the most number of degrees in year 2002?","context":"CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)","generation":"SELECT COUNT(*) FROM faculty AS T1 JOIN degrees AS T2 ON T1.faculty = T2.faculty JOIN campuses AS T3 ON T2.campus = T3.id WHERE T3.year = 2002 GROUP BY T1.faculty ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?","context":"CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (id VARCHAR, name VARCHAR)","generation":"SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activator' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)","question":"What are the entry names of catalog with the attribute possessed by most entries.","context":"CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)","generation":"SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id JOIN Catalog_Contents_Additional_Attributes AS T3 ON T2.attribute_value = T3.attribute_value GROUP BY T2.attribute_value ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.address_id, T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","question":"Find the id and city of the student address with the highest average monthly rental.","context":"CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)","generation":"SELECT T1.address_id, T2.city FROM Student_Addresses AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T1.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1"}
{"answer":"SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING SUM(T1.budgeted) > 100 OR SUM(T3.amount) > 10","question":"Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.","context":"CREATE TABLE endowment (school_id VARCHAR, amount INTEGER); CREATE TABLE budget (school_id VARCHAR, budgeted INTEGER); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)","generation":"SELECT T1.school_name FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T1.school_id = T3.school_id WHERE T2.budgeted > 100 OR T3.amount > 10"}
{"answer":"SELECT COUNT(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010","question":"How many distinct kinds of injuries happened after season 2010?","context":"CREATE TABLE injury_accident (injury VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, season INTEGER)","generation":"SELECT COUNT(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010"}
{"answer":"SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers","question":"Show the crime rates of counties in ascending order of number of police officers.","context":"CREATE TABLE county_public_safety (Crime_rate VARCHAR, Police_officers VARCHAR)","generation":"SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers"}
{"answer":"SELECT name FROM head WHERE born_state <> 'California'","question":"What are the names of the heads who are born outside the California state?","context":"CREATE TABLE head (name VARCHAR, born_state VARCHAR)","generation":"SELECT name FROM head WHERE born_state <> 'California'"}
{"answer":"SELECT T2.Delegate, T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District","question":"Show the delegates and the names of county they belong to.","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT T1.Delegate, T2.County_name FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_id"}
{"answer":"SELECT title FROM papers WHERE title LIKE \"%Database%\"","question":"Which paper's title contains the word \"Database\"?","context":"CREATE TABLE papers (title VARCHAR)","generation":"SELECT title FROM papers WHERE title LIKE \"%Database%\""}
{"answer":"SELECT COUNT(*) FROM Movie WHERE YEAR < 2000","question":"How many movies were made before 2000?","context":"CREATE TABLE Movie (YEAR INTEGER)","generation":"SELECT COUNT(*) FROM Movie WHERE YEAR < 2000"}
{"answer":"SELECT COUNT(*) FROM member WHERE address <> 'Hartford'","question":"How many members are not living in Hartford?","context":"CREATE TABLE member (address VARCHAR)","generation":"SELECT COUNT(*) FROM member WHERE address <> 'Hartford'"}
{"answer":"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2","question":"Show the team that have at least two technicians.","context":"CREATE TABLE technician (Team VARCHAR)","generation":"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2"}
{"answer":"SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name","question":"Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Negative VARCHAR)","generation":"SELECT T1.Name, T2.Date, T2.Venue FROM people AS T1 JOIN debate_people AS T3 ON T1.People_ID = T3.Debate_ID JOIN debate AS T2 ON T3.Debate_ID = T2.Debate_ID WHERE T3.Negative = 1 ORDER BY T1.Name"}
{"answer":"SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)","question":"Find the count of universities whose campus fee is greater than the average campus fee.","context":"CREATE TABLE csu_fees (campusfee INTEGER)","generation":"SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)"}
{"answer":"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70","question":"Show names of technicians who are assigned to repair machines with value point more than 70.","context":"CREATE TABLE machine (machine_id VARCHAR, value_points INTEGER); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)","generation":"SELECT T1.Name FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_ID = T2.technician_ID JOIN machine AS T3 ON T2.machine_id = T3.machine_id WHERE T3.value_points > 70"}
{"answer":"SELECT date_of_notes FROM Assessment_Notes","question":"What are the dates of the assessment notes?","context":"CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)","generation":"SELECT date_of_notes FROM Assessment_Notes"}
{"answer":"SELECT AVG(Injured) FROM perpetrator","question":"What is the average number of people injured by all perpetrators?","context":"CREATE TABLE perpetrator (Injured INTEGER)","generation":"SELECT AVG(Injured) FROM perpetrator"}
{"answer":"SELECT Zip_code FROM county WHERE County_name = \"Howard\"","question":"Show the zip code of the county with name \"Howard\".","context":"CREATE TABLE county (Zip_code VARCHAR, County_name VARCHAR)","generation":"SELECT Zip_code FROM county WHERE County_name = \"Howard\""}
{"answer":"SELECT T2.roomName, T1.Rate, T1.CheckIn, T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1","question":"Which room has the highest rate? List the room's full name, rate, check in and check out date.","context":"CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR); CREATE TABLE Reservations (Rate VARCHAR, CheckIn VARCHAR, CheckOut VARCHAR, Room VARCHAR)","generation":"SELECT T1.roomName, T2.Rate, T2.CheckIn, T2.CheckOut FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate DESC LIMIT 1"}
{"answer":"SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017","question":"What are the names of races that were held after 2017 and the circuits were in the country of Spain?","context":"CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)","generation":"SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017"}
{"answer":"SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1","question":"Show the date of the tallest perpetrator.","context":"CREATE TABLE perpetrator (Date VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)","generation":"SELECT T1.Date FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1"}
{"answer":"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"","question":"Find the names of the customers who have an deputy policy.","context":"CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)","generation":"SELECT T1.customer_details FROM customers AS T1 JOIN policies AS T2 ON T1.customer_id = T2.customer_id WHERE T2.policy_type_code = \"deputy\""}
{"answer":"SELECT name, openning_year, capacity FROM cinema","question":"Show name, opening year, and capacity for each cinema.","context":"CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR, capacity VARCHAR)","generation":"SELECT name, openning_year, capacity FROM cinema"}
{"answer":"SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM company","question":"Show minimum, maximum, and average market value for all companies.","context":"CREATE TABLE company (market_value INTEGER)","generation":"SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM company"}
{"answer":"SELECT COUNT(*) FROM debate","question":"How many debates are there?","context":"CREATE TABLE debate (Id VARCHAR)","generation":"SELECT COUNT(*) FROM debate"}
{"answer":"SELECT title, directed_by FROM film","question":"Show the title and director for all films.","context":"CREATE TABLE film (title VARCHAR, directed_by VARCHAR)","generation":"SELECT title, directed_by FROM film"}
{"answer":"SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8","question":"A list of the top 8 countries by gross\/total invoice size. List country name and gross invoice size.","context":"CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)","generation":"SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8"}
{"answer":"SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the people that have been comptroller the most times and the corresponding number of times.","context":"CREATE TABLE party (Comptroller VARCHAR)","generation":"SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1","question":"Who were the governors of the parties associated with delegates from district 1?","context":"CREATE TABLE party (Governor VARCHAR, Party_ID VARCHAR); CREATE TABLE election (Party VARCHAR, District VARCHAR)","generation":"SELECT T1.Governor FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.District = 1"}
{"answer":"SELECT district FROM address GROUP BY district HAVING COUNT(*) >= 2","question":"Which districts have at least two addresses?","context":"CREATE TABLE address (district VARCHAR)","generation":"SELECT district FROM address GROUP BY district HAVING COUNT(*) >= 2"}
{"answer":"SELECT SUM(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'","question":"Find the total amount of loans provided by bank branches in the state of New York.","context":"CREATE TABLE bank (branch_id VARCHAR, state VARCHAR); CREATE TABLE loan (amount INTEGER, branch_id VARCHAR)","generation":"SELECT SUM(T1.amount) FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id WHERE T2.state = \"New York\""}
{"answer":"SELECT COUNT(*), T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code","question":"Find the number of classes in each school.","context":"CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR)","generation":"SELECT COUNT(*), T1.school_code FROM department AS T1 JOIN CLASS AS T2 ON T1.dept_code = T2.dept_code JOIN course AS T3 ON T2.crs_code = T3.crs_code GROUP BY T1.school_code"}
{"answer":"SELECT roomName, decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice","question":"List the names and decor of rooms that have a king bed. Sort the list by their price.","context":"CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, bedtype VARCHAR, basePrice VARCHAR)","generation":"SELECT roomName, decor FROM Rooms WHERE bedtype = \"King\" ORDER BY basePrice"}
{"answer":"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"","question":"Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"","context":"CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)","generation":"SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = \"Provisional\" INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id = T2.apt_id WHERE T2.booking_status_code = \"Confirmed\""}
{"answer":"SELECT COUNT(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000","question":"How many distinct delegates are from counties with population larger than 50000?","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)","generation":"SELECT COUNT(DISTINCT T1.Delegate) FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_id WHERE T2.Population > 50000"}
{"answer":"SELECT T3.Pilot_name, T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank","question":"Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR, Rank VARCHAR); CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Fleet_Series VARCHAR, Aircraft_ID VARCHAR)","generation":"SELECT T1.Pilot_name, T3.Fleet_Series FROM pilot AS T1 JOIN pilot_record AS T2 ON T1.Pilot_ID = T2.Pilot_ID JOIN aircraft AS T3 ON T2.Aircraft_ID = T3.Aircraft_ID ORDER BY T1.Rank"}
{"answer":"SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the most common occupation of players.","context":"CREATE TABLE player (Occupation VARCHAR)","generation":"SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id","question":"List the names and origins of people who are not body builders.","context":"CREATE TABLE people (Name VARCHAR, birth_place VARCHAR, people_id VARCHAR); CREATE TABLE body_builder (people_id VARCHAR); CREATE TABLE people (Name VARCHAR, birth_place VARCHAR)","generation":"SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id"}
{"answer":"SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800","question":"Show all the locations where no cinema has capacity over 800.","context":"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT LOCATION FROM cinema WHERE capacity <= 800"}
{"answer":"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000","question":"What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T2.rID = T3.rID WHERE T1.year > 2000 OR T3.name = \"Brittany Harris\""}
{"answer":"SELECT Name FROM city ORDER BY Name","question":"What are the names of cities in ascending alphabetical order?","context":"CREATE TABLE city (Name VARCHAR)","generation":"SELECT Name FROM city ORDER BY Name"}
{"answer":"SELECT COUNT(*) FROM employees WHERE country = \"Canada\"","question":"How many employees are living in Canada?","context":"CREATE TABLE employees (country VARCHAR)","generation":"SELECT COUNT(*) FROM employees WHERE country = \"Canada\""}
{"answer":"SELECT AVG(age), sex FROM Student GROUP BY sex","question":"Show the average age for male and female students.","context":"CREATE TABLE Student (sex VARCHAR, age INTEGER)","generation":"SELECT AVG(age), sex FROM Student GROUP BY sex"}
{"answer":"SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1","question":"Which major has most number of students?","context":"CREATE TABLE Student (major VARCHAR)","generation":"SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.product_name, COUNT(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name","question":"Show all product names and the number of customers having an order on each product.","context":"CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_id VARCHAR); CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR)","generation":"SELECT T1.product_name, COUNT(*) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T2.order_id = T3.order_id GROUP BY T1.product_name"}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"","question":"List the name of all tracks in the playlists of Movies.","context":"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)","generation":"SELECT T3.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T1.playlist_id = T2.id JOIN tracks AS T3 ON T1.track_id = T3.id WHERE T2.name = \"Movies\""}
{"answer":"SELECT T4.crs_description, T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'","question":"What are the description and credit of the course which the student whose last name is Smithson took?","context":"CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_credit VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR)","generation":"SELECT T3.crs_description, T3.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN student AS T4 ON T2.stu_num = T4.stu_num WHERE T4.stu_lname = \"Smithson\""}
{"answer":"SELECT rank, company, market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion","question":"find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.","context":"CREATE TABLE company (rank VARCHAR, company VARCHAR, market_value VARCHAR, main_industry VARCHAR, sales_billion VARCHAR, profits_billion VARCHAR)","generation":"SELECT rank, company, market_value FROM company WHERE main_industry = \"Banking\" ORDER BY sales_billion, profits_billion"}
{"answer":"SELECT city, MAX(lat) FROM station GROUP BY city","question":"For each city, return the highest latitude among its stations.","context":"CREATE TABLE station (city VARCHAR, lat INTEGER)","generation":"SELECT city, MAX(lat) FROM station GROUP BY city"}
{"answer":"SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'","question":"Find the first names of all professors in the Accounting department who is teaching some course and the class room.","context":"CREATE TABLE CLASS (class_room VARCHAR, prof_num VARCHAR); CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT T1.emp_fname, T2.class_room FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN CLASS AS T3 ON T2.class_room = T3.class_room JOIN department AS T4 ON T2.dept_code = T4.dept_code JOIN professor AS T5 ON T5.emp_num = T2.emp_num WHERE T4.dept_name = 'Accounting'"}
{"answer":"SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2","question":"Show the names of counties that have at least two delegates.","context":"CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_name HAVING COUNT(*) >= 2"}
{"answer":"SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1","question":"Find the names of the regions which were affected by the storm that killed the greatest number of people.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, Number_Deaths VARCHAR)","generation":"SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T2.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1"}
{"answer":"SELECT T2.dept_name, T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of department where has the largest number of professors with a Ph.D. degree?","context":"CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT T1.dept_name FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code WHERE T2.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_name ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT school_name, LOCATION, mascot FROM school","question":"List the name, location, mascot for all schools.","context":"CREATE TABLE school (school_name VARCHAR, LOCATION VARCHAR, mascot VARCHAR)","generation":"SELECT school_name, LOCATION, mascot FROM school"}
{"answer":"SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type","question":"Show the transaction type and the number of transactions.","context":"CREATE TABLE Financial_transactions (transaction_type VARCHAR)","generation":"SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type"}
{"answer":"SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = \"Studio\"","question":"What is the average number of rooms of apartments with type code \"Studio\"?","context":"CREATE TABLE Apartments (room_count INTEGER, apt_type_code VARCHAR)","generation":"SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = \"Studio\""}
{"answer":"SELECT ResName FROM Restaurant","question":"Show me all the restaurants.","context":"CREATE TABLE Restaurant (ResName VARCHAR)","generation":"SELECT ResName FROM Restaurant"}
{"answer":"SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2","question":"Find the name and partition id for users who tweeted less than twice.","context":"CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)","generation":"SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING COUNT(*) < 2"}
{"answer":"SELECT COUNT(*) FROM store","question":"How many stores are there?","context":"CREATE TABLE store (Id VARCHAR)","generation":"SELECT COUNT(*) FROM store"}
{"answer":"SELECT COUNT(DISTINCT FDA_approved) FROM medicine","question":"How many distinct FDA approval statuses are there for the medicines?","context":"CREATE TABLE medicine (FDA_approved VARCHAR)","generation":"SELECT COUNT(DISTINCT FDA_approved) FROM medicine"}
{"answer":"SELECT Title FROM book ORDER BY Issues","question":"List the titles of the books in ascending order of issues.","context":"CREATE TABLE book (Title VARCHAR, Issues VARCHAR)","generation":"SELECT Title FROM book ORDER BY Issues"}
{"answer":"SELECT County_name, Population FROM county","question":"Show the county name and population of all counties.","context":"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)","generation":"SELECT County_name, Population FROM county"}
{"answer":"SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'","question":"What is the average sales of the journals that have an editor whose work type is 'Photo'?","context":"CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)","generation":"SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'"}
{"answer":"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'","question":"What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR)","generation":"SELECT T1.balance FROM checking AS T1 JOIN accounts AS T2 ON T1.custid = T2.custid WHERE T2.name LIKE '%ee%'"}
{"answer":"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"","question":"Show the distinct names of mountains climbed by climbers from country \"West Germany\".","context":"CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Mountain_ID VARCHAR, Country VARCHAR)","generation":"SELECT DISTINCT T1.Name FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"West Germany\""}
{"answer":"SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'","question":"Find the name and salary of instructors who are advisors of the students from the Math department.","context":"CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)","generation":"SELECT T1.name, T1.salary FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id JOIN student AS T3 ON T2.s_id = T3.id WHERE T3.dept_name = \"Math\""}
{"answer":"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC","question":"What are the names of representatives in descending order of votes?","context":"CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)","generation":"SELECT T1.Name FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY COUNT(*) DESC"}
{"answer":"SELECT date FROM weather WHERE max_temperature_f > 85","question":"Give me the dates when the max temperature was higher than 85.","context":"CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)","generation":"SELECT date FROM weather WHERE max_temperature_f > 85"}
{"answer":"SELECT name FROM stadium WHERE name LIKE \"%Bank%\"","question":"Which stadium name contains the substring \"Bank\"?","context":"CREATE TABLE stadium (name VARCHAR)","generation":"SELECT name FROM stadium WHERE name LIKE \"%Bank%\""}
{"answer":"SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15","question":"Show theme and year for all exhibitions with ticket prices lower than 15.","context":"CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price INTEGER)","generation":"SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15"}
{"answer":"SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2","question":"Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.","context":"CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR, basePrice VARCHAR, maxOccupancy VARCHAR)","generation":"SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2"}
{"answer":"SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20","question":"Show the hometowns shared by people older than 23 and younger than 20.","context":"CREATE TABLE people (Hometown VARCHAR, Age INTEGER)","generation":"SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20"}
{"answer":"SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1","question":"What is detail of the student who most recently registered course?","context":"CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)","generation":"SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id ORDER BY T2.registration_date DESC LIMIT 1"}
{"answer":"SELECT AVG(Event_Attendance), MAX(Event_Attendance) FROM event","question":"what are the average and maximum attendances of all events?","context":"CREATE TABLE event (Event_Attendance INTEGER)","generation":"SELECT AVG(Event_Attendance), MAX(Event_Attendance) FROM event"}
{"answer":"SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)","question":"Find the name of rooms whose price is higher than the average price.","context":"CREATE TABLE Rooms (roomName VARCHAR, basePrice INTEGER)","generation":"SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)"}
{"answer":"SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1","question":"Find the name and email for the users who have more than one follower.","context":"CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)","generation":"SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1"}
{"answer":"SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the year and semester when offers the largest number of courses.","context":"CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)","generation":"SELECT semester, YEAR FROM SECTION GROUP BY semester ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"","question":"What are the monthly rentals of student addresses in Texas state?","context":"CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Student_Addresses (monthly_rental VARCHAR, address_id VARCHAR)","generation":"SELECT T1.monthly_rental FROM Student_Addresses AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.state_province_county = \"Texas\""}
{"answer":"SELECT donator_name, SUM(amount) FROM endowment GROUP BY donator_name ORDER BY SUM(amount) DESC","question":"List each donator name and the amount of endowment in descending order of the amount of endowment.","context":"CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)","generation":"SELECT donator_name, amount FROM endowment ORDER BY amount DESC"}
{"answer":"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state","question":"List the number of invoices from the US, grouped by state.","context":"CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)","generation":"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = 'US' GROUP BY billing_state"}
{"answer":"SELECT COUNT(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")","question":"Find the number of male (sex is 'M') students who have some food type allery.","context":"CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)","generation":"SELECT COUNT(*) FROM Student AS T1 JOIN Has_allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T1.sex = 'M' AND T3.allergytype = 'Food'"}
{"answer":"SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\"","question":"How many kids stay in the rooms reserved by ROY SWEAZY?","context":"CREATE TABLE Reservations (kids VARCHAR, FirstName VARCHAR, LastName VARCHAR)","generation":"SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\""}
{"answer":"SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\"","question":"What are the birth dates of employees living in Edmonton?","context":"CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)","generation":"SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\""}
{"answer":"SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1","question":"Which film has the highest rental rate? And what is the rate?","context":"CREATE TABLE film (title VARCHAR, rental_rate VARCHAR)","generation":"SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1"}
{"answer":"SELECT T1.fault_short_name, T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","question":"For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.","context":"CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR, skill_id VARCHAR); CREATE TABLE Part_Faults (fault_short_name VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)","generation":"SELECT T1.fault_short_name, T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id"}
{"answer":"SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1","question":"What is the primary conference of the school that has the lowest acc percent score in the competition?","context":"CREATE TABLE basketball_match (school_id VARCHAR, acc_percent VARCHAR); CREATE TABLE university (Primary_conference VARCHAR, school_id VARCHAR)","generation":"SELECT T1.Primary_conference FROM university AS T1 JOIN basketball_match AS T2 ON T1.school_id = T2.school_id ORDER BY T2.acc_percent LIMIT 1"}
{"answer":"SELECT Birth_Date FROM People ORDER BY Height","question":"What are the birthdays of people in ascending order of height?","context":"CREATE TABLE People (Birth_Date VARCHAR, Height VARCHAR)","generation":"SELECT Birth_Date FROM People ORDER BY Height"}
{"answer":"SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype","question":"Show all allergy type with number of students affected.","context":"CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)","generation":"SELECT T1.allergytype, COUNT(*) FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.allergy = T2.allergy GROUP BY T1.allergytype"}
{"answer":"SELECT Name FROM climber ORDER BY Points DESC","question":"List the names of climbers in descending order of points.","context":"CREATE TABLE climber (Name VARCHAR, Points VARCHAR)","generation":"SELECT Name FROM climber ORDER BY Points DESC"}
{"answer":"SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009","question":"How many drivers participated in the race Australian Grand Prix held in 2009?","context":"CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (raceid VARCHAR)","generation":"SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009"}
{"answer":"SELECT COUNT(*) FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)","question":"How many courses that do not have prerequisite?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)","generation":"SELECT COUNT(*) FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)"}
{"answer":"SELECT COUNT(*) FROM Invoices","question":"How many invoices do we have?","context":"CREATE TABLE Invoices (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Invoices"}
{"answer":"SELECT COUNT(*) FROM Employee","question":"How many employees do we have?","context":"CREATE TABLE Employee (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Employee"}
{"answer":"SELECT title FROM item ORDER BY title","question":"List the titles of all items in alphabetic order .","context":"CREATE TABLE item (title VARCHAR)","generation":"SELECT title FROM item ORDER BY title"}
{"answer":"SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation","question":"Find the number of universities that have over a 20000 enrollment size for each affiliation type.","context":"CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)","generation":"SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation"}
{"answer":"SELECT name, operating_system FROM web_client_accelerator WHERE CONNECTION <> 'Broadband'","question":"What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?","context":"CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, CONNECTION VARCHAR)","generation":"SELECT name, operating_system FROM web_client_accelerator WHERE CONNECTION <> 'Broadband'"}
{"answer":"SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\"","question":"What is the average number of votes of representatives from party \"Republican\"?","context":"CREATE TABLE election (Votes INTEGER, Representative_ID VARCHAR); CREATE TABLE representative (Representative_ID VARCHAR, Party VARCHAR)","generation":"SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\""}
{"answer":"SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"","question":"How many albums does Billy Cobham has?","context":"CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)","generation":"SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\""}
{"answer":"SELECT Team, COUNT(*) FROM elimination GROUP BY Team","question":"Show different teams in eliminations and the number of eliminations from each team.","context":"CREATE TABLE elimination (Team VARCHAR)","generation":"SELECT Team, COUNT(*) FROM elimination GROUP BY Team"}
{"answer":"SELECT COUNT(*) FROM ADDRESSES WHERE zip_postcode = \"197\"","question":"How many addresses have zip code 197?","context":"CREATE TABLE ADDRESSES (zip_postcode VARCHAR)","generation":"SELECT COUNT(*) FROM ADDRESSES WHERE zip_postcode = \"197\""}
{"answer":"SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"","question":"Which enzyme names have the substring \"ALA\"?","context":"CREATE TABLE enzyme (name VARCHAR)","generation":"SELECT name FROM enzyme WHERE name LIKE \"%ALA%\""}
{"answer":"SELECT service_id, event_details FROM EVENTS","question":"List the service id and details for the events.","context":"CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR)","generation":"SELECT service_id, event_details FROM EVENTS"}
{"answer":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1","question":"Find the name of account that has the lowest total checking and saving balance.","context":"CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"}
{"answer":"SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1","question":"Show the name and location of track with 1 race.","context":"CREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)","generation":"SELECT T1.name, T1.location FROM track AS T1 JOIN race AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1"}
{"answer":"SELECT COUNT(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\"","question":"How many times does ROY SWEAZY has reserved a room.","context":"CREATE TABLE Reservations (FirstName VARCHAR, LastName VARCHAR)","generation":"SELECT COUNT(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\""}
{"answer":"SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1","question":"Find the name of the department which has the highest average salary of professors.","context":"CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)","generation":"SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1"}
{"answer":"SELECT Name FROM mountain ORDER BY Name","question":"What are the names of mountains in ascending alphabetical order?","context":"CREATE TABLE mountain (Name VARCHAR)","generation":"SELECT Name FROM mountain ORDER BY Name"}
{"answer":"SELECT product_id FROM products_booked GROUP BY product_id HAVING COUNT(*) = 3","question":"What is the id of the product that is booked for 3 times?","context":"CREATE TABLE products_booked (product_id VARCHAR)","generation":"SELECT product_id FROM products_booked GROUP BY product_id HAVING COUNT(*) = 3"}
{"answer":"SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT MAX(authorder) FROM authorship)","question":"Retrieve the title of the paper that has the largest number of authors.","context":"CREATE TABLE authorship (authorder INTEGER); CREATE TABLE authorship (paperid VARCHAR, authorder INTEGER); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT T1.title FROM papers AS T1 JOIN authorship AS T2 ON T1.paperid = T2.paperid JOIN authorship AS T3 ON T2.authorder = T3.authorder GROUP BY T2.authorder ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\"","question":"How many students have a food allergy?","context":"CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)","generation":"SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"Food\""}
{"answer":"SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2","question":"Which months have more than 2 happy hours?","context":"CREATE TABLE happy_hour (MONTH VARCHAR)","generation":"SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2"}
{"answer":"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID","question":"What are the names of gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN gymnast AS T2 ON T1.People_ID = T2.Gymnast_ID"}
{"answer":"SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'","question":"How many medicines have the FDA approval status 'No' ?","context":"CREATE TABLE medicine (FDA_approved VARCHAR)","generation":"SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'"}
{"answer":"SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5","question":"A list of the top 5 countries by number of invoices. List country name and number of invoices.","context":"CREATE TABLE invoices (billing_country VARCHAR)","generation":"SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5"}
{"answer":"SELECT COUNT(*) FROM performance","question":"How many performances are there?","context":"CREATE TABLE performance (Id VARCHAR)","generation":"SELECT COUNT(*) FROM performance"}
{"answer":"SELECT Country FROM mountain WHERE Height > 5000","question":"What are the countries of mountains with height bigger than 5000?","context":"CREATE TABLE mountain (Country VARCHAR, Height INTEGER)","generation":"SELECT Country FROM mountain WHERE Height > 5000"}
{"answer":"SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\"","question":"Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".","context":"CREATE TABLE player (Sponsor_name VARCHAR, Residence VARCHAR)","generation":"SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\""}
{"answer":"SELECT minister, party_name FROM party ORDER BY took_office DESC","question":"Show all ministers and parties they belong to in descending order of the time they took office.","context":"CREATE TABLE party (minister VARCHAR, party_name VARCHAR, took_office VARCHAR)","generation":"SELECT minister, party_name FROM party ORDER BY took_office DESC"}
{"answer":"SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500","question":"Find the official names of cities with population bigger than 1500 or smaller than 500.","context":"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)","generation":"SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500"}
{"answer":"SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\"","question":"How many female students have milk or egg allergies?","context":"CREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)","generation":"SELECT COUNT(*) FROM Student AS T1 JOIN has_allergy AS T2 ON T1.StuID = T2.StuID WHERE T1.sex = \"F\" AND T2.allergy = \"Milk\" OR T2.allergy = \"Egg\""}
{"answer":"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1","question":"List the state in the US with the most invoices.","context":"CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)","generation":"SELECT billing_state FROM invoices WHERE billing_country = 'US' GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1"}
{"answer":"SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines","question":"Which cmi cross reference id is not related to any parking taxes?","context":"CREATE TABLE parking_fines (cmi_cross_ref_id VARCHAR); CREATE TABLE cmi_cross_references (cmi_cross_ref_id VARCHAR)","generation":"SELECT cmi_cross_ref_id FROM cmi_cross_references WHERE NOT cmi_cross_ref_id IN (SELECT cmi_cross_ref_id FROM parking_fines)"}
{"answer":"SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city","question":"Find the number of employees whose title is IT Staff from each city?","context":"CREATE TABLE employees (city VARCHAR, title VARCHAR)","generation":"SELECT COUNT(*), city FROM employees WHERE title = \"IT Staff\" GROUP BY city"}
{"answer":"SELECT DISTINCT (catalog_entry_name) FROM catalog_contents","question":"Find the names of all the catalog entries.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)","generation":"SELECT catalog_entry_name FROM catalog_contents"}
{"answer":"SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","question":"How many registed students do each course have? List course name and the number of their registered students?","context":"CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)","generation":"SELECT T1.course_name, COUNT(*) FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id JOIN students AS T3 ON T2.student_id = T3.student_id GROUP BY T1.course_name"}
{"answer":"SELECT bedType, COUNT(*) FROM Rooms GROUP BY bedType","question":"Find the number of rooms for each bed type.","context":"CREATE TABLE Rooms (bedType VARCHAR)","generation":"SELECT bedType, COUNT(*) FROM Rooms GROUP BY bedType"}
{"answer":"SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3","question":"What are the ids and durations of the trips with the top 3 durations?","context":"CREATE TABLE trip (id VARCHAR, duration VARCHAR)","generation":"SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3"}
{"answer":"SELECT AVG(bedroom_count) FROM Apartments","question":"What is the average number of bedrooms of all apartments?","context":"CREATE TABLE Apartments (bedroom_count INTEGER)","generation":"SELECT AVG(bedroom_count) FROM Apartments"}
{"answer":"SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major = 600","question":"Which student's age is older than 18 and is majoring in 600? List each student's first and last name.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Major VARCHAR)","generation":"SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major = 600"}
{"answer":"SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id","question":"What are the ids of all students for courses and what are the names of those courses?","context":"CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)","generation":"SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id"}
{"answer":"SELECT AVG(Number_of_hosts) FROM party","question":"What is the average number of hosts for parties?","context":"CREATE TABLE party (Number_of_hosts INTEGER)","generation":"SELECT AVG(Number_of_hosts) FROM party"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\"","question":"What are the names of perpetrators in country \"China\" or \"Japan\"?","context":"CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\""}
{"answer":"SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'","question":"Find the name of rooms booked by some customers whose first name contains ROY.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room"}
{"answer":"SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)","question":"Show the student id of the oldest student.","context":"CREATE TABLE Student (StuID VARCHAR, age INTEGER)","generation":"SELECT StuID FROM Student ORDER BY age DESC LIMIT 1"}
{"answer":"SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3","question":"What parties have at least three representatives?","context":"CREATE TABLE representative (Party VARCHAR)","generation":"SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3"}
{"answer":"SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2 UNION SELECT T3.company_id, T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING COUNT(*) >= 2","question":"Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.","context":"CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR); CREATE TABLE Maintenance_Engineers (company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR, company_name VARCHAR)","generation":"SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2 UNION SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2"}
{"answer":"SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration > (SELECT MIN(duration) FROM pitstops WHERE raceid = 841)","question":"Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?","context":"CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)","generation":"SELECT DISTINCT driverid FROM pitstops WHERE duration > (SELECT MIN(duration) FROM pitstops WHERE raceid = 841)"}
{"answer":"SELECT COUNT(*) FROM cinema","question":"How many cinema do we have?","context":"CREATE TABLE cinema (Id VARCHAR)","generation":"SELECT COUNT(*) FROM cinema"}
{"answer":"SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = \"left\"","question":"List all of the ids for left-footed players with a height between 180cm and 190cm.","context":"CREATE TABLE Player_Attributes (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR); CREATE TABLE Player (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR)","generation":"SELECT T1.player_api_id FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = \"left\" AND T2.height BETWEEN 180 AND 190"}
{"answer":"SELECT invoice_number, COUNT(*) FROM Financial_transactions GROUP BY invoice_number","question":"Show the invoice number and the number of transactions for each invoice.","context":"CREATE TABLE Financial_transactions (invoice_number VARCHAR)","generation":"SELECT invoice_number, COUNT(*) FROM Financial_transactions GROUP BY invoice_number"}
{"answer":"SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30","question":"Find the ids and names of members who are under age 30 or with black membership card.","context":"CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)","generation":"SELECT name, member_id FROM member WHERE age < 30 OR Membership_card = 'Black'"}
{"answer":"SELECT DISTINCT (UnitPrice) FROM TRACK","question":"What are the distinct unit prices of all tracks?","context":"CREATE TABLE TRACK (UnitPrice VARCHAR)","generation":"SELECT DISTINCT UnitPrice FROM TRACK"}
{"answer":"SELECT roomName FROM Rooms WHERE bedType = \"King\" OR bedType = \"Queen\"","question":"List the name of rooms with king or queen bed.","context":"CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR)","generation":"SELECT roomName FROM Rooms WHERE bedType = \"King\" OR bedType = \"Queen\""}
{"answer":"SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"","question":"What are the names of musicals with nominee \"Bob Fosse\"?","context":"CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)","generation":"SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\""}
{"answer":"SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"","question":"Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".","context":"CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_manager VARCHAR); CREATE TABLE Apartments (apt_type_code VARCHAR, apt_number VARCHAR, building_id VARCHAR)","generation":"SELECT T1.apt_type_code, T1.apt_number FROM Apartments AS T1 JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T2.building_manager = \"Kyle\""}
{"answer":"SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'","question":"Which distinct source system code includes the substring 'en'?","context":"CREATE TABLE cmi_cross_references (source_system_code VARCHAR)","generation":"SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'"}
{"answer":"SELECT County_name FROM county ORDER BY Population DESC LIMIT 1","question":"Show the name of the county with the biggest population.","context":"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)","generation":"SELECT County_name FROM county ORDER BY Population DESC LIMIT 1"}
{"answer":"SELECT Competition_type, Country FROM competition","question":"What are the types and countries of competitions?","context":"CREATE TABLE competition (Competition_type VARCHAR, Country VARCHAR)","generation":"SELECT Competition_type, Country FROM competition"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10","question":"Find the names of goods that receive a rating of 10.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating VARCHAR)","generation":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10"}
{"answer":"SELECT Advisor, COUNT(*) FROM Student GROUP BY Advisor ORDER BY COUNT(Advisor) DESC LIMIT 1","question":"Which Advisor has most of students? List advisor and the number of students.","context":"CREATE TABLE Student (Advisor VARCHAR)","generation":"SELECT Advisor, COUNT(*) FROM Student GROUP BY Advisor ORDER BY COUNT(*) DESC LIMIT 1"}
