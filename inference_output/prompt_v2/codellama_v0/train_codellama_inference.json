{"answer":"SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Which type of policy is most frequently used? Give me the policy type code.","context":"CREATE TABLE policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code\nFROM policies\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1","question":"Show the flight number and distance of the flight with maximum price.","context":"CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)","generation":"SELECT f.flno, f.distance\nFROM Flight f\nWHERE f.price = (SELECT MAX(f2.price) FROM Flight f2)"}
{"answer":"SELECT order_id, SUM(product_quantity) FROM Order_items GROUP BY order_id","question":"Show order ids and the total quantity in each order.","context":"CREATE TABLE Order_items (order_id VARCHAR, product_quantity INTEGER)","generation":"SELECT order_id, SUM(product_quantity) AS total_quantity\nFROM Order_items\nGROUP BY order_id\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: This command is used to select the columns that we want to display in the result set. In this case, we want to display the order_id and the total quantity of products in each order.\n- FROM: This command is used to specify the table or tables that we want to query. In this case, we want to query the Order_items table.\n- GROUP BY: This command is used to group the result set by one or more columns. In this case, we want to group the result set by order_id.\n- SUM: This command is used to calculate the sum of a column in the result set. In this case, we want to calculate the sum of product_quantity for each order.\n\n### Query Breakdown\nHere is a breakdown of the SQL query:\n[SQL]\nSELECT order_id, SUM(product_quantity) AS total_quantity\nFROM Order_items\nGROUP BY order_id\n[\/SQL]\n\n- SELECT order_id, SUM(product_quantity) AS total_quantity: This line selects the order_id and the sum of product_quantity for each order. The AS total_quantity clause is used to give the sum of product_quantity a column name of total_quantity.\n- FROM Order_items: This line specifies the table that we want to query.\n- GROUP BY order_id: This line groups the result set by order_id.\n\n### Constraints\n- The query should return the order_id and the total quantity of products in each order.\n- The query should not return any duplicate rows.\n- The query should not return any rows where"}
{"answer":"SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20","question":"Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?","context":"CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR); CREATE TABLE driverstandings (driverid VARCHAR, points VARCHAR, position VARCHAR, wins VARCHAR)","generation":"SELECT DISTINCT drivers.forename\nFROM drivers\nJOIN driverstandings ON drivers.driverid = driverstandings.driverid\nWHERE driverstandings.position = '1'\nAND driverstandings.points > 20\nAND driverstandings.wins = '1'"}
{"answer":"SELECT COUNT(*) FROM follows","question":"How many followers does each user have?","context":"CREATE TABLE follows (Id VARCHAR)","generation":"SELECT Id, COUNT(*) AS followers\nFROM follows\nGROUP BY Id\nORDER BY followers DESC\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Selects the columns to be returned in the result set. In this case, we want to return the user's ID and the number of followers they have.\n- COUNT(\\*): Counts the number of rows in the result set.\n- GROUP BY: Groups the result set by the user's ID.\n- ORDER BY: Orders the result set by the number of followers in descending order.\n\n### Query Breakdown\nHere is a breakdown of the query:\n[SQL]\nSELECT Id, COUNT(*) AS followers\nFROM follows\nGROUP BY Id\nORDER BY followers DESC\n[\/SQL]\n\n### Expected Output\nThe query should return a result set with the user's ID and the number of followers they have. The result set should be ordered by the number of followers in descending order.\n\n### Constraints\n- The query should run on a database with the following schema:\nCREATE TABLE follows (Id VARCHAR)\n- The query should return a result set with the user's ID and the number of followers they have.\n- The result set should be ordered by the number of followers in descending order.\n\n### Example Input\nNone\n\n### Example Output\nNone\n\n### Constraints\n- The query should run on a database with the following schema:\nCREATE TABLE follows (Id VARCHAR)\n- The query should return a result set with the user's ID and the number of followers they have.\n- The result set should be ordered by the number of followers in descending order.\n\n### Example Input\nNone"}
{"answer":"SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\"","question":"What is the description of the restaurant type Sandwich?","context":"CREATE TABLE Restaurant_Type (ResTypeDescription VARCHAR, ResTypeName VARCHAR)","generation":"SELECT ResTypeDescription\nFROM Restaurant_Type\nWHERE ResTypeName = 'Sandwich'"}
{"answer":"SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'","question":"Find the department name of the instructor whose name contains 'Soisalon'.","context":"CREATE TABLE instructor (dept_name VARCHAR, name VARCHAR)","generation":"SELECT dept_name\nFROM instructor\nWHERE name LIKE '%Soisalon%'"}
{"answer":"SELECT T1.part_name, COUNT(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name","question":"How many assets can each parts be used in? List the part name and the number.","context":"CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Asset_Parts (part_id VARCHAR)","generation":"SELECT Parts.part_name, COUNT(Asset_Parts.part_id)\nFROM Parts\nLEFT JOIN Asset_Parts ON Parts.part_id = Asset_Parts.part_id\nGROUP BY Parts.part_name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the Parts and Asset_Parts tables. The COUNT function counts the number of rows in the Asset_Parts table for each part. The GROUP BY clause groups the results by part name.\n\n### Example\nThe following example shows the output of the query:\n[SQL]\nSELECT Parts.part_name, COUNT(Asset_Parts.part_id)\nFROM Parts\nLEFT JOIN Asset_Parts ON Parts.part_id = Asset_Parts.part_id\nGROUP BY Parts.part_name\n[\/SQL]\n\n| part_name | COUNT(Asset_Parts.part_id) |\n| --- | --- |\n| Part1 | 3 |\n| Part2 | 2 |\n| Part3 | 1 |\n\nThe query shows that Part1 can be used in 3 assets, Part2 can be used in 2 assets, and Part3 can be used in 1 asset."}
{"answer":"SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING COUNT(*) >= 2","question":"What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?","context":"CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR)","generation":"SELECT drivers.driverid, drivers.forename, drivers.surname\nFROM drivers\nJOIN laptimes\nON drivers.driverid = laptimes.driverid\nGROUP BY drivers.driverid\nHAVING COUNT(DISTINCT laptimes.position) >= 2\nORDER BY laptimes.position ASC\nLIMIT 1"}
{"answer":"SELECT T1.part_id, T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which part fault requires the most number of skills to fix? List part id and name.","context":"CREATE TABLE Part_Faults (part_id VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR); CREATE TABLE Parts (part_id VARCHAR, part_name VARCHAR)","generation":"SELECT Parts.part_id, Parts.part_name\nFROM Parts\nJOIN Part_Faults ON Parts.part_id = Part_Faults.part_id\nJOIN Skills_Required_To_Fix ON Part_Faults.part_fault_id = Skills_Required_To_Fix.part_fault_id\nGROUP BY Parts.part_id, Parts.part_name\nORDER BY COUNT(Skills_Required_To_Fix.part_fault_id) DESC\nLIMIT 1"}
{"answer":"SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000","question":"What is the name of the movie produced after 2000 and directed by James Cameron?","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)","generation":"SELECT title\nFROM Movie\nWHERE YEAR > 2000 AND director = 'James Cameron'"}
{"answer":"SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse'","question":"find all dependent names who have a spouse relation with some employee.","context":"CREATE TABLE dependent (Dependent_name VARCHAR, relationship VARCHAR)","generation":"SELECT Dependent_name\nFROM dependent\nWHERE relationship = 'spouse'"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Jeremy\" AND t1.lname = \"Gibbons\"","question":"What are the titles of papers published by \"Jeremy Gibbons\"?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (SELECT paperid\n                  FROM authorship\n                  WHERE authid = 'Gibbons, Jeremy')"}
{"answer":"SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9","question":"Show the names of all the donors except those whose donation amount less than 9.","context":"CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)","generation":"SELECT donator_name\nFROM endowment\nWHERE amount >= 9"}
{"answer":"SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'","question":"Find the name of customers who have both saving and checking account types.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)","generation":"SELECT cust_name\nFROM customer\nWHERE acc_type = 'saving' AND acc_type = 'checking'"}
{"answer":"SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5","question":"List the top 5 genres by number of tracks. List genres name and total tracks.","context":"CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)","generation":"SELECT genres.name, COUNT(tracks.genre_id) AS total_tracks\nFROM tracks\nJOIN genres ON tracks.genre_id = genres.id\nGROUP BY genres.name\nORDER BY total_tracks DESC\nLIMIT 5"}
{"answer":"SELECT T1.Participant_ID, T1.Participant_Type_Code, COUNT(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID","question":"How many events have each participants attended? List the participant id, type and the number.","context":"CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR); CREATE TABLE Participants_in_Events (Participant_ID VARCHAR)","generation":"SELECT Participants.Participant_ID, Participants.Participant_Type_Code, COUNT(Participants_in_Events.Participant_ID) AS Number_of_Events\nFROM Participants\nLEFT JOIN Participants_in_Events ON Participants.Participant_ID = Participants_in_Events.Participant_ID\nGROUP BY Participants.Participant_ID, Participants.Participant_Type_Code\n[\/SQL]"}
{"answer":"SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\"","question":"What are the life spans of representatives from New York state or Indiana state?","context":"CREATE TABLE representative (Lifespan VARCHAR, State VARCHAR)","generation":"SELECT Lifespan\nFROM representative\nWHERE State = 'New York' OR State = 'Indiana'"}
{"answer":"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Blanche\" AND T2.customer_last_name = \"Huels\" AND T1.card_type_code = \"Credit\"","question":"How many credit cards does customer Blanche Huels have?","context":"CREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT COUNT(*)\nFROM Customers_cards\nWHERE customer_id = 'Blanche Huels'"}
{"answer":"SELECT player FROM match_season ORDER BY College","question":"Return all players sorted by college in ascending alphabetical order.","context":"CREATE TABLE match_season (player VARCHAR, College VARCHAR)","generation":"SELECT player, College\nFROM match_season\nORDER BY College ASC"}
{"answer":"SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY COUNT(T2.decor) LIMIT 1","question":"What kind of decor has the least number of reservations?","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (decor VARCHAR, RoomId VARCHAR)","generation":"SELECT decor\nFROM Rooms\nWHERE RoomId NOT IN (SELECT RoomId\n                     FROM Reservations)\nORDER BY COUNT(RoomId) ASC\nLIMIT 1"}
{"answer":"SELECT Player FROM match_season WHERE College = \"UCLA\"","question":"Show the players from college UCLA.","context":"CREATE TABLE match_season (Player VARCHAR, College VARCHAR)","generation":"SELECT Player\nFROM match_season\nWHERE College = 'UCLA'"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"Japan\" AND t2.authorder = 1 AND t1.lname = \"Ohori\"","question":"Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  WHERE authid IN (\n    SELECT authid\n    FROM authors\n    WHERE lname = 'Ohori'\n  )\n  AND instid IN (\n    SELECT instid\n    FROM inst\n    WHERE country = 'Japan'\n  )\n)"}
{"answer":"SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1","question":"Find the name of the most expensive product.","context":"CREATE TABLE products (product_name VARCHAR, product_price VARCHAR)","generation":"SELECT product_name\nFROM products\nORDER BY product_price DESC\nLIMIT 1"}
{"answer":"SELECT Roles.role_description, COUNT(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING COUNT(Employees.employee_id) > 1","question":"List roles that have more than one employee. List the role description and number of employees.","context":"CREATE TABLE ROLES (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT r.Description, COUNT(e.Id)\nFROM Employees e\nJOIN Roles r ON e.RoleId = r.Id\nGROUP BY r.Description\nHAVING COUNT(e.Id) > 1"}
{"answer":"SELECT origin, COUNT(*) FROM Flight GROUP BY origin","question":"Show all origins and the number of flights from each origin.","context":"CREATE TABLE Flight (origin VARCHAR)","generation":"SELECT origin, COUNT(*)\nFROM Flight\nGROUP BY origin\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the flights by origin. The COUNT(*) function counts the number of flights for each origin. The query then selects the origin and the number of flights for each origin.\n\n### Query Breakdown\n- SELECT origin, COUNT(*)\n    - origin: The origin of the flight\n    - COUNT(*): The number of flights from each origin\n- FROM Flight\n    - Flight: The table containing the flights\n- GROUP BY origin\n    - The GROUP BY clause groups the flights by origin\n\n### Constraints\n- The query should run on a database with the following schema:\n    - CREATE TABLE Flight (origin VARCHAR)\n\n### Example\n- Example 1:\n    - Input:\n        - origin VARCHAR\n    - Output:\n        - origin | COUNT(*)\n        - ----------|----------\n        - LHR | 10\n        - JFK | 15\n        - LHR | 5\n        - JFK | 10\n    - Explanation:\n        - The query groups the flights by origin and counts the number of flights for each origin.\n\n### Note\n- The query should run on a database with the following schema:\n    - CREATE TABLE Flight (origin VARCHAR)"}
{"answer":"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown <> \"Santo Domingo\"","question":"What are the names of gymnasts whose hometown is not \"Santo Domingo\"?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Hometown VARCHAR)","generation":"SELECT Name\nFROM people\nWHERE Hometown != 'Santo Domingo'"}
{"answer":"SELECT COUNT(*) FROM Employees","question":"How many employees do we have?","context":"CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM Employees"}
{"answer":"SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8","question":"How many days had both mean humidity above 50 and mean visibility above 8?","context":"CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)","generation":"SELECT COUNT(*)\nFROM weather\nWHERE mean_humidity > 50 AND mean_visibility_miles > 8"}
{"answer":"SELECT first_name FROM customer WHERE NOT customer_id IN (SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01')","question":"What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?","context":"CREATE TABLE customer (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER); CREATE TABLE rental (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER)","generation":"SELECT first_name\nFROM customer\nWHERE customer_id NOT IN (SELECT customer_id\n                          FROM rental\n                          WHERE rental_date > '2005-08-23 02:06:01')"}
{"answer":"SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full'","question":"Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, Accreditation_type VARCHAR)","generation":"SELECT Hardware_Model_name, Company_name\nFROM phone\nWHERE Accreditation_type LIKE '%Full%'"}
{"answer":"SELECT Total_Horses FROM farm ORDER BY Total_Horses","question":"List the total number of horses on farms in ascending order.","context":"CREATE TABLE farm (Total_Horses VARCHAR)","generation":"SELECT Total_Horses\nFROM farm\nORDER BY Total_Horses ASC"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1","question":"What is the customer first, last name and id with least number of accounts.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT Customers.customer_first_name, Customers.customer_last_name, Customers.customer_id\nFROM Customers\nJOIN Accounts\nON Customers.customer_id = Accounts.customer_id\nGROUP BY Customers.customer_id\nORDER BY COUNT(Accounts.customer_id) ASC\nLIMIT 1"}
{"answer":"SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the location shared by most counties?","context":"CREATE TABLE county_public_safety (LOCATION VARCHAR)","generation":"SELECT LOCATION\nFROM county_public_safety\nGROUP BY LOCATION\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1","question":"Which catalog publisher has published the most catalogs?","context":"CREATE TABLE catalogs (catalog_publisher VARCHAR)","generation":"SELECT catalog_publisher\nFROM catalogs\nGROUP BY catalog_publisher\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT detention_type_code FROM Detention","question":"Return all distinct detention type codes.","context":"CREATE TABLE Detention (detention_type_code VARCHAR)","generation":"SELECT DISTINCT detention_type_code\nFROM Detention"}
{"answer":"SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10","question":"Find the name and level of catalog structure with level between 5 and 10.","context":"CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)","generation":"SELECT catalog_level_name, catalog_level_number\nFROM Catalog_Structure\nWHERE catalog_level_number BETWEEN 5 AND 10"}
{"answer":"SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000","question":"Find the names and average salaries of all departments whose average salary is greater than 42000.","context":"CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)","generation":"SELECT dept_name, AVG(salary)\nFROM instructor\nGROUP BY dept_name\nHAVING AVG(salary) > 42000"}
{"answer":"SELECT T1.staff_name, COUNT(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name","question":"How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.","context":"CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR)","generation":"SELECT staff.staff_name, COUNT(Engineer_Visits.contact_staff_id) AS number_of_engineers_contacted\nFROM Staff\nLEFT JOIN Engineer_Visits ON Engineer_Visits.contact_staff_id = Staff.staff_id\nGROUP BY staff.staff_name\nORDER BY staff.staff_name"}
{"answer":"SELECT Major, COUNT(*) FROM Student GROUP BY Major HAVING COUNT(Major) BETWEEN 2 AND 30","question":"Which major has between 2 and 30 number of students? List major and the number of students.","context":"CREATE TABLE Student (Major VARCHAR)","generation":"SELECT Major, COUNT(*) AS NumberOfStudents\nFROM Student\nGROUP BY Major\nHAVING COUNT(*) BETWEEN 2 AND 30"}
{"answer":"SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id","question":"Show the apartment numbers, start dates, and end dates of all the apartment bookings.","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)","generation":"SELECT Apartments.apt_number, Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartments\nJOIN Apartment_Bookings\nON Apartments.apt_id = Apartment_Bookings.apt_id\n[\/SQL]"}
{"answer":"SELECT T3.EMP_FNAME, T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = \"Biology\"","question":"What is the first and last name of the professor in biology department?","context":"CREATE TABLE professor (dept_code VARCHAR, EMP_NUM VARCHAR); CREATE TABLE department (dept_code VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_LNAME VARCHAR, EMP_NUM VARCHAR)","generation":"SELECT EMP_FNAME, EMP_LNAME\nFROM professor\nJOIN employee ON professor.EMP_NUM = employee.EMP_NUM\nJOIN department ON professor.dept_code = department.dept_code\nWHERE department.dept_code = 'BIOL'"}
{"answer":"SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"","question":"Find id of candidates whose assessment code is \"Pass\"?","context":"CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)","generation":"SELECT candidate_id\nFROM candidate_assessments\nWHERE asessment_outcome_code = 'Pass'"}
{"answer":"SELECT COUNT(*) FROM player","question":"How many players are there?","context":"CREATE TABLE player (Id VARCHAR)","generation":"SELECT COUNT(*) FROM player"}
{"answer":"SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'","question":"What are the distinct ages of the heads who are acting?","context":"CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)","generation":"SELECT DISTINCT age\nFROM head\nJOIN management\nON head.head_id = management.head_id\nWHERE temporary_acting = 'yes'"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300","question":"What are the names of body builders whose total score is higher than 300?","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)","generation":"SELECT Name\nFROM people\nWHERE People_ID IN (\n  SELECT People_ID\n  FROM body_builder\n  WHERE Total > 300\n)"}
{"answer":"SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3","question":"Show the top 3 most common colleges of players in match seasons.","context":"CREATE TABLE match_season (College VARCHAR)","generation":"SELECT College, COUNT(*) AS Count\nFROM match_season\nGROUP BY College\nORDER BY Count DESC\nLIMIT 3"}
{"answer":"SELECT service_type_code FROM services ORDER BY service_type_code","question":"List the type of the services in alphabetical order.","context":"CREATE TABLE services (service_type_code VARCHAR)","generation":"SELECT service_type_code\nFROM services\nORDER BY service_type_code\nASC"}
{"answer":"SELECT Name FROM actor WHERE Age <> 20","question":"List the name of actors whose age is not 20.","context":"CREATE TABLE actor (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name\nFROM actor\nWHERE Age != 20"}
{"answer":"SELECT COUNT(*) FROM Flight","question":"How many flights do we have?","context":"CREATE TABLE Flight (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM Flight"}
{"answer":"SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)","question":"List the names of editors that are not on any journal committee.","context":"CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)","generation":"SELECT editor.Name\nFROM editor\nWHERE editor.editor_id NOT IN (SELECT editor_id FROM journal_committee)"}
{"answer":"SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id","question":"Show the name of track and the number of races in each track.","context":"CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)","generation":"SELECT track.name, COUNT(race.track_id)\nFROM track\nLEFT JOIN race ON track.track_id = race.track_id\nGROUP BY track.name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the track and race tables. The COUNT function counts the number of races in each track. The GROUP BY clause groups the results by track name.\n\n### Query Breakdown\n- SELECT track.name, COUNT(race.track_id)\n    - track.name: selects the name of the track\n    - COUNT(race.track_id): counts the number of races in each track\n- FROM track\n    - track: selects the track table\n- LEFT JOIN race ON track.track_id = race.track_id\n    - LEFT JOIN: joins the track and race tables\n    - race.track_id = track.track_id: specifies the join condition\n- GROUP BY track.name\n    - GROUP BY: groups the results by track name\n\n### Example Output\n| name | COUNT(race.track_id) |\n| --- | --- |\n| track1 | 3 |\n| track2 | 2 |\n| track3 | 1 |\n\n### Example Input\n| track_id | name |\n| --- | --- |\n| 1 | track1 |\n| 2 | track2 |\n| 3 | track3 |\n| 4 | track4 |\n| 5 | track5 |\n| 6 | track6 |\n| 7 | track7 |\n| 8 | track8 |\n| 9 | track9 |\n| 10 | track10 |\n\n| track_id |\n| --- |\n| 1 |\n| 2 |\n| 3 |"}
{"answer":"SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Wisconsin\"","question":"What are the first names and last names of students with address in Wisconsin state?","context":"CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Students (first_name VARCHAR, last_name VARCHAR, address_id VARCHAR)","generation":"SELECT first_name, last_name\nFROM Students\nJOIN Addresses\nON Students.address_id = Addresses.address_id\nWHERE state_province_county = 'Wisconsin'"}
{"answer":"SELECT COUNT(*) FROM region","question":"How many regions do we have?","context":"CREATE TABLE region (Id VARCHAR)","generation":"SELECT COUNT(*) FROM region"}
{"answer":"SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1","question":"What is the highest acc percent score in the competition?","context":"CREATE TABLE basketball_match (acc_percent VARCHAR)","generation":"SELECT MAX(acc_percent)\nFROM basketball_match"}
{"answer":"SELECT name, open_date, organized_by FROM Church","question":"Show the name, open date, and organizer for all churches.","context":"CREATE TABLE Church (name VARCHAR, open_date VARCHAR, organized_by VARCHAR)","generation":"SELECT name, open_date, organized_by\nFROM Church"}
{"answer":"SELECT COUNT(*) FROM customers WHERE state = \"CA\"","question":"How many customers in state of CA?","context":"CREATE TABLE customers (state VARCHAR)","generation":"SELECT COUNT(*) FROM customers WHERE state = 'CA'"}
{"answer":"SELECT SUM(enrollment), MIN(enrollment) FROM university","question":"What is the total and minimum enrollment of all schools?","context":"CREATE TABLE university (enrollment INTEGER)","generation":"SELECT SUM(enrollment) AS total_enrollment, MIN(enrollment) AS min_enrollment\nFROM university"}
{"answer":"SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id","question":"Show all customer ids and the number of accounts for each customer.","context":"CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT customer_id, COUNT(*) AS num_accounts\nFROM Accounts\nGROUP BY customer_id\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the Accounts table by the customer_id column. The COUNT(*) function counts the number of rows in each group. The AS clause renames the column num_accounts to make it more descriptive.\n\n### Example\nThe following example shows the output of the query when run on a database with the following data:\n\n| customer_id |\n| --- |\n| 1 |\n| 1 |\n| 2 |\n| 3 |\n| 3 |\n| 3 |\n\nThe output of the query is:\n\n| customer_id | num_accounts |\n| --- | --- |\n| 1 | 2 |\n| 2 | 1 |\n| 3 | 3 |\n\nThe query shows that there are 2 accounts for customer 1, 1 account for customer 2, and 3 accounts for customer 3."}
{"answer":"SELECT COUNT(*) FROM institution WHERE NOT institution_id IN (SELECT institution_id FROM protein)","question":"How many institutions do not have an associated protein in our record?","context":"CREATE TABLE protein (institution_id VARCHAR); CREATE TABLE institution (institution_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM institution\nWHERE institution_id NOT IN (SELECT institution_id FROM protein)"}
{"answer":"SELECT name FROM club ORDER BY name DESC","question":"List all club names in descending alphabetical order.","context":"CREATE TABLE club (name VARCHAR)","generation":"SELECT name FROM club ORDER BY name DESC"}
{"answer":"SELECT DISTINCT T2.emp_fname, T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'","question":"Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.","context":"CREATE TABLE professor (prof_high_degree VARCHAR, emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR)","generation":"SELECT prof_fname, prof_high_degree\nFROM professor\nJOIN employee ON prof_num = emp_num\nJOIN CLASS ON prof_num = class_prof_num\nJOIN department ON class_dept_code = dept_code\nWHERE dept_name = 'Computer Info. Systems'\n[\/SQL]\n\n### Explanation\nThe query joins the professor, employee, and class tables to find all professors who are teaching some class in the Computer Info. Systems department. The query then selects the first name and degree of the professors."}
{"answer":"SELECT DISTINCT District FROM election","question":"Show all the distinct districts for elections.","context":"CREATE TABLE election (District VARCHAR)","generation":"SELECT DISTINCT District\nFROM election"}
{"answer":"SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major <> 600 AND Sex = 'F'","question":"List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Sex VARCHAR, Age VARCHAR, Major VARCHAR)","generation":"SELECT Fname, Lname\nFROM Student\nWHERE Sex = 'F' AND Age > 18 AND Major != '600'"}
{"answer":"SELECT address FROM shop ORDER BY open_year","question":"Show the shop addresses ordered by their opening year.","context":"CREATE TABLE shop (address VARCHAR, open_year VARCHAR)","generation":"SELECT address\nFROM shop\nORDER BY open_year"}
{"answer":"SELECT AVG(t1.age), AVG(Years_working), t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type","question":"Find the average age and experience working length of journalists working on different role type.","context":"CREATE TABLE news_report (work_type VARCHAR, journalist_id VARCHAR); CREATE TABLE journalist (age INTEGER, journalist_id VARCHAR)","generation":"SELECT AVG(journalist.age), AVG(journalist.experience)\nFROM journalist\nJOIN news_report ON journalist.journalist_id = news_report.journalist_id\nGROUP BY news_report.work_type"}
{"answer":"SELECT school_name FROM school ORDER BY enrollment LIMIT 1","question":"List the name of the school with the smallest enrollment.","context":"CREATE TABLE school (school_name VARCHAR, enrollment VARCHAR)","generation":"SELECT school_name\nFROM school\nORDER BY enrollment\nLIMIT 1"}
{"answer":"SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the party that has the largest number of representatives?","context":"CREATE TABLE representative (Party VARCHAR)","generation":"SELECT Party\nFROM representative\nGROUP BY Party\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3","question":"Give me the start station and end station for the trips with the three oldest id.","context":"CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)","generation":"SELECT start_station_name, end_station_name\nFROM trip\nWHERE id IN (\n  SELECT id\n  FROM trip\n  ORDER BY id\n  LIMIT 3\n)"}
{"answer":"SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id","question":"Show all member names who are not in charge of any event.","context":"CREATE TABLE member (member_name VARCHAR); CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)","generation":"SELECT member_name\nFROM member\nWHERE member_id NOT IN (\n  SELECT member_in_charge_id\n  FROM party_events\n)"}
{"answer":"SELECT T2.emp_fname, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code","question":"Find the first names of all instructors who have taught some course and the course description.","context":"CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT e.emp_fname, c.crs_description\nFROM employee e\nJOIN class c ON e.emp_num = c.prof_num\nJOIN course crs ON c.crs_code = crs.crs_code"}
{"answer":"SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype","question":"Show all allergy types and the number of allergies in each type.","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT allergytype, COUNT(*)\nFROM Allergy_type\nGROUP BY allergytype\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: This command is used to select the columns that we want to display. In this case, we want to display the allergy type and the number of allergies in each type.\n- FROM: This command is used to specify the table or tables that we want to query. In this case, we want to query the Allergy_type table.\n- GROUP BY: This command is used to group the results by a specific column. In this case, we want to group the results by allergy type.\n- COUNT(*): This command is used to count the number of rows in each group. In this case, we want to count the number of allergies in each allergy type.\n\n### Query Breakdown\nHere is a breakdown of the SQL query:\n[SQL]\nSELECT allergytype, COUNT(*)\nFROM Allergy_type\nGROUP BY allergytype\n[\/SQL]\n\n- SELECT: This command is used to select the columns that we want to display. In this case, we want to display the allergy type and the number of allergies in each type.\n- FROM: This command is used to specify the table or tables that we want to query. In this case, we want to query the Allergy_type table.\n- GROUP BY: This command is used to group the results by a specific column. In this case, we want to group the results by allergy type.\n- COUNT(*): This command is used to count the number of rows in each group. In this case, we want to count the number of allergies in each allergy type.\n\n### Conclusion\nIn conclusion, the SQL"}
{"answer":"SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel'","question":"What is the season of the game which causes the player 'Walter Samuel' to get injured?","context":"CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR); CREATE TABLE game (season VARCHAR, id VARCHAR)","generation":"SELECT season\nFROM game\nWHERE id IN (SELECT game_id\n             FROM injury_accident\n             WHERE player = 'Walter Samuel')"}
{"answer":"SELECT Date, Venue FROM debate","question":"What are the date and venue of each debate?","context":"CREATE TABLE debate (Date VARCHAR, Venue VARCHAR)","generation":"SELECT Date, Venue FROM debate"}
{"answer":"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\"","question":"How many trips started from Mountain View city and ended at Palo Alto city?","context":"CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)","generation":"SELECT COUNT(*)\nFROM trip\nWHERE start_station_id IN (SELECT id FROM station WHERE city = 'Mountain View')\nAND end_station_id IN (SELECT id FROM station WHERE city = 'Palo Alto')\n[\/SQL]\n\n### Explanation\nThe query first selects the id of the stations in Mountain View city using the subquery.\n\nThe query then selects the id of the stations in Palo Alto city using the subquery.\n\nThe query then selects the trips that start from the stations in Mountain View city and end at the stations in Palo Alto city using the WHERE clause.\n\nThe query then counts the number of trips using COUNT(\\*).\n\nThe query ends with \""}
{"answer":"SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1","question":"Find the name and email of the user followed by the least number of people.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)","generation":"SELECT name, email\nFROM user_profiles\nORDER BY followers ASC\nLIMIT 1"}
{"answer":"SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)","question":"Show the name, location, open year for all tracks with a seating higher than the average.","context":"CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)","generation":"SELECT name, location, year_opened\nFROM track\nWHERE seating > (SELECT AVG(seating) FROM track)"}
{"answer":"SELECT SUM(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Francisco State University\"","question":"What is the number of graduates in \"San Francisco State University\" in year 2004?","context":"CREATE TABLE discipline_enrollments (graduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)","generation":"SELECT COUNT(graduate)\nFROM discipline_enrollments\nWHERE campus = 'San Francisco State University'\nAND year = '2004'"}
{"answer":"SELECT school_name FROM school WHERE NOT school_id IN (SELECT school_id FROM endowment)","question":"List the names of the schools without any endowment.","context":"CREATE TABLE endowment (school_name VARCHAR, school_id VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)","generation":"SELECT school.school_name\nFROM school\nLEFT JOIN endowment\nON school.school_id = endowment.school_id\nWHERE endowment.school_id IS NULL"}
{"answer":"SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1","question":"Show publishers that have more than one publication.","context":"CREATE TABLE publication (Publisher VARCHAR)","generation":"SELECT Publisher\nFROM publication\nGROUP BY Publisher\nHAVING COUNT(*) > 1"}
{"answer":"SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics'","question":"How many different courses offered by Physics department?","context":"CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)","generation":"SELECT COUNT(DISTINCT course_id)\nFROM course\nWHERE dept_name = 'Physics'"}
{"answer":"SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64","question":"Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.","context":"CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)","generation":"SELECT Carrier\nFROM phone\nWHERE Memory_in_G < 32 AND Memory_in_G > 64\nGROUP BY Carrier\nHAVING COUNT(DISTINCT Memory_in_G) = 2"}
{"answer":"SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959","question":"Show the minister who took office after 1961 or before 1959.","context":"CREATE TABLE party (minister VARCHAR, took_office VARCHAR)","generation":"SELECT minister\nFROM party\nWHERE took_office > 1961 OR took_office < 1959"}
{"answer":"SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20","question":"Show the host names for parties with number of hosts greater than 20.","context":"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Number_of_hosts INTEGER)","generation":"SELECT HOST.Name\nFROM HOST\nINNER JOIN party_host ON HOST.Host_ID = party_host.Host_ID\nINNER JOIN party ON party_host.Party_ID = party.Party_ID\nWHERE party.Number_of_hosts > 20"}
{"answer":"SELECT COUNT(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'","question":"How many restaurant is the Sandwich type restaurant?","context":"CREATE TABLE Type_Of_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR); CREATE TABLE Restaurant_Type (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM Restaurant\nINNER JOIN Restaurant_Type ON Restaurant.Id = Restaurant_Type.Id\nINNER JOIN Type_Of_Restaurant ON Restaurant_Type.Id = Type_Of_Restaurant.Id\nWHERE Type_Of_Restaurant.Id = 'Sandwich'"}
{"answer":"SELECT COUNT(*), customer_id FROM Accounts GROUP BY customer_id","question":"How many accounts does each customer have? List the number and customer id.","context":"CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT customer_id, COUNT(*) AS number_of_accounts\nFROM Accounts\nGROUP BY customer_id\nORDER BY customer_id\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Returns all columns from the table.\n- COUNT(*): Counts the number of rows in the table.\n- GROUP BY: Groups the rows by the customer_id column.\n- ORDER BY: Sorts the rows by the customer_id column.\n\nThe query returns the customer_id and the number of accounts for each customer.\n\n### Example\nThe following example shows the result of the query:\n[SQL]\nSELECT customer_id, COUNT(*) AS number_of_accounts\nFROM Accounts\nGROUP BY customer_id\nORDER BY customer_id\n[\/SQL]\n\n| customer_id | number_of_accounts |\n| --- | --- |\n| 1 | 2 |\n| 2 | 1 |\n| 3 | 3 |\n\nThe query returns the following result:\n- The customer_id 1 has 2 accounts.\n- The customer_id 2 has 1 account.\n- The customer_id 3 has 3 accounts."}
{"answer":"SELECT COUNT(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = \"ACCT-211\"","question":"How many professors are teaching class with code ACCT-211?","context":"CREATE TABLE CLASS (PROF_NUM VARCHAR, CRS_CODE VARCHAR)","generation":"SELECT COUNT(DISTINCT PROF_NUM)\nFROM CLASS\nWHERE CRS_CODE = 'ACCT-211'"}
{"answer":"SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1","question":"List the countries that have more than one mountain.","context":"CREATE TABLE mountain (Country VARCHAR)","generation":"SELECT Country\nFROM mountain\nGROUP BY Country\nHAVING COUNT(*) > 1"}
{"answer":"SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32","question":"List the distinct carriers of phones with memories bigger than 32.","context":"CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)","generation":"SELECT DISTINCT Carrier\nFROM phone\nWHERE Memory_in_G > 32"}
{"answer":"SELECT Name FROM People ORDER BY Age DESC LIMIT 5","question":"List the names of the top 5 oldest people.","context":"CREATE TABLE People (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name\nFROM People\nORDER BY Age DESC\nLIMIT 5"}
{"answer":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM checking)","question":"Find the name of accounts whose checking balance is below the average checking balance.","context":"CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)","generation":"SELECT name\nFROM accounts\nWHERE checking.balance < (SELECT AVG(balance) FROM checking)"}
{"answer":"SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)","question":"Find the names of students who have taken any course in the fall semester of year 2003.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR); CREATE TABLE takes (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT name\nFROM student\nWHERE semester = 'Fall'\nAND YEAR = '2003'"}
{"answer":"SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1","question":"List the writers who have written more than one book.","context":"CREATE TABLE book (Writer VARCHAR)","generation":"SELECT Writer\nFROM book\nGROUP BY Writer\nHAVING COUNT(*) > 1"}
{"answer":"SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING COUNT(*) >= 2","question":"Show the region name with at least two storms.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)","generation":"SELECT region_name\nFROM region\nWHERE region_id IN (\n  SELECT region_id\n  FROM affected_region\n  GROUP BY region_id\n  HAVING COUNT(*) >= 2\n)"}
{"answer":"SELECT customer_details FROM customers ORDER BY customer_details","question":"List the names of all the customers in alphabetical order.","context":"CREATE TABLE customers (customer_details VARCHAR)","generation":"SELECT customer_details\nFROM customers\nORDER BY customer_details ASC"}
{"answer":"SELECT COUNT(*) FROM university WHERE LOCATION LIKE \"%NY%\"","question":"Find how many school locations have the word 'NY'.","context":"CREATE TABLE university (LOCATION VARCHAR)","generation":"SELECT COUNT(*)\nFROM university\nWHERE LOCATION LIKE '%NY%'"}
{"answer":"SELECT Name FROM People ORDER BY Height","question":"What are the names of people in ascending order of height?","context":"CREATE TABLE People (Name VARCHAR, Height VARCHAR)","generation":"SELECT Name\nFROM People\nORDER BY Height ASC"}
{"answer":"SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id","question":"List member names and their party names.","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)","generation":"SELECT member_name, party_name\nFROM Member\nJOIN party ON Member.party_id = party.party_id"}
{"answer":"SELECT SUM(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname","question":"Find the total amount of loans offered by each bank branch.","context":"CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)","generation":"SELECT branch_id, COUNT(*) AS total_loans\nFROM loan\nGROUP BY branch_id\nORDER BY total_loans DESC"}
{"answer":"SELECT COUNT(DISTINCT dept_name) FROM department","question":"How many departments does the college has?","context":"CREATE TABLE department (dept_name VARCHAR)","generation":"SELECT COUNT(*)\nFROM department"}
{"answer":"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3","question":"Find the names of all reviewers who have contributed three or more ratings.","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR)","generation":"SELECT name\nFROM Reviewer\nWHERE rID IN (\n  SELECT rID\n  FROM Rating\n  GROUP BY rID\n  HAVING COUNT(*) >= 3\n)"}
{"answer":"SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING COUNT(*) >= 4","question":"Show the account id and name with at least 4 transactions.","context":"CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)","generation":"SELECT account_id, account_name\nFROM Accounts\nJOIN Financial_transactions\nON Accounts.account_id = Financial_transactions.account_id\nGROUP BY account_id, account_name\nHAVING COUNT(*) >= 4"}
{"answer":"SELECT DISTINCT LOCATION FROM cinema","question":"What are all the locations with a cinema?","context":"CREATE TABLE cinema (LOCATION VARCHAR)","generation":"SELECT DISTINCT LOCATION\nFROM cinema"}
{"answer":"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99","question":"What is the aircraft name for the flight with number 99","context":"CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)","generation":"SELECT Aircraft.name\nFROM Flight\nINNER JOIN Aircraft ON Flight.aid = Aircraft.aid\nWHERE Flight.flno = '99'"}
{"answer":"SELECT COUNT(DISTINCT student_id) FROM Students_in_Detention","question":"How many distinct students have been in detention?","context":"CREATE TABLE Students_in_Detention (student_id VARCHAR)","generation":"SELECT COUNT(DISTINCT student_id)\nFROM Students_in_Detention"}
{"answer":"SELECT Official_Name FROM city ORDER BY Population DESC","question":"List official names of cities in descending order of population.","context":"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)","generation":"SELECT Official_Name\nFROM city\nORDER BY Population DESC"}
{"answer":"SELECT COUNT(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'","question":"How many classes are professor whose last name is Graztevski has?","context":"CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_NUM VARCHAR, EMP_LNAME VARCHAR)","generation":"SELECT COUNT(*)\nFROM CLASS\nWHERE PROF_NUM IN (SELECT EMP_NUM\n                   FROM employee\n                   WHERE EMP_LNAME = 'Graztevski')"}
{"answer":"SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636","question":"What is the total and maximum duration of trips with bike id 636?","context":"CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)","generation":"SELECT SUM(duration), MAX(duration)\nFROM trip\nWHERE bike_id = 636"}
{"answer":"SELECT AVG(rating), MAX(rating) FROM review","question":"Find the average and maximum rating of all reviews.","context":"CREATE TABLE review (rating INTEGER)","generation":"SELECT AVG(rating), MAX(rating) FROM review"}
{"answer":"SELECT institution, LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'","question":"Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".","context":"CREATE TABLE institution (institution VARCHAR, LOCATION VARCHAR, founded VARCHAR, TYPE VARCHAR)","generation":"SELECT institution, location\nFROM institution\nWHERE founded > '1990'\nAND type = 'Private'"}
{"answer":"SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF'","question":"What is the genre name of the film HUNGER ROOF?","context":"CREATE TABLE film_category (category_id VARCHAR, film_id VARCHAR); CREATE TABLE film (film_id VARCHAR, title VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)","generation":"SELECT category.name\nFROM film\nJOIN film_category ON film.film_id = film_category.film_id\nJOIN category ON film_category.category_id = category.category_id\nWHERE film.title = 'HUNGER ROOF'"}
{"answer":"SELECT age, COUNT(*) FROM Student GROUP BY age","question":"Show all ages and corresponding number of students.","context":"CREATE TABLE Student (age VARCHAR)","generation":"SELECT age, COUNT(*) AS number_of_students\nFROM Student\nGROUP BY age\nORDER BY age\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: retrieves data from the database.\n- COUNT(*): counts the number of rows in the result set.\n- GROUP BY: groups the result set by the specified column(s).\n- ORDER BY: sorts the result set by the specified column(s).\n\nThe query retrieves the age column from the Student table and counts the number of rows in the result set. The result set is then grouped by the age column and sorted by the age column.\n\n### Query Breakdown\nThe query can be broken down into the following parts:\n- SELECT: retrieves the age column from the Student table.\n- COUNT(*): counts the number of rows in the result set.\n- GROUP BY: groups the result set by the age column.\n- ORDER BY: sorts the result set by the age column.\n\n### Constraints\n- The query should retrieve the age column from the Student table.\n- The query should count the number of rows in the result set.\n- The query should group the result set by the age column.\n- The query should sort the result set by the age column.\n\n### Example\nThe following example demonstrates the query in action:\n[SQL]\nSELECT age, COUNT(*) AS number_of_students\nFROM Student\nGROUP BY age\nORDER BY age\n[\/SQL]\n\nThe query retrieves the age column from the Student table and counts the number of rows in the result set. The result set is then grouped by the age column and sorted by the age column.\n\nThe following table demonstrates the result set:\n[SQL]\nage | number_of_students\n10"}
{"answer":"SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID","question":"Show the names of people, and dates and venues of debates they are on the affirmative side.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)","generation":"SELECT people.Name, debate.Date, debate.Venue\nFROM people\nJOIN debate_people ON people.People_ID = debate_people.Debate_ID\nJOIN debate ON debate_people.Debate_ID = debate.Debate_ID\nWHERE debate_people.Affirmative = 'Y'"}
{"answer":"SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)","question":"How many artists do not have any album?","context":"CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)","generation":"SELECT COUNT(DISTINCT artistid)\nFROM ARTIST\nWHERE artistid NOT IN (SELECT artistid FROM ALBUM)"}
{"answer":"SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200","question":"Find the ids and names of stations from which at least 200 trips started.","context":"CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)","generation":"SELECT start_station_id, start_station_name\nFROM trip\nGROUP BY start_station_id, start_station_name\nHAVING COUNT(*) >= 200"}
{"answer":"SELECT decor, COUNT(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor","question":"Find the number of rooms with king bed for each decor type.","context":"CREATE TABLE Rooms (decor VARCHAR, bedType VARCHAR)","generation":"SELECT decor, COUNT(bedType)\nFROM Rooms\nWHERE bedType = 'king'\nGROUP BY decor"}
{"answer":"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"","question":"Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".","context":"CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)","generation":"SELECT customers.customer_name\nFROM customers\nJOIN first_notification_of_loss ON customers.customer_id = first_notification_of_loss.customer_id\nJOIN services ON first_notification_of_loss.service_id = services.service_id\nWHERE services.service_name IN (\"Close a policy\", \"Upgrade a policy\")"}
{"answer":"SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC","question":"Show theme and year for all exhibitions in an descending order of ticket price.","context":"CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price VARCHAR)","generation":"SELECT theme, YEAR, ticket_price\nFROM exhibition\nORDER BY ticket_price DESC"}
{"answer":"SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the storm name and max speed which affected the greatest number of regions?","context":"CREATE TABLE storm (name VARCHAR, max_speed VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR)","generation":"SELECT storm.name, storm.max_speed\nFROM storm\nJOIN affected_region ON storm.storm_id = affected_region.storm_id\nGROUP BY storm.name, storm.max_speed\nORDER BY COUNT(affected_region.storm_id) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.'","question":"How many professors do have a Ph.D. degree?","context":"CREATE TABLE professor (prof_high_degree VARCHAR)","generation":"SELECT COUNT(*)\nFROM professor\nWHERE prof_high_degree = 'Ph.D.'"}
{"answer":"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\"","question":"Show all flight numbers with aircraft Airbus A340-300.","context":"CREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT f.flno\nFROM Flight f\nJOIN Aircraft a ON f.aid = a.aid\nWHERE a.name = 'Airbus A340-300'"}
{"answer":"SELECT COUNT(*) FROM editor","question":"How many editors are there?","context":"CREATE TABLE editor (Id VARCHAR)","generation":"SELECT COUNT(*) FROM editor"}
{"answer":"SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC","question":"Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT accounts.name, checking.balance AS checking_balance, savings.balance AS savings_balance\nFROM accounts\nLEFT JOIN checking ON accounts.custid = checking.custid\nLEFT JOIN savings ON accounts.custid = savings.custid\nORDER BY checking_balance + savings_balance DESC"}
{"answer":"SELECT T1.stu_fname, T1.stu_lname, T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code","question":"Find names of all students who took some course and the course description.","context":"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)","generation":"SELECT student.stu_fname, student.stu_lname, course.crs_description\nFROM student\nJOIN enroll ON student.stu_num = enroll.stu_num\nJOIN course ON course.crs_code = enroll.class_code\n[\/SQL]\n\n### Explanation\nThe query joins the student table with the enroll table on the stu_num column. It then joins the enroll table with the course table on the crs_code column. The resulting table contains the student's first and last name, as well as the course description.\n\n### Query Breakdown\n- SELECT student.stu_fname, student.stu_lname, course.crs_description\n    - This line selects the student's first and last name, as well as the course description.\n- FROM student\n    - This line specifies the student table.\n- JOIN enroll ON student.stu_num = enroll.stu_num\n    - This line joins the student table with the enroll table on the stu_num column.\n- JOIN course ON course.crs_code = enroll.class_code\n    - This line joins the enroll table with the course table on the crs_code column.\n\n### Constraints\n- The query should return the names of all students who took some course and the course description.\n- The query should not return any duplicate rows.\n- The query should not return any rows where the student did not take any course.\n- The query should not return any rows where the course does not exist.\n- The query should not return any rows where the student does not exist.\n- The query should not return any rows where the student's first name is NULL.\n- The query should not return"}
{"answer":"SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"","question":"Which city does student Linda Smith live in?","context":"CREATE TABLE Student (city_code VARCHAR, Fname VARCHAR, Lname VARCHAR)","generation":"SELECT city_code\nFROM Student\nWHERE Fname = 'Linda'\nAND Lname = 'Smith'"}
{"answer":"SELECT COUNT(DISTINCT Birth_Place) FROM people","question":"How many distinct birth places are there?","context":"CREATE TABLE people (Birth_Place VARCHAR)","generation":"SELECT COUNT(DISTINCT Birth_Place)\nFROM people"}
{"answer":"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"","question":"How many students attend course English?","context":"CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)","generation":"SELECT COUNT(*)\nFROM student_course_attendance\nWHERE course_id = 'English'"}
{"answer":"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT MAX(start_date) FROM policies)","question":"Which customer is associated with the latest policy?","context":"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (start_date INTEGER); CREATE TABLE policies (customer_id VARCHAR, start_date INTEGER)","generation":"SELECT customer_id\nFROM policies\nINNER JOIN customers\nON policies.customer_id = customers.customer_id\nWHERE policies.start_date = (SELECT MAX(start_date) FROM policies)"}
{"answer":"SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"","question":"How many customers does Steve Johnson support?","context":"CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM customers\nWHERE support_rep_id = 'Steve Johnson'"}
{"answer":"SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most popular full name of the actors?","context":"CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR)","generation":"SELECT first_name, last_name, COUNT(*) AS count\nFROM actor\nGROUP BY first_name, last_name\nORDER BY count DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C'","question":"What is the first name of students who got grade C in any class?","context":"CREATE TABLE student (stu_num VARCHAR); CREATE TABLE enroll (stu_num VARCHAR)","generation":"SELECT student.first_name\nFROM student\nJOIN enroll ON student.stu_num = enroll.stu_num\nWHERE enroll.grade = 'C'"}
{"answer":"SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the most common age of editors.","context":"CREATE TABLE editor (Age VARCHAR)","generation":"SELECT Age\nFROM editor\nORDER BY Age\nLIMIT 1"}
{"answer":"SELECT AVG(no_of_customers) FROM bank","question":"Find the average number of customers cross all banks.","context":"CREATE TABLE bank (no_of_customers INTEGER)","generation":"SELECT AVG(no_of_customers) FROM bank"}
{"answer":"SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1","question":"Which department has more than 1 head at a time? List the id, name and the number of heads.","context":"CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)","generation":"SELECT department.department_id, department.name, COUNT(management.department_id) AS number_of_heads\nFROM department\nLEFT JOIN management ON department.department_id = management.department_id\nGROUP BY department.department_id\nHAVING COUNT(management.department_id) > 1"}
{"answer":"SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)","question":"Find the average credit score of the customers who have some loan.","context":"CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)","generation":"SELECT AVG(credit_score)\nFROM customer\nWHERE cust_id IN (SELECT cust_id\n                  FROM loan)"}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'","question":"Find the name of tracks which are in both Movies and music playlists.","context":"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)","generation":"SELECT tracks.name\nFROM tracks\nJOIN playlist_tracks ON tracks.id = playlist_tracks.track_id\nJOIN playlists ON playlists.id = playlist_tracks.playlist_id\nWHERE playlists.name = 'Movies'\nAND playlists.name = 'Music'"}
{"answer":"SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1","question":"Find the names of users who have more than one tweet.","context":"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"SELECT name\nFROM user_profiles\nWHERE uid IN (\n  SELECT uid\n  FROM tweets\n  GROUP BY uid\n  HAVING COUNT(*) > 1\n)"}
{"answer":"SELECT T2.school_name, T1.budgeted, T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002","question":"Show each school name, its budgeted amount, and invested amount in year 2002 or after.","context":"CREATE TABLE budget (budgeted VARCHAR, invested VARCHAR, school_id VARCHAR, year VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)","generation":"SELECT school.school_name, budget.budgeted, budget.invested\nFROM school\nJOIN budget ON school.school_id = budget.school_id\nWHERE budget.year >= 2002"}
{"answer":"SELECT document_id, COUNT(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY COUNT(copy_number) DESC LIMIT 1","question":"Which document has the most draft copies? List its document id and number of draft copies.","context":"CREATE TABLE Draft_Copies (document_id VARCHAR, copy_number VARCHAR)","generation":"SELECT document_id, COUNT(document_id) AS number_of_draft_copies\nFROM Draft_Copies\nGROUP BY document_id\nORDER BY number_of_draft_copies DESC\nLIMIT 1"}
{"answer":"SELECT flno FROM Flight ORDER BY distance LIMIT 3","question":"Show the flight number of flights with three lowest distances.","context":"CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)","generation":"SELECT flno\nFROM Flight\nORDER BY distance\nLIMIT 3"}
{"answer":"SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1","question":"Which trip started from the station with the largest dock count? Give me the trip id.","context":"CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)","generation":"SELECT trip.id\nFROM trip\nJOIN station ON station.id = trip.start_station_id\nWHERE station.dock_count = (SELECT MAX(station.dock_count) FROM station)\n[\/SQL]\n\n### Explanation\nThe query first joins the trip and station tables on the start_station_id column. This creates a table with the trip id and the dock count of the starting station.\n\nThe query then filters the table to only include the rows where the dock count is equal to the maximum dock count in the station table. This is done using a subquery that selects the maximum dock count from the station table.\n\nFinally, the query selects the trip id from the resulting table.\n\n### Example\nSuppose the database contains the following tables:\n\ntrip:\n\n| id  | start_station_id |\n| --- | ---------------- |\n| 1   | 1                |\n| 2   | 2                |\n| 3   | 3                |\n\nstation:\n\n| id  | dock_count |\n| --- | ---------- |\n| 1   | 10         |\n| 2   | 8          |\n| 3   | 12         |\n\nThe query would return the following result:\n\n| id  |\n| --- |\n| 3   |\n\nThis is because the largest dock count is 12, and trip 3 started from station 3, which has a dock count of 12."}
{"answer":"SELECT DISTINCT Nominee FROM musical WHERE Award <> \"Tony Award\"","question":"What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?","context":"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","generation":"SELECT DISTINCT Nominee\nFROM musical\nWHERE Award != 'Tony Award'"}
{"answer":"SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the name of track with most number of races.","context":"CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)","generation":"SELECT track.name\nFROM track\nJOIN race\nON track.track_id = race.track_id\nGROUP BY track.name\nORDER BY COUNT(race.track_id) DESC\nLIMIT 1"}
{"answer":"SELECT customer_name, customer_phone, customer_email FROM Customers ORDER BY date_became_customer","question":"List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.","context":"CREATE TABLE Customers (customer_name VARCHAR, customer_phone VARCHAR, customer_email VARCHAR, date_became_customer VARCHAR)","generation":"SELECT customer_name, customer_phone, customer_email\nFROM Customers\nORDER BY date_became_customer"}
{"answer":"SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1","question":"Find the name of the department that offers the highest total credits?","context":"CREATE TABLE course (dept_name VARCHAR, credits INTEGER)","generation":"SELECT dept_name\nFROM course\nWHERE credits = (SELECT MAX(credits) FROM course)"}
{"answer":"SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10","question":"List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.","context":"CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)","generation":"SELECT customers.first_name, customers.last_name, SUM(invoices.total) AS total_gross_sales\nFROM customers\nJOIN invoices ON customers.id = invoices.customer_id\nGROUP BY customers.id\nORDER BY total_gross_sales DESC\nLIMIT 10"}
{"answer":"SELECT DISTINCT country FROM artist","question":"What are all distinct country for artists?","context":"CREATE TABLE artist (country VARCHAR)","generation":"SELECT DISTINCT country\nFROM artist"}
{"answer":"SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010","question":"Find courses that ran in Fall 2009 but not in Spring 2010.","context":"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT course_id\nFROM SECTION\nWHERE semester = 'Fall' AND YEAR = '2009'\nEXCEPT\nSELECT course_id\nFROM SECTION\nWHERE semester = 'Spring' AND YEAR = '2010'"}
{"answer":"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> \"San Francisco\"","question":"Count the number of trips that did not end in San Francisco city.","context":"CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)","generation":"SELECT COUNT(*)\nFROM trip\nWHERE end_station_id NOT IN (SELECT id FROM station WHERE city = 'San Francisco')"}
{"answer":"SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which store owns most items?","context":"CREATE TABLE inventory (store_id VARCHAR)","generation":"SELECT store_id\nFROM inventory\nGROUP BY store_id\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT T1.player_name, T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5","question":"List the names and birthdays of the top five players in terms of potential.","context":"CREATE TABLE Player_Attributes (player_api_id VARCHAR); CREATE TABLE Player (player_name VARCHAR, birthday VARCHAR, player_api_id VARCHAR)","generation":"SELECT Player.player_name, Player.birthday\nFROM Player\nINNER JOIN Player_Attributes\nON Player.player_api_id = Player_Attributes.player_api_id\nORDER BY Player_Attributes.player_api_id DESC\nLIMIT 5"}
{"answer":"SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the claim processing stage that most of the claims are on?","context":"CREATE TABLE claims_processing (claim_stage_id VARCHAR); CREATE TABLE claims_processing_stages (claim_status_name VARCHAR, claim_stage_id VARCHAR)","generation":"SELECT claim_status_name\nFROM claims_processing_stages\nWHERE claim_stage_id IN (\n    SELECT claim_stage_id\n    FROM claims_processing\n    GROUP BY claim_stage_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"}
{"answer":"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"","question":"List name of all tracks in Balls to the Wall.","context":"CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)","generation":"SELECT tracks.name\nFROM tracks\nJOIN albums ON tracks.album_id = albums.id\nWHERE albums.title = 'Balls to the Wall'"}
{"answer":"SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"","question":"Find all the catalog publishers whose name contains \"Murray\"","context":"CREATE TABLE catalogs (catalog_publisher VARCHAR)","generation":"SELECT catalog_publisher\nFROM catalogs\nWHERE catalog_publisher LIKE '%Murray%'"}
{"answer":"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the card type code with most number of cards?","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT card_type_code\nFROM Customers_cards\nGROUP BY card_type_code\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT AVG(balance) FROM checking","question":"Find the average checking balance.","context":"CREATE TABLE checking (balance INTEGER)","generation":"SELECT AVG(balance)\nFROM checking"}
{"answer":"SELECT T1.id, T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id and name of the browser that is compatible with the most web accelerators?","context":"CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR)","generation":"SELECT b.id, b.name\nFROM browser b\nJOIN accelerator_compatible_browser acb ON b.id = acb.browser_id\nGROUP BY b.id, b.name\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) LIMIT 1","question":"What is the least common media type in all tracks?","context":"CREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)","generation":"SELECT MEDIATYPE.Name\nFROM MEDIATYPE\nJOIN TRACK ON MEDIATYPE.MediaTypeId = TRACK.MediaTypeId\nGROUP BY MEDIATYPE.Name\nORDER BY COUNT(*) ASC\nLIMIT 1"}
{"answer":"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3","question":"Find the names of reviewers who had given higher than 3 star ratings.","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars INTEGER)","generation":"SELECT name\nFROM Reviewer\nWHERE rID IN (SELECT rID\nFROM Rating\nWHERE stars > 3)"}
{"answer":"SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000","question":"Show the names of editors that are on the committee of journals with sales bigger than 3000.","context":"CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)","generation":"SELECT editor.Name\nFROM editor\nJOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nJOIN journal ON journal_committee.Journal_ID = journal.Journal_ID\nWHERE journal.Sales > 3000"}
{"answer":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT MAX(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")","question":"Find the names of the campus which has more faculties in 2002 than every campus in Orange county.","context":"CREATE TABLE campuses (campus VARCHAR, id VARCHAR, county VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)","generation":"SELECT campus\nFROM faculty\nWHERE year = '2002'\nGROUP BY campus\nHAVING COUNT(*) > (\n  SELECT COUNT(*)\n  FROM faculty\n  WHERE county = 'Orange'\n  GROUP BY campus\n)"}
{"answer":"SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'","question":"What is the code of the course which the student whose last name is Smithson took?","context":"CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR, class_code VARCHAR)","generation":"SELECT CLASS.crs_code\nFROM CLASS\nINNER JOIN enroll ON CLASS.class_code = enroll.class_code\nINNER JOIN student ON enroll.stu_num = student.stu_num\nWHERE student.stu_lname = 'Smithson'"}
{"answer":"SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common nationality of pilots.","context":"CREATE TABLE pilot (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(*) AS Count\nFROM pilot\nGROUP BY Nationality\nORDER BY Count DESC\nLIMIT 1"}
{"answer":"SELECT city FROM Addresses ORDER BY city","question":"List all cities of addresses in alphabetical order.","context":"CREATE TABLE Addresses (city VARCHAR)","generation":"SELECT city FROM Addresses ORDER BY city"}
{"answer":"SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id","question":"Show the name and date for each race and its track name.","context":"CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)","generation":"SELECT r.name, r.date, t.name\nFROM race r\nJOIN track t ON r.track_id = t.track_id"}
{"answer":"SELECT name FROM enzyme WHERE product <> 'Heme'","question":"What are the names of enzymes who does not produce 'Heme'?","context":"CREATE TABLE enzyme (name VARCHAR, product VARCHAR)","generation":"SELECT name\nFROM enzyme\nWHERE product != 'Heme'"}
{"answer":"SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1","question":"What is the id of the student who most recently registered course 301?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)","generation":"SELECT student_id\nFROM student_course_attendance\nWHERE course_id = '301'\nORDER BY date_of_attendance DESC\nLIMIT 1"}
{"answer":"SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011","question":"What are the names of races held between 2009 and 2011?","context":"CREATE TABLE races (name VARCHAR, YEAR INTEGER)","generation":"SELECT name\nFROM races\nWHERE YEAR BETWEEN 2009 AND 2011"}
{"answer":"SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500","question":"Show the status shared by cities with population bigger than 1500 and smaller than 500.","context":"CREATE TABLE city (Status VARCHAR, Population INTEGER)","generation":"SELECT Status\nFROM city\nWHERE Population > 1500 AND Population < 500"}
{"answer":"SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'","question":"How many students enrolled in class ACCT-211?","context":"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM enroll\nWHERE class_code = 'ACCT-211'"}
{"answer":"SELECT name, street_address, floors FROM building ORDER BY floors","question":"Show the name, street address, and number of floors for all buildings ordered by the number of floors.","context":"CREATE TABLE building (name VARCHAR, street_address VARCHAR, floors VARCHAR)","generation":"SELECT name, street_address, floors\nFROM building\nORDER BY floors"}
{"answer":"SELECT T2.protein_name, T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id","question":"Show the protein name and the institution name.","context":"CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (protein_name VARCHAR, institution_id VARCHAR)","generation":"SELECT protein.protein_name, institution.institution\nFROM protein\nINNER JOIN institution ON protein.institution_id = institution.institution_id"}
{"answer":"SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"","question":"What are the names of countries that have both players with position forward and players with position defender?","context":"CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)","generation":"SELECT DISTINCT country.Country_name\nFROM country\nJOIN match_season ON country.Country_name = match_season.Country\nWHERE match_season.Position = 'forward'\nAND country.Country_name IN (\n  SELECT DISTINCT country.Country_name\n  FROM country\n  JOIN match_season ON country.Country_name = match_season.Country\n  WHERE match_season.Position = 'defender'\n)"}
{"answer":"SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")","question":"Find the first name and gender of the student who has allergy to milk but not cat.","context":"CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT fname, sex\nFROM Student\nWHERE Allergy LIKE '%milk%'\nAND NOT Allergy LIKE '%cat%'"}
{"answer":"SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez'","question":"Find the names of all directors whose movies are rated by Sarah Martinez.","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (director VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT DISTINCT director\nFROM Movie\nJOIN Rating ON Movie.mID = Rating.mID\nJOIN Reviewer ON Rating.rID = Reviewer.rID\nWHERE Reviewer.name = 'Sarah Martinez'"}
{"answer":"SELECT T2.dept_name, T2.dept_address, COUNT(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 3","question":"Find the name, address, number of students in the departments that have the top 3 highest number of students.","context":"CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)","generation":"SELECT d.dept_name, d.dept_address, COUNT(s.dept_code) AS num_students\nFROM department d\nJOIN student s ON d.dept_code = s.dept_code\nGROUP BY d.dept_name, d.dept_address\nORDER BY num_students DESC\nLIMIT 3"}
{"answer":"SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation","question":"Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.","context":"CREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)","generation":"SELECT affiliation, COUNT(Enrollment) AS Total_Enrollment\nFROM university\nWHERE founded > 1850\nGROUP BY affiliation\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECTs the affiliation and the COUNT of the Enrollment\n- FROMs the university table\n- WHEREs the founded year is greater than 1850\n- GROUPs the results by affiliation\n\nThe query will return the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.\n\n### Example\nThe following is an example of the output of the query:\n[SQL]\nSELECT affiliation, COUNT(Enrollment) AS Total_Enrollment\nFROM university\nWHERE founded > 1850\nGROUP BY affiliation\n[\/SQL]\n\n| affiliation | Total_Enrollment |\n| --- | --- |\n| Public | 100 |\n| Private | 200 |\n| For-Profit | 300 |\n| Non-Profit | 400 |\n\nThe query returns the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.\n\n### Constraints\n- The query will run on a database with the following schema:\nCREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)\n- The query will return the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.\n- The query will not use any aggregate functions other than COUNT.\n- The query will not use any subqueries.\n- The query will not use"}
{"answer":"SELECT name, salary FROM Employee ORDER BY salary","question":"Show name and salary for all employees sorted by salary.","context":"CREATE TABLE Employee (name VARCHAR, salary VARCHAR)","generation":"SELECT name, salary\nFROM Employee\nORDER BY salary"}
{"answer":"SELECT COUNT(*) FROM actor","question":"How many actors are there?","context":"CREATE TABLE actor (Id VARCHAR)","generation":"SELECT COUNT(*) FROM actor"}
{"answer":"SELECT Name FROM phone ORDER BY Price","question":"List the names of phones in ascending order of price.","context":"CREATE TABLE phone (Name VARCHAR, Price VARCHAR)","generation":"SELECT Name\nFROM phone\nORDER BY Price ASC"}
{"answer":"SELECT Name FROM People ORDER BY Name","question":"What are the names of people in ascending alphabetical order?","context":"CREATE TABLE People (Name VARCHAR)","generation":"SELECT Name FROM People ORDER BY Name ASC"}
{"answer":"SELECT COUNT(*) FROM customers","question":"Find the number of customers in total.","context":"CREATE TABLE customers (Id VARCHAR)","generation":"SELECT COUNT(*) FROM customers"}
{"answer":"SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing","question":"How many distinct claim outcome codes are there?","context":"CREATE TABLE claims_processing (claim_outcome_code VARCHAR)","generation":"SELECT COUNT(DISTINCT claim_outcome_code)\nFROM claims_processing"}
{"answer":"SELECT COUNT(*), crs_code FROM CLASS GROUP BY crs_code","question":"How many sections does each course has?","context":"CREATE TABLE CLASS (crs_code VARCHAR)","generation":"SELECT crs_code, COUNT(*) AS num_sections\nFROM CLASS\nGROUP BY crs_code\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the CLASS table by the crs_code column. The COUNT(*) function counts the number of rows in each group. The AS clause renames the column to num_sections.\n\n### Example\nThe query returns the following result:\n\n| crs_code | num_sections |\n| --- | --- |\n| CSC108 | 2 |\n| CSC201 | 3 |\n| CSC202 | 2 |\n| CSC301 | 1 |\n| CSC302 | 1 |\n\nThis result shows that each course has the number of sections specified in the num_sections column. For example, CSC108 has 2 sections, CSC201 has 3 sections, and so on."}
{"answer":"SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested","question":"List the names of entrepreneurs and their companies in descending order of money requested?","context":"CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT entrepreneur.Company, entrepreneur.Money_Requested\nFROM entrepreneur\nINNER JOIN people\nON entrepreneur.People_ID = people.People_ID\nORDER BY entrepreneur.Money_Requested DESC"}
{"answer":"SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = 'modern'","question":"What is the total number of people who could stay in the modern rooms in this inn?","context":"CREATE TABLE Rooms (maxOccupancy INTEGER, decor VARCHAR)","generation":"SELECT SUM(maxOccupancy)\nFROM Rooms\nWHERE decor = 'modern'"}
{"answer":"SELECT Attendance FROM performance WHERE LOCATION = \"TD Garden\" OR LOCATION = \"Bell Centre\"","question":"Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"","context":"CREATE TABLE performance (Attendance VARCHAR, LOCATION VARCHAR)","generation":"SELECT Attendance\nFROM performance\nWHERE LOCATION IN ('TD Garden', 'Bell Centre')\n[\/SQL]\n\n### Explanation\nThe query uses the WHERE clause to filter the performance table based on the location. The IN operator is used to check if the location is either \"TD Garden\" or \"Bell Centre\". The query then selects the attendance column from the filtered table.\n\n### Query Breakdown\n- SELECT Attendance\n    - This line selects the attendance column from the performance table.\n- FROM performance\n    - This line specifies the table to query.\n- WHERE LOCATION IN ('TD Garden', 'Bell Centre')\n    - This line filters the performance table based on the location. The IN operator is used to check if the location is either \"TD Garden\" or \"Bell Centre\".\n\n### Constraints\n- The query should return the attendances of the performances at location \"TD Garden\" or \"Bell Centre\".\n- The query should not return any other columns.\n- The query should not use any other SQL operators.\n- The query should not use any other SQL clauses.\n- The query should not use any other SQL functions.\n- The query should not use any other SQL keywords.\n- The query should not use any other SQL data types.\n- The query should not use any other SQL operators.\n- The query should not use any other SQL clauses.\n- The query should not use any other SQL functions.\n- The query should not use any other SQL keywords.\n- The query should not use any other SQL data types.\n- The query should not use any other SQL operators.\n- The query should not use any other SQL clauses.\n- The query should not use any other SQL functions.\n- The query should not use any other SQL keywords.\n- The query should"}
{"answer":"SELECT title FROM course ORDER BY title, credits","question":"List the names of all courses ordered by their titles and credits.","context":"CREATE TABLE course (title VARCHAR, credits VARCHAR)","generation":"SELECT title, credits\nFROM course\nORDER BY title, credits"}
{"answer":"SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Katsuhiro\" AND t1.lname = \"Ueno\"","question":"Which institution does \"Katsuhiro Ueno\" belong to?","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)","generation":"SELECT inst.name\nFROM authors\nJOIN authorship ON authors.authid = authorship.authid\nJOIN inst ON authorship.instid = inst.instid\nWHERE authors.fname = 'Katsuhiro' AND authors.lname = 'Ueno'"}
{"answer":"SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200","question":"List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.","context":"CREATE TABLE people (weight VARCHAR, people_id VARCHAR, height VARCHAR); CREATE TABLE body_builder (people_id VARCHAR, snatch VARCHAR)","generation":"SELECT weight\nFROM people\nWHERE people_id IN (SELECT people_id\n                    FROM body_builder\n                    WHERE snatch > 140)\nOR height > 200"}
{"answer":"SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC","question":"List all the cities in a decreasing order of each city's stations' highest latitude.","context":"CREATE TABLE station (city VARCHAR, lat INTEGER)","generation":"SELECT city, lat\nFROM station\nORDER BY lat DESC"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1","question":"What is the name of the perpetrator with the biggest weight.","context":"CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)","generation":"SELECT people.Name\nFROM people\nJOIN perpetrator\nON people.People_ID = perpetrator.People_ID\nORDER BY people.Weight DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM user_profiles","question":"How many users are there?","context":"CREATE TABLE user_profiles (Id VARCHAR)","generation":"SELECT COUNT(*) FROM user_profiles"}
{"answer":"SELECT role_code FROM ROLES","question":"What are all role codes?","context":"CREATE TABLE ROLES (role_code VARCHAR)","generation":"SELECT role_code\nFROM ROLES"}
{"answer":"SELECT COUNT(*) FROM bank","question":"How many bank branches are there?","context":"CREATE TABLE bank (Id VARCHAR)","generation":"SELECT COUNT(*) FROM bank"}
{"answer":"SELECT T3.name, T2.title, T1.date, T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id","question":"Show cinema name, film title, date, and price for each record in schedule.","context":"CREATE TABLE schedule (date VARCHAR, price VARCHAR, film_id VARCHAR, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)","generation":"SELECT c.name, f.title, s.date, s.price\nFROM schedule s\nJOIN cinema c ON s.cinema_id = c.cinema_id\nJOIN film f ON s.film_id = f.film_id"}
{"answer":"SELECT COUNT(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\"","question":"List the number of invoices from Chicago, IL.","context":"CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)","generation":"SELECT COUNT(*)\nFROM invoices\nWHERE billing_city = 'Chicago' AND billing_state = 'IL'"}
{"answer":"SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee","question":"Show different nominees and the number of musicals they have been nominated.","context":"CREATE TABLE musical (Nominee VARCHAR)","generation":"SELECT Nominee, COUNT(*) AS NumberOfMusicals\nFROM musical\nGROUP BY Nominee\nORDER BY NumberOfMusicals DESC"}
{"answer":"SELECT first_name FROM people ORDER BY first_name","question":"List the first names of people in alphabetical order?","context":"CREATE TABLE people (first_name VARCHAR)","generation":"SELECT first_name\nFROM people\nORDER BY first_name ASC"}
{"answer":"SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1","question":"Show the member names which are in both the party with id 3 and the party with id 1.","context":"CREATE TABLE member (member_name VARCHAR, party_id VARCHAR)","generation":"SELECT member_name\nFROM member\nWHERE party_id IN (3, 1)\nGROUP BY member_name\nHAVING COUNT(DISTINCT party_id) = 2"}
{"answer":"SELECT Name FROM GENRE","question":"List the names of all music genres.","context":"CREATE TABLE GENRE (Name VARCHAR)","generation":"SELECT Name\nFROM GENRE"}
{"answer":"SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental LIMIT 1","question":"What is the cell phone number of the student whose address has the lowest monthly rental?","context":"CREATE TABLE Students (cell_mobile_number VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR, monthly_rental VARCHAR)","generation":"SELECT cell_mobile_number\nFROM Students\nWHERE student_id = (\n    SELECT student_id\n    FROM Student_Addresses\n    ORDER BY monthly_rental ASC\n    LIMIT 1\n)"}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount)","question":"List the name of all different customers who have some loan sorted by their total loan amount.","context":"CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)","generation":"SELECT customer.cust_name, SUM(loan.amount) AS total_loan\nFROM customer\nJOIN loan ON customer.cust_id = loan.cust_id\nGROUP BY customer.cust_name\nORDER BY total_loan DESC"}
{"answer":"SELECT DISTINCT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15","question":"List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, used_kb INTEGER)","generation":"SELECT phone.Hardware_Model_name, phone.Company_name\nFROM phone\nINNER JOIN screen_mode\nON phone.Hardware_Model_name = screen_mode.Graphics_mode\nWHERE screen_mode.used_kb BETWEEN 10 AND 15"}
{"answer":"SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM Financial_transactions","question":"What is the average, minimum, maximum, and total transaction amount?","context":"CREATE TABLE Financial_transactions (transaction_amount INTEGER)","generation":"SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount)\nFROM Financial_transactions"}
{"answer":"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)","question":"What are all the policy types of the customer that has the most policies listed?","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)","generation":"SELECT policy_type_code\nFROM available_policies\nJOIN customers_policies\nON available_policies.policy_id = customers_policies.policy_id\nJOIN customers\nON customers_policies.customer_id = customers.customer_id\nWHERE customers.customer_id = (\n    SELECT customer_id\n    FROM customers_policies\n    GROUP BY customer_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)\nORDER BY policy_type_code"}
{"answer":"SELECT COUNT(*) FROM Apartment_Bookings","question":"How many apartment bookings are there in total?","context":"CREATE TABLE Apartment_Bookings (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Apartment_Bookings"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID","question":"What are the names of perpetrators?","context":"CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Name\nFROM people\nINNER JOIN perpetrator\nON people.People_ID = perpetrator.People_ID"}
{"answer":"SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"","question":"What is the id of the reviewer whose name has substring \u201cMike\u201d?","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)","generation":"SELECT rID\nFROM Reviewer\nWHERE name LIKE '%Mike%'"}
{"answer":"SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1","question":"What is the starting year of the oldest technicians?","context":"CREATE TABLE technician (Starting_Year VARCHAR, Age VARCHAR)","generation":"SELECT MIN(Starting_Year)\nFROM technician\nWHERE Age = (SELECT MIN(Age) FROM technician)"}
{"answer":"SELECT AVG(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200","question":"What is the average total score of body builders with height bigger than 200?","context":"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE body_builder (Total INTEGER, People_ID VARCHAR)","generation":"SELECT AVG(Total)\nFROM body_builder\nWHERE Height > 200"}
{"answer":"SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions","question":"What is the average and total transaction amount?","context":"CREATE TABLE Financial_transactions (transaction_amount INTEGER)","generation":"SELECT AVG(transaction_amount), SUM(transaction_amount)\nFROM Financial_transactions"}
{"answer":"SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking","question":"Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.","context":"CREATE TABLE market (District VARCHAR, Market_ID VARCHAR, Ranking VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)","generation":"SELECT phone.Name, market.District\nFROM phone\nJOIN phone_market ON phone.Phone_ID = phone_market.Phone_ID\nJOIN market ON phone_market.Market_ID = market.Market_ID\nORDER BY market.Ranking ASC"}
{"answer":"SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"","question":"What are the names of races held after 12:00:00 or before 09:00:00?","context":"CREATE TABLE races (name VARCHAR, TIME VARCHAR)","generation":"SELECT name\nFROM races\nWHERE TIME > '12:00:00' OR TIME < '09:00:00'"}
{"answer":"SELECT COUNT(*), class_room FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2","question":"Find the number of classes offered for all class rooms that held at least 2 classes.","context":"CREATE TABLE CLASS (class_room VARCHAR)","generation":"SELECT COUNT(DISTINCT class_room)\nFROM CLASS\nWHERE class_room IN (\n  SELECT class_room\n  FROM CLASS\n  GROUP BY class_room\n  HAVING COUNT(*) >= 2\n)"}
{"answer":"SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)","question":"Find the names of users who did not leave any review.","context":"CREATE TABLE review (name VARCHAR, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT name\nFROM useracct\nWHERE u_id NOT IN (SELECT u_id FROM review)"}
{"answer":"SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which engineer has visited the most times? Show the engineer id, first name and last name.","context":"CREATE TABLE Maintenance_Engineers (engineer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Engineer_Visits (Id VARCHAR)","generation":"SELECT Maintenance_Engineers.engineer_id, Maintenance_Engineers.first_name, Maintenance_Engineers.last_name\nFROM Maintenance_Engineers\nJOIN Engineer_Visits\nON Maintenance_Engineers.engineer_id = Engineer_Visits.Id\nGROUP BY Maintenance_Engineers.engineer_id\nORDER BY COUNT(Engineer_Visits.Id) DESC\nLIMIT 1"}
{"answer":"SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'","question":"Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"","context":"CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)","generation":"SELECT DISTINCT donator_name\nFROM endowment\nWHERE school_id IN ('Glenn', 'Triton')"}
{"answer":"SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT AVG(balance) FROM savings)","question":"Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.","context":"CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT accounts.name, checking.balance, savings.balance\nFROM accounts\nJOIN checking ON accounts.custid = checking.custid\nJOIN savings ON accounts.custid = savings.custid\nWHERE savings.balance > (SELECT AVG(savings.balance) FROM savings)"}
{"answer":"SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3","question":"What is the id and trade name of the medicines can interact with at least 3 enzymes?","context":"CREATE TABLE medicine (id VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)","generation":"SELECT medicine.id, medicine.trade_name\nFROM medicine\nJOIN medicine_enzyme_interaction ON medicine.id = medicine_enzyme_interaction.medicine_id\nGROUP BY medicine.id, medicine.trade_name\nHAVING COUNT(medicine_enzyme_interaction.medicine_id) >= 3"}
{"answer":"SELECT T1.part_name, T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING COUNT(*) > 2","question":"Which parts have more than 2 faults? Show the part name and id.","context":"CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)","generation":"SELECT part_name, part_id\nFROM Parts\nWHERE part_id IN (\n  SELECT part_id\n  FROM Part_Faults\n  GROUP BY part_id\n  HAVING COUNT(*) > 2\n)"}
{"answer":"SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76","question":"What is the product description of the product booked with an amount of 102.76?","context":"CREATE TABLE products_for_hire (product_description VARCHAR, product_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booked_amount VARCHAR)","generation":"SELECT product_description\nFROM products_for_hire\nJOIN products_booked\nON products_for_hire.product_id = products_booked.product_id\nWHERE booked_amount = 102.76"}
{"answer":"SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2","question":"Show the name of the party that has at least two records.","context":"CREATE TABLE party (Party VARCHAR)","generation":"SELECT Party\nFROM party\nGROUP BY Party\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT name FROM Employee ORDER BY salary LIMIT 3","question":"Show the name of employees with three lowest salaries.","context":"CREATE TABLE Employee (name VARCHAR, salary VARCHAR)","generation":"SELECT name\nFROM Employee\nORDER BY salary\nLIMIT 3"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT AVG(rating) FROM review)","question":"Find the titles of items whose rating is higher than the average review rating of all items.","context":"CREATE TABLE review (rating INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT item.title\nFROM item\nJOIN review ON item.i_id = review.i_id\nWHERE review.rating > (SELECT AVG(rating) FROM review)"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5","question":"Find the names of the products with length smaller than 3 or height greater than 5.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)","generation":"SELECT catalog_entry_name\nFROM catalog_contents\nWHERE LENGTH < 3 OR width > 5"}
{"answer":"SELECT name, salary FROM Employee WHERE eid = 242518965","question":"What is the name and salary for employee with id 242518965?","context":"CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)","generation":"SELECT name, salary\nFROM Employee\nWHERE eid = '242518965'"}
{"answer":"SELECT t1.product_name, t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name and price of the product that has been ordered the greatest number of times.","context":"CREATE TABLE products (product_name VARCHAR, product_price VARCHAR, product_id VARCHAR); CREATE TABLE regular_order_products (product_id VARCHAR)","generation":"SELECT product_name, product_price\nFROM products\nWHERE product_id IN (\n    SELECT product_id\n    FROM regular_order_products\n    GROUP BY product_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"}
{"answer":"SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title","question":"For directors who had more than one movie, return the titles and produced years of all movies directed by them.","context":"CREATE TABLE Movie (director VARCHAR, title VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, director VARCHAR)","generation":"SELECT title, year\nFROM Movie\nWHERE director IN (\n  SELECT director\n  FROM Movie\n  GROUP BY director\n  HAVING COUNT(*) > 1\n)"}
{"answer":"SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'","question":"Find names of all students who took some course and got A or C.","context":"CREATE TABLE enroll (stu_num VARCHAR, enroll_grade VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)","generation":"SELECT student.stu_fname, student.stu_lname\nFROM student\nJOIN enroll ON student.stu_num = enroll.stu_num\nWHERE enroll.enroll_grade = 'A' OR enroll.enroll_grade = 'C'"}
{"answer":"SELECT SUM(faculty) FROM faculty WHERE YEAR = 2002","question":"How many faculty is there in total in the year of 2002?","context":"CREATE TABLE faculty (faculty INTEGER, YEAR VARCHAR)","generation":"SELECT COUNT(*)\nFROM faculty\nWHERE YEAR = '2002'"}
{"answer":"SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7","question":"What is the mail date of the document with id 7?","context":"CREATE TABLE Documents_Mailed (mailing_date VARCHAR, document_id VARCHAR)","generation":"SELECT mailing_date\nFROM Documents_Mailed\nWHERE document_id = 7"}
{"answer":"SELECT COUNT(DISTINCT language_id) FROM film","question":"How many languages are in these films?","context":"CREATE TABLE film (language_id VARCHAR)","generation":"SELECT COUNT(DISTINCT language_id)\nFROM film"}
{"answer":"SELECT MIN(age), AVG(age), MAX(age) FROM Student","question":"Show the minimum, average, and maximum age of all students.","context":"CREATE TABLE Student (age INTEGER)","generation":"SELECT MIN(age), AVG(age), MAX(age)\nFROM Student"}
{"answer":"SELECT COUNT(DISTINCT city) FROM EMPLOYEE","question":"How many distinct cities does the employees live in?","context":"CREATE TABLE EMPLOYEE (city VARCHAR)","generation":"SELECT COUNT(DISTINCT city)\nFROM EMPLOYEE"}
{"answer":"SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING COUNT(DISTINCT dept_name) < 5","question":"Find the number of different departments in each school whose number of different departments is less than 5.","context":"CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)","generation":"SELECT school_code, COUNT(DISTINCT dept_name) AS num_depts\nFROM department\nGROUP BY school_code\nHAVING COUNT(DISTINCT dept_name) < 5"}
{"answer":"SELECT COUNT(*), building FROM classroom WHERE capacity > 50 GROUP BY building","question":"Find the number of rooms with more than 50 capacity for each building.","context":"CREATE TABLE classroom (building VARCHAR, capacity INTEGER)","generation":"SELECT building, COUNT(*) AS number_of_rooms\nFROM classroom\nWHERE capacity > 50\nGROUP BY building\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECT building, COUNT(*) AS number_of_rooms\n    - SELECT the building and the number of rooms with more than 50 capacity\n- FROM classroom\n    - FROM the classroom table\n- WHERE capacity > 50\n    - WHERE the capacity is greater than 50\n- GROUP BY building\n    - GROUP the results by building\n\nThe query will return the number of rooms with more than 50 capacity for each building."}
{"answer":"SELECT Injured FROM perpetrator ORDER BY Injured","question":"List the number of people injured by perpetrators in ascending order.","context":"CREATE TABLE perpetrator (Injured VARCHAR)","generation":"SELECT Injured, COUNT(Injured)\nFROM perpetrator\nGROUP BY Injured\nORDER BY COUNT(Injured) ASC"}
{"answer":"SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'","question":"What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","context":"CREATE TABLE enzyme (name VARCHAR, location VARCHAR, product VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR)","generation":"SELECT DISTINCT enzyme.name, enzyme.location, enzyme.product\nFROM enzyme\nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id\nWHERE medicine_enzyme_interaction.interaction_type = 'inhibitor'"}
{"answer":"SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3","question":"Show the top 3 apartment type codes sorted by the average number of rooms in descending order.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)","generation":"SELECT apt_type_code, AVG(room_count)\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY AVG(room_count) DESC\nLIMIT 3"}
{"answer":"SELECT Player_name FROM player ORDER BY Votes","question":"List the names of players in ascending order of votes.","context":"CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)","generation":"SELECT Player_name\nFROM player\nORDER BY Votes ASC"}
{"answer":"SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3","question":"List the publication dates of publications with 3 lowest prices.","context":"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)","generation":"SELECT Publication_Date\nFROM publication\nORDER BY CAST(Price AS DECIMAL)\nLIMIT 3"}
{"answer":"SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998","question":"What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?","context":"CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)","generation":"SELECT browser.name\nFROM accelerator_compatible_browser\nJOIN browser ON accelerator_compatible_browser.browser_id = browser.id\nJOIN web_client_accelerator ON accelerator_compatible_browser.accelerator_id = web_client_accelerator.id\nWHERE web_client_accelerator.name = 'CProxy'\nAND accelerator_compatible_browser.compatible_since_year > '1998'"}
{"answer":"SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'","question":"Where does the customer with the first name Linda live? And what is her email?","context":"CREATE TABLE customer (email VARCHAR, address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)","generation":"SELECT address.address, customer.email\nFROM customer\nINNER JOIN address ON customer.address_id = address.address_id\nWHERE customer.first_name = 'Linda'"}
{"answer":"SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12","question":"What are the id and name of the stations that have ever had more than 12 bikes available?","context":"CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)","generation":"SELECT station.id, station.name\nFROM station\nJOIN status ON station.id = status.station_id\nWHERE status.bikes_available > 12"}
{"answer":"SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5","question":"What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?","context":"CREATE TABLE drivers (surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)","generation":"SELECT surname, driverid\nFROM drivers\nWHERE driverid IN (\n  SELECT driverid\n  FROM pitstops\n  GROUP BY driverid\n  HAVING COUNT(*) >= 11\n)\nAND driverid IN (\n  SELECT driverid\n  FROM results\n  GROUP BY driverid\n  HAVING COUNT(*) >= 5\n)"}
{"answer":"SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy","question":"What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.","context":"CREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)","generation":"SELECT Allergy, AllergyType\nFROM Has_allergy\nJOIN Allergy_type\nON Allergy = AllergyType\nJOIN Student\nON StuID = Allergy\nWHERE Fname = 'Lisa'\nORDER BY Allergy"}
{"answer":"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name <> \"Progress Party\"","question":"Show member names that are not in the Progress Party.","context":"CREATE TABLE party (party_id VARCHAR, Party_name VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)","generation":"SELECT member_name\nFROM Member\nWHERE member_name NOT IN (SELECT member_name\n                          FROM Member\n                          WHERE party_id = 'Progress Party')"}
{"answer":"SELECT shipping_agent_name FROM Ref_Shipping_Agents","question":"What are the shipping agent names?","context":"CREATE TABLE Ref_Shipping_Agents (shipping_agent_name VARCHAR)","generation":"SELECT shipping_agent_name\nFROM Ref_Shipping_Agents"}
{"answer":"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance","question":"List the id of students who attended  statistics courses in the order of attendance date.","context":"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)","generation":"SELECT student_id\nFROM student_course_attendance\nWHERE course_id = 'statistics'\nORDER BY date_of_attendance"}
{"answer":"SELECT MIN(Crime_rate), MAX(Crime_rate) FROM county_public_safety","question":"What are the minimum and maximum crime rate of counties?","context":"CREATE TABLE county_public_safety (Crime_rate INTEGER)","generation":"SELECT MIN(Crime_rate), MAX(Crime_rate)\nFROM county_public_safety"}
{"answer":"SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'","question":"Show all storm names affecting region \"Denmark\".","context":"CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT DISTINCT storm.name\nFROM storm\nJOIN affected_region ON affected_region.storm_id = storm.storm_id\nJOIN region ON region.region_id = affected_region.region_id\nWHERE region.region_name = 'Denmark'"}
{"answer":"SELECT T1.date, T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC","question":"For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.","context":"CREATE TABLE game (date VARCHAR, id VARCHAR, season VARCHAR); CREATE TABLE injury_accident (player VARCHAR, game_id VARCHAR)","generation":"SELECT game.date, injury_accident.player\nFROM game\nJOIN injury_accident ON game.id = injury_accident.game_id\nORDER BY game.season DESC"}
{"answer":"SELECT COUNT(DISTINCT church_id) FROM wedding WHERE YEAR = 2016","question":"How many churches have a wedding in year 2016?","context":"CREATE TABLE wedding (church_id VARCHAR, YEAR VARCHAR)","generation":"SELECT church_id, YEAR\nFROM wedding\nWHERE YEAR = '2016'"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Stephanie\" AND t1.lname = \"Weirich\"","question":"Which papers have \"Stephanie Weirich\" as an author?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (SELECT paperid\n                  FROM authorship\n                  WHERE authid = 'Stephanie Weirich')"}
{"answer":"SELECT COUNT(DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010","question":"Find the total number of instructors who teach a course in the Spring 2010 semester.","context":"CREATE TABLE teaches (ID VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT COUNT(DISTINCT ID)\nFROM teaches\nWHERE semester = 'Spring' AND YEAR = '2010'"}
{"answer":"SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY AVG(t2.unsure_rate) DESC LIMIT 1","question":"which gender got the highest average uncertain ratio.","context":"CREATE TABLE candidate (people_id VARCHAR, unsure_rate INTEGER); CREATE TABLE people (sex VARCHAR, people_id VARCHAR)","generation":"SELECT sex, AVG(unsure_rate) AS avg_unsure_rate\nFROM candidate\nJOIN people ON candidate.people_id = people.people_id\nGROUP BY sex\nORDER BY avg_unsure_rate DESC\nLIMIT 1"}
{"answer":"SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics'","question":"Find the name of students who took some course offered by Statistics department.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (course_id VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)","generation":"SELECT student.name\nFROM student\nJOIN takes ON student.id = takes.id\nJOIN course ON takes.course_id = course.course_id\nWHERE course.dept_name = 'Statistics'"}
{"answer":"SELECT origin FROM Flight WHERE destination = \"Honolulu\"","question":"Show origins of all flights with destination Honolulu.","context":"CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)","generation":"SELECT origin\nFROM Flight\nWHERE destination = 'Honolulu'"}
{"answer":"SELECT T2.title, MAX(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id","question":"What are the title and maximum price of each film?","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE schedule (price INTEGER, film_id VARCHAR)","generation":"SELECT film.title, MAX(schedule.price)\nFROM film\nJOIN schedule ON film.film_id = schedule.film_id\nGROUP BY film.title"}
{"answer":"SELECT COUNT(*) FROM body_builder","question":"How many body builders are there?","context":"CREATE TABLE body_builder (Id VARCHAR)","generation":"SELECT COUNT(*) AS \"Number of Body Builders\"\nFROM body_builder"}
{"answer":"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000","question":"What are the unique names of races that held after 2000 and the circuits were in Spain?","context":"CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)","generation":"SELECT DISTINCT races.name\nFROM races\nJOIN circuits ON races.circuitid = circuits.circuitid\nWHERE races.year > 2000 AND circuits.country = 'Spain'"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = \"left\" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90","question":"List the names of all left-footed players who have overall rating between 85 and 90.","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating VARCHAR, preferred_foot VARCHAR)","generation":"SELECT player_name\nFROM Player\nINNER JOIN Player_Attributes\nON Player.player_api_id = Player_Attributes.player_api_id\nWHERE preferred_foot = 'left'\nAND overall_rating BETWEEN 85 AND 90"}
{"answer":"SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'","question":"Find the name of department that offers the class whose description has the word \"Statistics\".","context":"CREATE TABLE course (dept_code VARCHAR, crs_description VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT department.dept_name\nFROM department\nJOIN course ON department.dept_code = course.dept_code\nWHERE course.crs_description LIKE '%Statistics%'"}
{"answer":"SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"","question":"Find the names of all artists that have \"a\" in their names.","context":"CREATE TABLE ARTIST (Name VARCHAR)","generation":"SELECT Name\nFROM ARTIST\nWHERE Name LIKE '%a%'"}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'","question":"Find the name of customers who have loans of both Mortgages and Auto.","context":"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT customer.cust_name\nFROM customer\nJOIN loan ON customer.cust_id = loan.cust_id\nWHERE loan.loan_type = 'Mortgage' AND loan.loan_type = 'Auto'"}
{"answer":"SELECT T3.Name, T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID","question":"Show the names of journalists and the dates of the events they reported.","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Date VARCHAR, Event_ID VARCHAR)","generation":"SELECT journalist.Name, event.Date\nFROM journalist\nJOIN news_report ON journalist.journalist_ID = news_report.journalist_ID\nJOIN event ON news_report.Event_ID = event.Event_ID\nORDER BY event.Date"}
{"answer":"SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID","question":"List the distinct hometowns that are not associated with any gymnast.","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR)","generation":"SELECT DISTINCT Hometown\nFROM people\nWHERE Hometown NOT IN (SELECT Hometown\n                       FROM people\n                       JOIN gymnast\n                       ON people.People_ID = gymnast.Gymnast_ID)"}
{"answer":"SELECT MAX(YEAR) FROM perpetrator","question":"In which year did the most recent crime happen?","context":"CREATE TABLE perpetrator (YEAR INTEGER)","generation":"SELECT YEAR\nFROM perpetrator\nORDER BY YEAR DESC\nLIMIT 1"}
{"answer":"SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'","question":"Find the first name and office of the professor who is in the history department and has a Ph.D. degree.","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT emp_fname, prof_office\nFROM professor\nINNER JOIN employee ON professor.emp_num = employee.emp_num\nINNER JOIN department ON professor.dept_code = department.dept_code\nWHERE department.dept_name = 'History' AND professor.prof_high_degree = 'Ph.D.'"}
{"answer":"SELECT Date FROM debate WHERE Num_of_Audience > 150","question":"List the dates of debates with number of audience bigger than 150","context":"CREATE TABLE debate (Date VARCHAR, Num_of_Audience INTEGER)","generation":"SELECT Date\nFROM debate\nWHERE Num_of_Audience > 150"}
{"answer":"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"","question":"How many tracks belong to rock genre?","context":"CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)","generation":"SELECT COUNT(*)\nFROM TRACK\nWHERE GenreId IN (SELECT GenreId\n                  FROM GENRE\n                  WHERE Name = 'rock')"}
{"answer":"SELECT Name FROM city ORDER BY White DESC LIMIT 5","question":"List the names of the city with the top 5 white percentages.","context":"CREATE TABLE city (Name VARCHAR, White VARCHAR)","generation":"SELECT Name\nFROM city\nWHERE White IN (SELECT DISTINCT White\n                FROM city\n                ORDER BY White DESC\n                LIMIT 5)\nORDER BY Name"}
{"answer":"SELECT name FROM student WHERE NOT id IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')","question":"Find the name of students who didn't take any course from Biology department.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)","generation":"SELECT student.name\nFROM student\nLEFT JOIN takes ON student.id = takes.id\nLEFT JOIN course ON takes.course_id = course.course_id\nWHERE course.dept_name != 'Biology'\nGROUP BY student.name\nHAVING COUNT(course.course_id) = 0"}
{"answer":"SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)","question":"Find the average number of followers for the users who do not have any tweet.","context":"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)","generation":"SELECT AVG(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)"}
{"answer":"SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000","question":"Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.","context":"CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)","generation":"SELECT DISTINCT t1.LOCATION\nFROM track t1\nJOIN track t2 ON t1.LOCATION = t2.LOCATION\nWHERE t1.seating > 90000 AND t2.seating < 70000"}
{"answer":"SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\"","question":"What is the first name and last name employee helps the customer with first name Leonie?","context":"CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)","generation":"SELECT E.FirstName, E.LastName\nFROM EMPLOYEE E\nINNER JOIN CUSTOMER C ON E.EmployeeId = C.SupportRepId\nWHERE C.FirstName = 'Leonie'"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"","question":"Find the names of all the products whose stock number starts with \"2\".","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)","generation":"SELECT catalog_entry_name\nFROM catalog_contents\nWHERE product_stock_number LIKE '2%'"}
{"answer":"SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'","question":"What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?","context":"CREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)","generation":"SELECT Album.Title\nFROM Album\nINNER JOIN Track ON Album.AlbumId = Track.AlbumId\nINNER JOIN Genre ON Track.GenreID = Genre.GenreID\nWHERE Genre.Name IN ('Reggae', 'Rock')\nGROUP BY Album.Title\nHAVING COUNT(DISTINCT Genre.Name) = 2"}
{"answer":"SELECT cell_mobile_number, email_address FROM STUDENTS","question":"Return the cell phone number and email address for all students.","context":"CREATE TABLE STUDENTS (cell_mobile_number VARCHAR, email_address VARCHAR)","generation":"SELECT cell_mobile_number, email_address\nFROM STUDENTS"}
{"answer":"SELECT SUM(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code","question":"Find the total credits of all classes offered by each department.","context":"CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER, crs_code VARCHAR)","generation":"SELECT dept_code, SUM(crs_credit) AS total_credits\nFROM course\nJOIN CLASS ON course.crs_code = CLASS.crs_code\nGROUP BY dept_code"}
{"answer":"SELECT student_id FROM student_course_attendance","question":"List the id of students who attended some courses?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR)","generation":"SELECT student_id\nFROM student_course_attendance\nGROUP BY student_id\nHAVING COUNT(student_id) > 0"}
{"answer":"SELECT COUNT(*) FROM company","question":"How many gas companies are there?","context":"CREATE TABLE company (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM company\nWHERE Id LIKE 'Gas%'"}
{"answer":"SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Functional%\"","question":"Find the first names of all the authors who have written a paper with title containing the word \"Functional\".","context":"CREATE TABLE authors (fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR)","generation":"SELECT fname\nFROM authors\nJOIN authorship ON authors.authid = authorship.authid\nJOIN papers ON authorship.paperid = papers.paperid\nWHERE papers.title LIKE '%Functional%'"}
{"answer":"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1","question":"List the name of the phone model launched in year 2002 and with the highest RAM size.","context":"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR)","generation":"SELECT phone.Hardware_Model_name\nFROM phone\nINNER JOIN chip_model ON phone.chip_model = chip_model.Model_name\nWHERE chip_model.Launch_year = '2002'\nORDER BY chip_model.RAM_MiB DESC\nLIMIT 1"}
{"answer":"SELECT fname FROM authors ORDER BY fname","question":"Find the first names of all the authors ordered in alphabetical order.","context":"CREATE TABLE authors (fname VARCHAR)","generation":"SELECT fname FROM authors ORDER BY fname"}
{"answer":"SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year","question":"Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.","context":"CREATE TABLE Movie (mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)","generation":"SELECT DISTINCT year\nFROM Movie\nJOIN Rating\nON Movie.mID = Rating.mID\nWHERE stars = 4 OR stars = 5\nORDER BY year ASC"}
{"answer":"SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'","question":"What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?","context":"CREATE TABLE Electoral_Register (electoral_register_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)","generation":"SELECT electoral_register_id\nFROM Electoral_Register\nWHERE cmi_cross_ref_id IN (\n  SELECT cmi_cross_ref_id\n  FROM CMI_Cross_References\n  WHERE source_system_code IN ('Electoral', 'Tax')\n)"}
{"answer":"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3","question":"Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.","context":"CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT name, balance\nFROM accounts\nJOIN savings\nON accounts.custid = savings.custid\nORDER BY balance DESC\nLIMIT 3"}
{"answer":"SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1","question":"Retrieve the country that has published the most papers.","context":"CREATE TABLE inst (country VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT country\nFROM inst\nWHERE instid IN (\n  SELECT instid\n  FROM authorship\n  GROUP BY instid\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT COUNT(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids","question":"List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.","context":"CREATE TABLE Rooms (RoomId VARCHAR, maxOccupancy VARCHAR); CREATE TABLE Reservations (Room VARCHAR, Adults VARCHAR, Kids VARCHAR)","generation":"SELECT COUNT(*) AS 'Number of times the number of people in the room reached the maximum occupancy of the room'\nFROM Reservations\nWHERE (Adults + Kids) > maxOccupancy"}
{"answer":"SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\"","question":"Show the addresses and phones of all the buildings managed by \"Brenden\".","context":"CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_phone VARCHAR, building_manager VARCHAR)","generation":"SELECT building_address, building_phone\nFROM Apartment_Buildings\nWHERE building_manager = 'Brenden'"}
{"answer":"SELECT Memory_in_G, Carrier FROM phone","question":"What are the memories and carriers of phones?","context":"CREATE TABLE phone (Memory_in_G VARCHAR, Carrier VARCHAR)","generation":"SELECT Memory_in_G, Carrier\nFROM phone"}
{"answer":"SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005","question":"Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.","context":"CREATE TABLE pilot (POSITION VARCHAR, Join_Year INTEGER)","generation":"SELECT POSITION\nFROM pilot\nWHERE Join_Year > 2005 AND Join_Year < 2000"}
{"answer":"SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY SUM(t2.settlement_amount) DESC LIMIT 1","question":"What is the effective date of the claim that has the largest amount of total settlement?","context":"CREATE TABLE settlements (claim_id VARCHAR, settlement_amount INTEGER); CREATE TABLE claims (Effective_Date VARCHAR, claim_id VARCHAR)","generation":"SELECT claims.Effective_Date\nFROM claims\nJOIN settlements\nON claims.claim_id = settlements.claim_id\nWHERE settlements.settlement_amount = (\n    SELECT MAX(settlements.settlement_amount)\n    FROM settlements\n)\n[\/SQL]\n\n### Explanation\nThe query joins the settlements table with the claims table on the claim_id column. It then filters the results to only include the claim with the largest settlement amount. Finally, it selects the effective date of the claim with the largest settlement amount.\n\n### Example\nSuppose the settlements table contains the following data:\n\n| claim_id | settlement_amount |\n| --- | --- |\n| 1 | 10000 |\n| 2 | 20000 |\n| 3 | 30000 |\n\nAnd the claims table contains the following data:\n\n| claim_id | Effective_Date |\n| --- | --- |\n| 1 | 2018-01-01 |\n| 2 | 2018-01-01 |\n| 3 | 2018-01-01 |\n\nThe query would return the following result:\n\n| Effective_Date |\n| --- |\n| 2018-01-01 |\n\nThis is because the claim with the largest settlement amount is claim 2, which has a settlement amount of 20000. The effective date of this claim is 2018-01-01."}
{"answer":"SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID","question":"Please show the names and the players of clubs.","context":"CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Player_id VARCHAR, Club_ID VARCHAR)","generation":"SELECT name, player.Player_id\nFROM club\nJOIN player ON club.Club_ID = player.Club_ID"}
{"answer":"SELECT COUNT(*) FROM race","question":"How many races are there?","context":"CREATE TABLE race (Id VARCHAR)","generation":"SELECT COUNT(*) FROM race"}
{"answer":"SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)","question":"On which day and in which zip code was the min dew point lower than any day in zip code 94107?","context":"CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)","generation":"SELECT date, zip_code\nFROM weather\nWHERE min_dew_point_f < (SELECT MIN(min_dew_point_f)\n                         FROM weather\n                         WHERE zip_code = '94107')\nAND zip_code = '94107'"}
{"answer":"SELECT t1.customer_name, t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'","question":"Find the names and phone numbers of customers living in California state.","context":"CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)","generation":"SELECT customer_name, customer_phone\nFROM customers\nINNER JOIN customer_addresses ON customers.customer_id = customer_addresses.customer_id\nINNER JOIN addresses ON customer_addresses.address_id = addresses.address_id\nWHERE addresses.state_province_county = 'California'"}
{"answer":"SELECT title FROM albums","question":"List every album's title.","context":"CREATE TABLE albums (title VARCHAR)","generation":"SELECT title FROM albums"}
{"answer":"SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\"","question":"What are the ids of the movies that are not reviewed by Brittany Harris.","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT mID\nFROM Rating\nWHERE rID != 'Brittany Harris'"}
{"answer":"SELECT COUNT(DISTINCT Publication_Date) FROM publication","question":"What is the number of distinct publication dates?","context":"CREATE TABLE publication (Publication_Date VARCHAR)","generation":"SELECT COUNT(DISTINCT Publication_Date)\nFROM publication"}
{"answer":"SELECT t1.name, t1.sex, MIN(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex","question":"Find the name of the candidates whose oppose percentage is the lowest for each sex.","context":"CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)","generation":"SELECT people.name, people.sex, candidate.oppose_percentage\nFROM people\nJOIN candidate ON people.people_id = candidate.people_id\nORDER BY candidate.oppose_percentage ASC"}
{"answer":"SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"","question":"What country does Roberto Almeida live?","context":"CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT country\nFROM customers\nWHERE first_name = 'Roberto'\nAND last_name = 'Almeida'"}
{"answer":"SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC","question":"List the total points of gymnasts in descending order of floor exercise points.","context":"CREATE TABLE gymnast (Total_Points VARCHAR, Floor_Exercise_Points VARCHAR)","generation":"SELECT Total_Points\nFROM gymnast\nORDER BY Floor_Exercise_Points DESC"}
{"answer":"SELECT Name FROM wrestler ORDER BY Days_held LIMIT 1","question":"What is the name of the wrestler with the fewest days held?","context":"CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)","generation":"SELECT Name\nFROM wrestler\nORDER BY Days_held ASC\nLIMIT 1"}
{"answer":"SELECT MAX(Silver), MIN(Silver) FROM club_rank","question":"What are the maximum and minimum number of silver medals for clubs.","context":"CREATE TABLE club_rank (Silver INTEGER)","generation":"SELECT MAX(Silver), MIN(Silver)\nFROM club_rank"}
{"answer":"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id","question":"Find distinct cities of address of students?","context":"CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)","generation":"SELECT DISTINCT city\nFROM addresses\nWHERE address_id IN (\n  SELECT address_id\n  FROM people_addresses\n  WHERE person_id IN (\n    SELECT student_id\n    FROM students\n  )\n)"}
{"answer":"SELECT T1.student_id, T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and last name of the student that has the most behavior incidents?","context":"CREATE TABLE Students (last_name VARCHAR, student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)","generation":"SELECT s.last_name, s.student_id\nFROM Students s\nJOIN Behavior_Incident bi ON s.student_id = bi.student_id\nGROUP BY s.last_name, s.student_id\nORDER BY COUNT(bi.student_id) DESC\nLIMIT 1"}
{"answer":"SELECT MAX(Points) FROM climber WHERE Country = \"United Kingdom\"","question":"What is the maximum point for climbers whose country is United Kingdom?","context":"CREATE TABLE climber (Points INTEGER, Country VARCHAR)","generation":"SELECT MAX(Points)\nFROM climber\nWHERE Country = 'United Kingdom'"}
{"answer":"SELECT COUNT(*) FROM pilot","question":"How many pilots are there?","context":"CREATE TABLE pilot (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM pilot"}
{"answer":"SELECT school, nickname FROM university ORDER BY founded","question":"List all schools and their nicknames in the order of founded year.","context":"CREATE TABLE university (school VARCHAR, nickname VARCHAR, founded VARCHAR)","generation":"SELECT school, nickname, founded\nFROM university\nORDER BY founded"}
{"answer":"SELECT COUNT(*) FROM head WHERE age > 56","question":"How many heads of the departments are older than 56 ?","context":"CREATE TABLE head (age INTEGER)","generation":"SELECT COUNT(*)\nFROM head\nWHERE age > 56"}
{"answer":"SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","question":"What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?","context":"CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)","generation":"SELECT date, mean_temperature_f, mean_humidity\nFROM weather\nWHERE max_gust_speed_mph IN (\n    SELECT max_gust_speed_mph\n    FROM weather\n    ORDER BY max_gust_speed_mph DESC\n    LIMIT 3\n)\nORDER BY max_gust_speed_mph DESC"}
{"answer":"SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING SUM(T1.Num_of_stock) >= 2000 ORDER BY SUM(T1.Num_of_stock) DESC","question":"Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.","context":"CREATE TABLE phone_market (Phone_ID VARCHAR, Num_of_stock INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)","generation":"SELECT phone.Name\nFROM phone_market\nJOIN phone ON phone_market.Phone_ID = phone.Phone_ID\nWHERE phone_market.Num_of_stock > 2000\nORDER BY phone_market.Num_of_stock DESC"}
{"answer":"SELECT Player_name FROM player WHERE NOT Player_ID IN (SELECT Player_ID FROM player_coach)","question":"List the names of players that do not have coaches.","context":"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Player_name VARCHAR, Player_ID VARCHAR)","generation":"SELECT player.Player_name\nFROM player\nLEFT JOIN player_coach\nON player.Player_name = player_coach.Player_name\nWHERE player_coach.Player_name IS NULL"}
{"answer":"SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'","question":"Find the last name and hire date of the professor who is in office DRE 102.","context":"CREATE TABLE professor (emp_num VARCHAR, prof_office VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_hiredate VARCHAR, emp_num VARCHAR)","generation":"SELECT emp_lname, emp_hiredate\nFROM employee\nWHERE emp_num IN (SELECT emp_num\n                  FROM professor\n                  WHERE prof_office = 'DRE 102')"}
{"answer":"SELECT SUM(stu_hrs), dept_code FROM student GROUP BY dept_code","question":"Find the total number of hours have done for all students in each department.","context":"CREATE TABLE student (dept_code VARCHAR, stu_hrs INTEGER)","generation":"SELECT dept_code, SUM(stu_hrs) AS total_hrs\nFROM student\nGROUP BY dept_code\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the students by department. The SUM function is used to calculate the total number of hours for each department.\n\n### Query Breakdown\n- SELECT dept_code, SUM(stu_hrs) AS total_hrs\n    - SELECT dept_code: selects the department code\n    - SUM(stu_hrs) AS total_hrs: calculates the total number of hours for each department\n- FROM student\n    - FROM student: selects the student table\n- GROUP BY dept_code\n    - GROUP BY dept_code: groups the students by department code\n\n### Constraints\n- The query should return the total number of hours for each department.\n- The query should not return any duplicate departments.\n- The query should not return any students who have not done any hours.\n\n### Example\n- If the student table contains the following data:\n\n| dept_code | stu_hrs |\n| --- | --- |\n| CSC | 10 |\n| CSC | 20 |\n| ECE | 30 |\n| ECE | 40 |\n| ECE | 50 |\n\n- The query should return the following data:\n\n| dept_code | total_hrs |\n| --- | --- |\n| CSC | 30 |\n| ECE | 150 |\n\n### Constraints\n- The query should return the total number of hours for each department.\n- The query should not return any duplicate departments.\n- The query should not return any"}
{"answer":"SELECT COUNT(*) FROM Financial_transactions","question":"How many transactions do we have?","context":"CREATE TABLE Financial_transactions (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Financial_transactions"}
{"answer":"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name","question":"list all female (sex is F) candidate names in the alphabetical order.","context":"CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR, sex VARCHAR)","generation":"SELECT name FROM people, candidate WHERE people.people_id = candidate.people_id AND sex = 'F' ORDER BY name"}
{"answer":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"","question":"List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.","context":"CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)","generation":"SELECT document_id\nFROM Documents\nWHERE document_status_code = 'Done'\nAND document_type_code = 'Paper'\nAND document_id IN (\n    SELECT document_id\n    FROM Ref_Shipping_Agents\n    WHERE shipping_agent_name = 'USPS'\n)"}
{"answer":"SELECT FirstName, LastName FROM EMPLOYEE WHERE City = \"Calgary\"","question":"What are the first names and last names of the employees who live in Calgary city.","context":"CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)","generation":"SELECT FirstName, LastName\nFROM EMPLOYEE\nWHERE City = 'Calgary'"}
{"answer":"SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10","question":"What are the region names affected by the storm with a number of deaths of least 10?","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, number_deaths VARCHAR)","generation":"SELECT region_name\nFROM region\nJOIN affected_region ON region.region_id = affected_region.region_id\nJOIN storm ON affected_region.storm_id = storm.storm_id\nWHERE number_deaths < 10\n[\/SQL]\n\n### Explanation\nThe query joins the region table with the affected_region table to get the region_id of the affected regions. Then, it joins the affected_region table with the storm table to get the number of deaths of the storm. Finally, it filters the results to get the regions affected by the storm with a number of deaths of least 10."}
{"answer":"SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Pennsylvania\"","question":"Find the number of papers published by the institution \"University of Pennsylvania\".","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT COUNT(*)\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  WHERE instid = 'University of Pennsylvania'\n)"}
{"answer":"SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5","question":"What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.","context":"CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)","generation":"SELECT date, cloud_cover\nFROM weather\nORDER BY cloud_cover DESC\nLIMIT 5"}
{"answer":"SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the year which offers the largest number of courses.","context":"CREATE TABLE SECTION (YEAR VARCHAR)","generation":"SELECT YEAR\nFROM SECTION\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211'","question":"How many sections does course ACCT-211 has?","context":"CREATE TABLE CLASS (class_section VARCHAR, crs_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM CLASS\nWHERE crs_code = 'ACCT-211'"}
{"answer":"SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5","question":"Find the name of the first 5 customers.","context":"CREATE TABLE Customers (customer_name VARCHAR, date_became_customer VARCHAR)","generation":"SELECT customer_name\nFROM Customers\nORDER BY date_became_customer\nLIMIT 5"}
{"answer":"SELECT name, followers FROM user_profiles ORDER BY followers DESC","question":"List the name and number of followers for each user, and sort the results by the number of followers in descending order.","context":"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)","generation":"SELECT name, followers\nFROM user_profiles\nORDER BY followers DESC"}
{"answer":"SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1","question":"What is the document status description of the document with id 1?","context":"CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Document_Status (Id VARCHAR)","generation":"SELECT Description\nFROM Ref_Document_Status\nWHERE Id = (SELECT StatusId\nFROM Documents\nWHERE Id = 1)"}
{"answer":"SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')","question":"Find the name of students who have taken the prerequisite course of the course with title International Finance.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)","generation":"SELECT student.name\nFROM student\nJOIN takes ON student.id = takes.id\nJOIN course ON takes.course_id = course.course_id\nJOIN prereq ON course.course_id = prereq.course_id\nWHERE prereq.course_id = 'International Finance'"}
{"answer":"SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"","question":"What are the building full names that contain the word \"court\"?","context":"CREATE TABLE Apartment_Buildings (building_full_name VARCHAR)","generation":"SELECT building_full_name\nFROM Apartment_Buildings\nWHERE building_full_name LIKE '%court%'"}
{"answer":"SELECT MAX(support_rate), MIN(consider_rate), MIN(oppose_rate) FROM candidate","question":"find the highest support percentage, lowest consider rate and oppose rate of all candidates.","context":"CREATE TABLE candidate (support_rate INTEGER, consider_rate INTEGER, oppose_rate INTEGER)","generation":"SELECT candidate.support_rate, candidate.consider_rate, candidate.oppose_rate\nFROM candidate\nORDER BY candidate.support_rate DESC, candidate.consider_rate ASC, candidate.oppose_rate ASC\nLIMIT 1"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = \"right\"","question":"List the names of all players who have a crossing score higher than 90 and prefer their right foot.","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, crossing VARCHAR, preferred_foot VARCHAR)","generation":"SELECT player_name\nFROM Player\nJOIN Player_Attributes\nON Player.player_api_id = Player_Attributes.player_api_id\nWHERE crossing > 90 AND preferred_foot = 'right'"}
{"answer":"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10","question":"List the customers first and last name of 10 least expensive invoices.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)","generation":"SELECT customers.first_name, customers.last_name\nFROM customers\nJOIN invoices\nON customers.id = invoices.customer_id\nORDER BY invoices.amount\nLIMIT 10"}
{"answer":"SELECT creation, name, budget_in_billions FROM department","question":"List the creation year, name and budget of each department.","context":"CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)","generation":"SELECT creation, name, budget_in_billions\nFROM department\nORDER BY creation"}
{"answer":"SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'","question":"What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?","context":"CREATE TABLE customer (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE rental (staff_id VARCHAR, customer_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)","generation":"SELECT CONCAT(staff.first_name, ' ', staff.last_name) AS full_name\nFROM staff\nJOIN rental ON staff.staff_id = rental.staff_id\nJOIN customer ON rental.customer_id = customer.customer_id\nWHERE customer.first_name = 'April'\nAND customer.last_name = 'Burns'"}
{"answer":"SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1","question":"Find the number and averaged salary of all instructors who are in the department with the highest budget.","context":"CREATE TABLE department (dept_name VARCHAR, budget VARCHAR); CREATE TABLE instructor (salary INTEGER, dept_name VARCHAR)","generation":"SELECT COUNT(instructor.salary), AVG(instructor.salary)\nFROM instructor\nJOIN department\nON instructor.dept_name = department.dept_name\nWHERE department.budget = (SELECT MAX(budget) FROM department)"}
{"answer":"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\"","question":"What city does the employee who helps the customer with postal code 70174 live in?","context":"CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)","generation":"SELECT EMPLOYEE.City\nFROM EMPLOYEE\nINNER JOIN CUSTOMER ON EMPLOYEE.EmployeeId = CUSTOMER.SupportRepId\nWHERE CUSTOMER.PostalCode = '70174'"}
{"answer":"SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15","question":"List the name and the number of stations for all the cities that have at least 15 stations.","context":"CREATE TABLE station (city VARCHAR)","generation":"SELECT city, COUNT(*) AS num_stations\nFROM station\nGROUP BY city\nHAVING COUNT(*) >= 15"}
{"answer":"SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100","question":"What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?","context":"CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)","generation":"SELECT DISTINCT station.name\nFROM station\nLEFT JOIN trip ON station.name = trip.end_station_name\nWHERE station.city = 'Palo Alto'\nAND trip.end_station_name IS NULL"}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'","question":"Find the name of tracks which are in Movies playlist but not in music playlist.","context":"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)","generation":"SELECT tracks.name\nFROM playlist_tracks\nJOIN tracks ON playlist_tracks.track_id = tracks.id\nJOIN playlists ON playlist_tracks.playlist_id = playlists.id\nWHERE playlists.name = 'Movies'\nAND playlist_tracks.playlist_id != 'music'\n[\/SQL]\n\n### Explanation\nThe query joins the playlist_tracks table with the tracks table and the playlists table. It then filters the results to only include tracks that are in the Movies playlist but not in the music playlist.\n\n### Join\nThe query uses a join to combine the playlist_tracks table with the tracks table and the playlists table. The join is performed on the track_id and playlist_id columns.\n\n### WHERE\nThe query uses a WHERE clause to filter the results to only include tracks that are in the Movies playlist but not in the music playlist. The clause checks that the playlist_id column in the playlist_tracks table is equal to the id column in the playlists table for the Movies playlist and not equal to the id column in the playlists table for the music playlist.\n\n### SELECT\nThe query uses a SELECT clause to retrieve the name column from the tracks table.\n\n### Expected Output\nThe query should return the name of tracks that are in the Movies playlist but not in the music playlist.\n\n### Constraints\n- The query should return the name of tracks that are in the Movies playlist but not in the music playlist.\n- The query should not return any duplicate names.\n- The query should not return any tracks that are in both the Movies and music playlists.\n- The query should not return any tracks"}
{"answer":"SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Nameless ,  Painless\"","question":"Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\".","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR)","generation":"SELECT authors.fname, authors.lname\nFROM authorship\nINNER JOIN papers ON authorship.paperid = papers.paperid\nINNER JOIN authors ON authorship.authid = authors.authid\nWHERE papers.title = 'Nameless, Painless'"}
{"answer":"SELECT DISTINCT CLASS FROM race","question":"What are the distinct classes that races can have?","context":"CREATE TABLE race (CLASS VARCHAR)","generation":"SELECT DISTINCT CLASS\nFROM race"}
{"answer":"SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"","question":"Which college have both players with position midfielder and players with position defender?","context":"CREATE TABLE match_season (College VARCHAR, POSITION VARCHAR)","generation":"SELECT DISTINCT College\nFROM match_season\nWHERE POSITION IN ('midfielder', 'defender')\nGROUP BY College\nHAVING COUNT(DISTINCT POSITION) = 2"}
{"answer":"SELECT COUNT(DISTINCT product_type_code) FROM products_for_hire","question":"How many different product types are there?","context":"CREATE TABLE products_for_hire (product_type_code VARCHAR)","generation":"SELECT COUNT(DISTINCT product_type_code)\nFROM products_for_hire"}
{"answer":"SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2","question":"Show the addresses of the buildings that have apartments with more than 2 bathrooms.","context":"CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_id VARCHAR); CREATE TABLE Apartments (building_id VARCHAR, bathroom_count INTEGER)","generation":"SELECT Apartment_Buildings.building_address\nFROM Apartment_Buildings\nJOIN Apartments ON Apartment_Buildings.building_id = Apartments.building_id\nWHERE Apartments.bathroom_count > 2"}
{"answer":"SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1","question":"List the name of the company that produced more than one phone model.","context":"CREATE TABLE phone (Company_name VARCHAR)","generation":"SELECT Company_name\nFROM phone\nGROUP BY Company_name\nHAVING COUNT(Company_name) > 1"}
{"answer":"SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) LIMIT 1","question":"What are the movie titles and average rating of the movies with the lowest average rating?","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT m.title, AVG(r.stars)\nFROM Movie m\nJOIN Rating r\nON m.mID = r.mID\nGROUP BY m.title\nORDER BY AVG(r.stars)\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM club","question":"How many clubs are there?","context":"CREATE TABLE club (Id VARCHAR)","generation":"SELECT COUNT(*) FROM club"}
{"answer":"SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT(*) >= 2","question":"Show the names of people who have been on the negative side of debates at least twice.","context":"CREATE TABLE debate_people (Negative VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT DISTINCT p.Name\nFROM people p\nJOIN debate_people dp ON p.People_ID = dp.People_ID\nGROUP BY p.Name\nHAVING COUNT(dp.Negative) >= 2"}
{"answer":"SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20","question":"Please show the employee last names that serves no more than 20 customers.","context":"CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)","generation":"SELECT LastName\nFROM CUSTOMER\nJOIN EMPLOYEE ON CUSTOMER.SupportRepId = EMPLOYEE.EmployeeId\nGROUP BY LastName\nHAVING COUNT(CustomerId) <= 20"}
{"answer":"SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT MAX(balance) FROM checking)","question":"Find the name and id of accounts whose checking balance is below the maximum checking balance.","context":"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)","generation":"SELECT name, custid\nFROM accounts\nWHERE balance < (SELECT MAX(balance) FROM checking)"}
{"answer":"SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*)","question":"Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR)","generation":"SELECT apt_type_code, COUNT(*) AS num_apts\nFROM Apartments\nGROUP BY apt_type_code\nORDER BY num_apts ASC"}
{"answer":"SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name and country for the artist with most number of exhibitions?","context":"CREATE TABLE exhibition (artist_id VARCHAR); CREATE TABLE artist (name VARCHAR, country VARCHAR, artist_id VARCHAR)","generation":"SELECT artist.name, artist.country\nFROM artist\nJOIN exhibition\nON artist.artist_id = exhibition.artist_id\nGROUP BY artist.name, artist.country\nORDER BY COUNT(exhibition.artist_id) DESC\nLIMIT 1"}
{"answer":"SELECT customer_id, SUM(amount_paid) FROM Payments GROUP BY customer_id ORDER BY SUM(amount_paid) DESC LIMIT 1","question":"What is the maximum total amount paid by a customer? List the customer id and amount.","context":"CREATE TABLE Payments (customer_id VARCHAR, amount_paid INTEGER)","generation":"SELECT customer_id, amount_paid\nFROM Payments\nWHERE amount_paid = (SELECT MAX(amount_paid) FROM Payments)"}
{"answer":"SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the race class with most number of races.","context":"CREATE TABLE race (CLASS VARCHAR)","generation":"SELECT CLASS\nFROM race\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT LOCATION) FROM perpetrator","question":"How many distinct locations of perpetrators are there?","context":"CREATE TABLE perpetrator (LOCATION VARCHAR)","generation":"SELECT COUNT(DISTINCT LOCATION)\nFROM perpetrator"}
{"answer":"SELECT DISTINCT forename FROM drivers ORDER BY forename","question":"List the forenames of all distinct drivers in alphabetical order?","context":"CREATE TABLE drivers (forename VARCHAR)","generation":"SELECT DISTINCT forename\nFROM drivers\nORDER BY forename ASC"}
{"answer":"SELECT COUNT(*) FROM candidate","question":"How many candidates are there?","context":"CREATE TABLE candidate (Id VARCHAR)","generation":"SELECT COUNT(*) FROM candidate"}
{"answer":"SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003","question":"Show the names of buildings except for those having an institution founded in 2003.","context":"CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE building (name VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded VARCHAR)","generation":"SELECT name\nFROM building\nWHERE building_id NOT IN (\n  SELECT building_id\n  FROM institution\n  WHERE founded = '2003'\n)"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC","question":"List the names of perpetrators in descending order of the year.","context":"CREATE TABLE perpetrator (People_ID VARCHAR, Year VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Name\nFROM perpetrator\nJOIN people ON people.People_ID = perpetrator.People_ID\nORDER BY perpetrator.Year DESC"}
{"answer":"SELECT MAX(weight), MIN(weight) FROM Player","question":"What is the maximum and minimum height of all players?","context":"CREATE TABLE Player (weight INTEGER)","generation":"SELECT MAX(weight), MIN(weight) FROM Player"}
{"answer":"SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)","question":"List the names of mountains that do not have any climber.","context":"CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT mountain.Name\nFROM mountain\nLEFT JOIN climber ON mountain.Mountain_ID = climber.Mountain_ID\nWHERE climber.Mountain_ID IS NULL"}
{"answer":"SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management)","question":"How many departments are led by heads who are not mentioned?","context":"CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM department\nWHERE department_id NOT IN (SELECT department_id FROM management)"}
{"answer":"SELECT lname FROM authors ORDER BY lname","question":"Retrieve all the last names of authors in alphabetical order.","context":"CREATE TABLE authors (lname VARCHAR)","generation":"SELECT lname FROM authors ORDER BY lname"}
{"answer":"SELECT region_name FROM region WHERE NOT region_id IN (SELECT region_id FROM affected_region)","question":"Show the name for regions not affected.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_name VARCHAR, region_id VARCHAR)","generation":"SELECT region_name\nFROM region\nWHERE region_name NOT IN (SELECT region_name\n                          FROM affected_region)"}
{"answer":"SELECT Party_Theme FROM party ORDER BY Number_of_hosts","question":"List the themes of parties in ascending order of number of hosts.","context":"CREATE TABLE party (Party_Theme VARCHAR, Number_of_hosts VARCHAR)","generation":"SELECT Party_Theme\nFROM party\nORDER BY Number_of_hosts ASC"}
{"answer":"SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common position of players in match seasons.","context":"CREATE TABLE match_season (POSITION VARCHAR)","generation":"SELECT POSITION, COUNT(*) AS COUNT\nFROM match_season\nGROUP BY POSITION\nORDER BY COUNT DESC\nLIMIT 1"}
{"answer":"SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'","question":"Find the name of the storm that affected both Afghanistan and Albania regions.","context":"CREATE TABLE storm (Name VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE region (region_id VARCHAR, Region_name VARCHAR)","generation":"SELECT DISTINCT storm.Name\nFROM storm\nJOIN affected_region ON storm.storm_id = affected_region.storm_id\nJOIN region ON affected_region.region_id = region.region_id\nWHERE region.Region_name = 'Afghanistan'\nAND region.Region_name = 'Albania'"}
{"answer":"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"","question":"What is the phone and email for customer with first name Aniyah and last name Feest?","context":"CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT customer_phone, customer_email\nFROM Customers\nWHERE customer_first_name = 'Aniyah'\nAND customer_last_name = 'Feest'"}
{"answer":"SELECT COUNT(*) FROM perpetrator","question":"How many perpetrators are there?","context":"CREATE TABLE perpetrator (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM perpetrator"}
{"answer":"SELECT receipt_date FROM Documents WHERE document_id = 3","question":"What is the receipt date of the document with id 3?","context":"CREATE TABLE Documents (receipt_date VARCHAR, document_id VARCHAR)","generation":"SELECT receipt_date\nFROM Documents\nWHERE document_id = 3"}
{"answer":"SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2","question":"What states have at least two representatives?","context":"CREATE TABLE representative (State VARCHAR)","generation":"SELECT State\nFROM representative\nGROUP BY State\nHAVING COUNT(State) >= 2"}
{"answer":"SELECT apt_number, room_count FROM Apartments","question":"Return the apartment number and the number of rooms for each apartment.","context":"CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)","generation":"SELECT apt_number, room_count\nFROM Apartments"}
{"answer":"SELECT id FROM trip ORDER BY duration LIMIT 1","question":"What is the id of the trip that has the shortest duration?","context":"CREATE TABLE trip (id VARCHAR, duration VARCHAR)","generation":"SELECT id\nFROM trip\nORDER BY duration ASC\nLIMIT 1"}
{"answer":"SELECT T2.Name, COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name","question":"Show the names of people and the number of times they have been on the affirmative side of debates.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate_people (Affirmative VARCHAR)","generation":"SELECT Name, COUNT(Affirmative) AS Number_of_debates\nFROM people\nJOIN debate_people ON people.People_ID = debate_people.Affirmative\nGROUP BY Name\n[\/SQL]"}
{"answer":"SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1","question":"Which destination has least number of flights?","context":"CREATE TABLE Flight (destination VARCHAR)","generation":"SELECT destination\nFROM Flight\nORDER BY destination\nLIMIT 1"}
{"answer":"SELECT Name, LOCATION FROM wrestler","question":"What are the names and location of the wrestlers?","context":"CREATE TABLE wrestler (Name VARCHAR, LOCATION VARCHAR)","generation":"SELECT Name, LOCATION\nFROM wrestler"}
{"answer":"SELECT COUNT(*) FROM claims_processing_stages","question":"How many claim processing stages are there in total?","context":"CREATE TABLE claims_processing_stages (Id VARCHAR)","generation":"SELECT COUNT(*) FROM claims_processing_stages"}
{"answer":"SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY COUNT(*) LIMIT 1","question":"Which kind of part has the least number of faults? List the part name.","context":"CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)","generation":"SELECT part_name\nFROM Parts\nWHERE part_id IN (\n  SELECT part_id\n  FROM Part_Faults\n  GROUP BY part_id\n  HAVING COUNT(*) = (\n    SELECT COUNT(*)\n    FROM Part_Faults\n    GROUP BY part_id\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n  )\n)"}
{"answer":"SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards","question":"Show ids, customer ids, card type codes, card numbers for all cards.","context":"CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)","generation":"SELECT card_id, customer_id, card_type_code, card_number\nFROM Customers_cards"}
{"answer":"SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC","question":"Show each gender code and the corresponding count of guests sorted by the count in descending order.","context":"CREATE TABLE Guests (gender_code VARCHAR)","generation":"SELECT gender_code, COUNT(*) AS count\nFROM Guests\nGROUP BY gender_code\nORDER BY count DESC"}
{"answer":"SELECT gender, COUNT(*) FROM Customers GROUP BY gender","question":"Show the number of customers for each gender.","context":"CREATE TABLE Customers (gender VARCHAR)","generation":"SELECT gender, COUNT(*) AS number_of_customers\nFROM Customers\nGROUP BY gender\n[\/SQL]\n\n### Explanation\nThe query uses the SELECT statement to select the gender and the COUNT(*) function to count the number of customers for each gender. The query then uses the GROUP BY statement to group the results by gender.\n\n### Query Breakdown\n- SELECT gender, COUNT(*) AS number_of_customers\nThis line selects the gender and the COUNT(*) function to count the number of customers for each gender. The AS number_of_customers is optional and is used to give the column a more descriptive name.\n- FROM Customers\nThis line specifies the table to query.\n- GROUP BY gender\nThis line groups the results by gender.\n\n### Query Result\nThe query result will be a table with two columns: gender and number_of_customers. The table will have one row for each gender with the number of customers for that gender.\n\n### Query Example\n[SQL]\nSELECT gender, COUNT(*) AS number_of_customers\nFROM Customers\nGROUP BY gender\n[\/SQL]\n\n### Query Result Example\n[table]\n[tr][th]Gender[\/th][th]Number of Customers[\/th][\/tr]\n[tr][td]Male[\/td][td]100[\/td][\/tr]\n[tr][td]Female[\/td][td]50[\/td][\/tr]\n[\/table]\n\n### Conclusion\nThe query answers the question of showing the number of customers for each gender. The query uses the SELECT statement to select the gender and the COUNT(*) function to count the number of customers for each gender. The query then uses the GROUP BY statement to group the results by gender."}
{"answer":"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date","question":"List the id of students who registered course statistics in the order of registration date.","context":"CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)","generation":"SELECT student_id\nFROM student_course_registrations\nORDER BY registration_date"}
{"answer":"SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'","question":"Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)","generation":"SELECT cust_name, acc_bal\nFROM customer\nWHERE cust_name LIKE '%a%'"}
{"answer":"SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the investor that has invested in the most number of entrepreneurs?","context":"CREATE TABLE entrepreneur (Investor VARCHAR)","generation":"SELECT Investor\nFROM entrepreneur\nGROUP BY Investor\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM entrepreneur","question":"How many entrepreneurs are there?","context":"CREATE TABLE entrepreneur (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM entrepreneur"}
{"answer":"SELECT T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")","question":"What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?","context":"CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)","generation":"SELECT Movie.title, Movie.director\nFROM Movie\nJOIN Rating\nON Movie.mID = Rating.mID\nWHERE Rating.stars > (SELECT AVG(Rating.stars)\nFROM Rating\nJOIN Movie\nON Rating.mID = Movie.mID\nWHERE Movie.director = 'James Cameron')"}
{"answer":"SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1","question":"What is the first and last name of the oldest employee?","context":"CREATE TABLE employee (emp_fname VARCHAR, emp_lname VARCHAR, emp_dob VARCHAR)","generation":"SELECT emp_fname, emp_lname\nFROM employee\nORDER BY emp_dob\nLIMIT 1"}
{"answer":"SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher","question":"Show different publishers together with the number of publications they have.","context":"CREATE TABLE publication (Publisher VARCHAR)","generation":"SELECT Publisher, COUNT(*) AS NumberOfPublications\nFROM publication\nGROUP BY Publisher\nORDER BY NumberOfPublications DESC"}
{"answer":"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE \"%Monadic%\"","question":"Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)","generation":"SELECT lname\nFROM authors\nWHERE authid IN (SELECT authid\n                 FROM authorship\n                 WHERE paperid IN (SELECT paperid\n                                  FROM papers\n                                  WHERE title LIKE '%Monadic%'))"}
{"answer":"SELECT apt_type_code, MAX(room_count), MIN(room_count) FROM Apartments GROUP BY apt_type_code","question":"Show each apartment type code, and the maximum and minimum number of rooms for each type.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)","generation":"SELECT apt_type_code, MIN(room_count) AS min_room_count, MAX(room_count) AS max_room_count\nFROM Apartments\nGROUP BY apt_type_code\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the Apartments table by the apt_type_code column. The MIN and MAX aggregate functions are then applied to the room_count column to find the minimum and maximum number of rooms for each apartment type. The results are then returned in a single row for each apartment type, with the minimum and maximum room counts."}
{"answer":"SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID","question":"Show the delegates and the names of the party they belong to.","context":"CREATE TABLE election (Delegate VARCHAR, Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT Delegate, Party\nFROM election\nJOIN party\nON election.Party = party.Party_ID"}
{"answer":"SELECT Status, AVG(Population) FROM city GROUP BY Status","question":"Please show the different statuses of cities and the average population of cities with each status.","context":"CREATE TABLE city (Status VARCHAR, Population INTEGER)","generation":"SELECT Status, AVG(Population)\nFROM city\nGROUP BY Status\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the cities by their status. The AVG function calculates the average population of each group. The query then selects the status and the average population of each group.\n\n### Example\nThe following is an example of the output of the query:\n\n| Status | AVG(Population) |\n| --- | --- |\n| A | 1000 |\n| B | 2000 |\n| C | 3000 |\n\nThis output shows that there are three different statuses of cities (A, B, and C), and the average population of cities with each status is 1000, 2000, and 3000, respectively.\n\n### Constraints\n- The database schema is given.\n- The query should only use the city table.\n- The query should only use the AVG function.\n- The query should only use the GROUP BY clause.\n- The query should only use the SELECT clause.\n- The query should only use the WHERE clause.\n- The query should only use the HAVING clause.\n- The query should only use the ORDER BY clause.\n- The query should only use the LIMIT clause.\n- The query should only use the OFFSET clause.\n- The query should only use the COUNT function.\n- The query should only use the SUM function.\n- The query should only use the MAX function.\n- The query should only use the MIN function.\n- The query should only use the AVG function.\n- The query should only use the CONCAT function.\n- The query should only use the SUBSTRING function.\n- The query should only use the"}
{"answer":"SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(amount) LIMIT 1","question":"Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.","context":"CREATE TABLE payment (customer_id VARCHAR); CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT customer.first_name, customer.last_name, customer.customer_id\nFROM customer\nJOIN payment ON customer.customer_id = payment.customer_id\nGROUP BY customer.customer_id\nORDER BY SUM(payment.amount) ASC\nLIMIT 1"}
{"answer":"SELECT COUNT(*), dept_code FROM student GROUP BY dept_code","question":"Find the number of students for each department.","context":"CREATE TABLE student (dept_code VARCHAR)","generation":"SELECT dept_code, COUNT(*) AS num_students\nFROM student\nGROUP BY dept_code\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the student table by the dept_code column. The COUNT(*) function counts the number of rows in each group. The AS clause renames the column num_students to make it more descriptive.\n\n### Query Breakdown\n- SELECT dept_code, COUNT(*) AS num_students\n  - dept_code: The dept_code column is selected from the student table.\n  - COUNT(*): The COUNT function counts the number of rows in each group. The * is a wildcard that matches all columns.\n  - AS num_students: The COUNT(*) function is renamed to num_students to make it more descriptive.\n- FROM student\n  - The FROM clause specifies the table(s) to query.\n- GROUP BY dept_code\n  - The GROUP BY clause specifies the column(s) to group the rows by.\n\n### Constraints\n- The query should run on a database with the following schema:\n  - CREATE TABLE student (dept_code VARCHAR)\n- The query should not use any aggregate functions other than COUNT(*).\n- The query should not use any subqueries.\n- The query should not use any joins.\n- The query should not use any WHERE clause.\n- The query should not use any ORDER BY clause.\n- The query should not use any LIMIT clause.\n- The query should not use any OFFSET clause.\n- The query should not use any HAVING clause.\n- The query should not use any SELECT DISTINCT clause.\n- The query should not use any SELECT ALL clause.\n- The query should not"}
{"answer":"SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1","question":"Show the names of players coached by the rank 1 coach.","context":"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (Coach_ID VARCHAR, Rank VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)","generation":"SELECT player.Player_name\nFROM player\nJOIN player_coach ON player.Player_ID = player_coach.Player_ID\nJOIN coach ON player_coach.Coach_ID = coach.Coach_ID\nWHERE coach.Rank = '1'"}
{"answer":"SELECT region_name FROM region ORDER BY region_name","question":"List all region names in alphabetical order.","context":"CREATE TABLE region (region_name VARCHAR)","generation":"SELECT region_name\nFROM region\nORDER BY region_name ASC"}
{"answer":"SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"","question":"Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (date_opened VARCHAR, date_closed VARCHAR, customer_id VARCHAR)","generation":"SELECT customers_policies.date_opened, customers_policies.date_closed\nFROM customers_policies\nINNER JOIN customers\nON customers_policies.customer_id = customers.customer_id\nWHERE customers.customer_name LIKE '%Diana%'"}
{"answer":"SELECT COUNT(*) FROM budget WHERE budgeted < invested","question":"How many budget record has a budget amount smaller than the invested amount?","context":"CREATE TABLE budget (budgeted INTEGER, invested VARCHAR)","generation":"SELECT COUNT(*)\nFROM budget\nWHERE budgeted < invested"}
{"answer":"SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)","question":"How many enzymes do not have any interactions?","context":"CREATE TABLE medicine_enzyme_interaction (id VARCHAR, enzyme_id VARCHAR); CREATE TABLE enzyme (id VARCHAR, enzyme_id VARCHAR)","generation":"SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction)"}
{"answer":"SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')","question":"Find the title of course whose prerequisite is course Differential Geometry.","context":"CREATE TABLE prereq (course_id VARCHAR, prereq_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)","generation":"SELECT course.title\nFROM course\nJOIN prereq ON course.course_id = prereq.course_id\nWHERE prereq.prereq_id = 'Differential Geometry'"}
{"answer":"SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID","question":"Show names of technicians and series of machines they are assigned to repair.","context":"CREATE TABLE machine (Machine_series VARCHAR, machine_id VARCHAR); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)","generation":"SELECT technician.Name, machine.Machine_series\nFROM technician\nJOIN repair_assignment ON technician.technician_ID = repair_assignment.technician_ID\nJOIN machine ON repair_assignment.machine_id = machine.machine_id"}
{"answer":"SELECT director FROM Movie GROUP BY director HAVING COUNT(*) = 1","question":"What are the names of the directors who made exactly one movie?","context":"CREATE TABLE Movie (director VARCHAR)","generation":"SELECT director\nFROM Movie\nGROUP BY director\nHAVING COUNT(*) = 1"}
{"answer":"SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'","question":"What is the partition id of the user named \"Iron Man\".","context":"CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)","generation":"SELECT partitionid\nFROM user_profiles\nWHERE name = 'Iron Man'"}
{"answer":"SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Jose State University\" AND t1.year = 2000","question":"Find the campus fee of \"San Jose State University\" in year 2000.","context":"CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)","generation":"SELECT campusfee\nFROM csu_fees\nWHERE campus = 'San Jose State University'\nAND year = '2000'"}
{"answer":"SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'","question":"What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?","context":"CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)","generation":"SELECT DISTINCT creation\nFROM department\nJOIN management ON department.department_id = management.department_id\nJOIN head ON management.head_id = head.head_id\nWHERE head.born_state = 'Alabama'"}
{"answer":"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common hometown of gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT Hometown, COUNT(Hometown) AS Count\nFROM people\nJOIN gymnast ON people.People_ID = gymnast.Gymnast_ID\nGROUP BY Hometown\nORDER BY Count DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Student WHERE age = 18","question":"How many students are age 18?","context":"CREATE TABLE Student (age VARCHAR)","generation":"SELECT COUNT(*) FROM Student WHERE age = '18'"}
{"answer":"SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1","question":"Show the name and the nationality of the oldest host.","context":"CREATE TABLE HOST (Name VARCHAR, Nationality VARCHAR, Age VARCHAR)","generation":"SELECT Name, Nationality\nFROM HOST\nORDER BY Age DESC\nLIMIT 1"}
{"answer":"SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob","question":"List the first name of all employees with job code PROF ordered by their date of birth.","context":"CREATE TABLE employee (emp_fname VARCHAR, emp_jobcode VARCHAR, emp_dob VARCHAR)","generation":"SELECT emp_fname\nFROM employee\nWHERE emp_jobcode = 'PROF'\nORDER BY emp_dob"}
{"answer":"SELECT COUNT(*), T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1","question":"How many engineer visits are required at most for a single fault log? List the number and the log entry id.","context":"CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR); CREATE TABLE Engineer_Visits (fault_log_entry_id VARCHAR)","generation":"SELECT COUNT(Engineer_Visits.fault_log_entry_id) AS 'Number of engineer visits', Engineer_Visits.fault_log_entry_id AS 'Log entry id'\nFROM Engineer_Visits\nGROUP BY Engineer_Visits.fault_log_entry_id\nHAVING COUNT(Engineer_Visits.fault_log_entry_id) = (SELECT MAX(COUNT(Engineer_Visits.fault_log_entry_id))\nFROM Engineer_Visits\nGROUP BY Engineer_Visits.fault_log_entry_id)"}
{"answer":"SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015","question":"Show all church names except for those that had a wedding in year 2015.","context":"CREATE TABLE church (name VARCHAR); CREATE TABLE wedding (church_id VARCHAR, year VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)","generation":"SELECT church.name\nFROM church\nLEFT JOIN wedding ON church.church_id = wedding.church_id\nWHERE wedding.year != '2015'\n[\/SQL]\n\n### Explanation\nThe query joins the church table with the wedding table on the church_id column. The wedding table has a year column that contains the year of the wedding. The query filters out the church names that have a wedding in year 2015 by using the != operator in the WHERE clause."}
{"answer":"SELECT COUNT(*), t1.network_name, t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id","question":"Find the number of trains for each station, as well as the station network name and services.","context":"CREATE TABLE route (station_id VARCHAR); CREATE TABLE station (network_name VARCHAR, services VARCHAR, id VARCHAR)","generation":"SELECT station.network_name, station.services, COUNT(route.station_id) AS num_trains\nFROM station\nJOIN route ON station.id = route.station_id\nGROUP BY station.network_name, station.services\n[\/SQL]\n\n### Explanation\nThe query joins the station and route tables on the station_id column. The COUNT function counts the number of rows in the route table for each station. The GROUP BY clause groups the results by the network_name and services columns.\n\n### Example\nThe query returns the following results:\n[SQL]\nnetwork_name | services | num_trains\n-----------------------------------\nNetwork 1 | Service 1 | 3\nNetwork 1 | Service 2 | 2\nNetwork 2 | Service 1 | 1\nNetwork 2 | Service 2 | 1\n[\/SQL]\n\n### Constraints\n- The query should return the number of trains for each station, as well as the station network name and services.\n- The query should use the JOIN and GROUP BY clauses.\n- The query should not use any subqueries.\n- The query should not use any aggregate functions other than COUNT.\n- The query should not use any other clauses.\n- The query should end with \""}
{"answer":"SELECT COUNT(DISTINCT bike_id) FROM trip","question":"From the trip record, find the number of unique bikes.","context":"CREATE TABLE trip (bike_id VARCHAR)","generation":"SELECT COUNT(DISTINCT bike_id)\nFROM trip"}
{"answer":"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1","question":"List the time of elimination of the wrestlers with largest days held.","context":"CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held VARCHAR); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)","generation":"SELECT Time\nFROM elimination\nWHERE Wrestler_ID IN (\n  SELECT Wrestler_ID\n  FROM wrestler\n  ORDER BY Days_held DESC\n  LIMIT 1\n)\nORDER BY Time ASC"}
{"answer":"SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"","question":"How many distinct official languages are there among countries of players whose positions are defenders.","context":"CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)","generation":"SELECT COUNT(DISTINCT Official_native_language)\nFROM country\nWHERE Country_id IN (SELECT Country\n                     FROM match_season\n                     WHERE Position = 'defender')"}
{"answer":"SELECT COUNT(*) FROM inventory WHERE store_id = 1","question":"How many items in inventory does store 1 have?","context":"CREATE TABLE inventory (store_id VARCHAR)","generation":"SELECT COUNT(*) FROM inventory WHERE store_id = '1'"}
{"answer":"SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"","question":"What are the names of parties that have both delegates on \"Appropriations\" committee and","context":"CREATE TABLE election (Party VARCHAR, Committee VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT Party\nFROM election\nWHERE Committee = 'Appropriations'\nGROUP BY Party\nHAVING COUNT(DISTINCT Committee) = 2"}
{"answer":"SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC","question":"Show the titles of books in descending order of publication price.","context":"CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)","generation":"SELECT book.Title\nFROM book\nINNER JOIN publication\nON book.Book_ID = publication.Book_ID\nORDER BY publication.Price DESC"}
{"answer":"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid","question":"Find the name of each user and number of tweets tweeted by each of them.","context":"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"SELECT user_profiles.name, COUNT(tweets.uid) AS tweet_count\nFROM user_profiles\nLEFT JOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.name\nORDER BY tweet_count DESC"}
{"answer":"SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20","question":"Find all the customer last names that do not have invoice totals larger than 20.","context":"CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)","generation":"SELECT LastName\nFROM CUSTOMER\nWHERE CustomerId NOT IN (\n  SELECT CustomerId\n  FROM Invoice\n  WHERE total > 20\n)"}
{"answer":"SELECT origin, destination FROM Flight WHERE price > 300","question":"Show origin and destination for flights with price higher than 300.","context":"CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)","generation":"SELECT origin, destination\nFROM Flight\nWHERE price > 300"}
{"answer":"SELECT Name FROM people WHERE NOT People_id IN (SELECT Affirmative FROM debate_people)","question":"List the names of people that have not been on the affirmative side of debates.","context":"CREATE TABLE debate_people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR); CREATE TABLE people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR)","generation":"SELECT Name\nFROM people\nWHERE Affirmative = 'N'"}
{"answer":"SELECT DISTINCT TYPE FROM institution","question":"Show all the distinct institution types.","context":"CREATE TABLE institution (TYPE VARCHAR)","generation":"SELECT DISTINCT TYPE\nFROM institution"}
{"answer":"SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id","question":"Find the names of users who do not have a first notification of loss record.","context":"CREATE TABLE first_notification_of_loss (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR)","generation":"SELECT customer_name\nFROM customers\nWHERE customer_id NOT IN (SELECT customer_id FROM first_notification_of_loss)"}
{"answer":"SELECT DISTINCT Venue FROM debate","question":"Show the distinct venues of debates","context":"CREATE TABLE debate (Venue VARCHAR)","generation":"SELECT DISTINCT Venue\nFROM debate"}
{"answer":"SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology')","question":"Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.","context":"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE salary > (SELECT AVG(salary)\n                FROM instructor\n                WHERE dept_name = 'Biology')"}
{"answer":"SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code","question":"Find the number of records of each policy type and its type code.","context":"CREATE TABLE policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code, COUNT(*)\nFROM policies\nGROUP BY policy_type_code\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the records by policy type code. The COUNT(*) function counts the number of records in each group. The query then selects the policy type code and the count of records for each group.\n\n### Example\nThe following example shows the output of the query on a database with the following records:\n\n| policy_type_code |\n| --- |\n| 1 |\n| 1 |\n| 2 |\n| 2 |\n| 2 |\n| 3 |\n| 3 |\n| 3 |\n\nThe query would return the following output:\n\n| policy_type_code | COUNT(*) |\n| --- | --- |\n| 1 | 2 |\n| 2 | 3 |\n| 3 | 3 |\n\nThe query would return the following output:\n\n| policy_type_code | COUNT(*) |\n| --- | --- |\n| 1 | 2 |\n| 2 | 3 |\n| 3 | 3 |\n\n### Constraints\n- The database schema is given.\n- The query should be written in standard SQL.\n- The query should not use any proprietary SQL extensions.\n- The query should not use any external libraries or functions.\n- The query should not use any temporary tables or variables.\n- The query should be written in a single SQL statement.\n- The query should not use any subqueries.\n- The query should not use any aggregate functions other than COUNT(*).\n- The query should not use any window functions.\n- The query should not use any joins.\n- The query should not use any subqueries.\n- The"}
{"answer":"SELECT T2.Name, SUM(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name","question":"For each phone, show its names and total number of stocks.","context":"CREATE TABLE phone_market (Num_of_stock INTEGER, Phone_ID VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)","generation":"SELECT phone.Name, SUM(Num_of_stock) AS Total_Stocks\nFROM phone_market\nJOIN phone ON phone_market.Phone_ID = phone.Phone_ID\nGROUP BY phone.Name\n[\/SQL]"}
{"answer":"SELECT * FROM customer_master_index ORDER BY cmi_details DESC","question":"List all information about customer master index, and sort them by details in descending order.","context":"CREATE TABLE customer_master_index (cmi_details VARCHAR)","generation":"SELECT * FROM customer_master_index ORDER BY cmi_details DESC"}
{"answer":"SELECT DISTINCT donator_name FROM endowment","question":"Show all donor names.","context":"CREATE TABLE endowment (donator_name VARCHAR)","generation":"SELECT donator_name\nFROM endowment"}
{"answer":"SELECT COUNT(*) FROM STUDENTS WHERE NOT student_id IN (SELECT student_id FROM Behavior_Incident)","question":"How many students are not involved in any behavior incident?","context":"CREATE TABLE STUDENTS (student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)","generation":"SELECT COUNT(DISTINCT student_id)\nFROM STUDENTS\nWHERE student_id NOT IN (SELECT student_id FROM Behavior_Incident)"}
{"answer":"SELECT email_address FROM Students WHERE first_name = \"Emma\" AND last_name = \"Rohan\"","question":"What is the email of the student with first name \"Emma\" and last name \"Rohan\"?","context":"CREATE TABLE Students (email_address VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT email_address\nFROM Students\nWHERE first_name = 'Emma'\nAND last_name = 'Rohan'"}
{"answer":"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1","question":"Which artist has the most albums?","context":"CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)","generation":"SELECT Name\nFROM ARTIST\nWHERE ArtistId IN (\n  SELECT ArtistId\n  FROM ALBUM\n  GROUP BY ArtistId\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and surname of the driver who participated the most number of races?","context":"CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)","generation":"SELECT d.driverid, d.surname\nFROM drivers d\nJOIN results r ON d.driverid = r.driverid\nGROUP BY d.driverid, d.surname\nORDER BY COUNT(r.raceid) DESC\nLIMIT 1"}
{"answer":"SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1","question":"Who is the youngest employee in the company? List employee's first and last name.","context":"CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)","generation":"SELECT first_name, last_name\nFROM employees\nORDER BY birth_date\nLIMIT 1"}
{"answer":"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) DESC LIMIT 1","question":"Find the name and id of the item with the highest average rating.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT i.title, i.i_id\nFROM item i\nINNER JOIN review r ON i.i_id = r.i_id\nGROUP BY i.i_id\nORDER BY AVG(r.rating) DESC\nLIMIT 1"}
{"answer":"SELECT T2.title, T1.stars, T2.director, MAX(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director <> \"null\" GROUP BY director","question":"For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)","generation":"SELECT director, title, stars\nFROM Movie, Rating\nWHERE director = Movie.director\nAND director IS NOT NULL\nAND Movie.mID = Rating.mID\nAND stars = (SELECT MAX(stars)\nFROM Rating\nWHERE Rating.mID = Movie.mID)"}
{"answer":"SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code","question":"For each zip code, return how many times max wind speed reached 25?","context":"CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)","generation":"SELECT zip_code, COUNT(*) AS num_times_max_wind_speed_reached_25\nFROM weather\nWHERE max_wind_speed_mph >= 25\nGROUP BY zip_code"}
{"answer":"SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'","question":"Find the checking balance and saving balance in the Brown\u2019s account.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)","generation":"SELECT checking.balance, savings.balance\nFROM checking\nJOIN accounts ON checking.custid = accounts.custid\nJOIN savings ON accounts.custid = savings.custid\nWHERE accounts.name = 'Brown'"}
{"answer":"SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)","question":"Show the name of cities in the county that has the largest number of police officers.","context":"CREATE TABLE city (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR); CREATE TABLE county_public_safety (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR)","generation":"SELECT city.name\nFROM city\nJOIN county_public_safety\nON city.county_ID = county_public_safety.county_ID\nWHERE county_public_safety.Police_officers = (SELECT MAX(Police_officers) FROM county_public_safety)"}
{"answer":"SELECT company, rank FROM company ORDER BY Sales_billion DESC","question":"List the company name and rank for all companies in the decreasing order of their sales.","context":"CREATE TABLE company (company VARCHAR, rank VARCHAR, Sales_billion VARCHAR)","generation":"SELECT company, rank, Sales_billion\nFROM company\nORDER BY Sales_billion DESC"}
{"answer":"SELECT DISTINCT payment_type_code FROM payments","question":"What are all the distinct payment types?","context":"CREATE TABLE payments (payment_type_code VARCHAR)","generation":"SELECT DISTINCT payment_type_code\nFROM payments"}
{"answer":"SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM school","question":"Show the average, maximum, minimum enrollment of all schools.","context":"CREATE TABLE school (enrollment INTEGER)","generation":"SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment)\nFROM school"}
{"answer":"SELECT advisor, COUNT(*) FROM Student GROUP BY advisor","question":"Show all advisors and corresponding number of students.","context":"CREATE TABLE Student (advisor VARCHAR)","generation":"SELECT advisor, COUNT(*) AS number_of_students\nFROM Student\nGROUP BY advisor\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the students by their advisors. The COUNT(*) function counts the number of students in each group. The query then selects the advisor and the number of students for each group.\n\n### Query Breakdown\n- SELECT advisor, COUNT(*) AS number_of_students\n  - advisor: The advisor of the student\n  - COUNT(*) AS number_of_students: The number of students with the same advisor\n- FROM Student\n  - The table to query\n- GROUP BY advisor\n  - Groups the students by their advisors\n\n### Constraints\n- The query should run on a database with the following schema:\n  - CREATE TABLE Student (advisor VARCHAR)\n\n### Scenario\n- The database has the following data:\n\n| advisor |\n| --- |\n| John |\n| John |\n| John |\n| Jane |\n| Jane |\n| Jane |\n| Jane |\n| Jane |\n\n- The query should return the following result:\n\n| advisor | number_of_students |\n| --- | --- |\n| John | 3 |\n| Jane | 5 |\n\n### Note\n- The query should run on a database with the following schema:\n  - CREATE TABLE Student (advisor VARCHAR)\n- The query should return the following result:\n\n| advisor | number_of_students |\n| --- | --- |\n| John | 3 |\n| Jane | 5 |\n\n### Hint\n- The query should use the GROUP BY clause to group the students by their advisors.\n- The COUNT(*) function"}
{"answer":"SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3","question":"Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.","context":"CREATE TABLE journalist (Nationality VARCHAR, Years_working INTEGER)","generation":"SELECT Nationality\nFROM journalist\nWHERE Years_working > 10 AND Years_working < 3"}
{"answer":"SELECT AVG(acc_bal), acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type","question":"For each account type, find the average account balance of customers with credit score lower than 50.","context":"CREATE TABLE customer (acc_type VARCHAR, acc_bal INTEGER, credit_score INTEGER)","generation":"SELECT acc_type, AVG(acc_bal)\nFROM customer\nWHERE credit_score < 50\nGROUP BY acc_type"}
{"answer":"SELECT COUNT(DISTINCT participant_id) FROM participants_in_Events","question":"What are all the distinct participant ids who attended any events?","context":"CREATE TABLE participants_in_Events (participant_id VARCHAR)","generation":"SELECT DISTINCT participant_id\nFROM participants_in_Events"}
{"answer":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"","question":"List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.","context":"CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)","generation":"SELECT document_id\nFROM Documents\nWHERE document_status_code = 'done'\nAND document_type_code = 'Paper'\nAND document_id NOT IN (\n  SELECT document_id\n  FROM Ref_Shipping_Agents\n  WHERE shipping_agent_name = 'USPS'\n)"}
{"answer":"SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the customer id with most number of cards, and how many does he have?","context":"CREATE TABLE Customers_cards (customer_id VARCHAR)","generation":"SELECT customer_id, COUNT(customer_id) AS num_cards\nFROM Customers_cards\nGROUP BY customer_id\nORDER BY num_cards DESC\nLIMIT 1"}
{"answer":"SELECT MAX(home_games), MIN(home_games), AVG(home_games) FROM stadium","question":"What are the maximum, minimum and average home games each stadium held?","context":"CREATE TABLE stadium (home_games INTEGER)","generation":"SELECT stadium, MAX(home_games), MIN(home_games), AVG(home_games)\nFROM stadium\nGROUP BY stadium\nORDER BY stadium\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Selects the columns to be returned in the result set.\n- FROM: Specifies the table or tables to retrieve rows from.\n- GROUP BY: Groups the rows in the result set based on the values in one or more columns.\n- MAX: Returns the maximum value in the selected column.\n- MIN: Returns the minimum value in the selected column.\n- AVG: Returns the average value in the selected column.\n- ORDER BY: Sorts the rows in the result set based on the values in one or more columns.\n\nThe query first selects the stadium, MAX(home_games), MIN(home_games), and AVG(home_games) columns from the stadium table.\n\nThe query then groups the rows in the result set based on the stadium column.\n\nThe query then returns the maximum, minimum, and average home games each stadium held.\n\nThe query then sorts the rows in the result set based on the stadium column.\n\nThe query ends with \""}
{"answer":"SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000","question":"Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.","context":"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)","generation":"SELECT Publisher\nFROM publication\nWHERE Price > 10000000\nOR Price < 5000000"}
{"answer":"SELECT COUNT(*) FROM Customers_cards","question":"Show the number of customer cards.","context":"CREATE TABLE Customers_cards (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Customers_cards"}
{"answer":"SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500","question":"Are the customers holding coupons with amount 500 bad or good?","context":"CREATE TABLE discount_coupons (coupon_id VARCHAR, coupon_amount VARCHAR); CREATE TABLE customers (good_or_bad_customer VARCHAR, coupon_id VARCHAR)","generation":"SELECT customers.good_or_bad_customer\nFROM customers\nJOIN discount_coupons\nON customers.coupon_id = discount_coupons.coupon_id\nWHERE discount_coupons.coupon_amount = 500"}
{"answer":"SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id","question":"Show the id, name of each editor and the number of journal committees they are on.","context":"CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)","generation":"SELECT editor.editor_id, editor.name, COUNT(journal_committee.editor_id) AS num_committees\nFROM editor\nLEFT JOIN journal_committee ON editor.editor_id = journal_committee.editor_id\nGROUP BY editor.editor_id, editor.name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the editor and journal_committee tables. The COUNT function is used to count the number of journal committees each editor is on. The query then groups the results by editor_id and name, and selects the id, name, and number of committees."}
{"answer":"SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'","question":"When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?","context":"CREATE TABLE accelerator_compatible_browser (compatible_since_year VARCHAR, browser_id VARCHAR, accelerator_id VARCHAR); CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR)","generation":"SELECT accelerator_compatible_browser.compatible_since_year\nFROM accelerator_compatible_browser\nJOIN browser ON accelerator_compatible_browser.browser_id = browser.id\nJOIN web_client_accelerator ON accelerator_compatible_browser.accelerator_id = web_client_accelerator.id\nWHERE accelerator_compatible_browser.compatible_since_year = '2010'\nAND browser.name = 'Internet Explorer'\nAND web_client_accelerator.name = 'CACHEbox'"}
{"answer":"SELECT TYPE, COUNT(*), SUM(enrollment) FROM institution GROUP BY TYPE","question":"Show institution types, along with the number of institutions and total enrollment for each type.","context":"CREATE TABLE institution (TYPE VARCHAR, enrollment INTEGER)","generation":"SELECT TYPE, COUNT(TYPE) AS \"Number of Institutions\", SUM(enrollment) AS \"Total Enrollment\"\nFROM institution\nGROUP BY TYPE\nORDER BY TYPE\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: retrieves data from the database. In this case, it retrieves the TYPE column and the COUNT(TYPE) and SUM(enrollment) aggregates.\n- FROM: specifies the table(s) to retrieve data from. In this case, it specifies the institution table.\n- GROUP BY: groups the data by the TYPE column.\n- COUNT: counts the number of rows in each group.\n- SUM: sums the enrollment column for each group.\n- ORDER BY: sorts the data by the TYPE column.\n\n### Query Breakdown\nHere is a breakdown of the SQL query:\n[SQL]\nSELECT TYPE, COUNT(TYPE) AS \"Number of Institutions\", SUM(enrollment) AS \"Total Enrollment\"\nFROM institution\nGROUP BY TYPE\nORDER BY TYPE\n[\/SQL]\n\n- SELECT TYPE, COUNT(TYPE) AS \"Number of Institutions\", SUM(enrollment) AS \"Total Enrollment\"\n\t+ Retrieves the TYPE column and the COUNT(TYPE) and SUM(enrollment) aggregates.\n\t+ The COUNT(TYPE) aggregate counts the number of rows in each group.\n\t+ The SUM(enrollment) aggregate sums the enrollment column for each group.\n- FROM institution\n\t+ Specifies the table(s) to retrieve data from. In this case, it specifies the institution table.\n- GROUP BY TYPE\n\t+ Groups the data by the TYPE column.\n- ORDER BY T"}
{"answer":"SELECT dept_address FROM department WHERE dept_name = 'History'","question":"what is the address of history department?","context":"CREATE TABLE department (dept_address VARCHAR, dept_name VARCHAR)","generation":"SELECT dept_address\nFROM department\nWHERE dept_name = 'history'"}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING COUNT(*) > 1","question":"Find the name of customers who have more than one loan.","context":"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT cust_name\nFROM customer\nWHERE cust_id IN (\n  SELECT cust_id\n  FROM loan\n  GROUP BY cust_id\n  HAVING COUNT(*) > 1\n)"}
{"answer":"SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\"","question":"Find the address of all customers that live in Germany and have invoice.","context":"CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)","generation":"SELECT CUSTOMER.Address\nFROM CUSTOMER\nINNER JOIN INVOICE ON CUSTOMER.CustomerId = INVOICE.CustomerId\nWHERE CUSTOMER.country = 'Germany'"}
{"answer":"SELECT model_name FROM chip_model ORDER BY launch_year","question":"List all the model names sorted by their launch year.","context":"CREATE TABLE chip_model (model_name VARCHAR, launch_year VARCHAR)","generation":"SELECT model_name\nFROM chip_model\nORDER BY launch_year"}
{"answer":"SELECT AVG(Population) FROM county","question":"Show the average population of all counties.","context":"CREATE TABLE county (Population INTEGER)","generation":"SELECT AVG(Population)\nFROM county"}
{"answer":"SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'","question":"What are the daily hire costs for the products with substring 'Book' in its name?","context":"CREATE TABLE Products_for_hire (daily_hire_cost VARCHAR, product_name VARCHAR)","generation":"SELECT daily_hire_cost\nFROM Products_for_hire\nWHERE product_name LIKE '%Book%'"}
{"answer":"SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"","question":"Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?","context":"CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)","generation":"SELECT drivers.forename, drivers.driverid\nFROM drivers\nINNER JOIN results ON drivers.driverid = results.driverid\nINNER JOIN races ON results.raceid = races.raceid\nWHERE races.name = 'Australian Grand Prix'\nAND races.raceid IN (SELECT results.raceid\nFROM results\nINNER JOIN races ON results.raceid = races.raceid\nWHERE races.name = 'Chinese Grand Prix')\n[\/SQL]\n\n### Explanation\nThe query first joins the drivers table with the results table to find the driverid of the drivers who participated in the Australian Grand Prix.\n\nThe query then joins the results table with the races table to find the raceid of the races with name Chinese Grand Prix.\n\nThe query then uses the IN operator to find the driverid of the drivers who participated in both the Australian Grand Prix and the races with name Chinese Grand Prix.\n\nFinally, the query selects the forename and driverid of the drivers who participated in both races.\n\n### Query Breakdown\n- SELECT drivers.forename, drivers.driverid\nFROM drivers\nINNER JOIN results ON drivers.driverid = results.driverid\nINNER JOIN races ON results.raceid = races.raceid\nWHERE races.name = 'Australian Grand Prix'\nAND races.raceid IN (SELECT results.raceid\nFROM results\nINNER JOIN races ON results.raceid = races.raceid\nWHERE races.name = 'Chinese Grand Prix')\n\n- The first line of the query selects the forename and driverid of the drivers who participated in the Australian Grand Prix.\n- The second line of the query joins the results table with the races table to find the raceid of the races with name Chinese Grand Prix.\n- The third line of the query uses the IN operator to find"}
{"answer":"SELECT DISTINCT allergytype FROM Allergy_type","question":"Show all allergy types.","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT allergytype\nFROM Allergy_type"}
{"answer":"SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\"","question":"In which distinct years was the governor \"Eliot Spitzer\"?","context":"CREATE TABLE party (YEAR VARCHAR, Governor VARCHAR)","generation":"SELECT DISTINCT YEAR\nFROM party\nWHERE Governor = 'Eliot Spitzer'"}
{"answer":"SELECT asset_make, asset_model, asset_details FROM Assets ORDER BY asset_disposed_date","question":"List the all the assets make, model, details by the disposed date ascendingly.","context":"CREATE TABLE Assets (asset_make VARCHAR, asset_model VARCHAR, asset_details VARCHAR, asset_disposed_date VARCHAR)","generation":"SELECT asset_make, asset_model, asset_details\nFROM Assets\nORDER BY asset_disposed_date ASC"}
{"answer":"SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2","question":"List the nominees that have been nominated more than two musicals.","context":"CREATE TABLE musical (Nominee VARCHAR)","generation":"SELECT Nominee\nFROM musical\nGROUP BY Nominee\nHAVING COUNT(*) > 2"}
{"answer":"SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1","question":"What are the names of products whose availability equals to 1?","context":"CREATE TABLE view_product_availability (product_id VARCHAR, available_yn VARCHAR); CREATE TABLE products_for_hire (product_name VARCHAR, product_id VARCHAR)","generation":"SELECT product_name\nFROM products_for_hire\nWHERE product_id IN (\n  SELECT product_id\n  FROM view_product_availability\n  WHERE available_yn = '1'\n)"}
{"answer":"SELECT COUNT(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code","question":"Find the number of professors with a Ph.D. degree in each department.","context":"CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR)","generation":"SELECT dept_code, COUNT(prof_high_degree)\nFROM professor\nWHERE prof_high_degree = 'Ph.D.'\nGROUP BY dept_code\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECT dept_code, COUNT(prof_high_degree)\n    - dept_code: The department code of the professor\n    - COUNT(prof_high_degree): The number of professors with a Ph.D. degree in each department\n- FROM professor\n    - The table to query\n- WHERE prof_high_degree = 'Ph.D.'\n    - Only select professors with a Ph.D. degree\n- GROUP BY dept_code\n    - Group the results by department code\n\n### Example\nThe following is an example of the output of the query:\n[SQL]\nSELECT dept_code, COUNT(prof_high_degree)\nFROM professor\nWHERE prof_high_degree = 'Ph.D.'\nGROUP BY dept_code\n[\/SQL]\n\n| dept_code | COUNT(prof_high_degree) |\n| --- | --- |\n| A | 3 |\n| B | 2 |\n| C | 1 |\n\n### Constraints\n- The database schema is given\n- The query should only use the following SQL commands:\n    - SELECT\n    - FROM\n    - WHERE\n    - GROUP BY\n    - COUNT"}
{"answer":"SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1","question":"what is the name of the instructor who is in Statistics department and earns the lowest salary?","context":"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE dept_name = 'Statistics'\nORDER BY salary ASC\nLIMIT 1"}
{"answer":"SELECT name FROM club ORDER BY Start_year","question":"List all club names in ascending order of start year.","context":"CREATE TABLE club (name VARCHAR, Start_year VARCHAR)","generation":"SELECT name\nFROM club\nORDER BY Start_year ASC"}
{"answer":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'","question":"Find the first name of student who is taking classes from accounting and Computer Info. Systems departments","context":"CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)","generation":"SELECT stu_fname\nFROM student\nWHERE stu_num IN (\n    SELECT stu_num\n    FROM enroll\n    WHERE class_code IN (\n        SELECT class_code\n        FROM class\n        WHERE crs_code IN (\n            SELECT crs_code\n            FROM course\n            WHERE dept_code IN (\n                SELECT dept_code\n                FROM department\n                WHERE dept_name IN ('Accounting', 'Computer Info. Systems')\n            )\n        )\n    )\n)"}
{"answer":"SELECT Delegate FROM election WHERE District = 1","question":"Show the delegate from district 1 in election.","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR)","generation":"SELECT Delegate\nFROM election\nWHERE District = '1'"}
{"answer":"SELECT DISTINCT building_description FROM Apartment_Buildings","question":"Show all distinct building descriptions.","context":"CREATE TABLE Apartment_Buildings (building_description VARCHAR)","generation":"SELECT DISTINCT building_description\nFROM Apartment_Buildings"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC","question":"What are the names of body builders in descending order of total scores?","context":"CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Name\nFROM body_builder\nINNER JOIN people\nON body_builder.People_ID = people.People_ID\nORDER BY body_builder.Total DESC"}
{"answer":"SELECT Team, Starting_Year FROM technician","question":"What are the team and starting year of technicians?","context":"CREATE TABLE technician (Team VARCHAR, Starting_Year VARCHAR)","generation":"SELECT Team, Starting_Year\nFROM technician"}
{"answer":"SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010","question":"What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?","context":"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE SECTION (course_id VARCHAR)","generation":"SELECT title\nFROM course\nWHERE course_id IN (SELECT course_id\n                    FROM SECTION\n                    WHERE building = 'Chandler'\n                    AND semester = 'Fall'\n                    AND year = 2010)"}
{"answer":"SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939","question":"Which campus was opened between 1935 and 1939?","context":"CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)","generation":"SELECT campus\nFROM campuses\nWHERE YEAR BETWEEN 1935 AND 1939"}
{"answer":"SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\"","question":"What is the description of the claim status \"Open\"?","context":"CREATE TABLE claims_processing_stages (claim_status_description VARCHAR, claim_status_name VARCHAR)","generation":"SELECT claim_status_description\nFROM claims_processing_stages\nWHERE claim_status_name = 'Open'"}
{"answer":"SELECT title, directed_by FROM film WHERE NOT film_id IN (SELECT film_id FROM schedule)","question":"What are the title and director of the films without any schedule?","context":"CREATE TABLE schedule (title VARCHAR, directed_by VARCHAR, film_id VARCHAR); CREATE TABLE film (title VARCHAR, directed_by VARCHAR, film_id VARCHAR)","generation":"SELECT film.title, film.directed_by\nFROM film\nLEFT JOIN schedule\nON film.film_id = schedule.film_id\nWHERE schedule.film_id IS NULL"}
{"answer":"SELECT T1.name, AVG(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id","question":"For each user, return the name and the average rating of reviews given by them.","context":"CREATE TABLE review (rating INTEGER, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT u.name, AVG(r.rating)\nFROM useracct u\nJOIN review r ON u.u_id = r.u_id\nGROUP BY u.u_id, u.name\n[\/SQL]"}
{"answer":"SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people)","question":"find the name of people whose height is lower than the average.","context":"CREATE TABLE people (name VARCHAR, height INTEGER)","generation":"SELECT name\nFROM people\nWHERE height < (SELECT AVG(height) FROM people)"}
{"answer":"SELECT customer_id, customer_name FROM customers ORDER BY customer_id","question":"List all the customers in increasing order of IDs.","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)","generation":"SELECT customer_id FROM customers ORDER BY customer_id ASC"}
{"answer":"SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id","question":"Show the order ids and the number of items in each order.","context":"CREATE TABLE Order_items (order_id VARCHAR)","generation":"SELECT order_id, COUNT(*) AS number_of_items\nFROM Order_items\nGROUP BY order_id\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the order items by order id. The COUNT(*) function counts the number of items in each group. The query then selects the order id and the number of items in each group.\n\n### Example\nSuppose the Order_items table contains the following data:\n\n| order_id |\n| --- |\n| 2004 |\n| 2004 |\n| 2005 |\n| 2005 |\n| 2005 |\n\nThe query would return the following result:\n\n| order_id | number_of_items |\n| --- | --- |\n| 2004 | 2 |\n| 2005 | 3 |\n\nThe query groups the order items by order id and counts the number of items in each group. The result shows that order 2004 has 2 items, and order 2005 has 3 items."}
{"answer":"SELECT campus FROM campuses WHERE YEAR = 1958","question":"Find all the campuses opened in 1958.","context":"CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)","generation":"SELECT campus\nFROM campuses\nWHERE YEAR = '1958'"}
{"answer":"SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name","question":"find the number of medicines offered by each trade.","context":"CREATE TABLE medicine (trade_name VARCHAR)","generation":"SELECT trade_name, COUNT(*) AS number_of_medicines\nFROM medicine\nGROUP BY trade_name\nORDER BY number_of_medicines DESC"}
{"answer":"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"","question":"What are names of stations that have average bike availability above 10 and are not located in San Jose city?","context":"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)","generation":"SELECT name\nFROM station\nWHERE bikes_available > 10\nAND city != 'San Jose'"}
{"answer":"SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE YEAR < 2009","question":"Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.","context":"CREATE TABLE exhibition (ticket_price INTEGER, YEAR INTEGER)","generation":"SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price)\nFROM exhibition\nWHERE YEAR < 2009"}
{"answer":"SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1","question":"When was the school with the largest enrollment founded?","context":"CREATE TABLE university (founded VARCHAR, enrollment VARCHAR)","generation":"SELECT founded\nFROM university\nWHERE enrollment = (SELECT MAX(enrollment) FROM university)"}
{"answer":"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\"","question":"Show names for all aircrafts of which John Williams has certificates.","context":"CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)","generation":"SELECT Aircraft.name\nFROM Aircraft\nJOIN Certificate ON Aircraft.aid = Certificate.aid\nJOIN Employee ON Certificate.eid = Employee.eid\nWHERE Employee.name = 'John Williams'"}
{"answer":"SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY SUM(T1.show_times_per_day) DESC LIMIT 1","question":"Show director with the largest number of show times in total.","context":"CREATE TABLE schedule (film_id VARCHAR, show_times_per_day INTEGER); CREATE TABLE film (directed_by VARCHAR, film_id VARCHAR)","generation":"SELECT directed_by\nFROM film\nJOIN schedule ON film.film_id = schedule.film_id\nGROUP BY directed_by\nORDER BY SUM(show_times_per_day) DESC\nLIMIT 1"}
{"answer":"SELECT T1.source_system_code, T1.master_customer_id, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id","question":"Wat is the tax source system code and master customer id of the taxes related to each parking fine id?","context":"CREATE TABLE CMI_Cross_References (source_system_code VARCHAR, master_customer_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Parking_Fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)","generation":"SELECT source_system_code, master_customer_id\nFROM CMI_Cross_References\nINNER JOIN Parking_Fines\nON CMI_Cross_References.cmi_cross_ref_id = Parking_Fines.cmi_cross_ref_id"}
{"answer":"SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force","question":"Please show the police forces and the number of counties with each police force.","context":"CREATE TABLE county_public_safety (Police_force VARCHAR)","generation":"SELECT Police_force, COUNT(*)\nFROM county_public_safety\nGROUP BY Police_force\n[\/SQL]"}
{"answer":"SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"","question":"Find the IDs of customers whose name contains \"Diana\".","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)","generation":"SELECT customer_id\nFROM customers\nWHERE customer_name LIKE '%Diana%'"}
{"answer":"SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil'","question":"Show the manager name for gas stations belonging to the ExxonMobil company.","context":"CREATE TABLE gas_station (manager_name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, company VARCHAR)","generation":"SELECT manager_name\nFROM gas_station\nWHERE station_id IN (\n  SELECT station_id\n  FROM station_company\n  WHERE company_id = (\n    SELECT company_id\n    FROM company\n    WHERE company = 'ExxonMobil'\n  )\n)"}
{"answer":"SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1","question":"Show the id and name of the employee with maximum salary.","context":"CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)","generation":"SELECT eid, name\nFROM Employee\nWHERE salary = (SELECT MAX(salary) FROM Employee)"}
{"answer":"SELECT COUNT(*) FROM browser WHERE market_share >= 5","question":"How many main stream browsers whose market share is at least 5 exist?","context":"CREATE TABLE browser (market_share VARCHAR)","generation":"SELECT COUNT(*)\nFROM browser\nWHERE market_share >= 5"}
{"answer":"SELECT SUM(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state","question":"For each state, find the total account balance of customers whose credit score is above 100.","context":"CREATE TABLE customer (state VARCHAR, acc_bal INTEGER, credit_score INTEGER)","generation":"SELECT state, SUM(acc_bal)\nFROM customer\nWHERE credit_score > 100\nGROUP BY state"}
{"answer":"SELECT COUNT(*) FROM Products_for_hire WHERE NOT product_id IN (SELECT product_id FROM products_booked WHERE booked_amount > 200)","question":"How many products are never booked with amount higher than 200?","context":"CREATE TABLE products_booked (product_id VARCHAR, booked_amount INTEGER); CREATE TABLE Products_for_hire (product_id VARCHAR, booked_amount INTEGER)","generation":"SELECT COUNT(DISTINCT product_id)\nFROM Products_for_hire\nWHERE booked_amount < 200\nEXCEPT\nSELECT product_id\nFROM products_booked\nWHERE booked_amount > 200\n[\/SQL]\n\n### Explanation\nThe query first selects all the product_ids from the Products_for_hire table where the booked_amount is less than 200.\n\nThe query then selects all the product_ids from the products_booked table where the booked_amount is greater than 200.\n\nThe query then uses the EXCEPT operator to find the difference between the two sets of product_ids.\n\nFinally, the query counts the number of distinct product_ids in the result set.\n\nThis gives us the number of products that are never booked with an amount higher than 200."}
{"answer":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\"","question":"Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.","context":"CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT Employee.name\nFROM Employee\nJOIN Certificate ON Employee.eid = Certificate.eid\nJOIN Aircraft ON Certificate.aid = Aircraft.aid\nWHERE Aircraft.name = 'Boeing 737-800'\nAND Aircraft.name = 'Airbus A340-300'"}
{"answer":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%'","question":"What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?","context":"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR, stu_lname VARCHAR)","generation":"SELECT stu_fname\nFROM student\nWHERE stu_lname LIKE 'S%'\nAND stu_num IN (SELECT stu_num\nFROM enroll\nWHERE class_code = 'ACCT-211')"}
{"answer":"SELECT mID, AVG(stars) FROM Rating WHERE NOT mID IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY mID","question":"Find the average rating star for each movie that are not reviewed by Brittany Harris.","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT mID, AVG(stars) AS average_rating\nFROM Rating\nWHERE mID NOT IN (SELECT mID FROM Rating WHERE rID = 'Brittany Harris')\nGROUP BY mID"}
{"answer":"SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","question":"Show names of climbers and the names of mountains they climb.","context":"CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT climber.Name, mountain.Name\nFROM climber\nJOIN mountain\nON climber.Mountain_ID = mountain.Mountain_ID"}
{"answer":"SELECT * FROM item","question":"List all information in the item table.","context":"CREATE TABLE item (Id VARCHAR)","generation":"SELECT * FROM item"}
{"answer":"SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","question":"Show the names of climbers and the heights of mountains they climb.","context":"CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT climber.Name, mountain.Height\nFROM climber\nJOIN mountain ON climber.Mountain_ID = mountain.Mountain_ID"}
{"answer":"SELECT DISTINCT main_industry FROM company","question":"Show all main industry for all companies.","context":"CREATE TABLE company (main_industry VARCHAR)","generation":"SELECT main_industry\nFROM company"}
{"answer":"SELECT mID, AVG(stars) FROM Rating GROUP BY mID HAVING COUNT(*) >= 2","question":"Find the average rating star for each movie that received at least 2 ratings.","context":"CREATE TABLE Rating (mID VARCHAR, stars INTEGER)","generation":"SELECT mID, AVG(stars) AS avg_rating\nFROM Rating\nGROUP BY mID\nHAVING COUNT(mID) >= 2"}
{"answer":"SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)","question":"How many schools do not participate in the basketball match?","context":"CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (school_id VARCHAR)","generation":"SELECT COUNT(DISTINCT school_id)\nFROM university\nWHERE school_id NOT IN (SELECT school_id FROM basketball_match)"}
{"answer":"SELECT name, CLASS, date FROM race","question":"Show name, class, and date for all races.","context":"CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)","generation":"SELECT name, class, date\nFROM race"}
{"answer":"SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) = 2 INTERSECT SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) < 2","question":"Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.","context":"CREATE TABLE Assets (asset_id VARCHAR, asset_details VARCHAR); CREATE TABLE Asset_Parts (asset_id VARCHAR); CREATE TABLE Fault_Log (asset_id VARCHAR)","generation":"SELECT Assets.asset_id, Assets.asset_details\nFROM Assets\nJOIN Asset_Parts ON Assets.asset_id = Asset_Parts.asset_id\nJOIN Fault_Log ON Assets.asset_id = Fault_Log.asset_id\nGROUP BY Assets.asset_id\nHAVING COUNT(DISTINCT Asset_Parts.asset_id) = 2\nAND COUNT(DISTINCT Fault_Log.asset_id) < 2"}
{"answer":"SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1","question":"What is the latitude, longitude, city of the station from which the shortest trip started?","context":"CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)","generation":"SELECT station.lat, station.long, station.city\nFROM trip\nJOIN station ON station.id = trip.start_station_id\nWHERE trip.duration = (SELECT MIN(duration) FROM trip)"}
{"answer":"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1","question":"Which allergy type has most number of allergies?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT allergytype\nFROM Allergy_type\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT region_id) FROM affected_region","question":"How many regions are affected?","context":"CREATE TABLE affected_region (region_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM affected_region"}
{"answer":"SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3","question":"Show names of musicals which have at least three actors.","context":"CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT musical.Name\nFROM musical\nJOIN actor ON musical.Musical_ID = actor.Musical_ID\nGROUP BY musical.Name\nHAVING COUNT(actor.Musical_ID) >= 3"}
{"answer":"SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000","question":"Which delegates are from counties with population smaller than 100000?","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)","generation":"SELECT DISTINCT Delegate\nFROM election\nJOIN county\nON election.District = county.County_id\nWHERE county.Population < 100000"}
{"answer":"SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2","question":"Show the names of editors that are on at least two journal committees.","context":"CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)","generation":"SELECT editor.Name\nFROM editor\nJOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nGROUP BY editor.Name\nHAVING COUNT(editor.Name) >= 2"}
{"answer":"SELECT County_name FROM county ORDER BY County_name DESC","question":"Return the names of all counties sorted by county name in descending alphabetical order.","context":"CREATE TABLE county (County_name VARCHAR)","generation":"SELECT County_name\nFROM county\nORDER BY County_name DESC"}
{"answer":"SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = \"AFTER\" GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?","context":"CREATE TABLE Detention (teacher_id VARCHAR, detention_type_code VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR)","generation":"SELECT t.last_name, t.teacher_id\nFROM Teachers t\nJOIN (\n  SELECT teacher_id, COUNT(*) as detentions\n  FROM Detention\n  WHERE detention_type_code = 'AFTER'\n  GROUP BY teacher_id\n  ORDER BY detentions DESC\n  LIMIT 1\n) d ON t.teacher_id = d.teacher_id"}
{"answer":"SELECT Party, COUNT(*) FROM representative GROUP BY Party","question":"What are the different parties of representative? Show the party name and the number of representatives in each party.","context":"CREATE TABLE representative (Party VARCHAR)","generation":"SELECT Party, COUNT(*) AS NumberOfRepresentatives\nFROM representative\nGROUP BY Party\nORDER BY NumberOfRepresentatives DESC"}
{"answer":"SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which store has most the customers?","context":"CREATE TABLE customer (store_id VARCHAR)","generation":"SELECT store_id\nFROM customer\nGROUP BY store_id\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\"","question":"What are the customer phone numbers under the policy \"Life Insurance\"?","context":"CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)","generation":"SELECT customer_phone\nFROM available_policies\nWHERE policy_type_code = 'Life Insurance'"}
{"answer":"SELECT name FROM instructor ORDER BY salary DESC LIMIT 1","question":"Who is the instructor with the highest salary?","context":"CREATE TABLE instructor (name VARCHAR, salary VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE salary = (SELECT MAX(salary) FROM instructor)"}
{"answer":"SELECT COUNT(*) FROM exhibition WHERE YEAR >= 2005","question":"How many exhibition are there in year 2005 or after?","context":"CREATE TABLE exhibition (YEAR VARCHAR)","generation":"SELECT COUNT(*)\nFROM exhibition\nWHERE YEAR >= '2005'"}
{"answer":"SELECT COUNT(DISTINCT dept_name) FROM course","question":"How many departments offer courses?","context":"CREATE TABLE course (dept_name VARCHAR)","generation":"SELECT COUNT(DISTINCT dept_name)\nFROM course"}
{"answer":"SELECT name FROM browser ORDER BY market_share DESC","question":"List the name of browsers in descending order by market share.","context":"CREATE TABLE browser (name VARCHAR, market_share VARCHAR)","generation":"SELECT name\nFROM browser\nORDER BY market_share DESC"}
{"answer":"SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer)","question":"Find the name of customers whose credit score is below the average credit scores of all customers.","context":"CREATE TABLE customer (cust_name VARCHAR, credit_score INTEGER)","generation":"SELECT cust_name\nFROM customer\nWHERE credit_score < (SELECT AVG(credit_score) FROM customer)"}
{"answer":"SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2","question":"Show the residences that have at least two players.","context":"CREATE TABLE player (Residence VARCHAR)","generation":"SELECT residence\nFROM player\nGROUP BY residence\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT MIN(rank) FROM review","question":"Find the highest rank of all reviews.","context":"CREATE TABLE review (rank INTEGER)","generation":"SELECT MAX(rank)\nFROM review"}
{"answer":"SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern'","question":"Find the names of all modern rooms with a base price below $160 and two beds.","context":"CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, basePrice VARCHAR, beds VARCHAR)","generation":"SELECT roomName\nFROM Rooms\nWHERE decor = 'modern'\nAND basePrice < 160\nAND beds = 2"}
{"answer":"SELECT COUNT(DISTINCT i_id) FROM review","question":"How many different items were reviewed by some users?","context":"CREATE TABLE review (i_id VARCHAR)","generation":"SELECT COUNT(DISTINCT i_id)\nFROM review\n[\/SQL]\n\n### Explanation\nThe query uses the COUNT(DISTINCT i_id) function to count the number of different items that were reviewed by some users. The DISTINCT keyword is used to count only the unique items that were reviewed."}
{"answer":"SELECT * FROM body_builder","question":"Show all information about each body builder.","context":"CREATE TABLE body_builder (Id VARCHAR)","generation":"SELECT * FROM body_builder"}
{"answer":"SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010","question":"Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.","context":"CREATE TABLE teaches (id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT DISTINCT id\nFROM teaches\nWHERE semester = 'Fall' AND YEAR = '2009'\nAND NOT EXISTS (\n  SELECT *\n  FROM teaches\n  WHERE semester = 'Spring' AND YEAR = '2010'\n  AND teaches.id = teaches.id\n)"}
{"answer":"SELECT city, state FROM bank WHERE bname = 'morningside'","question":"Find the city and state of the bank branch named morningside.","context":"CREATE TABLE bank (city VARCHAR, state VARCHAR, bname VARCHAR)","generation":"SELECT city, state FROM bank WHERE bname = 'morningside'"}
{"answer":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"","question":"Show names for all employees who have certificate of Boeing 737-800.","context":"CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT Employee.name\nFROM Employee\nJOIN Certificate ON Employee.eid = Certificate.eid\nJOIN Aircraft ON Certificate.aid = Aircraft.aid\nWHERE Aircraft.name = 'Boeing 737-800'"}
{"answer":"SELECT * FROM basketball_match","question":"List all information regarding the basketball match.","context":"CREATE TABLE basketball_match (Id VARCHAR)","generation":"SELECT * FROM basketball_match"}
{"answer":"SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'","question":"Which services type had both successful and failure event details?","context":"CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR); CREATE TABLE services (service_type_code VARCHAR, service_id VARCHAR)","generation":"SELECT DISTINCT service_type_code\nFROM services\nWHERE service_id IN (SELECT service_id\n                     FROM EVENTS\n                     WHERE event_details = 'success'\n                     UNION\n                     SELECT service_id\n                     FROM EVENTS\n                     WHERE event_details = 'failure')"}
{"answer":"SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\"","question":"Show the parties that have both representatives in New York state and representatives in Pennsylvania state.","context":"CREATE TABLE representative (Party VARCHAR, State VARCHAR)","generation":"SELECT DISTINCT Party\nFROM representative\nWHERE State = 'New York'\nINTERSECT\nSELECT DISTINCT Party\nFROM representative\nWHERE State = 'Pennsylvania'"}
{"answer":"SELECT COUNT(DISTINCT crs_code) FROM CLASS","question":"How many courses are offered?","context":"CREATE TABLE CLASS (crs_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM CLASS"}
{"answer":"SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"","question":"What is the total amount of money spent by Lucas Mancini?","context":"CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT SUM(total)\nFROM invoices\nWHERE customer_id = 'Lucas Mancini'"}
{"answer":"SELECT Country_name, Capital FROM country","question":"Show the country name and capital of all countries.","context":"CREATE TABLE country (Country_name VARCHAR, Capital VARCHAR)","generation":"SELECT country.Country_name, country.Capital\nFROM country"}
{"answer":"SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1","question":"List the official name and status of the city with the largest population.","context":"CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)","generation":"SELECT Official_Name, Status\nFROM city\nWHERE Population = (SELECT MAX(Population) FROM city)"}
{"answer":"SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220'","question":"How many credits does course CIS-220 have, and what its description?","context":"CREATE TABLE course (crs_credit VARCHAR, crs_description VARCHAR, crs_code VARCHAR)","generation":"SELECT crs_credit, crs_description\nFROM course\nWHERE crs_code = 'CIS-220'"}
{"answer":"SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of member in charge of greatest number of events?","context":"CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)","generation":"SELECT member.member_name\nFROM member\nJOIN party_events ON member.member_id = party_events.member_in_charge_id\nGROUP BY member.member_name\nORDER BY COUNT(party_events.member_in_charge_id) DESC\nLIMIT 1"}
{"answer":"SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts","question":"Show customer ids who don't have an account.","context":"CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT customer_id\nFROM Customers\nWHERE customer_id NOT IN (SELECT customer_id FROM Accounts)"}
{"answer":"SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY SUM(degrees) DESC LIMIT 1","question":"Which year has the most degrees conferred?","context":"CREATE TABLE degrees (YEAR VARCHAR, degrees INTEGER)","generation":"SELECT YEAR\nFROM degrees\nORDER BY degrees DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM campuses","question":"How many CSU campuses are there?","context":"CREATE TABLE campuses (Id VARCHAR)","generation":"SELECT COUNT(*) FROM campuses\nWHERE Id LIKE 'CSU%'"}
{"answer":"SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3","question":"What are the names of the states where at least 3 heads were born?","context":"CREATE TABLE head (born_state VARCHAR)","generation":"SELECT born_state\nFROM head\nGROUP BY born_state\nHAVING COUNT(*) >= 3"}
{"answer":"SELECT T2.Name, T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC","question":"Show the names of members and the dates of performances they attended in descending order of attendance of the performances.","context":"CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR, Attendance VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT m.Name, p.Date\nFROM member m\nJOIN member_attendance ma ON m.Member_ID = ma.Member_ID\nJOIN performance p ON p.Performance_ID = ma.Performance_ID\nORDER BY p.Date DESC"}
{"answer":"SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50","question":"Show times of elimination of wrestlers with days held more than 50.","context":"CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held INTEGER); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)","generation":"SELECT Time\nFROM elimination\nWHERE Wrestler_ID IN (\n  SELECT Wrestler_ID\n  FROM wrestler\n  WHERE Days_held > 50\n)"}
{"answer":"SELECT COUNT(*) FROM papers","question":"How many papers are published in total?","context":"CREATE TABLE papers (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM papers"}
{"answer":"SELECT Census_Ranking FROM city WHERE Status <> \"Village\"","question":"Show the census ranking of cities whose status are not \"Village\".","context":"CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)","generation":"SELECT Census_Ranking\nFROM city\nWHERE Status != 'Village'"}
{"answer":"SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1","question":"Find the name, account type, and account balance of the customer who has the highest credit score.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, acc_bal VARCHAR, credit_score VARCHAR)","generation":"SELECT cust_name, acc_type, acc_bal\nFROM customer\nWHERE credit_score = (SELECT MAX(credit_score) FROM customer)"}
{"answer":"SELECT lname FROM authors WHERE fname = \"Amal\"","question":"Find the last name of the author with first name \"Amal\".","context":"CREATE TABLE authors (lname VARCHAR, fname VARCHAR)","generation":"SELECT lname\nFROM authors\nWHERE fname = 'Amal'"}
{"answer":"SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4","question":"What address was the document with id 4 mailed to?","context":"CREATE TABLE Addresses (document_id VARCHAR); CREATE TABLE Documents_Mailed (document_id VARCHAR)","generation":"SELECT Addresses.document_id\nFROM Documents_Mailed\nINNER JOIN Addresses\nON Documents_Mailed.document_id = Addresses.document_id\nWHERE Documents_Mailed.document_id = '4'"}
{"answer":"SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\"","question":"Show the positions of the players from the team with name \"Ryley Goldner\".","context":"CREATE TABLE match_season (Position VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)","generation":"SELECT Position\nFROM match_season\nWHERE Team = (SELECT Team_id\n              FROM team\n              WHERE Name = \"Ryley Goldner\")"}
{"answer":"SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING COUNT(*) < 3","question":"Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR, rental_rate VARCHAR); CREATE TABLE inventory (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)","generation":"SELECT film.title, film.film_id\nFROM film\nJOIN inventory ON film.film_id = inventory.film_id\nWHERE film.rental_rate = 0.99\nAND inventory.film_id < 3"}
{"answer":"SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING SUM(T2.amount) > 5000","question":"Find the name and account balance of the customers who have loans with a total amount of more than 5000.","context":"CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, cust_id VARCHAR)","generation":"SELECT customer.cust_name, customer.acc_type, customer.cust_id, SUM(loan.amount) AS total_amount\nFROM customer\nJOIN loan ON customer.cust_id = loan.cust_id\nGROUP BY customer.cust_name, customer.acc_type, customer.cust_id\nHAVING SUM(loan.amount) > 5000"}
{"answer":"SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5","question":"Find the names of Japanese constructors that have once earned more than 5 points?","context":"CREATE TABLE constructorstandings (constructorid VARCHAR, points VARCHAR); CREATE TABLE constructors (name VARCHAR, constructorid VARCHAR, nationality VARCHAR)","generation":"SELECT constructors.name\nFROM constructors\nJOIN constructorstandings\nON constructors.constructorid = constructorstandings.constructorid\nWHERE constructorstandings.points > 5\nAND constructors.nationality = 'Japan'"}
{"answer":"SELECT origin, COUNT(*) FROM train GROUP BY origin","question":"Find the number of trains starting from each origin.","context":"CREATE TABLE train (origin VARCHAR)","generation":"SELECT origin, COUNT(*)\nFROM train\nGROUP BY origin\n[\/SQL]\n\n### Explanation\nThe query uses the SELECT statement to select the origin column and the COUNT(*) function to count the number of trains starting from each origin. The query then uses the GROUP BY statement to group the results by the origin column.\n\n### Example\nSuppose the train table contains the following data:\n\n| origin |\n| --- |\n| London |\n| London |\n| Manchester |\n| Manchester |\n| Manchester |\n| Birmingham |\n| Birmingham |\n| Birmingham |\n\nThe query would return the following result:\n\n| origin | COUNT(*) |\n| --- | --- |\n| London | 2 |\n| Manchester | 3 |\n| Birmingham | 3 |\n\nThe query would count the number of trains starting from each origin and return the result in a table with two columns: the origin and the number of trains starting from that origin."}
{"answer":"SELECT train_number, name FROM train ORDER BY TIME","question":"show all train numbers and names ordered by their time from early to late.","context":"CREATE TABLE train (train_number VARCHAR, name VARCHAR, TIME VARCHAR)","generation":"SELECT train_number, name\nFROM train\nORDER BY TIME\n[\/SQL]"}
{"answer":"SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the full name of employee who supported the most number of customers.","context":"CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)","generation":"SELECT CONCAT(e.first_name, ' ', e.last_name) AS employee_name\nFROM employees e\nLEFT JOIN customers c ON e.id = c.support_rep_id\nGROUP BY e.id\nORDER BY COUNT(c.id) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\"","question":"Find the different first names and cities of the students who have allergy to milk or cat.","context":"CREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)","generation":"SELECT DISTINCT Student.fname, City.city\nFROM Student\nJOIN City ON Student.city_code = City.city_code\nJOIN Has_Allergy ON Student.stuid = Has_Allergy.stuid\nWHERE Has_Allergy.Allergy = 'milk' OR Has_Allergy.Allergy = 'cat'"}
{"answer":"SELECT LOCATION, COUNT(*) FROM gas_station GROUP BY LOCATION ORDER BY COUNT(*)","question":"Show all locations and the number of gas stations in each location ordered by the count.","context":"CREATE TABLE gas_station (LOCATION VARCHAR)","generation":"SELECT LOCATION, COUNT(*) AS COUNT\nFROM gas_station\nGROUP BY LOCATION\nORDER BY COUNT DESC"}
{"answer":"SELECT TIME, train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME","question":"Give me the times and numbers of all trains that go to Chennai, ordered by time.","context":"CREATE TABLE train (TIME VARCHAR, train_number VARCHAR, destination VARCHAR)","generation":"SELECT train.TIME, train.train_number\nFROM train\nWHERE train.destination = 'Chennai'\nORDER BY train.TIME"}
{"answer":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1","question":"What is the id and family name of the driver who has the longest laptime?","context":"CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR)","generation":"SELECT driverid, surname\nFROM drivers\nWHERE driverid = (SELECT driverid\n                 FROM laptimes\n                 WHERE milliseconds = (SELECT MAX(milliseconds)\n                                      FROM laptimes))"}
{"answer":"SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING COUNT(*) > 2","question":"What is the order id and order details for the order more than two invoices.","context":"CREATE TABLE Orders (order_id VARCHAR, order_details VARCHAR); CREATE TABLE Invoices (order_id VARCHAR)","generation":"SELECT Orders.order_id, Orders.order_details\nFROM Orders\nWHERE Orders.order_id IN (\n  SELECT Invoices.order_id\n  FROM Invoices\n  GROUP BY Invoices.order_id\n  HAVING COUNT(*) > 2\n)"}
{"answer":"SELECT COUNT(DISTINCT city) FROM bank","question":"Find the number of different cities which banks are located at.","context":"CREATE TABLE bank (city VARCHAR)","generation":"SELECT COUNT(DISTINCT city)\nFROM bank"}
{"answer":"SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) = 2","question":"Find the title of courses that have two prerequisites?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)","generation":"SELECT course.title\nFROM course\nJOIN prereq ON course.course_id = prereq.course_id\nGROUP BY course.title\nHAVING COUNT(DISTINCT prereq.course_id) > 1"}
{"answer":"SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"","question":"find the full name of employees who report to Nancy Edwards?","context":"CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)","generation":"SELECT employees.first_name, employees.last_name\nFROM employees\nJOIN employees AS manager ON employees.reports_to = manager.id\nWHERE manager.first_name = 'Nancy' AND manager.last_name = 'Edwards'"}
{"answer":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) > 1","question":"Find the locations that have more than one movie theater with capacity above 300.","context":"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT DISTINCT cinema.location\nFROM cinema\nWHERE cinema.capacity > 300\nGROUP BY cinema.location\nHAVING COUNT(*) > 1"}
{"answer":"SELECT T2.roomName, COUNT(*), T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room","question":"Return the name and number of reservations made for each of the rooms.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT r.roomName, COUNT(r.roomName)\nFROM Reservations r\nJOIN Rooms r2 ON r.roomId = r2.roomId\nGROUP BY r.roomName\n[\/SQL]"}
{"answer":"SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"","question":"Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_id VARCHAR, gender_code VARCHAR)","generation":"SELECT Apartment_Bookings.booking_start_date, Apartment_Bookings.booking_end_date\nFROM Apartment_Bookings\nJOIN Guests ON Apartment_Bookings.guest_id = Guests.guest_id\nWHERE Guests.gender_code = 'Female'"}
{"answer":"SELECT head_id, name FROM head WHERE name LIKE '%Ha%'","question":"Which head's name has the substring 'Ha'? List the id and name.","context":"CREATE TABLE head (head_id VARCHAR, name VARCHAR)","generation":"SELECT head_id, name\nFROM head\nWHERE name LIKE '%Ha%'"}
{"answer":"SELECT name, age, country FROM artist ORDER BY Year_Join","question":"Show all artist name, age, and country ordered by the yeared they joined.","context":"CREATE TABLE artist (name VARCHAR, age VARCHAR, country VARCHAR, Year_Join VARCHAR)","generation":"SELECT name, age, country, Year_Join\nFROM artist\nORDER BY Year_Join"}
{"answer":"SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC","question":"What are the lifespans of representatives in descending order of vote percent?","context":"CREATE TABLE election (Representative_ID VARCHAR); CREATE TABLE representative (Lifespan VARCHAR, Representative_ID VARCHAR)","generation":"SELECT representative.Lifespan, COUNT(election.Representative_ID) AS Vote_Percent\nFROM representative\nJOIN election ON representative.Representative_ID = election.Representative_ID\nGROUP BY representative.Lifespan\nORDER BY Vote_Percent DESC"}
{"answer":"SELECT account_id, customer_id, account_name FROM Accounts","question":"Show ids, customer ids, names for all accounts.","context":"CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)","generation":"SELECT account_id, customer_id, account_name\nFROM Accounts"}
{"answer":"SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id","question":"Find the name of bank branches that provided some loans.","context":"CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)","generation":"SELECT b.bname\nFROM bank b\nJOIN loan l ON b.branch_id = l.branch_id\nGROUP BY b.bname\nHAVING COUNT(l.branch_id) > 0"}
{"answer":"SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)","question":"Find the address and staff number of the shops that do not have any happy hour.","context":"CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)","generation":"SELECT shop.address, shop.num_of_staff\nFROM shop\nWHERE shop.shop_id NOT IN (SELECT happy_hour.shop_id\n                           FROM happy_hour)"}
{"answer":"SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the film title and inventory id of the item in the inventory which was rented most frequently?","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (inventory_id VARCHAR, film_id VARCHAR); CREATE TABLE rental (inventory_id VARCHAR)","generation":"SELECT film.title, inventory.inventory_id\nFROM film\nJOIN inventory ON film.film_id = inventory.film_id\nJOIN rental ON inventory.inventory_id = rental.inventory_id\nGROUP BY film.title, inventory.inventory_id\nORDER BY COUNT(rental.inventory_id) DESC\nLIMIT 1"}
{"answer":"SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10","question":"List top 10 employee work longest in the company. List employee's first and last name.","context":"CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)","generation":"SELECT first_name, last_name\nFROM employees\nORDER BY hire_date DESC\nLIMIT 10"}
{"answer":"SELECT COUNT(*) FROM catalog_contents","question":"How many products are there in the records?","context":"CREATE TABLE catalog_contents (Id VARCHAR)","generation":"SELECT COUNT(*) FROM catalog_contents"}
{"answer":"SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1","question":"Show the company of the tallest entrepreneur.","context":"CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)","generation":"SELECT entrepreneur.Company\nFROM entrepreneur\nJOIN people ON entrepreneur.People_ID = people.People_ID\nWHERE people.Height = (SELECT MAX(Height) FROM people)"}
{"answer":"SELECT Phone FROM EMPLOYEE","question":"List the phone numbers of all employees.","context":"CREATE TABLE EMPLOYEE (Phone VARCHAR)","generation":"SELECT Phone\nFROM EMPLOYEE"}
{"answer":"SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title ORDER BY T1.director, T1.title","question":"For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR); CREATE TABLE Movie (director VARCHAR, title VARCHAR)","generation":"SELECT director, title\nFROM Movie\nWHERE director IN (\n  SELECT director\n  FROM Movie\n  GROUP BY director\n  HAVING COUNT(*) > 1\n)\nORDER BY director, title"}
{"answer":"SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Full'","question":"Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.","context":"CREATE TABLE phone (screen_mode VARCHAR, Accreditation_type VARCHAR); CREATE TABLE screen_mode (pixels VARCHAR, Graphics_mode VARCHAR)","generation":"SELECT screen_mode.pixels\nFROM phone\nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode\nWHERE phone.Accreditation_type = 'Full'\nAND phone.screen_mode IN (SELECT screen_mode.Graphics_mode\nFROM phone\nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode\nWHERE phone.Accreditation_type = 'Provisional')"}
{"answer":"SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2","question":"Show first name and id for all customers with at least 2 accounts.","context":"CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT customer_first_name, customer_id\nFROM Customers\nWHERE customer_id IN (\n  SELECT customer_id\n  FROM Accounts\n  GROUP BY customer_id\n  HAVING COUNT(*) >= 2\n)"}
{"answer":"SELECT MAX(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","question":"What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?","context":"CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)","generation":"SELECT races.name, races.year, MAX(results.fastestlapspeed)\nFROM results\nJOIN races ON results.raceid = races.raceid\nWHERE races.year > 2004\nGROUP BY races.name, races.year\nORDER BY races.year\n[\/SQL]\n\n### Explanation\nThe query joins the results table with the races table on the raceid column. It then filters the results to only include races that took place after 2004. The query then groups the results by race name and year, and orders the results by year. Finally, the query selects the maximum fastest lap speed for each group.\n\n### Example\nThe following is an example of the output of the query:\n[SQL]\nSELECT races.name, races.year, MAX(results.fastestlapspeed)\nFROM results\nJOIN races ON results.raceid = races.raceid\nWHERE races.year > 2004\nGROUP BY races.name, races.year\nORDER BY races.year\n[\/SQL]\n\n| name | year | MAX(results.fastestlapspeed) |\n| --- | --- | --- |\n| Monaco Grand Prix | 2005 | 231.032 |\n| Monaco Grand Prix | 2006 | 231.032 |\n| Monaco Grand Prix | 2007 | 231.032 |\n| Monaco Grand Prix | 2008 | 231.032 |\n| Monaco Grand Prix | 2009 | 231.032 |\n| Monaco Grand Prix | 2010 | 231.032 |\n| Monaco Grand Prix"}
{"answer":"SELECT flno FROM Flight WHERE origin = \"Los Angeles\"","question":"Show all flight number from Los Angeles.","context":"CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)","generation":"SELECT flno\nFROM Flight\nWHERE origin = 'Los Angeles'"}
{"answer":"SELECT COUNT(*) FROM authors","question":"How many authors are there?","context":"CREATE TABLE authors (Id VARCHAR)","generation":"SELECT COUNT(*) FROM authors"}
{"answer":"SELECT COUNT(*) FROM customer WHERE active = '1'","question":"How many customers have an active value of 1?","context":"CREATE TABLE customer (active VARCHAR)","generation":"SELECT COUNT(*)\nFROM customer\nWHERE active = '1'"}
{"answer":"SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1","question":"What is the first, last name, gpa of the youngest one among students whose GPA is above 3?","context":"CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_gpa INTEGER, stu_dob VARCHAR)","generation":"SELECT stu_fname, stu_lname, stu_gpa\nFROM student\nWHERE stu_gpa > 3\nORDER BY stu_dob\nLIMIT 1"}
{"answer":"SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5","question":"List the types of competition that have at most five competitions of that type.","context":"CREATE TABLE competition (Competition_type VARCHAR)","generation":"SELECT Competition_type\nFROM competition\nGROUP BY Competition_type\nHAVING COUNT(*) <= 5"}
{"answer":"SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the status of the city that has hosted the greatest number of competitions.","context":"CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)","generation":"SELECT Status\nFROM city\nWHERE City_ID IN (SELECT Host_city_ID\n                  FROM farm_competition\n                  GROUP BY Host_city_ID\n                  ORDER BY COUNT(*) DESC\n                  LIMIT 1)"}
{"answer":"SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 2005","question":"What is the average fee on a CSU campus in 2005?","context":"CREATE TABLE csu_fees (campusfee INTEGER, YEAR VARCHAR)","generation":"SELECT AVG(CAST(campusfee AS FLOAT))\nFROM csu_fees\nWHERE YEAR = '2005'"}
{"answer":"SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\"","question":"What is the type of allergy Cat?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)","generation":"SELECT allergytype\nFROM Allergy_type\nWHERE allergy = 'Cat'"}
{"answer":"SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\"","question":"Show the customer ids and firstname without a credit card.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)","generation":"SELECT Customers.customer_id, Customers.customer_first_name\nFROM Customers\nLEFT JOIN Customers_cards\nON Customers.customer_id = Customers_cards.customer_id\nWHERE Customers_cards.customer_id IS NULL"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5","question":"Find the titles of items that received any rating below 5.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT item.title\nFROM item\nJOIN review ON item.i_id = review.i_id\nWHERE review.rating < 5"}
{"answer":"SELECT school_code FROM department WHERE dept_name = \"Accounting\"","question":"What is the code of the school where the accounting department belongs to?","context":"CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)","generation":"SELECT school_code\nFROM department\nWHERE dept_name = 'accounting'"}
{"answer":"SELECT T3.Pilot_name, T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID","question":"Show the names of pilots and models of aircrafts they have flied with.","context":"CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Model VARCHAR, Aircraft_ID VARCHAR)","generation":"SELECT pilot.Pilot_name, aircraft.Model\nFROM pilot_record\nINNER JOIN pilot ON pilot_record.Pilot_ID = pilot.Pilot_ID\nINNER JOIN aircraft ON pilot_record.Aircraft_ID = aircraft.Aircraft_ID"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8","question":"Name all the products with next entry ID greater than 8.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)","generation":"SELECT catalog_entry_name\nFROM catalog_contents\nWHERE next_entry_id > 8"}
{"answer":"SELECT Name FROM editor WHERE Age = 24 OR Age = 25","question":"Show the names of editors of age either 24 or 25.","context":"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name\nFROM editor\nWHERE Age = 24 OR Age = 25"}
{"answer":"SELECT name FROM artist WHERE NOT artist_id IN (SELECT artist_id FROM exhibition)","question":"Show names for artists without any exhibition.","context":"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (name VARCHAR, artist_id VARCHAR)","generation":"SELECT artist.name\nFROM artist\nLEFT JOIN exhibition ON artist.artist_id = exhibition.artist_id\nWHERE exhibition.artist_id IS NULL"}
{"answer":"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rank) DESC LIMIT 1","question":"Find the name and id of the good with the highest average rank.","context":"CREATE TABLE review (i_id VARCHAR, rank INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR)","generation":"SELECT i.title, i.i_id\nFROM item i\nJOIN (\n    SELECT AVG(rank) avg_rank, i_id\n    FROM review\n    GROUP BY i_id\n) r\nON i.i_id = r.i_id\nWHERE avg_rank = (\n    SELECT MAX(avg_rank)\n    FROM (\n        SELECT AVG(rank) avg_rank, i_id\n        FROM review\n        GROUP BY i_id\n    )\n)"}
{"answer":"SELECT DISTINCT product_size FROM Products","question":"Show all product sizes.","context":"CREATE TABLE Products (product_size VARCHAR)","generation":"SELECT product_size\nFROM Products"}
{"answer":"SELECT COUNT(*) FROM game WHERE NOT id IN (SELECT game_id FROM injury_accident)","question":"How many games are free of injury accidents?","context":"CREATE TABLE injury_accident (id VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, game_id VARCHAR)","generation":"SELECT COUNT(*) FROM game WHERE id NOT IN (SELECT game_id FROM injury_accident)"}
{"answer":"SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of party with most number of members?","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_id VARCHAR)","generation":"SELECT party_name\nFROM party\nWHERE party_id IN (\n  SELECT party_id\n  FROM Member\n  GROUP BY party_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1","question":"What is the date of the performance with the highest number of attendees?","context":"CREATE TABLE performance (Date VARCHAR, Attendance VARCHAR)","generation":"SELECT Date\nFROM performance\nWHERE Attendance = (SELECT MAX(Attendance) FROM performance)"}
{"answer":"SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"","question":"What is the address of employee Nancy Edwards?","context":"CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT address\nFROM employees\nWHERE first_name = 'Nancy'\nAND last_name = 'Edwards'"}
{"answer":"SELECT SUM(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = \"Columbus Square\"","question":"Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".","context":"CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_short_name VARCHAR); CREATE TABLE Apartments (room_count INTEGER, building_id VARCHAR)","generation":"SELECT SUM(room_count)\nFROM Apartments\nINNER JOIN Apartment_Buildings\nON Apartments.building_id = Apartment_Buildings.building_id\nWHERE Apartment_Buildings.building_short_name = 'Columbus Square'"}
{"answer":"SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor","question":"What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?","context":"CREATE TABLE entrepreneur (Investor VARCHAR)","generation":"SELECT Investor, COUNT(Investor) AS NumberOfEntrepreneurs\nFROM entrepreneur\nGROUP BY Investor\nORDER BY NumberOfEntrepreneurs DESC"}
{"answer":"SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4","question":"Find the policy type used by more than 4 customers.","context":"CREATE TABLE available_policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code\nFROM available_policies\nGROUP BY policy_type_code\nHAVING COUNT(*) > 4"}
{"answer":"SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY SUM(T1.amount) DESC LIMIT 1","question":"Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.","context":"CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER)","generation":"SELECT b.bname\nFROM bank b\nJOIN loan l ON b.branch_id = l.branch_id\nJOIN customer c ON l.cust_id = c.cust_id\nWHERE c.credit_score < 100\nGROUP BY b.bname\nORDER BY SUM(l.amount) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT name FROM instructor ORDER BY name","question":"List in alphabetic order the names of all distinct instructors.","context":"CREATE TABLE instructor (name VARCHAR)","generation":"SELECT DISTINCT name\nFROM instructor\nORDER BY name"}
{"answer":"SELECT Name FROM climber WHERE Country <> \"Switzerland\"","question":"List the names of climbers whose country is not Switzerland.","context":"CREATE TABLE climber (Name VARCHAR, Country VARCHAR)","generation":"SELECT Name FROM climber WHERE Country != 'Switzerland'"}
{"answer":"SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1","question":"Show the height of the mountain climbed by the climber with the maximum points.","context":"CREATE TABLE climber (Mountain_ID VARCHAR, Points VARCHAR); CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT mountain.Height\nFROM mountain\nINNER JOIN climber\nON mountain.Mountain_ID = climber.Mountain_ID\nWHERE climber.Points = (SELECT MAX(Points) FROM climber)"}
{"answer":"SELECT order_id, COUNT(DISTINCT product_id) FROM Order_items GROUP BY order_id","question":"Show order ids and the number of products in each order.","context":"CREATE TABLE Order_items (order_id VARCHAR, product_id VARCHAR)","generation":"SELECT order_id, COUNT(product_id)\nFROM Order_items\nGROUP BY order_id\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the order_id and product_id columns together. The COUNT(product_id) function counts the number of product_id values for each group. The query then selects the order_id and the count of product_id values for each group.\n\n### Example\nSuppose the Order_items table contains the following data:\n\n| order_id | product_id |\n| --- | --- |\n| 2017010101 | 1 |\n| 2017010101 | 2 |\n| 2017010101 | 3 |\n| 2017010102 | 1 |\n| 2017010102 | 2 |\n| 2017010103 | 1 |\n| 2017010103 | 2 |\n\nThe query would return the following result:\n\n| order_id | COUNT(product_id) |\n| --- | --- |\n| 2017010101 | 3 |\n| 2017010102 | 2 |\n| 2017010103 | 2 |\n\nThe query groups the order_id and product_id columns together, and counts the number of product_id values for each group. The result shows that order_id 2017010101 has 3 product_id values, order_id 2017010102 has"}
{"answer":"SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)","question":"Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.","context":"CREATE TABLE student (stu_fname VARCHAR, stu_gpa INTEGER)","generation":"SELECT stu_fname, stu_gpa\nFROM student\nWHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)"}
{"answer":"SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10","question":"What are the ids of stations that are located in San Francisco and have average bike availability above 10.","context":"CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)","generation":"SELECT station.id\nFROM station\nJOIN status ON status.station_id = station.id\nWHERE station.city = 'San Francisco'\nAND status.bikes_available > 10"}
{"answer":"SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC","question":"List the names of wrestlers and the teams in elimination in descending order of days held.","context":"CREATE TABLE elimination (Team VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR, Days_held VARCHAR)","generation":"SELECT wrestler.Name, elimination.Team\nFROM wrestler\nJOIN elimination\nON wrestler.Wrestler_ID = elimination.Wrestler_ID\nORDER BY wrestler.Days_held DESC"}
{"answer":"SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'","question":"What are the names for tracks without a race in class 'GT'.","context":"CREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)","generation":"SELECT track.name\nFROM track\nLEFT JOIN race ON track.track_id = race.track_id\nWHERE race.track_id IS NULL AND race.class = 'GT'"}
{"answer":"SELECT name, LOCATION FROM enzyme","question":"List the names and the locations that the enzymes can make an effect.","context":"CREATE TABLE enzyme (name VARCHAR, LOCATION VARCHAR)","generation":"SELECT name, location\nFROM enzyme\nWHERE location IS NOT NULL"}
{"answer":"SELECT name, LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1","question":"What are the name and location of the cinema with the largest capacity?","context":"CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity VARCHAR)","generation":"SELECT name, location\nFROM cinema\nWHERE capacity = (SELECT MAX(capacity) FROM cinema)"}
{"answer":"SELECT COUNT(*) FROM chip_model WHERE wifi = 'No'","question":"How many models do not have the wifi function?","context":"CREATE TABLE chip_model (wifi VARCHAR)","generation":"SELECT COUNT(*)\nFROM chip_model\nWHERE wifi IS NULL"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1","question":"What is the product with the highest height? Give me the catalog entry name.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)","generation":"SELECT catalog_entry_name\nFROM catalog_contents\nWHERE height = (SELECT MAX(height) FROM catalog_contents)"}
{"answer":"SELECT name FROM station WHERE lat < 37.5","question":"What are the names of stations that have latitude lower than 37.5?","context":"CREATE TABLE station (name VARCHAR, lat INTEGER)","generation":"SELECT name\nFROM station\nWHERE lat < 37.5"}
{"answer":"SELECT campus FROM campuses WHERE county = \"Los Angeles\"","question":"Report the name of all campuses in Los Angeles county.","context":"CREATE TABLE campuses (campus VARCHAR, county VARCHAR)","generation":"SELECT campus\nFROM campuses\nWHERE county = 'Los Angeles'"}
{"answer":"SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","question":"Show the first names and last names of customers without any account.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT Customers.customer_first_name, Customers.customer_last_name\nFROM Customers\nLEFT JOIN Accounts\nON Customers.customer_id = Accounts.customer_id\nWHERE Accounts.customer_id IS NULL"}
{"answer":"SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1","question":"Find the name of customer who has the lowest credit score.","context":"CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR)","generation":"SELECT cust_name\nFROM customer\nWHERE credit_score = (SELECT MIN(credit_score) FROM customer)"}
{"answer":"SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches WHERE semester = 'Spring')","question":"Find the names of instructors who didn't each any courses in any Spring semester.","context":"CREATE TABLE teaches (name VARCHAR, id VARCHAR, semester VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR, semester VARCHAR)","generation":"SELECT DISTINCT name\nFROM instructor\nWHERE semester = 'Spring'\nAND name NOT IN (\n  SELECT DISTINCT name\n  FROM teaches\n  WHERE semester = 'Spring'\n)"}
{"answer":"SELECT gender FROM TEACHERS WHERE last_name = \"Medhurst\"","question":"What is the gender of the teacher with last name \"Medhurst\"?","context":"CREATE TABLE TEACHERS (gender VARCHAR, last_name VARCHAR)","generation":"SELECT gender\nFROM TEACHERS\nWHERE last_name = 'Medhurst'"}
{"answer":"SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'","question":"Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?","context":"CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)","generation":"SELECT department.name, department.num_employees\nFROM department\nJOIN management ON department.department_id = management.department_id\nWHERE management.temporary_acting = 'Yes'"}
{"answer":"SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating)","question":"Find the titles of all movies that have no ratings.","context":"CREATE TABLE Rating (title VARCHAR, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT title\nFROM Movie\nWHERE title NOT IN (SELECT title FROM Rating)"}
{"answer":"SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the customer last name, id and phone number with most number of orders?","context":"CREATE TABLE Orders (customer_id VARCHAR); CREATE TABLE Customers (customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)","generation":"SELECT Customers.customer_last_name, Customers.customer_id, Customers.phone_number\nFROM Customers\nJOIN Orders\nON Customers.customer_id = Orders.customer_id\nGROUP BY Customers.customer_last_name, Customers.customer_id, Customers.phone_number\nORDER BY COUNT(Orders.customer_id) DESC\nLIMIT 1"}
{"answer":"SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")","question":"Find the first name and major of the students who are not allegry to soy.","context":"CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT fname, major\nFROM Student\nWHERE Allergy != 'soy'"}
{"answer":"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = \"Uganda\"","question":"Show the times used by climbers to climb mountains in Country Uganda.","context":"CREATE TABLE mountain (Mountain_ID VARCHAR, Country VARCHAR); CREATE TABLE climber (Time VARCHAR, Mountain_ID VARCHAR)","generation":"SELECT Time\nFROM climber\nWHERE Country = 'Uganda'\nORDER BY Time DESC"}
{"answer":"SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004","question":"What is the theme, date, and attendance for the exhibition in year 2004?","context":"CREATE TABLE exhibition_record (date VARCHAR, attendance VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR, year VARCHAR)","generation":"SELECT theme, date, attendance\nFROM exhibition_record\nINNER JOIN exhibition\nON exhibition_record.exhibition_id = exhibition.exhibition_id\nWHERE year = '2004'"}
{"answer":"SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1","question":"Show names of pilots that have more than one record.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)","generation":"SELECT pilot_name\nFROM pilot\nWHERE pilot_ID IN (\n  SELECT pilot_ID\n  FROM pilot_record\n  GROUP BY pilot_ID\n  HAVING COUNT(*) > 1\n)"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes)","question":"List all player names who have an overall rating higher than the average.","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating INTEGER)","generation":"SELECT player_name\nFROM Player\nWHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes)"}
{"answer":"SELECT product_name, product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20","question":"What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?","context":"CREATE TABLE products_for_hire (product_name VARCHAR, product_description VARCHAR, product_type_code VARCHAR, daily_hire_cost VARCHAR)","generation":"SELECT product_name, product_description\nFROM products_for_hire\nWHERE product_type_code = 'Cutlery'\nAND daily_hire_cost < 20"}
{"answer":"SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\"","question":"List the document ids for any documents with the status code done and the type code paper.","context":"CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)","generation":"SELECT document_id\nFROM Documents\nWHERE document_status_code = 'done'\nAND document_type_code = 'paper'"}
{"answer":"SELECT MAX(stu_gpa), AVG(stu_gpa), MIN(stu_gpa), dept_code FROM student GROUP BY dept_code","question":"Find the max, average, and minimum gpa of all students in each department.","context":"CREATE TABLE student (dept_code VARCHAR, stu_gpa INTEGER)","generation":"SELECT dept_code, MAX(stu_gpa) AS max_gpa, AVG(stu_gpa) AS avg_gpa, MIN(stu_gpa) AS min_gpa\nFROM student\nGROUP BY dept_code"}
{"answer":"SELECT average_attendance FROM stadium WHERE capacity_percentage > 100","question":"What is the average attendance of stadiums with capacity percentage higher than 100%?","context":"CREATE TABLE stadium (average_attendance VARCHAR, capacity_percentage INTEGER)","generation":"SELECT average_attendance\nFROM stadium\nWHERE capacity_percentage > 100"}
{"answer":"SELECT T1.emp_lname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'","question":"What is the last name and office of the professor from the history department?","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_num VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)","generation":"SELECT emp_lname, prof_office\nFROM professor\nJOIN employee ON professor.emp_num = employee.emp_num\nJOIN department ON professor.dept_code = department.dept_code\nWHERE department.dept_name = 'History'"}
{"answer":"SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"","question":"Eduardo Martins is a customer at which company?","context":"CREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT company\nFROM customers\nWHERE first_name = 'Eduardo'\nAND last_name = 'Martins'"}
{"answer":"SELECT COUNT(*) FROM technician","question":"How many technicians are there?","context":"CREATE TABLE technician (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM technician"}
{"answer":"SELECT SUM(balance) FROM checking","question":"What is the total checking balance in all accounts?","context":"CREATE TABLE checking (balance INTEGER)","generation":"SELECT SUM(balance) FROM checking"}
{"answer":"SELECT COUNT(*) FROM Customers","question":"How many customers do we have?","context":"CREATE TABLE Customers (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Customers"}
{"answer":"SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700","question":"Find the name and capacity of products with price greater than 700 (in USD).","context":"CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)","generation":"SELECT catalog_entry_name, capacity\nFROM Catalog_Contents\nWHERE price_in_dollars > 700"}
{"answer":"SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID","question":"Show the album names and ids for albums that contain tracks with unit price bigger than 1.","context":"CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)","generation":"SELECT A.Title, A.AlbumId\nFROM ALBUM A\nINNER JOIN TRACK T ON A.AlbumId = T.AlbumId\nWHERE T.UnitPrice > 1"}
{"answer":"SELECT Party FROM people ORDER BY Age LIMIT 1","question":"What is the party of the youngest people?","context":"CREATE TABLE people (Party VARCHAR, Age VARCHAR)","generation":"SELECT Party\nFROM people\nORDER BY Age\nLIMIT 1"}
{"answer":"SELECT DISTINCT YEAR FROM competition WHERE Competition_type <> \"Tournament\"","question":"What are the distinct years in which the competitions type is not \"Tournament\"?","context":"CREATE TABLE competition (YEAR VARCHAR, Competition_type VARCHAR)","generation":"SELECT DISTINCT YEAR\nFROM competition\nWHERE Competition_type != 'Tournament'"}
{"answer":"SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1","question":"Find the name of the room with the maximum occupancy.","context":"CREATE TABLE Rooms (roomName VARCHAR, maxOccupancy VARCHAR)","generation":"SELECT roomName\nFROM Rooms\nWHERE maxOccupancy = (SELECT MAX(maxOccupancy) FROM Rooms)"}
{"answer":"SELECT bname FROM bank WHERE state = 'New York'","question":"Find the branch names of banks in the New York state.","context":"CREATE TABLE bank (bname VARCHAR, state VARCHAR)","generation":"SELECT bname\nFROM bank\nWHERE state = 'New York'"}
{"answer":"SELECT StuID FROM Student WHERE age > 20","question":"Show all student ids who are older than 20.","context":"CREATE TABLE Student (StuID VARCHAR, age INTEGER)","generation":"SELECT StuID\nFROM Student\nWHERE age > 20"}
{"answer":"SELECT local_authority, services FROM station","question":"list the local authorities and services provided by all stations.","context":"CREATE TABLE station (local_authority VARCHAR, services VARCHAR)","generation":"SELECT local_authority, services\nFROM station"}
{"answer":"SELECT COUNT(*), T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id","question":"How many assets does each third party company supply? List the count and the company id.","context":"CREATE TABLE Assets (supplier_company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR)","generation":"SELECT COUNT(supplier_company_id), supplier_company_id\nFROM Assets\nGROUP BY supplier_company_id\nORDER BY supplier_company_id"}
{"answer":"SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2","question":"Show all storm names except for those with at least two affected regions.","context":"CREATE TABLE storm (name VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT DISTINCT s.name\nFROM storm s\nLEFT JOIN affected_region ar ON s.storm_id = ar.storm_id\nGROUP BY s.name\nHAVING COUNT(ar.storm_id) < 2"}
{"answer":"SELECT Fname, Lname FROM Student","question":"Show first name and last name for all students.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)","generation":"SELECT Fname, Lname FROM Student"}
{"answer":"SELECT open_date, COUNT(*) FROM church GROUP BY open_date","question":"Show all opening years and the number of churches that opened in that year.","context":"CREATE TABLE church (open_date VARCHAR)","generation":"SELECT open_date, COUNT(*) AS num_churches\nFROM church\nGROUP BY open_date\nORDER BY open_date\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECT open_date, COUNT(*) AS num_churches\n  - open_date: The column name for the opening year of the church\n  - COUNT(*): The number of churches that opened in that year\n  - AS num_churches: The alias for the number of churches\n- FROM church\n  - The table name for the church table\n- GROUP BY open_date\n  - The column name for the opening year of the church\n- ORDER BY open_date\n  - The column name for the opening year of the church\n\nThe query will return the following result:\n[\n  {\n    \"open_date\": \"2010\",\n    \"num_churches\": 10\n  },\n  {\n    \"open_date\": \"2011\",\n    \"num_churches\": 15\n  },\n  {\n    \"open_date\": \"2012\",\n    \"num_churches\": 20\n  }\n]"}
{"answer":"SELECT payment_date FROM payment ORDER BY payment_date LIMIT 1","question":"When did the first payment happen?","context":"CREATE TABLE payment (payment_date VARCHAR)","generation":"SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1"}
{"answer":"SELECT T2.title, T1.stars, T2.director, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director","question":"Find the title and score of the movie with the lowest rating among all movies directed by each director.","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)","generation":"SELECT m.title, AVG(r.stars) AS score\nFROM Movie m\nJOIN Rating r ON m.mID = r.mID\nGROUP BY m.director\nORDER BY score ASC\nLIMIT 1"}
{"answer":"SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID","question":"Show the names of members and the location of the performances they attended.","context":"CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT member.Name, performance.Location\nFROM member\nJOIN member_attendance ON member.Member_ID = member_attendance.Member_ID\nJOIN performance ON member_attendance.Performance_ID = performance.Performance_ID"}
{"answer":"SELECT region_code, region_name FROM region ORDER BY region_code","question":"Show all region code and region name sorted by the codes.","context":"CREATE TABLE region (region_code VARCHAR, region_name VARCHAR)","generation":"SELECT region_code, region_name\nFROM region\nORDER BY region_code"}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000","question":"Find the the name of the customers who have a loan with amount more than 3000.","context":"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT cust_name\nFROM customer\nWHERE cust_id IN (\n  SELECT cust_id\n  FROM loan\n  WHERE loan_amount > 3000\n)"}
{"answer":"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"","question":"How many accounts does the customer with first name Art and last name Turcotte have?","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT COUNT(*)\nFROM Accounts\nWHERE customer_id IN (\n  SELECT customer_id\n  FROM Customers\n  WHERE customer_first_name = 'Art'\n  AND customer_last_name = 'Turcotte'\n)"}
{"answer":"SELECT T1.id, COUNT(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id","question":"How many games has each stadium held?","context":"CREATE TABLE stadium (id VARCHAR); CREATE TABLE game (stadium_id VARCHAR)","generation":"SELECT stadium.id, COUNT(game.stadium_id) AS games_count\nFROM stadium\nLEFT JOIN game ON stadium.id = game.stadium_id\nGROUP BY stadium.id\nORDER BY games_count DESC"}
{"answer":"SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000","question":"How many aircrafts have distance between 1000 and 5000?","context":"CREATE TABLE Aircraft (distance INTEGER)","generation":"SELECT COUNT(*)\nFROM Aircraft\nWHERE distance BETWEEN 1000 AND 5000"}
{"answer":"SELECT Publication_Date FROM publication ORDER BY Price DESC","question":"What are the dates of publications in descending order of price?","context":"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)","generation":"SELECT Publication_Date\nFROM publication\nORDER BY Price DESC"}
{"answer":"SELECT COUNT(*) FROM book","question":"How many books are there?","context":"CREATE TABLE book (Id VARCHAR)","generation":"SELECT COUNT(*) FROM book"}
{"answer":"SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"","question":"How long does track Fast As a Shark has?","context":"CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)","generation":"SELECT milliseconds\nFROM tracks\nWHERE name = 'Fast As a Shark'"}
{"answer":"SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'","question":"Find the name and salary of the instructors who are advisors of any student from History department?","context":"CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)","generation":"SELECT i.name, i.salary\nFROM instructor i\nJOIN advisor a ON i.id = a.i_id\nJOIN student s ON a.s_id = s.id\nWHERE s.dept_name = 'History'"}
{"answer":"SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'","question":"What are the names and trade names of the medicines which has 'Yes' value in the FDA record?","context":"CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, FDA_approved VARCHAR)","generation":"SELECT name, trade_name\nFROM medicine\nWHERE FDA_approved = 'Yes'"}
{"answer":"SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2","question":"What is the name of the shipping agent of the document with id 2?","context":"CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)","generation":"SELECT Ref_Shipping_Agents.Name\nFROM Documents\nINNER JOIN Ref_Shipping_Agents ON Documents.Id = Ref_Shipping_Agents.Id\nWHERE Documents.Id = 2"}
{"answer":"SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury'","question":"What is the membership card held by both members living in Hartford and ones living in Waterbury address?","context":"CREATE TABLE member (membership_card VARCHAR, address VARCHAR)","generation":"SELECT membership_card\nFROM member\nWHERE address IN ('Hartford', 'Waterbury')\nGROUP BY membership_card\nHAVING COUNT(DISTINCT address) = 2"}
{"answer":"SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1","question":"Find the branch name of the bank that has the most number of customers.","context":"CREATE TABLE bank (bname VARCHAR, no_of_customers VARCHAR)","generation":"SELECT bname\nFROM bank\nORDER BY no_of_customers DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM classroom WHERE building <> 'Lamberton'","question":"Count the number of rooms that are not in the Lamberton building.","context":"CREATE TABLE classroom (building VARCHAR)","generation":"SELECT COUNT(*)\nFROM classroom\nWHERE building != 'Lamberton'"}
{"answer":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"","question":"Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".","context":"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","generation":"SELECT Nominee\nFROM musical\nWHERE Award = 'Bob Fosse' OR Award = 'Cleavant Derricks'"}
{"answer":"SELECT Delegate, Committee FROM election","question":"Show the delegate and committee information of elections.","context":"CREATE TABLE election (Delegate VARCHAR, Committee VARCHAR)","generation":"SELECT delegate, committee\nFROM election"}
{"answer":"SELECT T2.title, T2.film_id, T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which film has the most number of actors or actresses? List the film name, film id and description.","context":"CREATE TABLE film_actor (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR, description VARCHAR)","generation":"SELECT film.title, film.film_id, film.description\nFROM film\nORDER BY COUNT(film_actor.film_id) DESC\nLIMIT 1"}
{"answer":"SELECT MAX(Population), MIN(Population) FROM county","question":"Return the maximum and minimum population among all counties.","context":"CREATE TABLE county (Population INTEGER)","generation":"SELECT MIN(Population), MAX(Population)\nFROM county"}
{"answer":"SELECT Weight FROM people ORDER BY Height LIMIT 1","question":"What is the weight of the shortest person?","context":"CREATE TABLE people (Weight VARCHAR, Height VARCHAR)","generation":"SELECT MIN(Weight)\nFROM people"}
{"answer":"SELECT Player_name, residence FROM player WHERE Occupation <> \"Researcher\"","question":"List the name and residence for players whose occupation is not \"Researcher\".","context":"CREATE TABLE player (Player_name VARCHAR, residence VARCHAR, Occupation VARCHAR)","generation":"SELECT Player_name, residence\nFROM player\nWHERE Occupation != 'Researcher'"}
{"answer":"SELECT COUNT(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\"","question":"How many students live in HKG or CHI?","context":"CREATE TABLE Student (city_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM Student\nWHERE city_code IN ('HKG', 'CHI')"}
{"answer":"SELECT director FROM Movie WHERE title = 'Avatar'","question":"Who is the director of movie Avatar?","context":"CREATE TABLE Movie (director VARCHAR, title VARCHAR)","generation":"SELECT director\nFROM Movie\nWHERE title = 'Avatar'"}
{"answer":"SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID","question":"Find the names of all instructors who have taught some course and the course_id.","context":"CREATE TABLE instructor (ID VARCHAR); CREATE TABLE teaches (ID VARCHAR)","generation":"SELECT i.ID, t.ID\nFROM instructor i\nJOIN teaches t ON i.ID = t.ID\n[\/SQL]\n\n### Explanation\nThe query joins the instructor and teaches tables on the ID column. The result is a table with the instructor ID and the course ID.\n\n### Join\nThe join is performed on the ID column of the instructor and teaches tables. The result is a table with the instructor ID and the course ID.\n\n### Where\nThere is no where clause in the query.\n\n### Group By\nThere is no group by clause in the query.\n\n### Having\nThere is no having clause in the query.\n\n### Order By\nThere is no order by clause in the query.\n\n### Limit\nThere is no limit clause in the query.\n\n### SQL\nThe query is written in SQL.\n\n### Expected Output\nThe output is a table with the instructor ID and the course ID.\n\n### Constraints\n- The query will run on a database with the following schema:\nCREATE TABLE instructor (ID VARCHAR)"}
{"answer":"SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place","question":"List each birth place along with the number of people from there.","context":"CREATE TABLE people (Birth_Place VARCHAR)","generation":"SELECT Birth_Place, COUNT(*)\nFROM people\nGROUP BY Birth_Place\nORDER BY COUNT(*) DESC"}
{"answer":"SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the range that has the most number of mountains.","context":"CREATE TABLE mountain (Range VARCHAR)","generation":"SELECT Range\nFROM mountain\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'","question":"Show all headquarters without a company in banking industry.","context":"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)","generation":"SELECT * FROM company WHERE main_industry != 'banking'"}
{"answer":"SELECT amount, donator_name FROM endowment ORDER BY amount DESC LIMIT 1","question":"List the amount and donor name for the largest amount of donation.","context":"CREATE TABLE endowment (amount VARCHAR, donator_name VARCHAR)","generation":"SELECT amount, donator_name\nFROM endowment\nORDER BY amount DESC\nLIMIT 1"}
{"answer":"SELECT Name FROM HOST WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host)","question":"List the names of hosts who did not serve as a host of any party in our record.","context":"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Name VARCHAR, Host_ID VARCHAR)","generation":"SELECT Name\nFROM HOST\nWHERE Name NOT IN (SELECT DISTINCT Name FROM party_host)"}
{"answer":"SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'","question":"How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?","context":"CREATE TABLE institution (institution_id VARCHAR, founded VARCHAR, type VARCHAR); CREATE TABLE protein (institution_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM protein\nWHERE institution_id IN (\n  SELECT institution_id\n  FROM institution\n  WHERE founded > '1880' OR type = 'Private'\n)"}
{"answer":"SELECT date_incident_start, date_incident_end FROM Behavior_Incident WHERE incident_type_code = \"NOISE\"","question":"What are the start and end dates for incidents with incident type code \"NOISE\"?","context":"CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, date_incident_end VARCHAR, incident_type_code VARCHAR)","generation":"SELECT date_incident_start, date_incident_end\nFROM Behavior_Incident\nWHERE incident_type_code = 'NOISE'"}
{"answer":"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred","question":"Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.","context":"CREATE TABLE student (id VARCHAR, dept_name VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT i.name\nFROM instructor i\nJOIN advisor a ON i.id = a.i_id\nJOIN student s ON s.id = a.s_id\nWHERE s.dept_name = 'Math'\nORDER BY s.tot_cred DESC"}
{"answer":"SELECT T2.city, COUNT(*), T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which city has the most addresses? List the city name, number of addresses, and city id.","context":"CREATE TABLE address (city_id VARCHAR); CREATE TABLE city (city VARCHAR, city_id VARCHAR)","generation":"SELECT city, COUNT(city_id) AS number_of_addresses, city_id\nFROM address\nJOIN city ON address.city_id = city.city_id\nGROUP BY city_id\nORDER BY number_of_addresses DESC\nLIMIT 1"}
{"answer":"SELECT AVG(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211'","question":"What is the average gpa of the students enrolled in the course with code ACCT-211?","context":"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, stu_num VARCHAR)","generation":"SELECT AVG(stu_gpa)\nFROM student\nINNER JOIN enroll ON student.stu_num = enroll.stu_num\nINNER JOIN class ON enroll.class_code = class.class_code\nWHERE class.crs_code = 'ACCT-211'"}
{"answer":"SELECT COUNT(*) FROM track","question":"How many tracks do we have?","context":"CREATE TABLE track (Id VARCHAR)","generation":"SELECT COUNT(*) FROM track"}
{"answer":"SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5","question":"Which membership card has more than 5 members?","context":"CREATE TABLE member (Membership_card VARCHAR)","generation":"SELECT Membership_card\nFROM member\nGROUP BY Membership_card\nHAVING COUNT(*) > 5"}
{"answer":"SELECT eid, salary FROM Employee WHERE name = 'Mark Young'","question":"Show the id and salary of Mark Young.","context":"CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)","generation":"SELECT eid, salary FROM Employee WHERE name = 'Mark Young'"}
{"answer":"SELECT company, headquarters FROM company ORDER BY market_value DESC","question":"Show all company names and headquarters in the descending order of market value.","context":"CREATE TABLE company (company VARCHAR, headquarters VARCHAR, market_value VARCHAR)","generation":"SELECT company, headquarters, market_value\nFROM company\nORDER BY market_value DESC"}
{"answer":"SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1","question":"Find the name of the target user with the lowest trust score.","context":"CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT name\nFROM useracct\nWHERE u_id = (\n    SELECT target_u_id\n    FROM trust\n    ORDER BY trust_score ASC\n    LIMIT 1\n)"}
{"answer":"SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100","question":"Show all locations where a gas station for company with market value greater than 100 is located.","context":"CREATE TABLE gas_station (location VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, market_value INTEGER); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR)","generation":"SELECT DISTINCT g.location\nFROM gas_station g\nJOIN station_company sc ON g.station_id = sc.station_id\nJOIN company c ON sc.company_id = c.company_id\nWHERE c.market_value > 100"}
{"answer":"SELECT HOST FROM performance ORDER BY Attendance","question":"List the hosts of performances in ascending order of attendance.","context":"CREATE TABLE performance (HOST VARCHAR, Attendance VARCHAR)","generation":"SELECT HOST\nFROM performance\nORDER BY Attendance ASC"}
{"answer":"SELECT MAX(T1.stars), T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MAX(YEAR) FROM Movie)","question":"What is the maximum stars and year for the most recent movie?","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (YEAR INTEGER); CREATE TABLE Movie (year VARCHAR, mID VARCHAR)","generation":"SELECT MAX(stars), MAX(year)\nFROM Rating\nJOIN Movie\nON Rating.mID = Movie.mID\nWHERE year = (SELECT MAX(year) FROM Movie)"}
{"answer":"SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE openning_year >= 2011","question":"Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.","context":"CREATE TABLE cinema (capacity INTEGER, openning_year VARCHAR)","generation":"SELECT AVG(capacity), MIN(capacity), MAX(capacity)\nFROM cinema\nWHERE openning_year >= '2011'"}
{"answer":"SELECT COUNT(DISTINCT city) FROM station","question":"What is the number of distinct cities the stations are located at?","context":"CREATE TABLE station (city VARCHAR)","generation":"SELECT COUNT(DISTINCT city)\nFROM station"}
{"answer":"SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"","question":"What is employee Nancy Edwards's phone number?","context":"CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT phone\nFROM employees\nWHERE first_name = 'Nancy'\nAND last_name = 'Edwards'"}
{"answer":"SELECT AVG(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","question":"What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?","context":"CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)","generation":"SELECT races.name, races.year, AVG(results.fastestlapspeed)\nFROM results\nJOIN races ON results.raceid = races.raceid\nWHERE races.year > 2004\nGROUP BY races.name, races.year\nORDER BY races.year\n[\/SQL]"}
{"answer":"SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")","question":"Find the last name and age of the student who has allergy to both milk and cat.","context":"CREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT lname, age\nFROM Student\nWHERE StuID IN (\n    SELECT StuID\n    FROM Has_allergy\n    WHERE Allergy = 'milk'\n    AND StuID IN (\n        SELECT StuID\n        FROM Has_allergy\n        WHERE Allergy = 'cat'\n    )\n)"}
{"answer":"SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Indiana University\"","question":"What are the papers published under the institution \"Indiana University\"?","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  WHERE instid = 'Indiana University'\n)"}
{"answer":"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"","question":"Find the names of catalog entries with level number 8.","context":"CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)","generation":"SELECT catalog_entry_name\nFROM Catalog_Contents\nJOIN Catalog_Contents_Additional_Attributes\nON Catalog_Contents.catalog_entry_id = Catalog_Contents_Additional_Attributes.catalog_entry_id\nWHERE catalog_level_number = '8'"}
{"answer":"SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology')","question":"Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.","context":"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE salary > (SELECT AVG(salary)\n                FROM instructor\n                WHERE dept_name = 'Biology')"}
{"answer":"SELECT id, market_share FROM browser WHERE name = 'Safari'","question":"What is the id and market share of the browser Safari?","context":"CREATE TABLE browser (id VARCHAR, market_share VARCHAR, name VARCHAR)","generation":"SELECT id, market_share\nFROM browser\nWHERE name = 'Safari'"}
{"answer":"SELECT id FROM instructor EXCEPT SELECT id FROM teaches","question":"Find the id of instructors who didn't teach any courses?","context":"CREATE TABLE teaches (id VARCHAR); CREATE TABLE instructor (id VARCHAR)","generation":"SELECT i.id\nFROM instructor i\nLEFT JOIN teaches t ON i.id = t.id\nWHERE t.id IS NULL"}
{"answer":"SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'","question":"Find the city and name of bank branches that provide business loans.","context":"CREATE TABLE bank (bname VARCHAR, city VARCHAR, branch_id VARCHAR); CREATE TABLE loan (branch_id VARCHAR, loan_type VARCHAR)","generation":"SELECT b.city, b.bname\nFROM bank b\nJOIN loan l ON b.branch_id = l.branch_id\nWHERE l.loan_type = 'business'"}
{"answer":"SELECT SUM(no_of_customers) FROM bank","question":"How many customers are there?","context":"CREATE TABLE bank (no_of_customers INTEGER)","generation":"SELECT no_of_customers FROM bank"}
{"answer":"SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate","question":"Find the names of the candidates whose support percentage is lower than their oppose rate.","context":"CREATE TABLE candidate (people_id VARCHAR, support_rate INTEGER, oppose_rate VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)","generation":"SELECT people.name\nFROM candidate\nJOIN people ON candidate.people_id = people.people_id\nWHERE candidate.support_rate < candidate.oppose_rate"}
{"answer":"SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = \"Democratic\"","question":"Show the lieutenant governor and comptroller from the democratic party.","context":"CREATE TABLE party (Lieutenant_Governor VARCHAR, Comptroller VARCHAR, Party VARCHAR)","generation":"SELECT Lieutenant_Governor, Comptroller\nFROM party\nWHERE Party = 'Democratic'"}
{"answer":"SELECT * FROM election","question":"Show all the information about election.","context":"CREATE TABLE election (Id VARCHAR)","generation":"SELECT * FROM election"}
{"answer":"SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements","question":"What are the maximum and minimum settlement amount on record?","context":"CREATE TABLE settlements (settlement_amount INTEGER)","generation":"SELECT MIN(settlement_amount) AS min_settlement_amount, MAX(settlement_amount) AS max_settlement_amount\nFROM settlements"}
{"answer":"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000","question":"What are the names of representatives with more than 10000 votes in election?","context":"CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)","generation":"SELECT Name\nFROM representative\nWHERE Representative_ID IN (\n  SELECT Representative_ID\n  FROM election\n  GROUP BY Representative_ID\n  HAVING COUNT(*) > 10000\n)"}
{"answer":"SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1","question":"Find the founded year of the newest non public school.","context":"CREATE TABLE university (founded VARCHAR, affiliation VARCHAR)","generation":"SELECT founded\nFROM university\nWHERE affiliation = 'Private'\nORDER BY founded DESC\nLIMIT 1"}
{"answer":"SELECT T2.name, T1.category_id, COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id","question":"How many films are there in each category? List the genre name, genre id and the count.","context":"CREATE TABLE film_category (category_id VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)","generation":"SELECT category.name, category.category_id, COUNT(*)\nFROM film_category\nJOIN category ON film_category.category_id = category.category_id\nGROUP BY category.name, category.category_id\n[\/SQL]"}
{"answer":"SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID","question":"Show the names of players and names of their coaches.","context":"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)","generation":"SELECT player.Player_name, coach.coach_name\nFROM player\nJOIN player_coach\nON player.Player_ID = player_coach.Player_ID\nJOIN coach\nON coach.Coach_ID = player_coach.Coach_ID"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country <> \"China\"","question":"What are the names of perpetrators whose country is not \"China\"?","context":"CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Name\nFROM people\nJOIN perpetrator\nON people.People_ID = perpetrator.People_ID\nWHERE Country != \"China\""}
{"answer":"SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2","question":"Show names for all aircraft with at least two flights.","context":"CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)","generation":"SELECT name\nFROM Aircraft\nWHERE aid IN (SELECT aid\nFROM Flight\nGROUP BY aid\nHAVING COUNT(*) >= 2)"}
{"answer":"SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000","question":"What are the distinct publishers of publications with price higher than 5000000?","context":"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)","generation":"SELECT DISTINCT Publisher\nFROM publication\nWHERE Price > 5000000"}
{"answer":"SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1","question":"Which allergy has most number of students affected?","context":"CREATE TABLE Has_allergy (Allergy VARCHAR)","generation":"SELECT Allergy\nFROM Has_allergy\nGROUP BY Allergy\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7","question":"Return the unique name for stations that have ever had 7 bikes available.","context":"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)","generation":"SELECT DISTINCT station.name\nFROM station\nJOIN status ON station.id = status.station_id\nWHERE status.bikes_available = 7"}
{"answer":"SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\"","question":"Show the distinct position of players from college UCLA or Duke.","context":"CREATE TABLE match_season (POSITION VARCHAR, College VARCHAR)","generation":"SELECT DISTINCT POSITION\nFROM match_season\nWHERE COLLEGE = 'UCLA' OR COLLEGE = 'Duke'"}
{"answer":"SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num","question":"Find the first names of all instructors who have taught some course and the course code.","context":"CREATE TABLE CLASS (crs_code VARCHAR, prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT e.emp_fname, c.crs_code\nFROM employee e\nJOIN CLASS c ON e.emp_num = c.prof_num"}
{"answer":"SELECT MIN(age), MAX(age), AVG(age) FROM people","question":"Show the minimum, maximum, and average age for all people.","context":"CREATE TABLE people (age INTEGER)","generation":"SELECT MIN(age), MAX(age), AVG(age) FROM people"}
{"answer":"SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\"","question":"List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT phone.Hardware_Model_name, phone.Company_name\nFROM phone\nINNER JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode\nWHERE screen_mode.Type = 'Graphics'"}
{"answer":"SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'","question":"What are the hosts of competitions whose theme is not \"Aliens\"?","context":"CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)","generation":"SELECT DISTINCT Hosts\nFROM farm_competition\nWHERE Theme != 'Aliens'"}
{"answer":"SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)","question":"What are the names of teams that do no have match season record?","context":"CREATE TABLE match_season (Name VARCHAR, Team_id VARCHAR, Team VARCHAR); CREATE TABLE team (Name VARCHAR, Team_id VARCHAR, Team VARCHAR)","generation":"SELECT DISTINCT team.Name\nFROM team\nLEFT JOIN match_season\nON team.Team_id = match_season.Team_id\nWHERE match_season.Team_id IS NULL"}
{"answer":"SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code","question":"Show all card type codes and the number of customers holding cards in each type.","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)","generation":"SELECT card_type_code, COUNT(customer_id)\nFROM Customers_cards\nGROUP BY card_type_code\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the Customers_cards table by card_type_code. The COUNT(customer_id) function counts the number of customers holding cards in each type. The query then selects the card_type_code and the number of customers holding cards in each type."}
{"answer":"SELECT mascot FROM school WHERE enrollment > (SELECT AVG(enrollment) FROM school)","question":"What are the mascots for schools with enrollments above the average?","context":"CREATE TABLE school (mascot VARCHAR, enrollment INTEGER)","generation":"SELECT school.mascot\nFROM school\nWHERE school.enrollment > (SELECT AVG(enrollment) FROM school)"}
{"answer":"SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id","question":"For each station, find its latitude and the minimum duration of trips that ended at the station.","context":"CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)","generation":"SELECT station.lat, MIN(trip.duration)\nFROM station\nJOIN trip ON trip.end_station_id = station.id\nGROUP BY station.lat\n[\/SQL]\n\n### Explanation\nThe query joins the station and trip tables on the end_station_id column. The MIN() function is used to find the minimum duration of trips that ended at each station. The GROUP BY clause is used to group the results by the latitude of the station."}
{"answer":"SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"","question":"Show all official native languages that contain the word \"English\".","context":"CREATE TABLE country (Official_native_language VARCHAR)","generation":"SELECT Official_native_language\nFROM country\nWHERE Official_native_language LIKE '%English%'"}
{"answer":"SELECT region_name FROM region WHERE region_name <> 'Denmark'","question":"Show names for all regions except for Denmark.","context":"CREATE TABLE region (region_name VARCHAR)","generation":"SELECT region_name\nFROM region\nWHERE region_name != 'Denmark'"}
{"answer":"SELECT T3.Player_name, T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011","question":"Show the names and genders of players with a coach starting after 2011.","context":"CREATE TABLE player (Player_name VARCHAR, gender VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR, Starting_year INTEGER); CREATE TABLE coach (Coach_ID VARCHAR)","generation":"SELECT player.Player_name, player.gender\nFROM player\nJOIN player_coach\nON player.Player_ID = player_coach.Player_ID\nJOIN coach\nON player_coach.Coach_ID = coach.Coach_ID\nWHERE coach.Starting_year > 2011"}
{"answer":"SELECT COUNT(*) FROM employee","question":"Find the total number of employees.","context":"CREATE TABLE employee (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM employee"}
{"answer":"SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the account id with most number of transactions.","context":"CREATE TABLE Financial_transactions (account_id VARCHAR)","generation":"SELECT account_id\nFROM Financial_transactions\nGROUP BY account_id\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'","question":"How many students are enrolled in the class taught by some professor from the accounting department?","context":"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM enroll\nWHERE class_code IN (SELECT class_code\n                     FROM CLASS\n                     WHERE crs_code IN (SELECT crs_code\n                                        FROM course\n                                        WHERE dept_code = (SELECT dept_code\n                                                           FROM department\n                                                           WHERE dept_name = 'accounting')))"}
{"answer":"SELECT name, distance FROM Aircraft","question":"Show name and distance for all aircrafts.","context":"CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)","generation":"SELECT name, distance\nFROM Aircraft"}
{"answer":"SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315","question":"What are the heights of body builders with total score smaller than 315?","context":"CREATE TABLE people (Height VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)","generation":"SELECT Height\nFROM people\nWHERE People_ID IN (\n  SELECT People_ID\n  FROM body_builder\n  WHERE Total < 315\n)"}
{"answer":"SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> \"Fog\" AND EVENTS <> \"Rain\"","question":"In zip code 94107, on which day neither Fog nor Rain was not observed?","context":"CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)","generation":"SELECT date\nFROM weather\nWHERE zip_code = '94107'\nAND NOT (EVENTS LIKE '%Fog%' OR EVENTS LIKE '%Rain%')\n[\/SQL]\n\n### Explanation\nThe query first filters the data to only include rows where the zip code is 94107. Then, it uses the NOT operator to filter out rows where either Fog or Rain is observed. Finally, it selects the date column to return the answer.\n\n### Example\nSuppose the following is the content of the weather table:\n\n| date | EVENTS | zip_code |\n| --- | --- | --- |\n| 2019-01-01 | Fog | 94107 |\n| 2019-01-01 | Rain | 94107 |\n| 2019-01-02 | Fog | 94107 |\n| 2019-01-02 | Rain | 94107 |\n| 2019-01-03 | Fog | 94107 |\n| 2019-01-03 | Rain | 94107 |\n\nThe query will return the following result:\n\n| date |\n| --- |\n| 2019-01-03 |\n\nIn this case, on January 3rd, neither Fog nor Rain was observed in zip code 94107."}
{"answer":"SELECT SUM(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas'","question":"Find the total account balance of each customer from Utah or Texas.","context":"CREATE TABLE customer (acc_bal INTEGER, state VARCHAR)","generation":"SELECT state, SUM(acc_bal) AS total_balance\nFROM customer\nWHERE state IN ('Utah', 'Texas')\nGROUP BY state\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECT state, SUM(acc_bal) AS total_balance\n    - SELECTs the state and the total account balance of each customer\n    - AS total_balance is an alias for the SUM(acc_bal)\n- FROM customer\n    - FROM selects the customer table\n- WHERE state IN ('Utah', 'Texas')\n    - WHERE selects only the rows where the state is either 'Utah' or 'Texas'\n- GROUP BY state\n    - GROUP BY groups the rows by the state\n- SUM(acc_bal)\n    - SUM(acc_bal) calculates the total account balance of each group\n\n### Query Breakdown\n- SELECT state, SUM(acc_bal) AS total_balance\n    - SELECTs the state and the total account balance of each customer\n    - AS total_balance is an alias for the SUM(acc_bal)\n- FROM customer\n    - FROM selects the customer table\n- WHERE state IN ('Utah', 'Texas')\n    - WHERE selects only the rows where the state is either 'Utah' or 'Texas'\n- GROUP BY state\n    - GROUP BY groups the rows by the state\n- SUM(acc_bal)\n    - SUM(acc_bal) calculates the total account balance of each group\n\n### Query Performance\nThe query performance of this query is O(n) where n is the number of rows in the customer table.\n\n### Query Optimization\nThe query can be optimized by using an index on the state column.\n\n###"}
{"answer":"SELECT text FROM tweets WHERE text LIKE '%intern%'","question":"Return the text of tweets about the topic 'intern'.","context":"CREATE TABLE tweets (text VARCHAR)","generation":"SELECT text FROM tweets WHERE text LIKE '%intern%'"}
{"answer":"SELECT AVG(num_of_staff), AVG(score) FROM shop","question":"What are the average score and average staff number of all shops?","context":"CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)","generation":"SELECT AVG(score), AVG(num_of_staff) FROM shop"}
{"answer":"SELECT AVG(weight) FROM Player","question":"What is the average weight of all players?","context":"CREATE TABLE Player (weight INTEGER)","generation":"SELECT AVG(weight) FROM Player"}
{"answer":"SELECT COUNT(DISTINCT Status) FROM city","question":"How many different statuses do cities have?","context":"CREATE TABLE city (Status VARCHAR)","generation":"SELECT COUNT(DISTINCT Status)\nFROM city"}
{"answer":"SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2","question":"What are the investors that have invested in at least two entrepreneurs?","context":"CREATE TABLE entrepreneur (Investor VARCHAR)","generation":"SELECT Investor\nFROM entrepreneur\nGROUP BY Investor\nHAVING COUNT(Investor) >= 2"}
{"answer":"SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'","question":"Find the name of customers who do not have an saving account.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)","generation":"SELECT cust_name\nFROM customer\nWHERE acc_type != 'saving'"}
{"answer":"SELECT COUNT(DISTINCT rating) FROM film","question":"How many kinds of different ratings are listed?","context":"CREATE TABLE film (rating VARCHAR)","generation":"SELECT COUNT(DISTINCT rating)\nFROM film"}
{"answer":"SELECT AVG(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"","question":"What is the average price for flights from Los Angeles to Honolulu.","context":"CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)","generation":"SELECT AVG(price)\nFROM Flight\nWHERE origin = 'Los Angeles'\nAND destination = 'Honolulu'"}
{"answer":"SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2","question":"List the locations that are shared by more than two wrestlers.","context":"CREATE TABLE wrestler (LOCATION VARCHAR)","generation":"SELECT DISTINCT wrestler.LOCATION\nFROM wrestler\nWHERE wrestler.LOCATION IN (\n  SELECT wrestler.LOCATION\n  FROM wrestler\n  GROUP BY wrestler.LOCATION\n  HAVING COUNT(*) > 2\n)"}
{"answer":"SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000","question":"Show the names of mountains with height more than 5000 or prominence more than 1000.","context":"CREATE TABLE mountain (Name VARCHAR, Height VARCHAR, Prominence VARCHAR)","generation":"SELECT Name\nFROM mountain\nWHERE Height > 5000 OR Prominence > 1000"}
{"answer":"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\"","question":"Show all allergies with type food.","context":"CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)","generation":"SELECT allergy\nFROM Allergy_type\nWHERE allergytype = 'food'"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1","question":"Find the name of the product that has the smallest capacity.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)","generation":"SELECT catalog_entry_name\nFROM catalog_contents\nORDER BY capacity\nLIMIT 1"}
{"answer":"SELECT T2.product_name, SUM(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name","question":"Show all product names and the total quantity ordered for each product name.","context":"CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_quantity INTEGER, product_id VARCHAR)","generation":"SELECT product_name, SUM(product_quantity) AS total_quantity\nFROM Products\nJOIN Order_items ON Products.product_id = Order_items.product_id\nGROUP BY product_name\n[\/SQL]\n\n### Explanation\nThe query joins the Products table with the Order_items table on the product_id column. The SUM function is used to calculate the total quantity ordered for each product name. The GROUP BY clause is used to group the results by product name."}
{"answer":"SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants","question":"What are all the the participant ids, type code and details?","context":"CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR, Participant_Details VARCHAR)","generation":"SELECT Participant_ID, Participant_Type_Code, Participant_Details\nFROM Participants"}
{"answer":"SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = \"918\"","question":"What are the email addresses of teachers whose address has zip code \"918\"?","context":"CREATE TABLE Addresses (address_id VARCHAR, zip_postcode VARCHAR); CREATE TABLE Teachers (email_address VARCHAR, address_id VARCHAR)","generation":"SELECT email_address\nFROM Teachers\nJOIN Addresses ON Teachers.address_id = Addresses.address_id\nWHERE zip_postcode = '918'"}
{"answer":"SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code","question":"Show the card type codes and the number of transactions.","context":"CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)","generation":"SELECT card_type_code, COUNT(*)\nFROM Customers_cards\nJOIN Financial_transactions\nON Customers_cards.card_id = Financial_transactions.card_id\nGROUP BY card_type_code\n[\/SQL]\n\n### Explanation\nThe query joins the Customers_cards table with the Financial_transactions table on the card_id column. The result of the join is then grouped by the card_type_code column, and the COUNT(*) function is used to count the number of transactions for each card type. The query ends with \""}
{"answer":"SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"","question":"Which accelerator name contains substring \"Opera\"?","context":"CREATE TABLE web_client_accelerator (name VARCHAR)","generation":"SELECT name\nFROM web_client_accelerator\nWHERE name LIKE '%Opera%'"}
{"answer":"SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'","question":"Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)","generation":"SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'"}
{"answer":"SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1","question":"What is the name of the highest mountain?","context":"CREATE TABLE mountain (Name VARCHAR, Height VARCHAR)","generation":"SELECT Name\nFROM mountain\nWHERE Height = (SELECT MAX(Height) FROM mountain)"}
{"answer":"SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date LIMIT 1","question":"When was the first asset acquired?","context":"CREATE TABLE Assets (asset_acquired_date VARCHAR)","generation":"SELECT MIN(asset_acquired_date)\nFROM Assets"}
{"answer":"SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"","question":"Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".","context":"CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)","generation":"SELECT Nominee\nFROM musical\nWHERE Award = 'Tony Award' AND Award = 'Drama Desk Award'"}
{"answer":"SELECT MIN(seating), MAX(seating), AVG(seating) FROM track","question":"What is the minimum, maximum, and average seating for all tracks.","context":"CREATE TABLE track (seating INTEGER)","generation":"SELECT MIN(seating), MAX(seating), AVG(seating)\nFROM track"}
{"answer":"SELECT player, number_of_matches, SOURCE FROM injury_accident WHERE injury <> 'Knee problem'","question":"What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?","context":"CREATE TABLE injury_accident (player VARCHAR, number_of_matches VARCHAR, SOURCE VARCHAR, injury VARCHAR)","generation":"SELECT player, number_of_matches, SOURCE\nFROM injury_accident\nWHERE injury != 'Knee problem'"}
{"answer":"SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'","question":"Find the total budgets of the Marketing or Finance department.","context":"CREATE TABLE department (budget INTEGER, dept_name VARCHAR)","generation":"SELECT SUM(budget)\nFROM department\nWHERE dept_name IN ('Marketing', 'Finance')"}
{"answer":"SELECT course_name FROM courses ORDER BY course_name","question":"List the names of courses in alphabetical order?","context":"CREATE TABLE courses (course_name VARCHAR)","generation":"SELECT course_name\nFROM courses\nORDER BY course_name ASC"}
{"answer":"SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1","question":"How many faculty lines are there in the university that conferred the least number of degrees in year 2001?","context":"CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)","generation":"SELECT COUNT(faculty)\nFROM faculty\nWHERE faculty NOT IN (SELECT faculty\n                      FROM degrees\n                      WHERE year = 2001)"}
{"answer":"SELECT Date, LOCATION FROM performance","question":"What are the dates and locations of performances?","context":"CREATE TABLE performance (Date VARCHAR, LOCATION VARCHAR)","generation":"SELECT Date, LOCATION\nFROM performance\n[SQL]\n\n### Explanation\nThe query selects the Date and LOCATION columns from the performance table.\n\n### Example\nThe following is an example of the output of the query:\n[SQL]\nSELECT Date, LOCATION\nFROM performance\n[SQL]\n\n| Date | LOCATION |\n| --- | --- |\n| 2019-01-01 | New York |\n| 2019-01-01 | London |\n| 2019-01-01 | Tokyo |\n| 2019-01-02 | New York |\n| 2019-01-02 | London |\n| 2019-01-02 | Tokyo |\n\nThe query returns the dates and locations of performances."}
{"answer":"SELECT Party, COUNT(*) FROM people GROUP BY Party","question":"Show different parties of people along with the number of people in each party.","context":"CREATE TABLE people (Party VARCHAR)","generation":"SELECT Party, COUNT(*) AS NumberOfPeople\nFROM people\nGROUP BY Party\nORDER BY NumberOfPeople DESC"}
{"answer":"SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1","question":"What are the forename and surname of the driver who has the smallest laptime?","context":"CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR); CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR)","generation":"SELECT d.forename, d.surname\nFROM drivers d\nJOIN laptimes l\nON d.driverid = l.driverid\nWHERE l.milliseconds = (SELECT MIN(milliseconds) FROM laptimes)\n[\/SQL]\n\n### Explanation\nThe query first joins the drivers table with the laptimes table on the driverid column. This creates a table with the driverid, forename, surname, and milliseconds columns.\n\nThe query then filters the table to only include the driver with the smallest laptime. This is done by selecting the MIN(milliseconds) from the laptimes table.\n\nFinally, the query selects the forename and surname of the driver with the smallest laptime.\n\n### Example\n[SQL]\nSELECT d.forename, d.surname\nFROM drivers d\nJOIN laptimes l\nON d.driverid = l.driverid\nWHERE l.milliseconds = (SELECT MIN(milliseconds) FROM laptimes)\n[\/SQL]\n\n[SQL]\nSELECT 'Lewis' as forename, 'Hamilton' as surname\nFROM drivers d\nJOIN laptimes l\nON d.driverid = l.driverid\nWHERE l.milliseconds = (SELECT MIN(milliseconds) FROM laptimes)\n[\/SQL]\n\n[SQL]\nSELECT 'Sebastian' as forename, 'Vettel' as surname\nFROM drivers d\nJOIN laptimes l\nON d.driverid = l.driverid\nWHERE l.milliseconds = (SELECT MIN(milliseconds) FROM laptimes)\n[\/SQL]\n\n[SQL]\nSELECT 'Max' as forename, 'Verstappen' as surname\nFROM drivers d\nJOIN"}
{"answer":"SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of route that has the highest number of deliveries.","context":"CREATE TABLE Delivery_Routes (route_name VARCHAR, route_id VARCHAR); CREATE TABLE Delivery_Route_Locations (route_id VARCHAR)","generation":"SELECT route_name\nFROM Delivery_Routes\nWHERE route_id = (\n    SELECT route_id\n    FROM Delivery_Route_Locations\n    GROUP BY route_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"}
{"answer":"SELECT Pilot_name FROM pilot WHERE NOT Pilot_ID IN (SELECT Pilot_ID FROM pilot_record)","question":"List the names of pilots that do not have any record.","context":"CREATE TABLE pilot_record (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR)","generation":"SELECT Pilot_name\nFROM pilot\nWHERE Pilot_name NOT IN (SELECT Pilot_name\n                         FROM pilot_record)"}
{"answer":"SELECT COUNT(DISTINCT source_system_code) FROM CMI_cross_references","question":"How many different source system code for the cmi cross references are there?","context":"CREATE TABLE CMI_cross_references (source_system_code VARCHAR)","generation":"SELECT COUNT(DISTINCT source_system_code)\nFROM CMI_cross_references"}
{"answer":"SELECT COUNT(*) FROM EVENTS WHERE NOT event_id IN (SELECT event_id FROM Participants_in_Events)","question":"How many events did not have any participants?","context":"CREATE TABLE EVENTS (event_id VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR)","generation":"SELECT COUNT(event_id)\nFROM EVENTS\nWHERE event_id NOT IN (SELECT event_id\n                       FROM Participants_in_Events)"}
{"answer":"SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1","question":"Find the id of the candidate who got the lowest oppose rate.","context":"CREATE TABLE candidate (Candidate_ID VARCHAR, oppose_rate VARCHAR)","generation":"SELECT Candidate_ID\nFROM candidate\nORDER BY oppose_rate ASC\nLIMIT 1"}
{"answer":"SELECT company, main_industry FROM company WHERE NOT company_id IN (SELECT company_id FROM station_company)","question":"Show company name and main industry without a gas station.","context":"CREATE TABLE station_company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR); CREATE TABLE company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR)","generation":"SELECT company, main_industry\nFROM station_company\nWHERE company_id NOT IN (SELECT company_id\n                          FROM station)"}
{"answer":"SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType","question":"What is the average base price of different bed type? List bed type and average base price.","context":"CREATE TABLE Rooms (bedType VARCHAR, basePrice INTEGER)","generation":"SELECT bedType, AVG(basePrice)\nFROM Rooms\nGROUP BY bedType\nORDER BY bedType\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Selects the columns to be returned in the result set. In this case, the query returns the bed type and the average base price.\n- FROM: Specifies the table or tables to retrieve rows from. In this case, the query retrieves rows from the Rooms table.\n- GROUP BY: Groups the rows in the result set by the specified column or columns. In this case, the query groups the rows by bed type.\n- AVG: Calculates the average of the values in the specified column. In this case, the query calculates the average base price for each bed type.\n- ORDER BY: Sorts the rows in the result set by the specified column or columns. In this case, the query sorts the rows by bed type.\n\n### Example\nThe following example demonstrates how to use the query to answer [QUESTION]What is the average base price of different bed type? List bed type and average base price.[\/QUESTION]\n\n| bedType | AVG(basePrice) |\n| --- | --- |\n| Single | 150 |\n| Double | 200 |\n| Queen | 250 |\n| King | 300 |\n\nThe query returns the average base price for each bed type. The result set is sorted by bed type."}
{"answer":"SELECT COUNT(*) FROM web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser)","question":"How many accelerators are not compatible with the browsers listed ?","context":"CREATE TABLE accelerator_compatible_browser (id VARCHAR, accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, accelerator_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM accelerator_compatible_browser\nWHERE accelerator_id NOT IN (\n  SELECT accelerator_id\n  FROM web_client_accelerator\n  WHERE id IN (\n    SELECT id\n    FROM web_client_accelerator\n    WHERE browser_id IN (\n      SELECT id\n      FROM web_client_browser\n      WHERE name IN ('Chrome', 'Firefox', 'Safari')\n    )\n  )\n)"}
{"answer":"SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers","question":"Show ids, first names, last names, and phones for all customers.","context":"CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)","generation":"SELECT customer_id, customer_first_name, customer_last_name, customer_phone\nFROM Customers"}
{"answer":"SELECT SUM(amount_piad), AVG(amount_piad) FROM claim_headers","question":"Find the total and average amount paid in claim headers.","context":"CREATE TABLE claim_headers (amount_piad INTEGER)","generation":"SELECT SUM(amount_paid), AVG(amount_paid) FROM claim_headers"}
{"answer":"SELECT POSITION, AVG(Points) FROM player GROUP BY POSITION","question":"List the position of players and the average number of points of players of each position.","context":"CREATE TABLE player (POSITION VARCHAR, Points INTEGER)","generation":"SELECT POSITION, AVG(Points)\nFROM player\nGROUP BY POSITION\nORDER BY POSITION\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: retrieves data from the database.\n- FROM: specifies the table(s) to retrieve data from.\n- GROUP BY: groups the data by the specified column(s).\n- AVG: calculates the average of the data in the specified column.\n- ORDER BY: sorts the data by the specified column(s).\n\nThe query retrieves the position of players and the average number of points of players of each position. The query groups the data by position and calculates the average number of points of players of each position. The query then sorts the data by position.\n\n### Example\nThe following example demonstrates the query in action:\n\n| POSITION | AVG(Points) |\n| --- | --- |\n| G | 100 |\n| F | 120 |\n| D | 110 |\n| C | 105 |\n| G | 100 |\n| F | 120 |\n| D | 110 |\n| C | 105 |\n\nThe query retrieves the position of players and the average number of points of players of each position. The query groups the data by position and calculates the average number of points of players of each position. The query then sorts the data by position.\n\n### Constraints\n- The database schema is given.\n- The query should retrieve the position of players and the average number of points of players of each position.\n- The query should group the data by position and calculate the average number of points of players of each position.\n- The query should sort the data by"}
{"answer":"SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id","question":"What is the average latitude and longitude of the starting points of all trips?","context":"CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)","generation":"SELECT AVG(start_station.lat), AVG(start_station.long)\nFROM trip\nJOIN station start_station ON start_station.id = trip.start_station_id"}
{"answer":"SELECT SUM(no_of_customers) FROM bank WHERE city = 'New York City'","question":"Find the number of customers in the banks at New York City.","context":"CREATE TABLE bank (no_of_customers INTEGER, city VARCHAR)","generation":"SELECT no_of_customers\nFROM bank\nWHERE city = 'New York City'"}
{"answer":"SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'","question":"What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?","context":"CREATE TABLE enzyme (id VARCHAR, name VARCHAR); CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR, medicine_id VARCHAR, enzyme_id VARCHAR)","generation":"SELECT interaction_type\nFROM medicine_enzyme_interaction\nWHERE enzyme_id = (SELECT id FROM enzyme WHERE name = 'ALA synthase')\nAND medicine_id = (SELECT id FROM medicine WHERE name = 'Aripiprazole')"}
{"answer":"SELECT Name FROM technician WHERE Team <> \"NYY\"","question":"List the name of technicians whose team is not \"NYY\".","context":"CREATE TABLE technician (Name VARCHAR, Team VARCHAR)","generation":"SELECT Name\nFROM technician\nWHERE Team != 'NYY'"}
{"answer":"SELECT Party FROM party WHERE NOT Party_ID IN (SELECT Party FROM election)","question":"What are the names of parties that do not have delegates in election?","context":"CREATE TABLE election (Party VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT Party\nFROM party\nWHERE Party_ID NOT IN (SELECT Party_ID FROM election)"}
{"answer":"SELECT COUNT(DISTINCT acc_type) FROM customer","question":"How many distinct types of accounts are there?","context":"CREATE TABLE customer (acc_type VARCHAR)","generation":"SELECT COUNT(DISTINCT acc_type)\nFROM customer"}
{"answer":"SELECT product_id, COUNT(DISTINCT order_id) FROM Order_items GROUP BY product_id","question":"Show the product ids and the number of unique orders containing each product.","context":"CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR)","generation":"SELECT product_id, COUNT(DISTINCT order_id)\nFROM Order_items\nGROUP BY product_id\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECT product_id, COUNT(DISTINCT order_id)\n    - product_id: The product id of the order items\n    - COUNT(DISTINCT order_id): The number of unique orders containing each product\n- FROM Order_items\n    - The table containing the order items\n- GROUP BY product_id\n    - Group the results by product id\n\nThe query will return the product ids and the number of unique orders containing each product."}
{"answer":"SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name","question":"Please list the name and id of all artists that have at least 3 albums in alphabetical order.","context":"CREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)","generation":"SELECT A.Name, A.ArtistID\nFROM ARTIST A\nJOIN ALBUM A1 ON A.ArtistID = A1.ArtistId\nJOIN ALBUM A2 ON A.ArtistID = A2.ArtistId\nJOIN ALBUM A3 ON A.ArtistID = A3.ArtistId\nGROUP BY A.Name, A.ArtistID\nHAVING COUNT(DISTINCT A1.ArtistId) >= 3\nORDER BY A.Name"}
{"answer":"SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1","question":"What is the name of the player with the largest number of votes?","context":"CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)","generation":"SELECT Player_name\nFROM player\nWHERE Votes = (SELECT MAX(Votes) FROM player)"}
{"answer":"SELECT DISTINCT POSITION FROM match_season","question":"Show all distinct positions of matches.","context":"CREATE TABLE match_season (POSITION VARCHAR)","generation":"SELECT DISTINCT POSITION FROM match_season"}
{"answer":"SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1","question":"Find the name of instructor who is the advisor of the student who has the highest number of total credits.","context":"CREATE TABLE student (id VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT i.name\nFROM instructor i\nJOIN advisor a ON i.id = a.i_id\nJOIN student s ON s.id = a.s_id\nWHERE s.tot_cred = (SELECT MAX(tot_cred) FROM student)"}
{"answer":"SELECT COUNT(*) FROM party_events","question":"How many party events do we have?","context":"CREATE TABLE party_events (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM party_events"}
{"answer":"SELECT SUM(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\"","question":"How long does student Linda Smith spend on the restaurant in total?","context":"CREATE TABLE Visits_Restaurant (Spent INTEGER); CREATE TABLE Student (Spent INTEGER)","generation":"SELECT SUM(Spent)\nFROM Visits_Restaurant\nWHERE Spent IN (SELECT Spent FROM Student WHERE Name = 'Linda Smith')"}
{"answer":"SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Which policy type has the most records in the database?","context":"CREATE TABLE available_policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code\nFROM available_policies\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT s_id) FROM advisor","question":"How many students have advisors?","context":"CREATE TABLE advisor (s_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM student\nWHERE s_id IN (SELECT s_id FROM advisor)"}
{"answer":"SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date LIMIT 1","question":"Which company started the earliest the maintenance contract? Show the company name.","context":"CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_start_date VARCHAR)","generation":"SELECT company_name\nFROM Third_Party_Companies\nWHERE company_id = (\n    SELECT maintenance_contract_company_id\n    FROM Maintenance_Contracts\n    ORDER BY contract_start_date ASC\n    LIMIT 1\n)"}
{"answer":"SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year","question":"Show gas station id, location, and manager_name for all gas stations ordered by open year.","context":"CREATE TABLE gas_station (station_id VARCHAR, LOCATION VARCHAR, manager_name VARCHAR, open_year VARCHAR)","generation":"SELECT station_id, location, manager_name\nFROM gas_station\nORDER BY open_year"}
{"answer":"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\"","question":"Return all the committees that have delegates from Democratic party.","context":"CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)","generation":"SELECT Committee\nFROM election\nWHERE Party = 'Democratic'"}
{"answer":"SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80","question":"When and in what zip code did max temperature reach 80?","context":"CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)","generation":"SELECT date, zip_code\nFROM weather\nWHERE max_temperature_f = '80'"}
{"answer":"SELECT T3.service_id, T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY COUNT(*) LIMIT 1","question":"Which service id and type has the least number of participants?","context":"CREATE TABLE Participants_in_Events (Participant_ID VARCHAR, Event_ID VARCHAR); CREATE TABLE services (Service_Type_Code VARCHAR, service_id VARCHAR); CREATE TABLE EVENTS (service_id VARCHAR, Event_ID VARCHAR); CREATE TABLE participants (Participant_ID VARCHAR)","generation":"SELECT service_id, service_type_code\nFROM services\nJOIN EVENTS ON services.service_id = EVENTS.service_id\nJOIN Participants_in_Events ON EVENTS.Event_ID = Participants_in_Events.Event_ID\nGROUP BY service_id, service_type_code\nORDER BY COUNT(Participant_ID) ASC\nLIMIT 1"}
{"answer":"SELECT T1.staff_name, T3.first_name, T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id","question":"Which staff have contacted which engineers? List the staff name and the engineer first name and last name.","context":"CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR, engineer_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)","generation":"SELECT Staff.staff_name, Maintenance_Engineers.first_name, Maintenance_Engineers.last_name\nFROM Staff\nJOIN Engineer_Visits ON Staff.staff_id = Engineer_Visits.contact_staff_id\nJOIN Maintenance_Engineers ON Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id"}
{"answer":"SELECT COUNT(*) FROM follows GROUP BY f1","question":"Find the number of followers for each user.","context":"CREATE TABLE follows (f1 VARCHAR)","generation":"SELECT f1, COUNT(*) AS num_followers\nFROM follows\nGROUP BY f1\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Returns all columns from the table.\n- COUNT(*): Counts the number of rows in the table.\n- GROUP BY: Groups the rows by the column f1.\n- AS: Assigns an alias to the column num_followers.\n\nThe query returns the number of followers for each user."}
{"answer":"SELECT T1.teacher_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3","question":"Find the ids and first names of the 3 teachers that have the most number of assessment notes?","context":"CREATE TABLE Assessment_Notes (teacher_id VARCHAR); CREATE TABLE Teachers (first_name VARCHAR, teacher_id VARCHAR)","generation":"SELECT Teachers.first_name, Teachers.teacher_id\nFROM Teachers\nJOIN Assessment_Notes\nON Teachers.teacher_id = Assessment_Notes.teacher_id\nGROUP BY Teachers.teacher_id\nORDER BY COUNT(Assessment_Notes.teacher_id) DESC\nLIMIT 3"}
{"answer":"SELECT name, open_date FROM church ORDER BY open_date DESC LIMIT 3","question":"Show the name and opening year for three churches that opened most recently.","context":"CREATE TABLE church (name VARCHAR, open_date VARCHAR)","generation":"SELECT name, open_date\nFROM church\nORDER BY open_date DESC\nLIMIT 3"}
{"answer":"SELECT ResName, Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1","question":"Which restaurants have highest rating? List the restaurant name and its rating.","context":"CREATE TABLE Restaurant (ResName VARCHAR, Rating VARCHAR)","generation":"SELECT ResName, Rating\nFROM Restaurant\nORDER BY Rating DESC"}
{"answer":"SELECT DISTINCT Reign FROM wrestler WHERE LOCATION <> \"Tokyo , Japan\"","question":"What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?","context":"CREATE TABLE wrestler (Reign VARCHAR, LOCATION VARCHAR)","generation":"SELECT DISTINCT Reign\nFROM wrestler\nWHERE LOCATION != 'Tokyo,Japan'"}
{"answer":"SELECT dept_name FROM department ORDER BY dept_name","question":"list names of all departments ordered by their names.","context":"CREATE TABLE department (dept_name VARCHAR)","generation":"SELECT dept_name\nFROM department\nORDER BY dept_name"}
{"answer":"SELECT COUNT(*) FROM Accounts","question":"How many accounts do we have?","context":"CREATE TABLE Accounts (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Accounts"}
{"answer":"SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards","question":"Show the number of card types.","context":"CREATE TABLE Customers_Cards (card_type_code VARCHAR)","generation":"SELECT COUNT(DISTINCT card_type_code)\nFROM Customers_Cards"}
{"answer":"SELECT title FROM item WHERE NOT i_id IN (SELECT i_id FROM review)","question":"Find the names of the items that did not receive any review.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (title VARCHAR, i_id VARCHAR)","generation":"SELECT item.title\nFROM item\nLEFT JOIN review ON item.i_id = review.i_id\nWHERE review.i_id IS NULL"}
{"answer":"SELECT COUNT(*) FROM savings WHERE balance > (SELECT AVG(balance) FROM savings)","question":"How many accounts have a savings balance above the average savings balance?","context":"CREATE TABLE savings (balance INTEGER)","generation":"SELECT COUNT(*) AS \"Number of accounts with savings balance above average\"\nFROM savings\nWHERE balance > (SELECT AVG(balance) FROM savings)"}
{"answer":"SELECT COUNT(DISTINCT customer_id) FROM Accounts","question":"How many customers have an account?","context":"CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT COUNT(customer_id)\nFROM Accounts"}
{"answer":"SELECT COUNT(DISTINCT last_name) FROM actor","question":"How many different last names do the actors and actresses have?","context":"CREATE TABLE actor (last_name VARCHAR)","generation":"SELECT COUNT(DISTINCT last_name)\nFROM actor"}
{"answer":"SELECT COUNT(*), nationality FROM constructors GROUP BY nationality","question":"What are the numbers of constructors for different nationalities?","context":"CREATE TABLE constructors (nationality VARCHAR)","generation":"SELECT nationality, COUNT(*) AS number_of_constructors\nFROM constructors\nGROUP BY nationality\nORDER BY number_of_constructors DESC"}
{"answer":"SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING COUNT(*) > 1","question":"Find the name of the students who have more than one advisor?","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE advisor (s_id VARCHAR)","generation":"SELECT s.name\nFROM student s\nJOIN advisor a1 ON s.id = a1.s_id\nJOIN advisor a2 ON s.id = a2.s_id\nWHERE a1.s_id != a2.s_id"}
{"answer":"SELECT COUNT(DISTINCT Country) FROM climber","question":"How many distinct countries are the climbers from?","context":"CREATE TABLE climber (Country VARCHAR)","generation":"SELECT COUNT(DISTINCT Country)\nFROM climber"}
{"answer":"SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions)","question":"Show ids for all transactions whose amounts are greater than the average.","context":"CREATE TABLE Financial_transactions (transaction_id VARCHAR, transaction_amount INTEGER)","generation":"SELECT transaction_id\nFROM Financial_transactions\nWHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions)"}
{"answer":"SELECT T1.region_name, COUNT(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id","question":"Show the name for regions and the number of storms for each region.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)","generation":"SELECT region_name, COUNT(region_id) AS num_storms\nFROM region\nLEFT JOIN affected_region ON region.region_id = affected_region.region_id\nGROUP BY region_name\nORDER BY num_storms DESC"}
{"answer":"SELECT T3.Name, T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance","question":"Show the names of journalists and the names of the events they reported in ascending order","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Name VARCHAR, Event_ID VARCHAR, Event_Attendance VARCHAR)","generation":"SELECT journalist.Name, event.Name\nFROM journalist\nJOIN news_report ON journalist.journalist_ID = news_report.journalist_ID\nJOIN event ON news_report.Event_ID = event.Event_ID\nORDER BY event.Name ASC"}
{"answer":"SELECT dept_name FROM department ORDER BY budget LIMIT 1","question":"Which department has the lowest budget?","context":"CREATE TABLE department (dept_name VARCHAR, budget VARCHAR)","generation":"SELECT dept_name\nFROM department\nORDER BY budget\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM club_rank WHERE Total < 10","question":"How many clubs have total medals less than 10?","context":"CREATE TABLE club_rank (Total INTEGER)","generation":"SELECT COUNT(*)\nFROM club_rank\nWHERE Total < 10"}
{"answer":"SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code = 'BUS'","question":"How many different locations does the school with code BUS has?","context":"CREATE TABLE department (dept_address VARCHAR, school_code VARCHAR)","generation":"SELECT COUNT(DISTINCT dept_address)\nFROM department\nWHERE school_code = 'BUS'"}
{"answer":"SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3","question":"Find the names of the top 3 departments that provide the largest amount of courses?","context":"CREATE TABLE course (dept_name VARCHAR)","generation":"SELECT dept_name\nFROM course\nGROUP BY dept_name\nORDER BY COUNT(*) DESC\nLIMIT 3"}
{"answer":"SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"","question":"Show the players and years played for players from team \"Columbus Crew\".","context":"CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)","generation":"SELECT player.Player, player.Years_Played\nFROM player\nJOIN team ON player.Team = team.Team_id\nWHERE team.Name = \"Columbus Crew\""}
{"answer":"SELECT name FROM people WHERE NOT people_id IN (SELECT people_id FROM candidate)","question":"what are the names of people who did not participate in the candidate election.","context":"CREATE TABLE candidate (name VARCHAR, people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)","generation":"SELECT people.name\nFROM people\nLEFT JOIN candidate ON people.people_id = candidate.people_id\nWHERE candidate.people_id IS NULL"}
{"answer":"SELECT email FROM user_profiles WHERE name = 'Mary'","question":"Find the emails of the user named \"Mary\".","context":"CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)","generation":"SELECT email\nFROM user_profiles\nWHERE name = 'Mary'"}
{"answer":"SELECT T1.line_1, AVG(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id","question":"What are the line 1 and average monthly rentals of all student addresses?","context":"CREATE TABLE Addresses (line_1 VARCHAR, address_id VARCHAR); CREATE TABLE Student_Addresses (monthly_rental INTEGER, address_id VARCHAR)","generation":"SELECT line_1, AVG(monthly_rental)\nFROM Addresses\nJOIN Student_Addresses\nON Addresses.address_id = Student_Addresses.address_id\nGROUP BY line_1"}
{"answer":"SELECT COUNT(*) FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review)","question":"Find the number of users who did not write any review.","context":"CREATE TABLE review (u_id VARCHAR); CREATE TABLE useracct (u_id VARCHAR)","generation":"SELECT COUNT(u_id)\nFROM useracct\nWHERE u_id NOT IN (SELECT u_id FROM review)"}
{"answer":"SELECT Advisor FROM Student WHERE StuID = 1004","question":"Who is the advisor of student with ID 1004?","context":"CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)","generation":"SELECT Advisor\nFROM Student\nWHERE StuID = '1004'"}
{"answer":"SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY SUM(T2.amount) DESC LIMIT 1","question":"Find the name of bank branch that provided the greatest total amount of loans.","context":"CREATE TABLE loan (branch_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)","generation":"SELECT b.bname\nFROM bank b\nJOIN (SELECT branch_id, SUM(amount) total\n      FROM loan\n      GROUP BY branch_id) l\nON b.branch_id = l.branch_id\nWHERE l.total = (SELECT MAX(total)\n                 FROM (SELECT branch_id, SUM(amount) total\n                       FROM loan\n                       GROUP BY branch_id) t)"}
{"answer":"SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree <> 'Ph.D.'","question":"Find the first name and office of history professor who did not get a Ph.D. degree.","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT emp_fname, prof_office\nFROM professor\nINNER JOIN employee\nON professor.emp_num = employee.emp_num\nWHERE prof_high_degree = 'Ph.D.'\nAND dept_code = 'HIST'"}
{"answer":"SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200","question":"Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.","context":"CREATE TABLE film (title VARCHAR, replacement_cost INTEGER, LENGTH VARCHAR, rating VARCHAR)","generation":"SELECT title\nFROM film\nWHERE (LENGTH > 100 OR rating = 'PG')\nAND replacement_cost < 200"}
{"answer":"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5","question":"Find out 5 customers who most recently purchased something. List customers' first and last name.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)","generation":"SELECT customers.first_name, customers.last_name\nFROM customers\nJOIN invoices\nON customers.id = invoices.customer_id\nORDER BY invoices.invoice_date DESC\nLIMIT 5"}
{"answer":"SELECT name FROM church ORDER BY open_date DESC","question":"List all church names in descending order of opening date.","context":"CREATE TABLE church (name VARCHAR, open_date VARCHAR)","generation":"SELECT name\nFROM church\nORDER BY open_date DESC"}
{"answer":"SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3","question":"Find the list of attribute data types possessed by more than 3 attribute definitions.","context":"CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)","generation":"SELECT attribute_data_type\nFROM Attribute_Definitions\nGROUP BY attribute_data_type\nHAVING COUNT(*) > 3"}
{"answer":"SELECT Height, Weight FROM people ORDER BY Height DESC","question":"List the height and weight of people in descending order of height.","context":"CREATE TABLE people (Height VARCHAR, Weight VARCHAR)","generation":"SELECT Height, Weight\nFROM people\nORDER BY Height DESC"}
{"answer":"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK","question":"What are the durations of the longest and the shortest tracks in milliseconds?","context":"CREATE TABLE TRACK (Milliseconds INTEGER)","generation":"SELECT Milliseconds,\n       RANK() OVER (ORDER BY Milliseconds DESC) AS Rank\nFROM TRACK\nORDER BY Rank ASC\nLIMIT 2"}
{"answer":"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Brazil\"","question":"Find the first names of all customers that live in Brazil and have an invoice.","context":"CREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)","generation":"SELECT CUSTOMER.FirstName\nFROM CUSTOMER\nINNER JOIN INVOICE ON CUSTOMER.CustomerId = INVOICE.CustomerId\nWHERE CUSTOMER.country = 'Brazil'"}
{"answer":"SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common apartment type code among apartments with more than 1 bathroom.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count INTEGER)","generation":"SELECT apt_type_code\nFROM Apartments\nWHERE bathroom_count > 1\nGROUP BY apt_type_code\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = \"Nokia Corporation\" AND T1.Type <> \"Text\"","question":"List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT phone.Hardware_Model_name\nFROM phone\nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode\nWHERE screen_mode.Type != 'Text' AND phone.Hardware_Model_name LIKE 'Nokia Corporation%'"}
{"answer":"SELECT COUNT(*) FROM county_public_safety","question":"How many counties are there?","context":"CREATE TABLE county_public_safety (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM county_public_safety"}
{"answer":"SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID","question":"Show the title and publication dates of books.","context":"CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)","generation":"SELECT book.Title, publication.Publication_Date\nFROM book\nJOIN publication\nON book.Book_ID = publication.Book_ID"}
{"answer":"SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num","question":"What is the first names of the professors from the history department who do not teach a class.","context":"CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT DISTINCT e.emp_fname\nFROM professor p\nJOIN department d ON p.dept_code = d.dept_code\nJOIN employee e ON p.emp_num = e.emp_num\nLEFT JOIN class c ON p.prof_num = c.prof_num\nWHERE d.dept_name = 'History'\nAND c.prof_num IS NULL"}
{"answer":"SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121","question":"Find the id of courses which are registered or attended by student whose id is 121?","context":"CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)","generation":"SELECT course_id\nFROM student_course_attendance\nWHERE student_id = 121\nUNION\nSELECT course_id\nFROM student_course_registrations\nWHERE student_id = 121"}
{"answer":"SELECT COUNT(*) FROM Rooms WHERE bedType = \"King\"","question":"Find the number of rooms with a king bed.","context":"CREATE TABLE Rooms (bedType VARCHAR)","generation":"SELECT COUNT(*)\nFROM Rooms\nWHERE bedType = 'king'"}
{"answer":"SELECT SUM(beds) FROM Rooms WHERE bedtype = 'King'","question":"How many king beds are there?","context":"CREATE TABLE Rooms (beds INTEGER, bedtype VARCHAR)","generation":"SELECT COUNT(*)\nFROM Rooms\nWHERE bedtype = 'king'"}
{"answer":"SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\"","question":"What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?","context":"CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)","generation":"SELECT AVG(TRACK.Duration)\nFROM TRACK\nJOIN GENRE ON TRACK.GenreId = GENRE.GenreId\nWHERE GENRE.Name IN ('Latin', 'Pop')"}
{"answer":"SELECT T1.club_id, T1.club_name, COUNT(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id","question":"How many coaches does each club has? List the club id, name and the number of coaches.","context":"CREATE TABLE club (club_id VARCHAR, club_name VARCHAR); CREATE TABLE coach (club_id VARCHAR)","generation":"SELECT club.club_id, club.club_name, COUNT(coach.club_id) AS coach_count\nFROM club\nLEFT JOIN coach ON club.club_id = coach.club_id\nGROUP BY club.club_id, club.club_name\nORDER BY club.club_id"}
{"answer":"SELECT apt_number FROM Apartments ORDER BY room_count","question":"Return all the apartment numbers sorted by the room count in ascending order.","context":"CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)","generation":"SELECT apt_number\nFROM Apartments\nORDER BY room_count ASC"}
{"answer":"SELECT t2.state_province_county, COUNT(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county","question":"List the state names and the number of customers living in each state.","context":"CREATE TABLE customer_addresses (address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR)","generation":"SELECT state_province_county, COUNT(*) AS number_of_customers\nFROM addresses\nJOIN customer_addresses ON addresses.address_id = customer_addresses.address_id\nGROUP BY state_province_county\nORDER BY number_of_customers DESC"}
{"answer":"SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = \"Graphics\" OR t2.Company_name = \"Nokia Corporation\"","question":"List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"","context":"CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT phone.Hardware_Model_name\nFROM phone\nJOIN screen_mode ON phone.screen_mode = screen_mode.Type\nWHERE screen_mode.Graphics_mode = 'Yes' OR screen_mode.Type = 'Graphics'"}
{"answer":"SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY COUNT(*) LIMIT 1","question":"Which school has the smallest amount of professors?","context":"CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)","generation":"SELECT school_code\nFROM department\nWHERE school_code IN (\n  SELECT school_code\n  FROM department\n  GROUP BY school_code\n  HAVING COUNT(*) = (\n    SELECT MIN(COUNT(*))\n    FROM department\n    GROUP BY school_code\n  )\n)"}
{"answer":"SELECT T2.account_name, T1.account_id, COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id","question":"Show the account name, id and the number of transactions for each account.","context":"CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)","generation":"SELECT Accounts.account_name, Accounts.account_id, COUNT(Financial_transactions.account_id)\nFROM Accounts\nLEFT JOIN Financial_transactions\nON Accounts.account_id = Financial_transactions.account_id\nGROUP BY Accounts.account_name, Accounts.account_id\n[\/SQL]"}
{"answer":"SELECT Pilot_name FROM pilot WHERE Team = \"Bradley\" OR Team = \"Fordham\"","question":"Show the names of pilots from team \"Bradley\" or \"Fordham\".","context":"CREATE TABLE pilot (Pilot_name VARCHAR, Team VARCHAR)","generation":"SELECT Pilot_name\nFROM pilot\nWHERE Team = \"Bradley\" OR Team = \"Fordham\""}
{"answer":"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country","question":"What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.","context":"CREATE TABLE perpetrator (Country VARCHAR)","generation":"SELECT Country, COUNT(*) AS NumberOfPerpetrators\nFROM perpetrator\nGROUP BY Country\nORDER BY NumberOfPerpetrators DESC"}
{"answer":"SELECT i_id FROM item WHERE title = \"orange\"","question":"Find the id of the item whose title is \"orange\".","context":"CREATE TABLE item (i_id VARCHAR, title VARCHAR)","generation":"SELECT i_id\nFROM item\nWHERE title = 'orange'"}
{"answer":"SELECT COUNT(DISTINCT T2.id), COUNT(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name","question":"Find the total number of students and total number of instructors for each department.","context":"CREATE TABLE department (dept_name VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR); CREATE TABLE instructor (dept_name VARCHAR, id VARCHAR)","generation":"SELECT dept_name, COUNT(DISTINCT id) AS total_students, COUNT(DISTINCT instructor.id) AS total_instructors\nFROM department\nLEFT JOIN student ON department.dept_name = student.dept_name\nLEFT JOIN instructor ON department.dept_name = instructor.dept_name\nGROUP BY dept_name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the department table with the student and instructor tables. The COUNT(DISTINCT id) function counts the number of unique student and instructor IDs for each department. The GROUP BY clause groups the results by department name.\n\n### Query Breakdown\n- SELECT dept_name, COUNT(DISTINCT id) AS total_students, COUNT(DISTINCT instructor.id) AS total_instructors\n    - Selects the department name and the total number of students and instructors for each department.\n- FROM department\n    - Specifies the department table as the source of the data.\n- LEFT JOIN student ON department.dept_name = student.dept_name\n    - Joins the student table to the department table on the dept_name column.\n- LEFT JOIN instructor ON department.dept_name = instructor.dept_name\n    - Joins the instructor table to the department table on the dept_name column.\n- GROUP BY dept_name\n    - Groups the results by department name.\n\n### Constraints\n- The database schema is given.\n- The query should run on a database with the given schema.\n- The query should answer [QUESTION]Find the total number of students and total number of instructors for each department.[\/QUESTION]\n\n### Scenario\n-"}
{"answer":"SELECT LOCATION, COUNT(*) FROM performance GROUP BY LOCATION","question":"Show different locations and the number of performances at each location.","context":"CREATE TABLE performance (LOCATION VARCHAR)","generation":"SELECT LOCATION, COUNT(*) AS COUNT\nFROM performance\nGROUP BY LOCATION\nORDER BY COUNT DESC"}
{"answer":"SELECT campus FROM campuses WHERE YEAR < 1800","question":"Find the name of the campuses opened before 1800.","context":"CREATE TABLE campuses (campus VARCHAR, YEAR INTEGER)","generation":"SELECT campus\nFROM campuses\nWHERE YEAR < 1800"}
{"answer":"SELECT T3.Party_Theme, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID","question":"Show the themes of parties and the names of the party hosts.","context":"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_Theme VARCHAR, Party_ID VARCHAR)","generation":"SELECT party.Party_Theme, host.Name\nFROM party\nJOIN party_host ON party.Party_ID = party_host.Party_ID\nJOIN host ON party_host.Host_ID = host.Host_ID"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1","question":"What is the name of the body builder with the greatest body weight?","context":"CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)","generation":"SELECT people.Name\nFROM body_builder\nJOIN people ON body_builder.People_ID = people.People_ID\nORDER BY people.Weight DESC\nLIMIT 1"}
{"answer":"SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1","question":"which poll source does the highest oppose rate come from?","context":"CREATE TABLE candidate (poll_source VARCHAR, oppose_rate VARCHAR)","generation":"SELECT poll_source\nFROM candidate\nWHERE oppose_rate = (SELECT MAX(oppose_rate) FROM candidate)"}
{"answer":"SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common birth place of people?","context":"CREATE TABLE people (Birth_Place VARCHAR)","generation":"SELECT Birth_Place, COUNT(*) AS Count\nFROM people\nGROUP BY Birth_Place\nORDER BY Count DESC\nLIMIT 1"}
{"answer":"SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1","question":"What is the description of the type of the company who concluded its contracts most recently?","context":"CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_end_date VARCHAR); CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR, company_type_code VARCHAR); CREATE TABLE Ref_Company_Types (company_type_code VARCHAR)","generation":"SELECT company_type_code, company_type_description\nFROM Ref_Company_Types\nINNER JOIN Third_Party_Companies\nON Ref_Company_Types.company_type_code = Third_Party_Companies.company_type_code\nWHERE Third_Party_Companies.company_id = (\n    SELECT maintenance_contract_company_id\n    FROM Maintenance_Contracts\n    WHERE contract_end_date = (\n        SELECT MAX(contract_end_date)\n        FROM Maintenance_Contracts\n    )\n)"}
{"answer":"SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1","question":"Find id of the candidate who most recently accessed the course?","context":"CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)","generation":"SELECT candidate_id\nFROM candidate_assessments\nWHERE assessment_date = (\n    SELECT MAX(assessment_date)\n    FROM candidate_assessments\n)\n[\/SQL]\n\n### Explanation\nThe query first selects the maximum assessment date from the candidate_assessments table.\n\nThe query then selects the candidate_id from the candidate_assessments table where the assessment_date is equal to the maximum assessment date.\n\nThe query ends with \""}
{"answer":"SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3","question":"Show teams that have suffered more than three eliminations.","context":"CREATE TABLE elimination (Team VARCHAR)","generation":"SELECT Team\nFROM elimination\nGROUP BY Team\nHAVING COUNT(Team) > 3"}
{"answer":"SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"","question":"What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?","context":"CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (ROM_MiB INTEGER, Model_name VARCHAR)","generation":"SELECT AVG(ROM_MiB)\nFROM phone\nJOIN chip_model ON phone.chip_model = chip_model.Model_name\nWHERE Company_name = 'Nokia Corporation'"}
{"answer":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance","question":"Find the name of accounts whose checking balance is higher than corresponding saving balance.","context":"CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance INTEGER)","generation":"SELECT name\nFROM accounts\nWHERE checking.balance > savings.balance"}
{"answer":"SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(*) LIMIT 1","question":"Which staff handled least number of payments? List the full name and the id.","context":"CREATE TABLE payment (staff_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)","generation":"SELECT staff.first_name, staff.last_name, staff.staff_id\nFROM staff\nORDER BY COUNT(payment.staff_id) ASC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM artist","question":"How many artists do we have?","context":"CREATE TABLE artist (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM artist"}
{"answer":"SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes LIMIT 1","question":"What is the party of the representative that has the smallest number of votes.","context":"CREATE TABLE representative (Party VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)","generation":"SELECT Party\nFROM representative\nWHERE Representative_ID IN (\n  SELECT Representative_ID\n  FROM election\n  GROUP BY Representative_ID\n  HAVING COUNT(*) = (\n    SELECT MIN(COUNT(*))\n    FROM election\n    GROUP BY Representative_ID\n  )\n)"}
{"answer":"SELECT company, main_industry FROM company WHERE headquarters <> 'USA'","question":"Show the company name and the main industry for all companies whose headquarters are not from USA.","context":"CREATE TABLE company (company VARCHAR, main_industry VARCHAR, headquarters VARCHAR)","generation":"SELECT company, main_industry\nFROM company\nWHERE headquarters NOT LIKE 'USA'"}
{"answer":"SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code","question":"Show all card type codes and the number of cards in each type.","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT card_type_code, COUNT(*)\nFROM Customers_cards\nGROUP BY card_type_code\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Returns all columns from the table.\n- COUNT(*): Returns the number of rows in the table.\n- GROUP BY: Groups the rows by the card type code.\n\nThe query will return the following result:\n[TABLE]\ncard_type_code | COUNT(*)\n-------------- | --------\nVISA | 10\nMASTERCARD | 15\nAMEX | 5\n[\/TABLE]"}
{"answer":"SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1","question":"Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count VARCHAR, bedroom_count VARCHAR, room_count INTEGER)","generation":"SELECT apt_type_code, bathroom_count, bedroom_count\nFROM Apartments\nWHERE room_count = (SELECT MAX(room_count) FROM Apartments)"}
{"answer":"SELECT headquarters, COUNT(*) FROM company GROUP BY headquarters","question":"List all headquarters and the number of companies in each headquarter.","context":"CREATE TABLE company (headquarters VARCHAR)","generation":"SELECT headquarters, COUNT(*) AS number_of_companies\nFROM company\nGROUP BY headquarters\nORDER BY headquarters\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: retrieves data from the database. In this case, it retrieves the headquarters and the number of companies in each headquarter.\n- COUNT(*): counts the number of rows in the table.\n- GROUP BY: groups the data by the specified column. In this case, it groups the data by headquarters.\n- ORDER BY: sorts the data by the specified column. In this case, it sorts the data by headquarters.\n\n### Example\nThe following example demonstrates how to use the query to answer [QUESTION]List all headquarters and the number of companies in each headquarter.[\/QUESTION]\n[SQL]\nSELECT headquarters, COUNT(*) AS number_of_companies\nFROM company\nGROUP BY headquarters\nORDER BY headquarters\n[\/SQL]\n\n### Example output\nThe following is an example of the output of the query:\n[SQL]\nheadquarters | number_of_companies\n-------------|--------------------\nNew York     | 2\nParis        | 1\n[\/SQL]\n\n### Constraints\n- The database schema is given.\n- The query should be written in standard SQL.\n- The query should not use any proprietary SQL extensions.\n- The query should be able to run on any database that follows the given schema.\n- The query should not use any external data sources.\n- The query should not use any external libraries or frameworks.\n- The query should not use any external data sources.\n- The query should not use any external libraries or frameworks.\n- The query should not use any external data sources.\n- The query should not use any external libraries"}
{"answer":"SELECT COUNT(DISTINCT Governor) FROM party","question":"How many distinct governors are there?","context":"CREATE TABLE party (Governor VARCHAR)","generation":"SELECT COUNT(DISTINCT Governor)\nFROM party"}
{"answer":"SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'","question":"Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.","context":"CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR)","generation":"SELECT Accounts.account_id, Accounts.account_name, Accounts.other_account_details\nFROM Accounts\nINNER JOIN Customers\nON Accounts.customer_id = Customers.customer_id\nWHERE Customers.customer_first_name = 'Meaghan'"}
{"answer":"SELECT document_id, COUNT(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id","question":"For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.","context":"CREATE TABLE Circulation_History (document_id VARCHAR, employee_id VARCHAR)","generation":"SELECT document_id, COUNT(DISTINCT employee_id) AS number_of_employees\nFROM Circulation_History\nGROUP BY document_id\nORDER BY document_id\n[\/SQL]"}
{"answer":"SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"University of Oxford\"","question":"Who belong to the institution \"University of Oxford\"? Show the first names and last names.","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)","generation":"SELECT authors.fname, authors.lname\nFROM authors\nJOIN authorship ON authors.authid = authorship.authid\nJOIN inst ON authorship.instid = inst.instid\nWHERE inst.name = \"University of Oxford\""}
{"answer":"SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History'","question":"What is the id of the instructor who advises of all students from History department?","context":"CREATE TABLE advisor (s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)","generation":"SELECT s_id\nFROM advisor\nWHERE s_id IN (SELECT id FROM student WHERE dept_name = 'History')"}
{"answer":"SELECT MAX(booked_count), MIN(booked_count), AVG(booked_count) FROM products_booked","question":"What are the maximum, minimum, and average booked count for the products booked?","context":"CREATE TABLE products_booked (booked_count INTEGER)","generation":"SELECT\n  MAX(booked_count) AS max_booked_count,\n  MIN(booked_count) AS min_booked_count,\n  AVG(booked_count) AS avg_booked_count\nFROM\n  products_booked"}
{"answer":"SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id","question":"Show the account id and the number of transactions for each account","context":"CREATE TABLE Financial_transactions (account_id VARCHAR)","generation":"SELECT account_id, COUNT(*) AS number_of_transactions\nFROM Financial_transactions\nGROUP BY account_id\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the Financial_transactions table by the account_id column. The COUNT(*) function counts the number of rows in each group. The AS clause renames the column to number_of_transactions."}
{"answer":"SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb ,  Becker and Wyman'","question":"What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?","context":"CREATE TABLE customer_master_index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE cmi_cross_references (source_system_code VARCHAR, master_customer_id VARCHAR)","generation":"SELECT DISTINCT source_system_code\nFROM cmi_cross_references\nWHERE master_customer_id IN (\n  SELECT master_customer_id\n  FROM customer_master_index\n  WHERE cmi_details LIKE '%Gottlieb, Becker and Wyman%'\n)"}
{"answer":"SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5","question":"Find the names and publication dates of all catalogs that have catalog level number greater than 5.","context":"CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)","generation":"SELECT catalog_name, date_of_publication\nFROM catalogs\nWHERE catalog_id IN (\n  SELECT catalog_id\n  FROM catalog_structure\n  WHERE catalog_level_number > 5\n)"}
{"answer":"SELECT Character, Duration FROM actor","question":"What are the characters and duration of actors?","context":"CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)","generation":"SELECT Character, Duration\nFROM actor"}
{"answer":"SELECT COUNT(*) FROM climber","question":"How many climbers are there?","context":"CREATE TABLE climber (Id VARCHAR)","generation":"SELECT COUNT(*) FROM climber"}
{"answer":"SELECT Age FROM people ORDER BY Height DESC LIMIT 1","question":"What is the age of the tallest person?","context":"CREATE TABLE people (Age VARCHAR, Height VARCHAR)","generation":"SELECT Age\nFROM people\nWHERE Height = (SELECT MAX(Height) FROM people)"}
{"answer":"SELECT T1.cmi_cross_ref_id, T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING COUNT(*) >= 1","question":"What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.","context":"CREATE TABLE Council_Tax (cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)","generation":"SELECT cmi_cross_ref_id, source_system_code\nFROM CMI_Cross_References\nWHERE cmi_cross_ref_id IN (\n    SELECT cmi_cross_ref_id\n    FROM Council_Tax\n)"}
{"answer":"SELECT departure_date, arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"","question":"Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.","context":"CREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)","generation":"SELECT departure_date, arrival_date\nFROM Flight\nWHERE origin = 'Los Angeles'\nAND destination = 'Honolulu'"}
{"answer":"SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name and address of the department that has the highest number of students.","context":"CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)","generation":"SELECT department.dept_name, department.dept_address\nFROM department\nJOIN student ON department.dept_code = student.dept_code\nGROUP BY department.dept_name, department.dept_address\nORDER BY COUNT(student.dept_code) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT city_code FROM Student","question":"Show all cities where students live.","context":"CREATE TABLE Student (city_code VARCHAR)","generation":"SELECT city.name\nFROM city\nJOIN student ON city.code = student.city_code\n[\/SQL]\n\n### Explanation\nThe query joins the city table with the student table on the city code. The result is all cities where students live.\n\n### Join\nThe join is performed on the city code. The city code is a foreign key in the student table.\n\n### SELECT\nThe select clause retrieves the name of the city.\n\n### FROM\nThe from clause specifies the tables to be queried. The city table is joined with the student table.\n\n### WHERE\nThe where clause is not used in this query.\n\n### GROUP BY\nThe group by clause is not used in this query.\n\n### HAVING\nThe having clause is not used in this query.\n\n### ORDER BY\nThe order by clause is not used in this query.\n\n### LIMIT\nThe limit clause is not used in this query.\n\n### UNION\nThe union clause is not used in this query.\n\n### INTERSECT\nThe intersect clause is not used in this query.\n\n### EXCEPT\nThe except clause is not used in this query.\n\n### AS\nThe as clause is not used in this query.\n\n### Alias\nThe alias clause is not used in this query.\n\n### Index\nThe index clause is not used in this query.\n\n### Join Type\nThe join type clause is not used in this query.\n\n### ON\nThe on clause is used to specify the join condition.\n\n### USING\nThe using clause is not used in this query.\n\n### NATURAL\nThe natural clause is not used in this query.\n\n### INNER\nThe inner clause is"}
{"answer":"SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\"","question":"How many papers are published by the institution \"Tokohu University\"?","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT COUNT(*)\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  WHERE instid = 'Tokohu University'\n)"}
{"answer":"SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common interaction type between enzymes and medicine? And how many are there?","context":"CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR)","generation":"SELECT interaction_type, COUNT(*) AS count\nFROM medicine_enzyme_interaction\nGROUP BY interaction_type\nORDER BY count DESC\nLIMIT 1"}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\"","question":"List all tracks bought by customer Daan Peeters.","context":"CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT tracks.name\nFROM invoices\nJOIN invoice_lines ON invoices.id = invoice_lines.invoice_id\nJOIN tracks ON invoice_lines.track_id = tracks.id\nJOIN customers ON invoices.customer_id = customers.id\nWHERE customers.first_name = 'Daan' AND customers.last_name = 'Peeters'"}
{"answer":"SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1","question":"List the main industry with highest total market value and its number of companies.","context":"CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)","generation":"SELECT main_industry, COUNT(*) AS number_of_companies\nFROM company\nGROUP BY main_industry\nORDER BY SUM(market_value) DESC\nLIMIT 1"}
{"answer":"SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa'","question":"Where does the staff member with the first name Elsa live?","context":"CREATE TABLE staff (address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)","generation":"SELECT address\nFROM staff\nJOIN address ON staff.address_id = address.address_id\nWHERE first_name = 'Elsa'"}
{"answer":"SELECT Name FROM phone WHERE Carrier = \"Sprint\" OR Carrier = \"TMobile\"","question":"Show the names of phones with carrier either \"Sprint\" or \"TMobile\".","context":"CREATE TABLE phone (Name VARCHAR, Carrier VARCHAR)","generation":"SELECT Name\nFROM phone\nWHERE Carrier IN ('Sprint', 'TMobile')"}
{"answer":"SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"","question":"Find all the papers published by the institution \"Google\".","context":"CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  WHERE instid = 'Google'\n)"}
{"answer":"SELECT T2.name, COUNT(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id","question":"Show all artist names and the number of exhibitions for each artist.","context":"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (artist_id VARCHAR)","generation":"SELECT artist.name, COUNT(exhibition.artist_id) AS number_of_exhibitions\nFROM artist\nLEFT JOIN exhibition ON artist.artist_id = exhibition.artist_id\nGROUP BY artist.name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the artist and exhibition tables. The GROUP BY clause groups the results by artist name, and the COUNT(exhibition.artist_id) function counts the number of rows in the joined table for each artist. The AS number_of_exhibitions clause renames the COUNT function result."}
{"answer":"SELECT Name FROM county_public_safety ORDER BY Population DESC","question":"List the names of counties in descending order of population.","context":"CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)","generation":"SELECT Name\nFROM county_public_safety\nORDER BY Population DESC"}
{"answer":"SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = \"Accounting\"","question":"Find the number of professors in accounting department.","context":"CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM professor\nWHERE dept_code = 'ACCT'"}
{"answer":"SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) LIMIT 1","question":"Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.","context":"CREATE TABLE phone (Company_name VARCHAR)","generation":"SELECT Company_name, COUNT(Company_name)\nFROM phone\nGROUP BY Company_name\nORDER BY COUNT(Company_name)\nLIMIT 1"}
{"answer":"SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3","question":"List the distinct ranges of the mountains with the top 3 prominence.","context":"CREATE TABLE mountain (Range VARCHAR, Prominence VARCHAR)","generation":"SELECT DISTINCT Range, Prominence\nFROM mountain\nORDER BY Prominence DESC\nLIMIT 3"}
{"answer":"SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)","question":"Show names for all aircrafts with distances more than the average.","context":"CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)","generation":"SELECT name\nFROM Aircraft\nWHERE distance > (SELECT AVG(distance) FROM Aircraft)"}
{"answer":"SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"","question":"Find the dates of assessment notes for students with first name \"Fanny\".","context":"CREATE TABLE Students (student_id VARCHAR, first_name VARCHAR); CREATE TABLE Assessment_Notes (date_of_notes VARCHAR, student_id VARCHAR)","generation":"SELECT date_of_notes\nFROM Assessment_Notes\nINNER JOIN Students\nON Assessment_Notes.student_id = Students.student_id\nWHERE Students.first_name = 'Fanny'"}
{"answer":"SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department","question":"What are the maximum and minimum budget of the departments?","context":"CREATE TABLE department (budget_in_billions INTEGER)","generation":"SELECT MAX(budget_in_billions), MIN(budget_in_billions)\nFROM department"}
{"answer":"SELECT director FROM Movie WHERE director <> \"null\" GROUP BY director HAVING COUNT(*) = 1","question":"What are the names of the directors who made exactly one movie excluding director NULL?","context":"CREATE TABLE Movie (director VARCHAR)","generation":"SELECT director\nFROM Movie\nGROUP BY director\nHAVING COUNT(*) = 1\nAND director IS NOT NULL"}
{"answer":"SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common nationality for journalists.","context":"CREATE TABLE journalist (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(*) AS Count\nFROM journalist\nGROUP BY Nationality\nORDER BY Count DESC\nLIMIT 1"}
{"answer":"SELECT Fname, Lname FROM Student WHERE Major = 600","question":"List all students' first names and last names who majored in 600.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Major VARCHAR)","generation":"SELECT Fname, Lname\nFROM Student\nWHERE Major = '600'"}
{"answer":"SELECT COUNT(*) FROM building WHERE height_feet > (SELECT AVG(height_feet) FROM building) OR floors > (SELECT AVG(floors) FROM building)","question":"Show the number of buildings with a height above the average or a number of floors above the average.","context":"CREATE TABLE building (height_feet INTEGER, floors INTEGER)","generation":"SELECT COUNT(*)\nFROM building\nWHERE height_feet > (SELECT AVG(height_feet) FROM building)\nOR floors > (SELECT AVG(floors) FROM building)"}
{"answer":"SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30","question":"Show the country where people older than 30 and younger than 25 are from.","context":"CREATE TABLE people (country VARCHAR, age INTEGER)","generation":"SELECT country\nFROM people\nWHERE age > 30 AND age < 25"}
{"answer":"SELECT Date FROM perpetrator ORDER BY Killed DESC","question":"List the date of perpetrators in descending order of the number of people killed.","context":"CREATE TABLE perpetrator (Date VARCHAR, Killed VARCHAR)","generation":"SELECT Date, COUNT(Killed) AS 'Number of People Killed'\nFROM perpetrator\nGROUP BY Date\nORDER BY COUNT(Killed) DESC"}
{"answer":"SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","question":"Show names of cities and names of counties they are in.","context":"CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)","generation":"SELECT city.Name, county_public_safety.Name\nFROM city\nJOIN county_public_safety\nON city.County_ID = county_public_safety.County_ID"}
{"answer":"SELECT COUNT(*) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = \"England\"","question":"How many leagues are there in England?","context":"CREATE TABLE League (country_id VARCHAR); CREATE TABLE Country (id VARCHAR, name VARCHAR)","generation":"SELECT COUNT(*)\nFROM League\nWHERE country_id = (SELECT id FROM Country WHERE name = 'England')"}
{"answer":"SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches)","question":"Find the name of instructors who didn't teach any courses?","context":"CREATE TABLE teaches (name VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE id NOT IN (SELECT id FROM teaches)"}
{"answer":"SELECT COUNT(DISTINCT party_name) FROM party","question":"How many parties do we have?","context":"CREATE TABLE party (party_name VARCHAR)","generation":"SELECT COUNT(*)\nFROM party"}
{"answer":"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10","question":"List title of albums have the number of tracks greater than 10.","context":"CREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)","generation":"SELECT albums.title\nFROM albums\nJOIN tracks ON albums.id = tracks.album_id\nGROUP BY albums.title\nHAVING COUNT(tracks.album_id) > 10"}
{"answer":"SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id","question":"List the employees who have not showed up in any circulation history of documents. List the employee's name.","context":"CREATE TABLE Circulation_History (employee_name VARCHAR); CREATE TABLE Employees (employee_name VARCHAR)","generation":"SELECT employee_name\nFROM Employees\nWHERE employee_name NOT IN (SELECT employee_name\n                            FROM Circulation_History)"}
{"answer":"SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1","question":"What are the birth date and birth place of the body builder with the highest total points?","context":"CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, Birth_Place VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Birth_Date, people.Birth_Place\nFROM body_builder\nINNER JOIN people ON body_builder.People_ID = people.People_ID\nWHERE body_builder.Total = (SELECT MAX(Total) FROM body_builder)\n[\/SQL]\n\n### Explanation\nThe query first joins the body_builder table with the people table on the People_ID column. This allows us to access the birth date and birth place of the body builder with the highest total points.\n\nThe query then uses a subquery to find the maximum total points. This subquery selects the maximum total points from the body_builder table and returns it as a single value.\n\nFinally, the query filters the joined table to only include rows where the total points are equal to the maximum total points. This leaves us with the birth date and birth place of the body builder with the highest total points.\n\n### Example\nSuppose the body_builder table contains the following data:\n\n| People_ID | Total |\n| --- | --- |\n| 1 | 100 |\n| 2 | 80 |\n| 3 | 90 |\n| 4 | 120 |\n\nAnd the people table contains the following data:\n\n| People_ID | Birth_Date | Birth_Place |\n| --- | --- | --- |\n| 1 | 1990-01-01 | New York |\n| 2 | 1995-05-20 | Los Angeles |\n| 3 | 1990-01-01 | New York |\n| 4 | 1995-05-20 | Los Angeles |\n\nThe query would return the following result:\n\n| Birth"}
{"answer":"SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology'","question":"Find the title of course that is provided by both Statistics and Psychology departments.","context":"CREATE TABLE course (title VARCHAR, dept_name VARCHAR)","generation":"SELECT course.title\nFROM course\nWHERE course.dept_name IN ('Statistics', 'Psychology')\nGROUP BY course.title\nHAVING COUNT(DISTINCT course.dept_name) = 2"}
{"answer":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC","question":"Show names of actors in descending order of the year their musical is awarded.","context":"CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT actor.Name\nFROM actor\nJOIN musical ON actor.Musical_ID = musical.Musical_ID\nORDER BY musical.Year DESC"}
{"answer":"SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown","question":"What are the hometowns of gymnasts and the corresponding number of gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT Hometown, COUNT(Gymnast_ID)\nFROM people\nJOIN gymnast ON people.People_ID = gymnast.Gymnast_ID\nGROUP BY Hometown\n[\/SQL]\n\n### Explanation\nThe query joins the people table with the gymnast table on the People_ID column. The query then groups the results by the Hometown column and counts the number of gymnasts for each hometown. The results are then returned in a table with two columns: Hometown and the corresponding number of gymnasts."}
{"answer":"SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1","question":"Find the name and gender of the candidate who got the highest support rate.","context":"CREATE TABLE candidate (people_id VARCHAR, support_rate VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)","generation":"SELECT people.name, people.sex\nFROM candidate\nINNER JOIN people\nON candidate.people_id = people.people_id\nWHERE candidate.support_rate = (SELECT MAX(candidate.support_rate) FROM candidate)"}
{"answer":"SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id","question":"Show the name of each county along with the corresponding number of delegates from that county.","context":"CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT County_name, COUNT(DISTINCT District) AS Number_of_delegates\nFROM county\nJOIN election ON county.County_id = election.District\nGROUP BY County_name\nORDER BY Number_of_delegates DESC"}
{"answer":"SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"","question":"What is the average unit price of rock tracks?","context":"CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)","generation":"SELECT AVG(UnitPrice)\nFROM TRACK\nWHERE GenreId IN (SELECT GenreId\n                  FROM GENRE\n                  WHERE Name = 'Rock')"}
{"answer":"SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\"","question":"What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?","context":"CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR)","generation":"SELECT chip_model, screen_mode\nFROM phone\nWHERE Hardware_Model_name = 'LG-P760'"}
{"answer":"SELECT COUNT(DISTINCT payment_method) FROM customers","question":"How many different payment methods are there?","context":"CREATE TABLE customers (payment_method VARCHAR)","generation":"SELECT COUNT(DISTINCT payment_method)\nFROM customers"}
{"answer":"SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE Budgeted > 6000 OR YEAR < 2003 ORDER BY T2.total_budget_percent_invested, T2.total_budget_percent_budgeted","question":"List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.","context":"CREATE TABLE school (School_name VARCHAR, Mascot VARCHAR, IHSAA_Football_Class VARCHAR, school_id VARCHAR); CREATE TABLE budget (school_id VARCHAR, total_budget_percent_invested VARCHAR, total_budget_percent_budgeted VARCHAR)","generation":"SELECT school.School_name, school.Mascot, school.IHSAA_Football_Class\nFROM school\nINNER JOIN budget\nON school.school_id = budget.school_id\nWHERE budget.total_budget_percent_budgeted > 6000\nOR school.school_id IN (SELECT school_id\nFROM school\nWHERE school.school_id < 2003)\nORDER BY budget.total_budget_percent_invested DESC, budget.total_budget_percent_budgeted DESC"}
{"answer":"SELECT title FROM Movie WHERE director = \"James Cameron\" OR YEAR < 1980","question":"What are names of the movies that are either made before 1980 or directed by James Cameron?","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)","generation":"SELECT title\nFROM Movie\nWHERE YEAR < 1980\nOR director = 'James Cameron'"}
{"answer":"SELECT AVG(RAM_MiB) FROM chip_model WHERE NOT model_name IN (SELECT chip_model FROM phone)","question":"Find the average ram mib size of the chip models that are never used by any phone.","context":"CREATE TABLE chip_model (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR); CREATE TABLE phone (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR)","generation":"SELECT AVG(RAM_MiB)\nFROM chip_model\nWHERE chip_model NOT IN (SELECT chip_model FROM phone)"}
{"answer":"SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31","question":"What are the dates in which the mean sea level pressure was between 30.3 and 31?","context":"CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)","generation":"SELECT date\nFROM weather\nWHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31"}
{"answer":"SELECT DISTINCT card_type_code FROM Customers_Cards","question":"Show all card type codes.","context":"CREATE TABLE Customers_Cards (card_type_code VARCHAR)","generation":"SELECT card_type_code\nFROM Customers_Cards"}
{"answer":"SELECT Company, Investor FROM entrepreneur","question":"List the companies and the investors of entrepreneurs.","context":"CREATE TABLE entrepreneur (Company VARCHAR, Investor VARCHAR)","generation":"SELECT entrepreneur.Company, entrepreneur.Investor\nFROM entrepreneur"}
{"answer":"SELECT school_name FROM school ORDER BY school_name","question":"Show all school names in alphabetical order.","context":"CREATE TABLE school (school_name VARCHAR)","generation":"SELECT school_name\nFROM school\nORDER BY school_name ASC"}
{"answer":"SELECT COUNT(*) FROM address WHERE district = 'California'","question":"How many addresses are in the district of California?","context":"CREATE TABLE address (district VARCHAR)","generation":"SELECT COUNT(*)\nFROM address\nWHERE district = 'California'"}
{"answer":"SELECT T1.name, COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id","question":"For each user, find their name and the number of reviews written by them.","context":"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)","generation":"SELECT u.name, COUNT(r.u_id) AS num_reviews\nFROM useracct u\nLEFT JOIN review r ON u.u_id = r.u_id\nGROUP BY u.name\n[\/SQL]"}
{"answer":"SELECT COUNT(*) FROM useracct","question":"How many users are there?","context":"CREATE TABLE useracct (Id VARCHAR)","generation":"SELECT COUNT(*) FROM useracct"}
{"answer":"SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5","question":"What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.","context":"CREATE TABLE Movie (director VARCHAR, title VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)","generation":"SELECT director, title\nFROM Movie\nJOIN Rating\nON Movie.mID = Rating.mID\nWHERE stars = 5"}
{"answer":"SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"","question":"What is the gender of the student Linda Smith?","context":"CREATE TABLE Student (Sex VARCHAR, Fname VARCHAR, Lname VARCHAR)","generation":"SELECT Sex\nFROM Student\nWHERE Fname = 'Linda' AND Lname = 'Smith'"}
{"answer":"SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = \"null\"","question":"Find the names of all reviewers who have ratings with a NULL value for the date.","context":"CREATE TABLE Rating (rID VARCHAR); CREATE TABLE Reviewer (rID VARCHAR)","generation":"SELECT Reviewer.rID\nFROM Reviewer\nJOIN Rating ON Reviewer.rID = Rating.rID\nWHERE Rating.date IS NULL"}
{"answer":"SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\"","question":"Return the apartment numbers of the apartments with type code \"Flat\".","context":"CREATE TABLE Apartments (apt_number VARCHAR, apt_type_code VARCHAR)","generation":"SELECT apt_number\nFROM Apartments\nWHERE apt_type_code = 'Flat'"}
{"answer":"SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id","question":"Find the name and credit score of the customers who have some loans.","context":"CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)","generation":"SELECT customer.cust_name, customer.credit_score\nFROM customer\nINNER JOIN loan ON customer.cust_id = loan.cust_id\n[SQL]\n\n### Explanation\nThe query uses an INNER JOIN to combine the customer and loan tables based on the cust_id column. The resulting table will have all the rows from both tables where the cust_id values match. The query then selects the cust_name and credit_score columns from the resulting table.\n\n### Query Breakdown\n- SELECT customer.cust_name, customer.credit_score\nFROM customer\nINNER JOIN loan ON customer.cust_id = loan.cust_id\n\nThis query uses an INNER JOIN to combine the customer and loan tables based on the cust_id column. The resulting table will have all the rows from both tables where the cust_id values match. The query then selects the cust_name and credit_score columns from the resulting table.\n\n### Join Condition\nThe join condition is cust_id = cust_id. This condition ensures that only rows from both tables where the cust_id values match are included in the resulting table.\n\n### Result\nThe resulting table will have all the rows from both tables where the cust_id values match. The query then selects the cust_name and credit_score columns from the resulting table.\n\n### Expected Output\nThe output will be a table with two columns: cust_name and credit_score. The table will have all the rows from both tables where the cust_id values match.\n\n### Constraints\n- The query should be written in standard SQL\n- The query should not use any proprietary SQL extensions\n- The query should not use any external libraries or frameworks\n- The query should not use any temporary tables or variables\n- The query"}
{"answer":"SELECT COUNT(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Atsushi\" AND t1.lname = \"Ohori\"","question":"How many papers have \"Atsushi Ohori\" published?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT COUNT(*)\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  WHERE authid = 'Atsushi Ohori'\n)"}
{"answer":"SELECT COUNT(*) FROM ASSESSMENT_NOTES","question":"How many assessment notes are there in total?","context":"CREATE TABLE ASSESSMENT_NOTES (Id VARCHAR)","generation":"SELECT COUNT(*) FROM ASSESSMENT_NOTES"}
{"answer":"SELECT COUNT(*), T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id","question":"How many assets does each maintenance contract contain? List the number and the contract id.","context":"CREATE TABLE Assets (maintenance_contract_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_id VARCHAR)","generation":"SELECT COUNT(maintenance_contract_id), maintenance_contract_id\nFROM Assets\nGROUP BY maintenance_contract_id\nORDER BY maintenance_contract_id\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECT COUNT(maintenance_contract_id), maintenance_contract_id\nThis selects the number of assets in each maintenance contract and the maintenance contract id.\n- FROM Assets\nThis specifies the table to query.\n- GROUP BY maintenance_contract_id\nThis groups the results by the maintenance contract id.\n- ORDER BY maintenance_contract_id\nThis orders the results by the maintenance contract id.\n\n### Example\nThe following example demonstrates the query in action:\n[SQL]\nSELECT COUNT(maintenance_contract_id), maintenance_contract_id\nFROM Assets\nGROUP BY maintenance_contract_id\nORDER BY maintenance_contract_id\n[\/SQL]\n\n### Example Output\nThe following is an example of the output from the query:\n[SQL]\n+-----------------+-----------------+\n| COUNT(maintenance_contract_id) | maintenance_contract_id |\n+-----------------+-----------------+\n| 2 | 1 |\n| 1 | 2 |\n| 3 | 3 |\n+-----------------+-----------------+\n[\/SQL]\n\n### Constraints\n- The query will run on a database with the following schema:\nCREATE TABLE Assets (maintenance_contract_id VARCHAR)"}
{"answer":"SELECT fname FROM authors WHERE lname = \"Ueno\"","question":"What is the first name of the author with last name \"Ueno\"?","context":"CREATE TABLE authors (fname VARCHAR, lname VARCHAR)","generation":"SELECT fname\nFROM authors\nWHERE lname = 'Ueno'"}
{"answer":"SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'","question":"Find the location and all games score of the school that has Clemson as its team name.","context":"CREATE TABLE basketball_match (All_Games VARCHAR, school_id VARCHAR); CREATE TABLE university (location VARCHAR, school_id VARCHAR)","generation":"SELECT university.location, basketball_match.All_Games\nFROM basketball_match\nINNER JOIN university ON basketball_match.school_id = university.school_id\nWHERE basketball_match.All_Games = 'Clemson'"}
{"answer":"SELECT minister FROM party WHERE party_name <> 'Progress Party'","question":"Show all ministers who do not belong to Progress Party.","context":"CREATE TABLE party (minister VARCHAR, party_name VARCHAR)","generation":"SELECT minister\nFROM party\nWHERE party_name != 'Progress Party'"}
{"answer":"SELECT T2.dept_name, AVG(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY AVG(T1.stu_gpa) DESC LIMIT 1","question":"What is the name and the average gpa of department whose students have the highest average gpa?","context":"CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, dept_code VARCHAR)","generation":"SELECT d.dept_name, AVG(s.stu_gpa)\nFROM department d\nJOIN student s ON d.dept_code = s.dept_code\nGROUP BY d.dept_name\nORDER BY AVG(s.stu_gpa) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM tweets","question":"Find the number of tweets in record.","context":"CREATE TABLE tweets (Id VARCHAR)","generation":"SELECT COUNT(*) FROM tweets"}
{"answer":"SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2","question":"Show the name of colleges that have at least two players.","context":"CREATE TABLE match_season (College VARCHAR)","generation":"SELECT College\nFROM match_season\nGROUP BY College\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT Name FROM journalist WHERE Nationality = \"England\" OR Nationality = \"Wales\"","question":"Show the names of journalists from \"England\" or \"Wales\".","context":"CREATE TABLE journalist (Name VARCHAR, Nationality VARCHAR)","generation":"SELECT Name\nFROM journalist\nWHERE Nationality = 'England' OR Nationality = 'Wales'"}
{"answer":"SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id","question":"Find the last names of teachers who are not involved in any detention.","context":"CREATE TABLE Teachers (last_name VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR); CREATE TABLE Detention (teacher_id VARCHAR)","generation":"SELECT last_name\nFROM Teachers\nWHERE teacher_id NOT IN (SELECT teacher_id FROM Detention)"}
{"answer":"SELECT COUNT(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR","question":"Find the number of courses provided in each semester and year.","context":"CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)","generation":"SELECT SECTION.semester, SECTION.YEAR, COUNT(*) AS number_of_courses\nFROM SECTION\nGROUP BY SECTION.semester, SECTION.YEAR\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the SECTION table by the SECTION.semester and SECTION.YEAR columns. The COUNT(*) function counts the number of rows in each group. The query then selects the SECTION.semester, SECTION.YEAR, and the COUNT(*) as the number of courses provided in each semester and year."}
{"answer":"SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance","question":"What are the id of students who registered courses or attended courses?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT student_id\nFROM student_course_registrations\nUNION\nSELECT student_id\nFROM student_course_attendance"}
{"answer":"SELECT Name FROM TRACK WHERE Name LIKE '%you%'","question":"Find the names of all the tracks that contain the word \"you\".","context":"CREATE TABLE TRACK (Name VARCHAR)","generation":"SELECT Name\nFROM TRACK\nWHERE Name LIKE '%you%'"}
{"answer":"SELECT COUNT(*) FROM products WHERE NOT product_id IN (SELECT product_id FROM Order_items)","question":"How many products were not included in any order?","context":"CREATE TABLE products (product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR)","generation":"SELECT COUNT(*) AS number_of_products_not_in_any_order\nFROM products\nWHERE product_id NOT IN (SELECT product_id FROM Order_items)"}
{"answer":"SELECT first_name, last_name FROM Maintenance_Engineers WHERE NOT engineer_id IN (SELECT engineer_id FROM Engineer_Visits)","question":"Which engineers have never visited to maintain the assets? List the engineer first name and last name.","context":"CREATE TABLE Engineer_Visits (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)","generation":"SELECT Engineer_Visits.first_name, Engineer_Visits.last_name\nFROM Engineer_Visits\nLEFT JOIN Maintenance_Engineers\nON Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id\nWHERE Maintenance_Engineers.engineer_id IS NULL"}
{"answer":"SELECT COUNT(*) FROM Student","question":"How many students are there?","context":"CREATE TABLE Student (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Student"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1","question":"What is the customer id, first and last name with least number of accounts.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name\nFROM Customers\nORDER BY (SELECT COUNT(*) FROM Customers_cards WHERE Customers_cards.customer_id = Customers.customer_id) ASC\nLIMIT 1"}
{"answer":"SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'","question":"What is the phone number and postal code of the address 1031 Daugavpils Parkway?","context":"CREATE TABLE address (phone VARCHAR, postal_code VARCHAR, address VARCHAR)","generation":"SELECT phone, postal_code\nFROM address\nWHERE address = '1031 Daugavpils Parkway'"}
{"answer":"SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1","question":"What is the entry name of the most expensive catalog (in USD)?","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)","generation":"SELECT catalog_entry_name\nFROM catalog_contents\nWHERE price_in_dollars = (\n    SELECT MAX(price_in_dollars)\n    FROM catalog_contents\n)"}
{"answer":"SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = \"Violin\"","question":"Show the dates of performances with attending members whose roles are \"Violin\".","context":"CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Member_ID VARCHAR, Role VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT DISTINCT performance.Date\nFROM performance\nINNER JOIN member_attendance ON performance.Performance_ID = member_attendance.Performance_ID\nINNER JOIN member ON member_attendance.Member_ID = member.Member_ID\nWHERE member.Role = 'Violin'"}
{"answer":"SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB LIMIT 1","question":"Which model has the least amount of RAM? List the model name and the amount of RAM.","context":"CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR)","generation":"SELECT Model_name, RAM_MiB\nFROM chip_model\nORDER BY RAM_MiB\nLIMIT 1"}
{"answer":"SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB > 32","question":"List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.","context":"CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)","generation":"SELECT phone.Hardware_Model_name\nFROM phone\nJOIN chip_model ON phone.chip_model = chip_model.Model_name\nJOIN screen_mode ON chip_model.Model_name = screen_mode.Graphics_mode\nWHERE screen_mode.Type = \"Text\" OR chip_model.RAM_MiB > 32"}
{"answer":"SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"","question":"Hom many albums does the artist \"Metallica\" have?","context":"CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)","generation":"SELECT COUNT(*)\nFROM ALBUM\nWHERE ArtistId = 'Metallica'"}
{"answer":"SELECT County_name FROM county ORDER BY Population LIMIT 3","question":"Show the 3 counties with the smallest population.","context":"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)","generation":"SELECT County_name, Population\nFROM county\nORDER BY Population\nLIMIT 3"}
{"answer":"SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5","question":"What are the distinct hometowns of gymnasts with total points more than 57.5?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points INTEGER); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT DISTINCT people.Hometown\nFROM gymnast\nJOIN people ON gymnast.Gymnast_ID = people.People_ID\nWHERE gymnast.Total_Points > 57.5"}
{"answer":"SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'","question":"Find the name and email of the user whose name contains the word \u2018Swift\u2019.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)","generation":"SELECT name, email\nFROM user_profiles\nWHERE name LIKE '%Swift%'"}
{"answer":"SELECT Case_burden FROM county_public_safety ORDER BY Population DESC","question":"Show the case burden of counties in descending order of population.","context":"CREATE TABLE county_public_safety (Case_burden VARCHAR, Population VARCHAR)","generation":"SELECT Case_burden, Population\nFROM county_public_safety\nORDER BY Population DESC"}
{"answer":"SELECT Total FROM body_builder ORDER BY Total","question":"List the total scores of body builders in ascending order.","context":"CREATE TABLE body_builder (Total VARCHAR)","generation":"SELECT Total\nFROM body_builder\nORDER BY Total ASC"}
{"answer":"SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT RoomId, COUNT(RoomId) AS NumberOfReservations\nFROM Reservations\nGROUP BY RoomId\nORDER BY NumberOfReservations DESC\nLIMIT 1"}
{"answer":"SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the customer who has the most policies listed?","context":"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)","generation":"SELECT customer_name\nFROM customers\nWHERE customer_id IN (\n  SELECT customer_id\n  FROM customers_policies\n  GROUP BY customer_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\"","question":"What is the role of the employee named Koby?","context":"CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR); CREATE TABLE Employees (role_code VARCHAR, employee_name VARCHAR)","generation":"SELECT role_description\nFROM ROLES\nJOIN Employees\nON ROLES.role_code = Employees.role_code\nWHERE employee_name = 'Koby'"}
{"answer":"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height","question":"List the names of gymnasts in ascending order by their heights.","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Height VARCHAR)","generation":"SELECT Name\nFROM people\nJOIN gymnast\nON people.People_ID = gymnast.Gymnast_ID\nORDER BY Height ASC"}
{"answer":"SELECT city_code, COUNT(*) FROM Student GROUP BY city_code","question":"Show all cities and corresponding number of students.","context":"CREATE TABLE Student (city_code VARCHAR)","generation":"SELECT city_code, COUNT(*) AS number_of_students\nFROM Student\nGROUP BY city_code\nORDER BY number_of_students DESC"}
{"answer":"SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date LIMIT 1","question":"What is the first name and the last name of the customer who made the earliest rental?","context":"CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR); CREATE TABLE rental (customer_id VARCHAR, rental_date VARCHAR)","generation":"SELECT customer.first_name, customer.last_name\nFROM customer\nJOIN rental ON customer.customer_id = rental.customer_id\nORDER BY rental.rental_date ASC\nLIMIT 1"}
{"answer":"SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'","question":"List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.","context":"CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)","generation":"SELECT browser.name\nFROM browser\nJOIN accelerator_compatible_browser ON accelerator_compatible_browser.browser_id = browser.id\nJOIN web_client_accelerator ON web_client_accelerator.id = accelerator_compatible_browser.accelerator_id\nWHERE web_client_accelerator.name = 'CACHEbox'\nAND web_client_accelerator.name = 'Fasterfox'"}
{"answer":"SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10","question":"Find the zip code in which the average mean visibility is lower than 10.","context":"CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)","generation":"SELECT zip_code\nFROM weather\nWHERE mean_visibility_miles < 10"}
{"answer":"SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num","question":"Find the first names and offices of all instructors who have taught some course and also find the course description.","context":"CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT emp_fname, prof_office, crs_description\nFROM professor\nJOIN CLASS ON prof_num = emp_num\nJOIN course ON crs_code = crs_code\n[SQL]\n\n### Explanation\nThe query joins the tables professor, class, and course to find the first names and offices of all instructors who have taught some course and also find the course description.\n\n### Query Breakdown\n- The first line of the query joins the tables professor and class on the column prof_num, which is the primary key of the professor table and the foreign key of the class table.\n- The second line of the query joins the tables class and course on the column crs_code, which is the primary key of the course table and the foreign key of the class table.\n- The third line of the query selects the first name, office, and course description from the tables professor, class, and course.\n- The fourth line of the query ends the query with \""}
{"answer":"SELECT forename, surname FROM drivers WHERE nationality = \"German\"","question":"Find the forename and surname of drivers whose nationality is German?","context":"CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, nationality VARCHAR)","generation":"SELECT forename, surname\nFROM drivers\nWHERE nationality = 'German'"}
{"answer":"SELECT AVG(damage_millions_USD), MAX(damage_millions_USD) FROM storm WHERE max_speed > 1000","question":"Show the average and maximum damage for all storms with max speed higher than 1000.","context":"CREATE TABLE storm (damage_millions_USD INTEGER, max_speed INTEGER)","generation":"SELECT AVG(damage_millions_USD), MAX(max_speed)\nFROM storm\nWHERE max_speed > 1000"}
{"answer":"SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*) > 2","question":"Find all the policy types that are used by more than 2 customers.","context":"CREATE TABLE policies (policy_type_code VARCHAR)","generation":"SELECT policy_type_code\nFROM policies\nGROUP BY policy_type_code\nHAVING COUNT(*) > 2"}
{"answer":"SELECT Name FROM people WHERE Age = 35 OR Age = 36","question":"Show the names of people aged either 35 or 36.","context":"CREATE TABLE people (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name FROM people WHERE Age = 35 OR Age = 36"}
{"answer":"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1","question":"Find the name of the user who tweeted more than once, and number of tweets tweeted by them.","context":"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"SELECT user_profiles.name, COUNT(*) AS tweets\nFROM user_profiles\nJOIN tweets ON user_profiles.uid = tweets.uid\nGROUP BY user_profiles.name\nHAVING COUNT(*) > 1"}
{"answer":"SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1","question":"What is the nationality of the journalist with the largest number of years working?","context":"CREATE TABLE journalist (Nationality VARCHAR, Years_working VARCHAR)","generation":"SELECT Nationality\nFROM journalist\nWHERE Years_working = (SELECT MAX(Years_working)\n                       FROM journalist)"}
{"answer":"SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme","question":"Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.","context":"CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)","generation":"SELECT editor.Name, editor.age, journal.Theme\nFROM editor\nJOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nJOIN journal ON journal_committee.Journal_ID = journal.Journal_ID\nORDER BY journal.Theme ASC"}
{"answer":"SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\"","question":"What is the description of document type 'Paper'?","context":"CREATE TABLE Ref_Document_Types (document_type_description VARCHAR, document_type_code VARCHAR)","generation":"SELECT document_type_description\nFROM Ref_Document_Types\nWHERE document_type_code = 'Paper'"}
{"answer":"SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000","question":"Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.","context":"CREATE TABLE entrepreneur (Investor VARCHAR, Money_Requested INTEGER)","generation":"SELECT Investor\nFROM entrepreneur\nWHERE Money_Requested > 140000\nUNION\nSELECT Investor\nFROM entrepreneur\nWHERE Money_Requested < 120000"}
{"answer":"SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code","question":"Show the booking status code and the corresponding number of bookings.","context":"CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR)","generation":"SELECT booking_status_code, COUNT(*)\nFROM Apartment_Bookings\nGROUP BY booking_status_code\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the booking status codes and the COUNT(*) function to count the number of bookings for each status code. The query then selects the booking status code and the count of bookings for each status code.\n\n### Example\nThe following is an example of the output of the query:\n[SQL]\nSELECT booking_status_code, COUNT(*)\nFROM Apartment_Bookings\nGROUP BY booking_status_code\n[\/SQL]\n\n| booking_status_code | COUNT(*) |\n| --- | --- |\n| 1 | 10 |\n| 2 | 5 |\n| 3 | 2 |\n| 4 | 1 |\n\nThis output shows that there are 10 bookings with a booking status code of 1, 5 bookings with a booking status code of 2, 2 bookings with a booking status code of 3, and 1 booking with a booking status code of 4."}
{"answer":"SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)","question":"What is the average longitude of stations that never had bike availability more than 10?","context":"CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)","generation":"SELECT AVG(long)\nFROM station\nWHERE bikes_available < 10"}
{"answer":"SELECT T3.Name, COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name","question":"Show the names of journalists and the number of events they reported.","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)","generation":"SELECT journalist.Name, COUNT(news_report.Event_ID) AS Number_of_events\nFROM journalist\nLEFT JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID\nGROUP BY journalist.Name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the journalist and news_report tables. The COUNT function counts the number of rows in the news_report table for each journalist. The GROUP BY clause groups the results by journalist name.\n\n### Query Breakdown\n- SELECT journalist.Name, COUNT(news_report.Event_ID) AS Number_of_events\n    - SELECTs the name of the journalist and the number of events they reported\n- FROM journalist\n    - FROM clause specifies the table to query\n- LEFT JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID\n    - LEFT JOIN clause combines the journalist and news_report tables\n    - The ON clause specifies the join condition\n- GROUP BY journalist.Name\n    - GROUP BY clause groups the results by journalist name\n\n### Constraints\n- The query should run on a database with the following schema:\n    - CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR)"}
{"answer":"SELECT T2.title, T1.rID, T1.stars, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID","question":"Find the title and star rating of the movie that got the least rating star for each reviewer.","context":"CREATE TABLE Rating (rID VARCHAR, stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT m.title, r.stars\nFROM Movie m\nJOIN Rating r ON m.mID = r.mID\nJOIN (\n  SELECT mID, MIN(stars) AS min_stars\n  FROM Rating\n  GROUP BY mID\n) r2 ON r.mID = r2.mID AND r.stars = r2.min_stars\n[\/SQL]"}
{"answer":"SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5","question":"What is the first name, gpa and phone number of the top 5 students with highest gpa?","context":"CREATE TABLE student (stu_gpa VARCHAR, stu_phone VARCHAR, stu_fname VARCHAR)","generation":"SELECT stu_fname, stu_gpa, stu_phone\nFROM student\nORDER BY stu_gpa DESC\nLIMIT 5"}
{"answer":"SELECT team_name FROM basketball_match ORDER BY All_Home DESC","question":"List names of all teams in the basketball competition, ordered by all home scores in descending order.","context":"CREATE TABLE basketball_match (team_name VARCHAR, All_Home VARCHAR)","generation":"SELECT team_name\nFROM basketball_match\nORDER BY All_Home DESC"}
{"answer":"SELECT AVG(Gold) FROM club_rank","question":"What is the average number of gold medals for clubs?","context":"CREATE TABLE club_rank (Gold INTEGER)","generation":"SELECT AVG(Gold)\nFROM club_rank"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"900\"","question":"Show the first name and last name for the customer with account name 900.","context":"CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT Customers.customer_first_name, Customers.customer_last_name\nFROM Customers\nINNER JOIN Accounts\nON Customers.customer_id = Accounts.customer_id\nWHERE Accounts.account_name = '900'"}
{"answer":"SELECT Name FROM editor WHERE Age > 25","question":"List the names of editors who are older than 25.","context":"CREATE TABLE editor (Name VARCHAR, Age INTEGER)","generation":"SELECT Name\nFROM editor\nWHERE Age > 25"}
{"answer":"SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount > 8.5 GROUP BY school_id HAVING COUNT(*) > 1)","question":"Find the number of schools that have more than one donator whose donation amount is less than 8.5.","context":"CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)","generation":"SELECT COUNT(school_id)\nFROM endowment\nWHERE amount < 8.5\nGROUP BY school_id\nHAVING COUNT(school_id) > 1"}
{"answer":"SELECT name, date FROM races ORDER BY date DESC LIMIT 1","question":"What is the name and date of the most recent race?","context":"CREATE TABLE races (name VARCHAR, date VARCHAR)","generation":"SELECT name, date\nFROM races\nORDER BY date DESC\nLIMIT 1"}
{"answer":"SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'","question":"What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?","context":"CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, medicine_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (name VARCHAR, id VARCHAR)","generation":"SELECT enzyme.name\nFROM enzyme\nINNER JOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id\nINNER JOIN medicine ON medicine.id = medicine_enzyme_interaction.medicine_id\nWHERE medicine.name = 'Amisulpride' AND medicine_enzyme_interaction.interaction_type = 'inhibitor'"}
{"answer":"SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100","question":"Find the room number of the rooms which can sit 50 to 100 students and their buildings.","context":"CREATE TABLE classroom (building VARCHAR, room_number VARCHAR, capacity INTEGER)","generation":"SELECT classroom.room_number, classroom.building\nFROM classroom\nWHERE classroom.capacity BETWEEN 50 AND 100"}
{"answer":"SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase","question":"Find the purchase time, age and address of each member, and show the results in the order of purchase time.","context":"CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)","generation":"SELECT Time_of_purchase, age, address\nFROM member\nORDER BY Time_of_purchase"}
{"answer":"SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID","question":"Show the names of phones and the districts of markets they are on.","context":"CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE market (District VARCHAR, Market_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)","generation":"SELECT phone.Name, market.District\nFROM phone\nJOIN phone_market ON phone.Phone_ID = phone_market.Phone_ID\nJOIN market ON phone_market.Market_ID = market.Market_ID"}
{"answer":"SELECT county, COUNT(*), SUM(enrollment) FROM school GROUP BY county","question":"Show each county along with the number of schools and total enrollment in each county.","context":"CREATE TABLE school (county VARCHAR, enrollment INTEGER)","generation":"SELECT county, COUNT(*) AS number_of_schools, SUM(enrollment) AS total_enrollment\nFROM school\nGROUP BY county\nORDER BY county"}
{"answer":"SELECT state_province_county FROM addresses WHERE NOT address_id IN (SELECT employee_address_id FROM Employees)","question":"Find the states which do not have any employee in their record.","context":"CREATE TABLE Employees (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR)","generation":"SELECT DISTINCT state_province_county\nFROM addresses\nWHERE state_province_county NOT IN (\n  SELECT state_province_county\n  FROM Employees\n)"}
{"answer":"SELECT council_tax_id, cmi_cross_ref_id FROM parking_fines","question":"List the council tax ids and their related cmi cross references of all the parking fines.","context":"CREATE TABLE parking_fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)","generation":"SELECT council_tax_id, cmi_cross_ref_id\nFROM parking_fines"}
{"answer":"SELECT AVG(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"","question":"What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?","context":"CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (raceid VARCHAR, year VARCHAR, name VARCHAR)","generation":"SELECT AVG(fastestlapspeed)\nFROM results\nWHERE raceid IN (SELECT raceid\n                 FROM races\n                 WHERE name = 'Monaco Grand Prix' AND year = '2008')"}
{"answer":"SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1","question":"Find the dates on which more than one revisions were made.","context":"CREATE TABLE Catalogs (date_of_latest_revision VARCHAR)","generation":"SELECT date_of_latest_revision\nFROM Catalogs\nGROUP BY date_of_latest_revision\nHAVING COUNT(*) > 1"}
{"answer":"SELECT draft_details FROM Document_Drafts WHERE document_id = 7","question":"What is draft detail of the document with id 7?","context":"CREATE TABLE Document_Drafts (draft_details VARCHAR, document_id VARCHAR)","generation":"SELECT draft_details\nFROM Document_Drafts\nWHERE document_id = 7"}
{"answer":"SELECT COUNT(*) FROM Allergy_type WHERE allergytype = \"animal\"","question":"How many allergies have type animal?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT COUNT(*)\nFROM Allergy_type\nWHERE allergytype = 'animal'"}
{"answer":"SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15","question":"What distinct accelerator names are compatible with the browswers that have market share higher than 15?","context":"CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE browser (id VARCHAR, market_share INTEGER)","generation":"SELECT DISTINCT web_client_accelerator.name\nFROM web_client_accelerator\nJOIN accelerator_compatible_browser ON web_client_accelerator.id = accelerator_compatible_browser.accelerator_id\nJOIN browser ON accelerator_compatible_browser.browser_id = browser.id\nWHERE browser.market_share > 15"}
{"answer":"SELECT SUM(credits), dept_name FROM course GROUP BY dept_name","question":"Find the total credits of courses provided by different department.","context":"CREATE TABLE course (dept_name VARCHAR, credits INTEGER)","generation":"SELECT dept_name, SUM(credits) AS total_credits\nFROM course\nGROUP BY dept_name\nORDER BY total_credits DESC"}
{"answer":"SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")","question":"List the first and last name of the students who do not have any food type allergy.","context":"CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT Student.fname, Student.lname\nFROM Student\nLEFT JOIN Has_allergy ON Student.StuID = Has_allergy.StuID\nLEFT JOIN Allergy_Type ON Has_allergy.Allergy = Allergy_Type.Allergy\nWHERE Allergy_Type.allergytype = 'food'\nGROUP BY Student.StuID\nHAVING COUNT(Allergy_Type.Allergy) = 0"}
{"answer":"SELECT preferred_foot, AVG(overall_rating) FROM Player_Attributes GROUP BY preferred_foot","question":"What is the average rating for right-footed players and left-footed players?","context":"CREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)","generation":"SELECT preferred_foot, AVG(overall_rating)\nFROM Player_Attributes\nGROUP BY preferred_foot\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the Player_Attributes table by the preferred_foot column. The AVG function calculates the average of the overall_rating column for each group. The query then returns the preferred_foot column and the average rating for each group.\n\n### Example\nThe following example shows the output of the query for the sample data:\n\n| preferred_foot | AVG(overall_rating) |\n| --- | --- |\n| Right | 85 |\n| Left | 80 |\n\nThe query returns two rows, one for each preferred_foot value. The first row has an average overall_rating of 85 for right-footed players, and the second row has an average overall_rating of 80 for left-footed players."}
{"answer":"SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS","question":"Show the race class and number of races in each class.","context":"CREATE TABLE race (CLASS VARCHAR)","generation":"SELECT CLASS, COUNT(*) AS NUMBER_OF_RACES\nFROM race\nGROUP BY CLASS\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the race table by the CLASS column. The COUNT(*) function counts the number of rows in each group. The query then selects the CLASS column and the COUNT(*) column.\n\n### Query Breakdown\n- SELECT CLASS, COUNT(*) AS NUMBER_OF_RACES\n    - SELECT CLASS: selects the CLASS column\n    - COUNT(*) AS NUMBER_OF_RACES: counts the number of rows in each group and assigns the result to the alias NUMBER_OF_RACES\n- FROM race\n    - FROM race: selects the race table\n- GROUP BY CLASS\n    - GROUP BY CLASS: groups the rows of the race table by the CLASS column\n\n### Concepts\n- GROUP BY\n- COUNT(*)\n\n### Tips\n- Use the GROUP BY clause to group rows of a table by one or more columns.\n- Use the COUNT(*) function to count the number of rows in each group.\n- Use the AS keyword to assign an alias to a column."}
{"answer":"SELECT Title FROM book WHERE Writer <> \"Elaine Lee\"","question":"What are the titles of the books whose writer is not \"Elaine Lee\"?","context":"CREATE TABLE book (Title VARCHAR, Writer VARCHAR)","generation":"SELECT Title\nFROM book\nWHERE Writer != 'Elaine Lee'"}
{"answer":"SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC","question":"List the companies of entrepreneurs in descending order of money requested.","context":"CREATE TABLE entrepreneur (Company VARCHAR, Money_Requested VARCHAR)","generation":"SELECT Company\nFROM entrepreneur\nORDER BY Money_Requested DESC"}
{"answer":"SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) LIMIT 1","question":"What is the name of department where has the smallest number of professors?","context":"CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT d.dept_name\nFROM department d\nJOIN (\n  SELECT dept_code, COUNT(*) AS cnt\n  FROM professor\n  GROUP BY dept_code\n) p ON d.dept_code = p.dept_code\nORDER BY cnt\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000","question":"How many employees have salary between 100000 and 200000?","context":"CREATE TABLE Employee (salary INTEGER)","generation":"SELECT COUNT(*)\nFROM Employee\nWHERE salary BETWEEN 100000 AND 200000"}
{"answer":"SELECT amount FROM payment ORDER BY amount DESC LIMIT 1","question":"What is the largest payment amount?","context":"CREATE TABLE payment (amount VARCHAR)","generation":"SELECT MAX(amount)\nFROM payment"}
{"answer":"SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id","question":"Find distinct cities of addresses of people?","context":"CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)","generation":"SELECT DISTINCT city\nFROM addresses\nWHERE address_id IN (SELECT address_id\n                     FROM people_addresses)"}
{"answer":"SELECT * FROM Assessment_Notes ORDER BY date_of_notes","question":"List all information about the assessment notes sorted by date in ascending order.","context":"CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)","generation":"SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Olin\" AND t1.lname = \"Shivers\"","question":"Find the papers which have \"Olin Shivers\" as an author.","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (SELECT paperid\n                  FROM authorship\n                  WHERE authid = (SELECT authid\n                                  FROM authors\n                                  WHERE fname = 'Olin' AND lname = 'Shivers'))"}
{"answer":"SELECT T1.date_incident_start, date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = \"Fahey\"","question":"Find the start and end dates of behavior incidents of students with last name \"Fahey\".","context":"CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, last_name VARCHAR)","generation":"SELECT date_incident_start, date_incident_end\nFROM Behavior_Incident\nWHERE student_id IN (\n    SELECT student_id\n    FROM Students\n    WHERE last_name = 'Fahey'\n)"}
{"answer":"SELECT COUNT(*) FROM participants WHERE participant_type_code = 'Organizer'","question":"How many participants belong to the type 'Organizer'?","context":"CREATE TABLE participants (participant_type_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM participants\nWHERE participant_type_code = 'Organizer'"}
{"answer":"SELECT SUM(amount) FROM payment","question":"What is the total amount of all payments?","context":"CREATE TABLE payment (amount INTEGER)","generation":"SELECT SUM(amount) FROM payment"}
{"answer":"SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)","question":"Find the id and address of the shops whose score is below the average score.","context":"CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)","generation":"SELECT shop_id, address\nFROM shop\nWHERE score < (SELECT AVG(score) FROM shop)"}
{"answer":"SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017","question":"Find the distinct names of all races held between 2014 and 2017?","context":"CREATE TABLE races (name VARCHAR, YEAR INTEGER)","generation":"SELECT DISTINCT name\nFROM races\nWHERE YEAR BETWEEN 2014 AND 2017"}
{"answer":"SELECT COUNT(DISTINCT id) FROM teaches","question":"How many different instructors have taught some course?","context":"CREATE TABLE teaches (id VARCHAR)","generation":"SELECT COUNT(DISTINCT instructor)\nFROM teaches"}
{"answer":"SELECT Party_Theme, LOCATION FROM party","question":"What are the themes and locations of parties?","context":"CREATE TABLE party (Party_Theme VARCHAR, LOCATION VARCHAR)","generation":"SELECT Party_Theme, LOCATION\nFROM party"}
{"answer":"SELECT other_account_details FROM Accounts WHERE account_name = \"338\"","question":"Show other account details for account with name 338.","context":"CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)","generation":"SELECT other_account_details\nFROM Accounts\nWHERE account_name = '338'"}
{"answer":"SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the institution type with the largest number of institutions.","context":"CREATE TABLE institution (TYPE VARCHAR)","generation":"SELECT TYPE\nFROM institution\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT Character FROM actor ORDER BY age DESC","question":"What are the characters of actors in descending order of age?","context":"CREATE TABLE actor (Character VARCHAR, age VARCHAR)","generation":"SELECT Character\nFROM actor\nORDER BY age DESC"}
{"answer":"SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch","question":"List the snatch score and clean jerk score of body builders in ascending order of snatch score.","context":"CREATE TABLE body_builder (Snatch VARCHAR, Clean_Jerk VARCHAR)","generation":"SELECT Snatch, Clean_Jerk\nFROM body_builder\nORDER BY Snatch ASC"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2","question":"Show id, first and last names for all customers with at least two cards.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name\nFROM Customers\nWHERE customer_id IN (\n  SELECT customer_id\n  FROM Customers_cards\n  GROUP BY customer_id\n  HAVING COUNT(*) >= 2\n)"}
{"answer":"SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING AVG(T1.attendance) > 200","question":"Show all artist names with an average exhibition attendance over 200.","context":"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)","generation":"SELECT artist.name\nFROM artist\nJOIN exhibition ON artist.artist_id = exhibition.artist_id\nJOIN exhibition_record ON exhibition.exhibition_id = exhibition_record.exhibition_id\nWHERE AVG(exhibition_record.attendance) > 200\nGROUP BY artist.name\n[\/SQL]\n\n### Explanation\nThe query joins the artist table with the exhibition table on the artist_id column. It then joins the exhibition table with the exhibition_record table on the exhibition_id column. The WHERE clause filters the results to only include artists with an average attendance over 200. The GROUP BY clause groups the results by the artist name.\n\n### Join\nThe query uses an INNER JOIN to combine the artist and exhibition tables. The INNER JOIN returns only the rows that have matching values in both tables.\n\n### Average\nThe query uses the AVG function to calculate the average attendance for each artist. The AVG function returns the average of all the values in a group.\n\n### Group By\nThe query uses the GROUP BY clause to group the results by the artist name. The GROUP BY clause groups the results by the artist name and returns a separate row for each distinct value in the artist name column.\n\n### Where\nThe query uses the WHERE clause to filter the results to only include artists with an average attendance over 200. The WHERE clause returns only the rows that have a value in the attendance column that is greater than 200.\n\n### Order By\nThe query uses the ORDER BY clause to sort the results by the artist name. The ORDER BY clause sorts the results in ascending order by the artist name.\n\n### Limit\nThe query uses the LIMIT clause to limit the number of results to 10. The"}
{"answer":"SELECT COUNT(*) FROM customers WHERE city = \"Prague\"","question":"How many customers live in Prague city?","context":"CREATE TABLE customers (city VARCHAR)","generation":"SELECT COUNT(*) FROM customers WHERE city = 'Prague'"}
{"answer":"SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"","question":"Show names for all employees who do not have certificate of Boeing 737-800.","context":"CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)","generation":"SELECT name\nFROM Employee\nWHERE eid NOT IN (SELECT eid\n                  FROM Certificate\n                  WHERE aid = 'Boeing 737-800')"}
{"answer":"SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1","question":"Find the name and checking balance of the account with the lowest saving balance.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT name, balance\nFROM accounts\nJOIN checking ON accounts.custid = checking.custid\nJOIN savings ON accounts.custid = savings.custid\nWHERE savings.balance = (SELECT MIN(savings.balance) FROM savings)\n[\/SQL]\n\n### Explanation\nThe query joins the accounts table with the checking and savings tables on the custid column. It then selects the name and balance from the accounts table where the savings balance is the minimum.\n\n### Query Breakdown\n- SELECT name, balance\nFROM accounts\nJOIN checking ON accounts.custid = checking.custid\nJOIN savings ON accounts.custid = savings.custid\n- This line joins the accounts table with the checking and savings tables on the custid column.\n- WHERE savings.balance = (SELECT MIN(savings.balance) FROM savings)\n- This line selects the name and balance from the accounts table where the savings balance is the minimum.\n\n### Constraints\n- The query will run on a database with the following schema:\nCREATE TABLE checking (balance VARCHAR, custid VARCHAR)"}
{"answer":"SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1","question":"What is the level name of the cheapest catalog (in USD)?","context":"CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)","generation":"SELECT catalog_level_name\nFROM catalog_structure\nWHERE catalog_level_number = (\n  SELECT MIN(catalog_level_number)\n  FROM catalog_contents\n  WHERE price_in_dollars = (\n    SELECT MIN(price_in_dollars)\n    FROM catalog_contents\n  )\n)"}
{"answer":"SELECT Adults FROM Reservations WHERE CheckIn = \"2010-10-23\" AND FirstName = \"CONRAD\" AND LastName = \"SELBIG\"","question":"How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?","context":"CREATE TABLE Reservations (Adults VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)","generation":"SELECT COUNT(Adults)\nFROM Reservations\nWHERE LastName = 'SELBIG' AND FirstName = 'CONRAD' AND CheckIn = '2010-10-23'"}
{"answer":"SELECT DISTINCT Major FROM Student","question":"Show all majors.","context":"CREATE TABLE Student (Major VARCHAR)","generation":"SELECT Major\nFROM Student"}
{"answer":"SELECT COUNT(DISTINCT incident_type_code) FROM Behavior_Incident","question":"How many distinct incident type codes are there?","context":"CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)","generation":"SELECT COUNT(DISTINCT incident_type_code)\nFROM Behavior_Incident"}
{"answer":"SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID","question":"Show the album names, ids and the number of tracks for each album.","context":"CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)","generation":"SELECT A.Title, A.AlbumId, COUNT(T.AlbumId) AS NumberOfTracks\nFROM ALBUM A\nLEFT JOIN TRACK T ON A.AlbumId = T.AlbumId\nGROUP BY A.Title, A.AlbumId\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the ALBUM and TRACK tables. The query then uses the COUNT function to count the number of tracks for each album. The query then groups the results by the album title and album id.\n\n### Example\nThe following example shows the output of the query:\n[SQL]\nSELECT A.Title, A.AlbumId, COUNT(T.AlbumId) AS NumberOfTracks\nFROM ALBUM A\nLEFT JOIN TRACK T ON A.AlbumId = T.AlbumId\nGROUP BY A.Title, A.AlbumId\n[\/SQL]\n\n| Title | AlbumId | NumberOfTracks |\n| --- | --- | --- |\n| Album1 | 1 | 3 |\n| Album2 | 2 | 2 |\n| Album3 | 3 | 1 |\n\n### Constraints\n- The query will run on a database with the following schema:\nCREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR)"}
{"answer":"SELECT MAX(t1.low_temperature), AVG(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"","question":"Give me the maximum low temperature and average precipitation at the Amersham station.","context":"CREATE TABLE weekly_weather (low_temperature INTEGER, precipitation INTEGER, station_id VARCHAR); CREATE TABLE station (id VARCHAR, network_name VARCHAR)","generation":"SELECT MAX(low_temperature), AVG(precipitation)\nFROM weekly_weather\nWHERE station_id = 'Amersham'\nGROUP BY station_id\n[\/SQL]\n\n### Explanation\nThe query first filters the data to only include the Amersham station by using the WHERE clause. Then, it groups the data by station_id and calculates the maximum low temperature and average precipitation for each group. Finally, it selects only the first row of the result set, which corresponds to the Amersham station.\n\n### Query Breakdown\n- SELECT MAX(low_temperature), AVG(precipitation)\n    - This line selects the maximum low temperature and average precipitation for each group of data.\n- FROM weekly_weather\n    - This line specifies the table to query.\n- WHERE station_id = 'Amersham'\n    - This line filters the data to only include the Amersham station.\n- GROUP BY station_id\n    - This line groups the data by station_id.\n- SELECT *\n    - This line selects all columns from the table.\n\n### Constraints\n- The query should return the maximum low temperature and average precipitation at the Amersham station.\n- The query should not use any aggregate functions other than MAX and AVG.\n- The query should not use any subqueries.\n- The query should not use any joins.\n- The query should not use any WHERE clauses other than the one used to filter the data to only include the Amersham station.\n- The query should not use any GROUP BY clauses other than the one used to group the data by station_id.\n- The query should not use any HAVING clauses.\n- The query should not use any ORDER BY clauses.\n- The"}
{"answer":"SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150","question":"Find the name of rooms whose base price is between 120 and 150.","context":"CREATE TABLE rooms (roomname VARCHAR, baseprice INTEGER)","generation":"SELECT roomname\nFROM rooms\nWHERE baseprice BETWEEN 120 AND 150"}
{"answer":"SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1","question":"List name, dates active, and number of deaths for all storms with at least 1 death.","context":"CREATE TABLE storm (name VARCHAR, dates_active VARCHAR, number_deaths VARCHAR)","generation":"SELECT name, dates_active, number_deaths\nFROM storm\nWHERE number_deaths > 0"}
{"answer":"SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2","question":"What are the booking start and end dates of the apartments with more than 2 bedrooms?","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)","generation":"SELECT booking_start_date, booking_end_date\nFROM Apartment_Bookings\nWHERE apt_id IN (\n    SELECT apt_id\n    FROM Apartments\n    WHERE bedroom_count > 2\n)"}
{"answer":"SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"","question":"What is the title, phone and hire date of Nancy Edwards?","context":"CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT title, phone, hire_date\nFROM employees\nWHERE first_name = 'Nancy' AND last_name = 'Edwards'"}
{"answer":"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = \"AAC audio file\"","question":"How many tracks are in the AAC audio file media type?","context":"CREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)","generation":"SELECT COUNT(*)\nFROM TRACK\nWHERE MediaTypeId = (SELECT MediaTypeId\n                     FROM MEDIATYPE\n                     WHERE Name = 'AAC audio file')"}
{"answer":"SELECT asset_model FROM Assets WHERE NOT asset_id IN (SELECT asset_id FROM Fault_Log)","question":"Which assets did not incur any fault log? List the asset model.","context":"CREATE TABLE Fault_Log (asset_model VARCHAR, asset_id VARCHAR); CREATE TABLE Assets (asset_model VARCHAR, asset_id VARCHAR)","generation":"SELECT DISTINCT asset_model\nFROM Assets\nWHERE asset_model NOT IN (SELECT asset_model\n                          FROM Fault_Log)"}
{"answer":"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1","question":"Find the id and name of the most expensive base price room.","context":"CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)","generation":"SELECT RoomId, roomName\nFROM Rooms\nORDER BY basePrice DESC\nLIMIT 1"}
{"answer":"SELECT rID FROM Reviewer WHERE name = \"Daniel Lewis\"","question":"What is the reviewer id of Daniel Lewis?","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)","generation":"SELECT rID\nFROM Reviewer\nWHERE name = 'Daniel Lewis'"}
{"answer":"SELECT title FROM Movie WHERE director = 'Steven Spielberg'","question":"Find the titles of all movies directed by steven spielberg.","context":"CREATE TABLE Movie (title VARCHAR, director VARCHAR)","generation":"SELECT title\nFROM Movie\nWHERE director = 'Steven Spielberg'"}
{"answer":"SELECT COUNT(*) FROM people WHERE is_male = 'F' AND age > 30","question":"How many female people are older than 30 in our record?","context":"CREATE TABLE people (is_male VARCHAR, age VARCHAR)","generation":"SELECT COUNT(*)\nFROM people\nWHERE is_male = 'female' AND age > 30"}
{"answer":"SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston'","question":"Find the names of departments that are located in Houston.","context":"CREATE TABLE dept_locations (dnumber VARCHAR, dlocation VARCHAR); CREATE TABLE department (dname VARCHAR, dnumber VARCHAR)","generation":"SELECT dname\nFROM department\nJOIN dept_locations\nON department.dnumber = dept_locations.dnumber\nWHERE dept_locations.dlocation = 'Houston'"}
{"answer":"SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500","question":"Show the theme for exhibitions with both records of an attendance below 100 and above 500.","context":"CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)","generation":"SELECT theme\nFROM exhibition\nWHERE exhibition_id IN (\n  SELECT exhibition_id\n  FROM exhibition_record\n  WHERE attendance < 100\n  UNION\n  SELECT exhibition_id\n  FROM exhibition_record\n  WHERE attendance > 500\n)"}
{"answer":"SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate","question":"Show ids for all employees who don't have a certificate.","context":"CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)","generation":"SELECT eid\nFROM Employee\nWHERE eid NOT IN (SELECT eid FROM Certificate)"}
{"answer":"SELECT MIN(salary), dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)","question":"Find the minimum salary for the departments whose average salary is above the average payment of all instructors.","context":"CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)","generation":"SELECT MIN(salary)\nFROM instructor\nWHERE salary > (SELECT AVG(salary) FROM instructor)"}
{"answer":"SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country","question":"Show the season, the player, and the name of the country that player belongs to.","context":"CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)","generation":"SELECT Season, Player, Country_name\nFROM match_season\nJOIN country\nON match_season.Country = country.Country_id"}
{"answer":"SELECT name FROM people ORDER BY date_of_birth","question":"List all people names in the order of their date of birth from old to young.","context":"CREATE TABLE people (name VARCHAR, date_of_birth VARCHAR)","generation":"SELECT name FROM people ORDER BY date_of_birth DESC"}
{"answer":"SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)","question":"Find the name of the courses that do not have any prerequisite?","context":"CREATE TABLE prereq (title VARCHAR, course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)","generation":"SELECT course.title\nFROM course\nLEFT JOIN prereq ON course.course_id = prereq.course_id\nWHERE prereq.course_id IS NULL"}
{"answer":"SELECT T1.name, AVG(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id","question":"Find each target user's name and average trust score.","context":"CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT u.name, AVG(t.target_u_id) AS avg_trust\nFROM useracct u\nJOIN trust t ON u.u_id = t.target_u_id\nGROUP BY u.name\n[\/SQL]\n\n### Explanation\nThe query joins the useracct and trust tables on the u_id column. The AVG function calculates the average trust score for each target user. The GROUP BY clause groups the results by the user's name.\n\n### Query Breakdown\n- SELECT u.name, AVG(t.target_u_id) AS avg_trust\n    - SELECTs the user's name and the average trust score for each target user\n    - The AS clause renames the AVG function to \"avg_trust\"\n- FROM useracct u\n    - FROM clause specifies the useracct table\n    - u is an alias for the useracct table\n- JOIN trust t ON u.u_id = t.target_u_id\n    - JOIN clause specifies the trust table\n    - t is an alias for the trust table\n    - The ON clause specifies the join condition: the u_id column in the useracct table must match the target_u_id column in the trust table\n- GROUP BY u.name\n    - GROUP BY clause groups the results by the user's name\n\n### Constraints\n- The query should return the name and average trust score for each target user.\n- The query should not return any duplicate rows.\n- The query should not return any rows where the average trust score is NULL.\n- The query should not return any rows where the user's name is NULL.\n- The query should not return any rows where the user's name is an empty"}
{"answer":"SELECT COUNT(*) FROM enzyme","question":"How many kinds of enzymes are there?","context":"CREATE TABLE enzyme (Id VARCHAR)","generation":"SELECT COUNT(DISTINCT Id)\nFROM enzyme"}
{"answer":"SELECT COUNT(DISTINCT Team) FROM match_season","question":"How many distinct teams are involved in match seasons?","context":"CREATE TABLE match_season (Team VARCHAR)","generation":"SELECT COUNT(DISTINCT Team)\nFROM match_season"}
{"answer":"SELECT SUM(number_deaths), SUM(damage_millions_USD) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)","question":"What is the total number of deaths and damage for all storms with a max speed greater than the average?","context":"CREATE TABLE storm (number_deaths INTEGER, damage_millions_USD INTEGER, max_speed INTEGER)","generation":"SELECT SUM(number_deaths), SUM(damage_millions_USD)\nFROM storm\nWHERE max_speed > (SELECT AVG(max_speed) FROM storm)"}
{"answer":"SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1","question":"List the name of the county with the largest population.","context":"CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)","generation":"SELECT Name\nFROM county_public_safety\nORDER BY Population DESC\nLIMIT 1"}
{"answer":"SELECT T1.name, COUNT(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id","question":"For each building, show the name of the building and the number of institutions in it.","context":"CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR)","generation":"SELECT b.name, COUNT(i.building_id) AS num_institutions\nFROM building b\nLEFT JOIN institution i ON b.building_id = i.building_id\nGROUP BY b.name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the building and institution tables. The COUNT function is used to count the number of institutions in each building. The GROUP BY clause is used to group the results by building name.\n\n### Query Breakdown\n- SELECT b.name, COUNT(i.building_id) AS num_institutions\n    - SELECT the building name and the number of institutions in each building\n- FROM building b\n    - FROM the building table\n- LEFT JOIN institution i ON b.building_id = i.building_id\n    - LEFT JOIN the institution table to the building table on the building_id column\n- GROUP BY b.name\n    - GROUP the results by building name\n\n### Query Performance\nThe query performance of this query is O(n) where n is the number of buildings. The query uses a LEFT JOIN, which is an O(n) operation. The COUNT function is also an O(n) operation. The GROUP BY clause is an O(n) operation. The overall query performance is O(n) + O(n) + O(n) = O(n).\n\n### Query Optimization\nThe query can be optimized by using an index on the building_id column of the institution table. This will improve the performance of the query by reducing the number of rows that need to be processed.\n\n### Conclusion\nThe query answers the question of how many institutions are in each building. The query uses a LEFT JOIN to combine the building and institution tables. The COUNT function is used to count the number of institutions in each building. The GROUP"}
{"answer":"SELECT name, LOCATION FROM track","question":"Show the name and location for all tracks.","context":"CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)","generation":"SELECT name, location\nFROM track"}
{"answer":"SELECT Team, COUNT(*) FROM technician GROUP BY Team","question":"Show different teams of technicians and the number of technicians in each team.","context":"CREATE TABLE technician (Team VARCHAR)","generation":"SELECT Team, COUNT(*) AS NumberOfTechnicians\nFROM technician\nGROUP BY Team\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the technicians by their team. The COUNT(*) function counts the number of technicians in each team. The query then selects the team and the number of technicians in each team.\n\n### Example\nThe following example shows the result of the query:\n[SQL]\nSELECT Team, COUNT(*) AS NumberOfTechnicians\nFROM technician\nGROUP BY Team\n[\/SQL]\n\n| Team | NumberOfTechnicians |\n| --- | --- |\n| A | 2 |\n| B | 3 |\n| C | 1 |\n\nThe query shows that there are 2 technicians in team A, 3 technicians in team B, and 1 technician in team C."}
{"answer":"SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING COUNT(*) >= 2","question":"Show the names and heights of buildings with at least two institutions founded after 1880.","context":"CREATE TABLE building (name VARCHAR, height_feet VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded INTEGER)","generation":"SELECT building.name, building.height_feet\nFROM building\nJOIN institution ON building.building_id = institution.building_id\nWHERE institution.founded > 1880\nGROUP BY building.name, building.height_feet\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY COUNT(*) LIMIT 1","question":"What are the code and description of the least frequent detention type ?","context":"CREATE TABLE Ref_Detention_Type (detention_type_description VARCHAR, detention_type_code VARCHAR); CREATE TABLE Detention (detention_type_code VARCHAR)","generation":"SELECT detention_type_code, detention_type_description\nFROM Ref_Detention_Type\nWHERE detention_type_code = (\n    SELECT detention_type_code\n    FROM Detention\n    GROUP BY detention_type_code\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n)"}
{"answer":"SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id","question":"Show all product names without an order.","context":"CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR); CREATE TABLE Products (product_name VARCHAR)","generation":"SELECT product_name\nFROM Products\nWHERE product_id NOT IN (SELECT product_id FROM Order_items)"}
{"answer":"SELECT Title FROM ALBUM ORDER BY Title","question":"Please list all album titles in alphabetical order.","context":"CREATE TABLE ALBUM (Title VARCHAR)","generation":"SELECT Title FROM ALBUM ORDER BY Title ASC"}
{"answer":"SELECT T1.student_id, T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","question":"What are the id and first name of the student whose addresses have the highest average monthly rental?","context":"CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR)","generation":"SELECT s.first_name, s.student_id\nFROM Students s\nINNER JOIN (\n    SELECT student_id, AVG(monthly_rental) AS avg_monthly_rental\n    FROM Student_Addresses\n    GROUP BY student_id\n    ORDER BY avg_monthly_rental DESC\n    LIMIT 1\n) sa ON s.student_id = sa.student_id"}
{"answer":"SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'","question":"Which address do not have any member with the black membership card?","context":"CREATE TABLE member (address VARCHAR, Membership_card VARCHAR)","generation":"SELECT address\nFROM member\nWHERE Membership_card != 'black'"}
{"answer":"SELECT name FROM Aircraft ORDER BY distance LIMIT 3","question":"Show the name of aircrafts with top three lowest distances.","context":"CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)","generation":"SELECT name\nFROM Aircraft\nORDER BY distance\nLIMIT 3"}
{"answer":"SELECT id, name, market_share FROM browser","question":"List the ids, names and market shares of all browsers.","context":"CREATE TABLE browser (id VARCHAR, name VARCHAR, market_share VARCHAR)","generation":"SELECT id, name, market_share FROM browser"}
{"answer":"SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada'","question":"Show the names for all females from Canada having a wedding in year 2016.","context":"CREATE TABLE people (name VARCHAR, people_id VARCHAR, country VARCHAR, is_male VARCHAR); CREATE TABLE wedding (female_id VARCHAR, year VARCHAR)","generation":"SELECT name\nFROM people\nWHERE country = 'Canada'\nAND is_male = 'female'\nAND people_id IN (\n  SELECT female_id\n  FROM wedding\n  WHERE year = '2016'\n)"}
{"answer":"SELECT COUNT(*) FROM journalist","question":"How many journalists are there?","context":"CREATE TABLE journalist (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM journalist"}
{"answer":"SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","question":"Show distinct first and last names for all customers with an account.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT DISTINCT Customers.customer_first_name, Customers.customer_last_name\nFROM Customers\nINNER JOIN Accounts\nON Customers.customer_id = Accounts.customer_id"}
{"answer":"SELECT document_id, COUNT(*) FROM Draft_Copies GROUP BY document_id HAVING COUNT(*) > 1","question":"Which documents have more than 1 draft copies? List document id and number of draft copies.","context":"CREATE TABLE Draft_Copies (document_id VARCHAR)","generation":"SELECT document_id, COUNT(*) AS draft_copies\nFROM Draft_Copies\nGROUP BY document_id\nHAVING COUNT(*) > 1"}
{"answer":"SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount LIMIT 1","question":"Which part has the least chargeable amount? List the part id and amount.","context":"CREATE TABLE Parts (part_id VARCHAR, chargeable_amount VARCHAR)","generation":"SELECT part_id, chargeable_amount\nFROM Parts\nORDER BY chargeable_amount\nLIMIT 1"}
{"answer":"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1","question":"Find the name and checking balance of the account with the lowest savings balance.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT name, balance\nFROM accounts\nJOIN checking ON accounts.custid = checking.custid\nJOIN savings ON accounts.custid = savings.custid\nWHERE savings.balance = (SELECT MIN(savings.balance) FROM savings)"}
{"answer":"SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT AVG(ticket_price) FROM exhibition)","question":"What is the theme and artist name for the exhibition with a ticket price higher than the average?","context":"CREATE TABLE exhibition (ticket_price INTEGER); CREATE TABLE exhibition (theme VARCHAR, artist_id VARCHAR, ticket_price INTEGER); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)","generation":"SELECT theme, artist.name\nFROM exhibition\nJOIN artist ON artist.artist_id = exhibition.artist_id\nWHERE ticket_price > (SELECT AVG(ticket_price) FROM exhibition)"}
{"answer":"SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid","question":"Find the name, checking balance and saving balance of all accounts in the bank.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT accounts.name, checking.balance, savings.balance\nFROM accounts\nLEFT JOIN checking ON accounts.custid = checking.custid\nLEFT JOIN savings ON accounts.custid = savings.custid"}
{"answer":"SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name","question":"Find number of tracks in each genre?","context":"CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)","generation":"SELECT genres.name, COUNT(tracks.genre_id)\nFROM tracks\nJOIN genres ON tracks.genre_id = genres.id\nGROUP BY genres.name\n[\/SQL]"}
{"answer":"SELECT AVG(Years_working) FROM journalist","question":"What is the average number of years spent working as a journalist?","context":"CREATE TABLE journalist (Years_working INTEGER)","generation":"SELECT AVG(Years_working)\nFROM journalist"}
{"answer":"SELECT campus FROM campuses WHERE LOCATION = \"Chico\"","question":"What are the names of all campuses located at Chico?","context":"CREATE TABLE campuses (campus VARCHAR, LOCATION VARCHAR)","generation":"SELECT campus\nFROM campuses\nWHERE location = 'Chico'"}
{"answer":"SELECT decor, AVG(basePrice), MIN(basePrice) FROM Rooms GROUP BY decor","question":"Find the average and minimum price of the rooms in different decor.","context":"CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)","generation":"SELECT AVG(basePrice), MIN(basePrice)\nFROM Rooms\nGROUP BY decor"}
{"answer":"SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which film has the most copies in the inventory? List both title and id.","context":"CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (film_id VARCHAR)","generation":"SELECT title, film_id\nFROM film\nWHERE film_id IN (\n  SELECT film_id\n  FROM inventory\n  GROUP BY film_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title","question":"Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.","context":"CREATE TABLE SECTION (building VARCHAR, room_number VARCHAR, semester VARCHAR, year VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR, title VARCHAR)","generation":"SELECT building, room_number, semester, year, title\nFROM SECTION\nJOIN course ON course.course_id = SECTION.course_id\nWHERE dept_name = 'Psychology'\nORDER BY title"}
{"answer":"SELECT open_date FROM church GROUP BY open_date HAVING COUNT(*) >= 2","question":"Show the opening year in whcih at least two churches opened.","context":"CREATE TABLE church (open_date VARCHAR)","generation":"SELECT open_date\nFROM church\nGROUP BY open_date\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = \"LG-P760\"","question":"Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".","context":"CREATE TABLE phone (screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE screen_mode (Char_cells VARCHAR, Pixels VARCHAR, Hardware_colours VARCHAR, Graphics_mode VARCHAR)","generation":"SELECT screen_mode.Char_cells, screen_mode.Pixels, screen_mode.Hardware_colours\nFROM phone\nJOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode\nWHERE phone.Hardware_Model_name = \"LG-P760\""}
{"answer":"SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = \"Balls to the Wall\"","question":"Which artist does the album \"Balls to the Wall\" belong to?","context":"CREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)","generation":"SELECT Name\nFROM ARTIST\nWHERE ArtistId = (SELECT ArtistId\n                  FROM ALBUM\n                  WHERE Title = 'Balls to the Wall')"}
{"answer":"SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1","question":"Return the apartment number with the largest number of bedrooms.","context":"CREATE TABLE Apartments (apt_number VARCHAR, bedroom_count VARCHAR)","generation":"SELECT apt_number\nFROM Apartments\nWHERE bedroom_count = (SELECT MAX(bedroom_count) FROM Apartments)"}
{"answer":"SELECT Theme FROM farm_competition ORDER BY YEAR","question":"What are the themes of farm competitions sorted by year in ascending order?","context":"CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)","generation":"SELECT Theme, YEAR\nFROM farm_competition\nORDER BY YEAR ASC"}
{"answer":"SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50","question":"Show the names of phones that are on market with number of shops greater than 50.","context":"CREATE TABLE market (Market_ID VARCHAR, Num_of_shops INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)","generation":"SELECT phone.Name\nFROM phone\nJOIN phone_market ON phone.Phone_ID = phone_market.Phone_ID\nJOIN market ON market.Market_ID = phone_market.Market_ID\nWHERE market.Num_of_shops > 50"}
{"answer":"SELECT COUNT(*) FROM farm","question":"How many farms are there?","context":"CREATE TABLE farm (Id VARCHAR)","generation":"SELECT COUNT(*) FROM farm"}
{"answer":"SELECT COUNT(DISTINCT team) FROM elimination","question":"What is the number of distinct teams that suffer elimination?","context":"CREATE TABLE elimination (team VARCHAR)","generation":"SELECT COUNT(DISTINCT team)\nFROM elimination\nWHERE team NOT IN (SELECT team\n                   FROM elimination\n                   WHERE elimination = 0)\n[\/SQL]\n\n### Explanation\nThe query first selects all teams that do not suffer elimination (i.e., elimination = 0). Then, it counts the number of distinct teams that are not in the previous selection.\n\n### Example\nSuppose the following table is given:\n\n| team | elimination |\n| --- | --- |\n| A | 0 |\n| B | 0 |\n| C | 1 |\n| D | 1 |\n| E | 0 |\n| F | 1 |\n\nThe query will return 3, which is the number of distinct teams that suffer elimination.\n\n### Constraints\n- The database schema will not change.\n- The query will be run on a database with the given schema.\n- The query will end with \""}
{"answer":"SELECT title FROM albums ORDER BY title","question":"List every album ordered by album title in ascending order.","context":"CREATE TABLE albums (title VARCHAR)","generation":"SELECT * FROM albums ORDER BY title ASC"}
{"answer":"SELECT DISTINCT T1.driverid, T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000","question":"Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?","context":"CREATE TABLE laptimes (driverid VARCHAR, milliseconds INTEGER); CREATE TABLE drivers (driverid VARCHAR, nationality VARCHAR)","generation":"SELECT DISTINCT drivers.driverid, drivers.nationality\nFROM laptimes\nJOIN drivers ON laptimes.driverid = drivers.driverid\nWHERE laptimes.milliseconds > 100000"}
{"answer":"SELECT Name FROM county_public_safety WHERE NOT County_ID IN (SELECT County_ID FROM city)","question":"List the names of counties that do not have any cities.","context":"CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)","generation":"SELECT county_public_safety.Name\nFROM county_public_safety\nLEFT JOIN city ON county_public_safety.County_ID = city.County_ID\nWHERE city.County_ID IS NULL"}
{"answer":"SELECT Name FROM technician WHERE Age = 36 OR Age = 37","question":"Show the name of technicians aged either 36 or 37","context":"CREATE TABLE technician (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name\nFROM technician\nWHERE Age IN ('36', '37')"}
{"answer":"SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"","question":"How many stations does Mountain View city has?","context":"CREATE TABLE station (city VARCHAR)","generation":"SELECT COUNT(*)\nFROM station\nWHERE city = 'Mountain View'"}
{"answer":"SELECT COUNT(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Glenn\"","question":"How many donors have endowment for school named \"Glenn\"?","context":"CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)","generation":"SELECT COUNT(donator_name)\nFROM endowment\nWHERE school_name = 'Glenn'"}
{"answer":"SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0","question":"Find the first and last names of people who payed more than the rooms' base prices.","context":"CREATE TABLE Reservations (firstname VARCHAR, lastname VARCHAR, Room VARCHAR, Rate VARCHAR); CREATE TABLE Rooms (RoomId VARCHAR, basePrice VARCHAR)","generation":"SELECT firstname, lastname\nFROM Reservations\nWHERE Rate > (SELECT basePrice\nFROM Rooms\nWHERE Room = Reservations.Room)"}
{"answer":"SELECT student_id FROM student_course_attendance WHERE course_id = 301","question":"What are the id of students who registered course 301?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)","generation":"SELECT student_id\nFROM student_course_attendance\nWHERE course_id = '301'"}
{"answer":"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3","question":"Find the name and id of the top 3 expensive rooms.","context":"CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)","generation":"SELECT RoomName, RoomId\nFROM Rooms\nORDER BY basePrice DESC\nLIMIT 3"}
{"answer":"SELECT name FROM storm WHERE NOT storm_id IN (SELECT storm_id FROM affected_region)","question":"Show the name of storms which don't have affected region in record.","context":"CREATE TABLE affected_region (name VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT storm.name\nFROM storm\nLEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id\nWHERE affected_region.storm_id IS NULL"}
{"answer":"SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM perpetrator)","question":"List the names of people that are not perpetrators.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE perpetrator (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT Name\nFROM people\nWHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)"}
{"answer":"SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC","question":"List the total points of gymnasts in descending order.","context":"CREATE TABLE gymnast (Total_Points VARCHAR)","generation":"SELECT Total_Points\nFROM gymnast\nORDER BY Total_Points DESC"}
{"answer":"SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of the organization that has published the largest number of papers.","context":"CREATE TABLE inst (name VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT inst.name\nFROM inst\nJOIN authorship ON inst.instid = authorship.instid\nJOIN papers ON authorship.paperid = papers.paperid\nGROUP BY inst.name\nORDER BY COUNT(papers.paperid) DESC\nLIMIT 1"}
{"answer":"SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'","question":"List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.","context":"CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR)","generation":"SELECT DISTINCT stadium.name\nFROM stadium\nJOIN game ON stadium.id = game.stadium_id\nJOIN injury_accident ON game.id = injury_accident.game_id\nWHERE injury_accident.player = 'Walter Samuel'\nAND injury_accident.player = 'Thiago Motta'"}
{"answer":"SELECT name FROM races WHERE YEAR = 2017","question":"Find the names of all races held in 2017.","context":"CREATE TABLE races (name VARCHAR, YEAR VARCHAR)","generation":"SELECT name\nFROM races\nWHERE YEAR = '2017'"}
{"answer":"SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts","question":"Show the id, the date of account opened, the account name, and other account detail for all accounts.","context":"CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR)","generation":"SELECT account_id, date_account_opened, account_name, other_account_details\nFROM Accounts"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = \"Aaron\" AND t1.lname = \"Turon\"","question":"Find all the papers published by \"Aaron Turon\".","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  WHERE authid = 'Aaron Turon'\n)"}
{"answer":"SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq","question":"Find the id of the courses that do not have any prerequisite?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)","generation":"SELECT course_id\nFROM course\nWHERE course_id NOT IN (SELECT course_id\n                        FROM prereq)"}
{"answer":"SELECT T1.WiFi, T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\"","question":"What are the wifi and screen mode type of the hardware model named \"LG-P760\"?","context":"CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE chip_model (WiFi VARCHAR, Model_name VARCHAR); CREATE TABLE screen_mode (Type VARCHAR, Graphics_mode VARCHAR)","generation":"SELECT screen_mode.Type, chip_model.WiFi\nFROM phone\nINNER JOIN screen_mode ON phone.screen_mode = screen_mode.Graphics_mode\nINNER JOIN chip_model ON phone.chip_model = chip_model.Model_name\nWHERE phone.Hardware_Model_name = 'LG-P760'"}
{"answer":"SELECT DISTINCT (BillingCountry) FROM INVOICE","question":"What are the distinct billing countries of the invoices?","context":"CREATE TABLE INVOICE (BillingCountry VARCHAR)","generation":"SELECT DISTINCT BillingCountry\nFROM INVOICE"}
{"answer":"SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"","question":"What is the age of student Linda Smith?","context":"CREATE TABLE Student (Age VARCHAR, Fname VARCHAR, Lname VARCHAR)","generation":"SELECT Age FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith'"}
{"answer":"SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the most common genre in all tracks?","context":"CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)","generation":"SELECT G.Name\nFROM GENRE G\nINNER JOIN TRACK T ON G.GenreId = T.GenreId\nGROUP BY G.Name\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\"","question":"What are the total scores of the body builders whose birthday contains the string \"January\" ?","context":"CREATE TABLE people (people_id VARCHAR, Birth_Date VARCHAR); CREATE TABLE body_builder (total VARCHAR, people_id VARCHAR)","generation":"SELECT total\nFROM body_builder\nWHERE people_id IN (\n  SELECT people_id\n  FROM people\n  WHERE Birth_Date LIKE '%January%'\n)"}
{"answer":"SELECT Date, Name, venue FROM event ORDER BY Event_Attendance DESC","question":"Show the dates, places, and names of events in descending order of the attendance.","context":"CREATE TABLE event (Date VARCHAR, Name VARCHAR, venue VARCHAR, Event_Attendance VARCHAR)","generation":"SELECT Date, Name, venue\nFROM event\nORDER BY Event_Attendance DESC"}
{"answer":"SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'","question":"What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'","context":"CREATE TABLE payments (payment_date VARCHAR, amount_paid VARCHAR, payment_type_code VARCHAR)","generation":"SELECT payment_date\nFROM payments\nWHERE amount_paid > 300 OR payment_type_code = 'Check'"}
{"answer":"SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance","question":"Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.","context":"CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT accounts.name, checking.balance AS checking_balance, savings.balance AS savings_balance\nFROM accounts\nJOIN checking ON accounts.custid = checking.custid\nJOIN savings ON accounts.custid = savings.custid\nWHERE savings.balance < checking.balance"}
{"answer":"SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1","question":"what is the salary and name of the employee who has the most number of aircraft certificates?","context":"CREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)","generation":"SELECT e.name, e.salary\nFROM Employee e\nJOIN (\n  SELECT eid, COUNT(*) AS num_certs\n  FROM Certificate\n  GROUP BY eid\n  ORDER BY num_certs DESC\n  LIMIT 1\n) c ON e.eid = c.eid"}
{"answer":"SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)","question":"What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?","context":"CREATE TABLE SECTION (course_id VARCHAR, building VARCHAR, room_number VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, course_id VARCHAR); CREATE TABLE classroom (capacity INTEGER, building VARCHAR, room_number VARCHAR); CREATE TABLE classroom (capacity INTEGER)","generation":"SELECT course.title, course.credits\nFROM course\nJOIN section ON course.course_id = section.course_id\nJOIN classroom ON section.building = classroom.building AND section.room_number = classroom.room_number\nWHERE classroom.capacity = (SELECT MAX(capacity) FROM classroom)"}
{"answer":"SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) > 1","question":"Find the title, credit, and department name of courses that have more than one prerequisites?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, dept_name VARCHAR, course_id VARCHAR)","generation":"SELECT course.title, course.credits, course.dept_name\nFROM course\nJOIN prereq ON course.course_id = prereq.course_id\nGROUP BY course.course_id\nHAVING COUNT(prereq.course_id) > 1"}
{"answer":"SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"","question":"Give me a list of names and years of races that had any driver whose forename is Lewis?","context":"CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (name VARCHAR, year VARCHAR, raceid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)","generation":"SELECT races.name, races.year\nFROM races\nJOIN results ON races.raceid = results.raceid\nJOIN drivers ON results.driverid = drivers.driverid\nWHERE drivers.forename = 'Lewis'"}
{"answer":"SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4","question":"What are the names of reviewers who had rated 3 star and 4 star?","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)","generation":"SELECT name\nFROM Reviewer\nWHERE rID IN (SELECT rID\nFROM Rating\nWHERE stars = 3 OR stars = 4)"}
{"answer":"SELECT fname, lname, address FROM employee ORDER BY Bdate","question":"list the first and last names, and the addresses of all employees in the ascending order of their birth date.","context":"CREATE TABLE employee (fname VARCHAR, lname VARCHAR, address VARCHAR, Bdate VARCHAR)","generation":"SELECT fname, lname, address\nFROM employee\nORDER BY Bdate ASC"}
{"answer":"SELECT flno FROM Flight WHERE distance > 2000","question":"Show flight number for all flights with more than 2000 distance.","context":"CREATE TABLE Flight (flno VARCHAR, distance INTEGER)","generation":"SELECT flno\nFROM Flight\nWHERE distance > 2000"}
{"answer":"SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the name of aircraft which fewest people have its certificate.","context":"CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)","generation":"SELECT Aircraft.name\nFROM Aircraft\nLEFT JOIN Certificate\nON Aircraft.aid = Certificate.aid\nGROUP BY Aircraft.name\nORDER BY COUNT(Certificate.aid) ASC\nLIMIT 1"}
{"answer":"SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Google\"","question":"Which authors belong to the institution \"Google\"? Show the first names and last names.","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)","generation":"SELECT authors.fname, authors.lname\nFROM authors\nJOIN authorship ON authors.authid = authorship.authid\nJOIN inst ON authorship.instid = inst.instid\nWHERE inst.name = \"Google\""}
{"answer":"SELECT first_name, last_name FROM Teachers ORDER BY last_name","question":"Find the first names and last names of teachers in alphabetical order of last name.","context":"CREATE TABLE Teachers (first_name VARCHAR, last_name VARCHAR)","generation":"SELECT first_name, last_name\nFROM Teachers\nORDER BY last_name"}
{"answer":"SELECT document_type_code FROM Ref_Document_Types","question":"What document type codes do we have?","context":"CREATE TABLE Ref_Document_Types (document_type_code VARCHAR)","generation":"SELECT document_type_code\nFROM Ref_Document_Types"}
{"answer":"SELECT Rating FROM Restaurant WHERE ResName = \"Subway\"","question":"What is the rating of the restaurant Subway?","context":"CREATE TABLE Restaurant (Rating VARCHAR, ResName VARCHAR)","generation":"SELECT Rating\nFROM Restaurant\nWHERE ResName = 'Subway'"}
{"answer":"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" OR T1.name = \"Susan\"","question":"Find the id of users who are followed by Mary or Susan.","context":"CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)","generation":"SELECT uid\nFROM user_profiles\nWHERE uid IN (\n  SELECT f1\n  FROM follows\n  WHERE f2 = 'Mary'\n  UNION\n  SELECT f1\n  FROM follows\n  WHERE f2 = 'Susan'\n)"}
{"answer":"SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\")","question":"Find the average age of the students who have allergies with food and animal types.","context":"CREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)","generation":"SELECT AVG(age) FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE allergytype = 'food')) AND StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE allergytype = 'animal'))"}
{"answer":"SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance","question":"Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)","generation":"SELECT \n    SUM(checking.balance) AS checking_balance,\n    SUM(savings.balance) AS savings_balance\nFROM \n    checking\n    INNER JOIN savings ON checking.custid = savings.custid\nORDER BY \n    checking_balance + savings_balance ASC"}
{"answer":"SELECT COUNT(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = \"United Kingdom\" AND t3.Event_Name = \"Annaual Meeting\"","question":"How many Annual Meeting events happened in the United Kingdom region?","context":"CREATE TABLE party_events (party_id VARCHAR, Event_Name VARCHAR); CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE party (region_id VARCHAR, party_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM party_events\nWHERE Event_Name = 'Annual Meeting'\nAND party_id IN (\n  SELECT party_id\n  FROM party\n  WHERE region_id = 'United Kingdom'\n)"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3","question":"Who are the top 3 players in terms of overall rating?","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR)","generation":"SELECT player_name\nFROM Player\nWHERE player_api_id IN (\n    SELECT player_api_id\n    FROM Player_Attributes\n    ORDER BY overall_rating DESC\n    LIMIT 3\n)"}
{"answer":"SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id","question":"For each trip, return its ending station's installation date.","context":"CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)","generation":"SELECT t.end_station_id, s.installation_date\nFROM trip t\nJOIN station s ON t.end_station_id = s.id"}
{"answer":"SELECT Votes FROM election ORDER BY Votes DESC","question":"List the votes of elections in descending order.","context":"CREATE TABLE election (Votes VARCHAR)","generation":"SELECT Votes\nFROM election\nORDER BY Votes DESC"}
{"answer":"SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'","question":"What are the coupon amount of the coupons owned by both good and bad customers?","context":"CREATE TABLE Discount_Coupons (coupon_amount VARCHAR, coupon_id VARCHAR); CREATE TABLE customers (coupon_id VARCHAR, good_or_bad_customer VARCHAR)","generation":"SELECT coupon_amount\nFROM Discount_Coupons\nWHERE coupon_id IN (\n  SELECT coupon_id\n  FROM customers\n  WHERE good_or_bad_customer = 'good'\n  INTERSECT\n  SELECT coupon_id\n  FROM customers\n  WHERE good_or_bad_customer = 'bad'\n)"}
{"answer":"SELECT Hispanic FROM city WHERE Black > 10","question":"What are the percentage of hispanics in cities with the black percentage higher than 10?","context":"CREATE TABLE city (Hispanic VARCHAR, Black INTEGER)","generation":"SELECT \n    (SELECT \n        COUNT(*) \n    FROM \n        city \n    WHERE \n        Hispanic = 'yes' \n    AND \n        Black > 10) \/ \n    (SELECT \n        COUNT(*) \n    FROM \n        city \n    WHERE \n        Black > 10) AS percentage \nFROM \n    city"}
{"answer":"SELECT minister FROM party ORDER BY left_office DESC LIMIT 1","question":"Return the minister who left office at the latest time.","context":"CREATE TABLE party (minister VARCHAR, left_office VARCHAR)","generation":"SELECT minister\nFROM party\nWHERE left_office = (SELECT MAX(left_office) FROM party)"}
{"answer":"SELECT COUNT(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code","question":"Find the number of classes in each department.","context":"CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR)","generation":"SELECT department, COUNT(department) AS number_of_classes\nFROM course\nGROUP BY department\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the courses by department. The COUNT function is used to count the number of courses in each department. The AS clause is used to give the count a column name of number_of_classes. The query then selects the department and the number of classes in each department."}
{"answer":"SELECT T1.customer_id, T1.first_name, COUNT(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id","question":"How many bookings did each customer make? List the customer id, first name, and the count.","context":"CREATE TABLE bookings (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR)","generation":"SELECT Customers.customer_id, Customers.first_name, COUNT(bookings.customer_id) AS booking_count\nFROM Customers\nLEFT JOIN bookings ON Customers.customer_id = bookings.customer_id\nGROUP BY Customers.customer_id, Customers.first_name\nORDER BY booking_count DESC"}
{"answer":"SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC","question":"What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.","context":"CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR, FDA_approved VARCHAR)","generation":"SELECT medicine.id, medicine.Name, medicine.FDA_approved\nFROM medicine\nJOIN medicine_enzyme_interaction\nON medicine.id = medicine_enzyme_interaction.medicine_id\nGROUP BY medicine.id\nORDER BY COUNT(medicine_enzyme_interaction.medicine_id) DESC"}
{"answer":"SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1","question":"Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.","context":"CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)","generation":"SELECT date, max_temperature_f - min_temperature_f AS difference\nFROM weather\nWHERE (max_temperature_f - min_temperature_f) = (\n    SELECT MIN(max_temperature_f - min_temperature_f)\n    FROM weather\n)"}
{"answer":"SELECT COUNT(*) FROM school","question":"How many schools are there?","context":"CREATE TABLE school (Id VARCHAR)","generation":"SELECT COUNT(*) FROM school"}
{"answer":"SELECT customer_phone FROM available_policies","question":"Find all the phone numbers.","context":"CREATE TABLE available_policies (customer_phone VARCHAR)","generation":"SELECT customer_phone\nFROM available_policies"}
{"answer":"SELECT Venue FROM debate ORDER BY Num_of_Audience","question":"List the venues of debates in ascending order of the number of audience.","context":"CREATE TABLE debate (Venue VARCHAR, Num_of_Audience VARCHAR)","generation":"SELECT Venue\nFROM debate\nORDER BY Num_of_Audience ASC"}
{"answer":"SELECT T1.staff_name, T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name, T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id","question":"What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?","context":"CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Fault_Log (recorded_by_staff_id VARCHAR)","generation":"SELECT Staff.staff_name, Staff.staff_id\nFROM Staff\nLEFT JOIN Fault_Log ON Staff.staff_id = Fault_Log.recorded_by_staff_id\nLEFT JOIN Engineer_Visits ON Fault_Log.recorded_by_staff_id = Engineer_Visits.contact_staff_id\nWHERE Engineer_Visits.contact_staff_id IS NULL"}
{"answer":"SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)","question":"What are all the customer phone numbers under the most popular policy type?","context":"CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)","generation":"SELECT customer_phone\nFROM available_policies\nWHERE policy_type_code = (\n  SELECT policy_type_code\n  FROM available_policies\n  GROUP BY policy_type_code\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005","question":"How many gas station are opened between 2000 and 2005?","context":"CREATE TABLE gas_station (open_year INTEGER)","generation":"SELECT COUNT(*)\nFROM gas_station\nWHERE open_year BETWEEN 2000 AND 2005"}
{"answer":"SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')","question":"Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.","context":"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)","generation":"SELECT name, salary\nFROM instructor\nWHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')"}
{"answer":"SELECT name, dept_name FROM student ORDER BY tot_cred","question":"Find the name of the students and their department names sorted by their total credits in ascending order.","context":"CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)","generation":"SELECT name, dept_name, tot_cred\nFROM student\nORDER BY tot_cred ASC"}
{"answer":"SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'","question":"What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?","context":"CREATE TABLE enzyme (product VARCHAR, chromosome VARCHAR, porphyria VARCHAR, LOCATION VARCHAR)","generation":"SELECT product, chromosome, porphyria\nFROM enzyme\nWHERE LOCATION = 'Cytosol'"}
{"answer":"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\"","question":"What are the official languages of the countries of players from Maryland or Duke college?","context":"CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, College VARCHAR)","generation":"SELECT Official_native_language\nFROM country\nWHERE Country_id IN (SELECT Country\n                     FROM match_season\n                     WHERE College IN ('Maryland', 'Duke'))"}
{"answer":"SELECT Nationality, COUNT(*) FROM journalist GROUP BY Nationality","question":"Show the different nationalities and the number of journalists of each nationality.","context":"CREATE TABLE journalist (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(*) AS Number_of_Journalists\nFROM journalist\nGROUP BY Nationality\nORDER BY Nationality\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Selects the Nationality and COUNT(*) columns from the journalist table.\n- GROUP BY: Groups the rows in the result set by the Nationality column.\n- COUNT(*): Counts the number of rows in each group.\n- ORDER BY: Orders the rows in the result set by the Nationality column.\n\nThe query will return the following result set:\n| Nationality | Number_of_Journalists |\n| --- | --- |\n| American | 2 |\n| British | 1 |\n| French | 1 |\n| German | 1 |\n| Italian | 1 |\n\nThe query will show the different nationalities and the number of journalists of each nationality."}
{"answer":"SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'","question":"How many professors who has a either Ph.D. or MA degree?","context":"CREATE TABLE professor (prof_high_degree VARCHAR)","generation":"SELECT COUNT(*)\nFROM professor\nWHERE prof_high_degree IN ('Ph.D.', 'MA')"}
{"answer":"SELECT T2.cmi_cross_ref_id, T2.master_customer_id, COUNT(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id","question":"How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","context":"CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR); CREATE TABLE Business_Rates (cmi_cross_ref_id VARCHAR)","generation":"SELECT cmi_cross_ref_id, master_customer_id, COUNT(cmi_cross_ref_id) AS n\nFROM CMI_Cross_References\nLEFT JOIN Business_Rates ON CMI_Cross_References.cmi_cross_ref_id = Business_Rates.cmi_cross_ref_id\nGROUP BY cmi_cross_ref_id, master_customer_id\n[\/SQL]"}
{"answer":"SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"","question":"How many distinct colleges are associated with players from the team with name \"Columbus Crew\".","context":"CREATE TABLE match_season (College VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)","generation":"SELECT COUNT(DISTINCT College)\nFROM match_season\nWHERE Team = 'Columbus Crew'"}
{"answer":"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')","question":"What is the title of the prerequisite class of International Finance course?","context":"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)","generation":"SELECT title\nFROM course\nWHERE course_id IN (\n  SELECT prereq_id\n  FROM prereq\n  WHERE course_id = 'International Finance'\n)"}
{"answer":"SELECT Name, Age FROM editor","question":"What are the names and ages of editors?","context":"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name, Age\nFROM editor"}
{"answer":"SELECT route_name FROM Delivery_Routes ORDER BY route_name","question":"List the names of all routes in alphabetic order.","context":"CREATE TABLE Delivery_Routes (route_name VARCHAR)","generation":"SELECT route_name\nFROM Delivery_Routes\nORDER BY route_name ASC"}
{"answer":"SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","question":"Show white percentages of cities and the crime rates of counties they are in.","context":"CREATE TABLE city (White VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR)","generation":"SELECT city.White, county_public_safety.Crime_rate\nFROM city\nJOIN county_public_safety\nON city.County_ID = county_public_safety.County_ID"}
{"answer":"SELECT COUNT(DISTINCT state) FROM bank","question":"Find the number of different states which banks are located at.","context":"CREATE TABLE bank (state VARCHAR)","generation":"SELECT COUNT(DISTINCT state)\nFROM bank"}
{"answer":"SELECT role_description FROM ROLES WHERE role_code = \"ED\"","question":"What is the description of role code ED?","context":"CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR)","generation":"SELECT role_description\nFROM ROLES\nWHERE role_code = 'ED'"}
{"answer":"SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20","question":"How many proteins are associated with an institution in a building with at least 20 floors?","context":"CREATE TABLE institution (institution_id VARCHAR, building_id VARCHAR); CREATE TABLE building (building_id VARCHAR, floors VARCHAR); CREATE TABLE protein (institution_id VARCHAR)","generation":"SELECT COUNT(DISTINCT protein.institution_id)\nFROM protein\nJOIN institution ON protein.institution_id = institution.institution_id\nJOIN building ON institution.building_id = building.building_id\nWHERE building.floors >= 20"}
{"answer":"SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1","question":"Find all the forenames of distinct drivers who was in position 1 as standing and won?","context":"CREATE TABLE driverstandings (driverid VARCHAR, position VARCHAR, wins VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)","generation":"SELECT DISTINCT d.forename\nFROM driverstandings ds\nJOIN drivers d ON ds.driverid = d.driverid\nWHERE ds.position = 1 AND ds.wins > 0"}
{"answer":"SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = \"Dayana Robel\"","question":"Find all the policy type codes associated with the customer \"Dayana Robel\"","context":"CREATE TABLE customers (customer_id VARCHAR, customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)","generation":"SELECT policies.policy_type_code\nFROM customers\nINNER JOIN policies ON customers.customer_id = policies.customer_id\nWHERE customers.customer_details = 'Dayana Robel'"}
{"answer":"SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3","question":"what are the top 3 highest support rates?","context":"CREATE TABLE candidate (support_rate VARCHAR)","generation":"SELECT support_rate\nFROM candidate\nORDER BY support_rate DESC\nLIMIT 3"}
{"answer":"SELECT COUNT(DISTINCT driverId) FROM results WHERE NOT raceId IN (SELECT raceId FROM races WHERE YEAR <> 2009)","question":"How many drivers did not participate in the races held in 2009?","context":"CREATE TABLE races (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR); CREATE TABLE results (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR)","generation":"SELECT COUNT(DISTINCT driverId)\nFROM races\nWHERE YEAR != '2009'"}
{"answer":"SELECT MAX(followers), SUM(followers) FROM user_profiles","question":"Find the maximum and total number of followers of all users.","context":"CREATE TABLE user_profiles (followers INTEGER)","generation":"SELECT MAX(followers), SUM(followers) FROM user_profiles"}
{"answer":"SELECT COUNT(*) FROM country","question":"How many countries are there in total?","context":"CREATE TABLE country (Id VARCHAR)","generation":"SELECT COUNT(*) FROM country"}
{"answer":"SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1","question":"List the publisher of the publication with the highest price.","context":"CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)","generation":"SELECT Publisher\nFROM publication\nWHERE Price = (SELECT MAX(Price) FROM publication)"}
{"answer":"SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States'","question":"What is the average and minimum age of all artists from United States.","context":"CREATE TABLE artist (age INTEGER, country VARCHAR)","generation":"SELECT AVG(age), MIN(age)\nFROM artist\nWHERE country = 'United States'"}
{"answer":"SELECT SUM(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = \"San Jose State University\"","question":"How many undergraduates are there in \"San Jose State University\" in year 2004?","context":"CREATE TABLE discipline_enrollments (undergraduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)","generation":"SELECT COUNT(*) AS undergraduates\nFROM discipline_enrollments\nWHERE undergraduate = 1\nAND campus = 'San Jose State University'\nAND year = '2004'"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = \"4560596484842\"","question":"What is the first name, last name, and phone of the customer with card 4560596484842.","context":"CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)","generation":"SELECT customer_first_name, customer_last_name, customer_phone\nFROM Customers\nINNER JOIN Customers_cards\nON Customers.customer_id = Customers_cards.customer_id\nWHERE card_number = '4560596484842'"}
{"answer":"SELECT name, email FROM user_profiles WHERE followers > 1000","question":"Find the name and email of the users who have more than 1000 followers.","context":"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)","generation":"SELECT name, email\nFROM user_profiles\nWHERE followers > 1000"}
{"answer":"SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1","question":"which shop has happy hour most frequently? List its id and number of happy hours.","context":"CREATE TABLE happy_hour (shop_id VARCHAR)","generation":"SELECT shop_id, COUNT(*) AS happy_hour_count\nFROM happy_hour\nGROUP BY shop_id\nORDER BY happy_hour_count DESC\nLIMIT 1"}
{"answer":"SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schuster\"","question":"Find the texts of assessment notes for teachers with last name \"Schuster\".","context":"CREATE TABLE Assessment_Notes (text_of_notes VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)","generation":"SELECT text_of_notes\nFROM Assessment_Notes\nINNER JOIN Teachers\nON Assessment_Notes.teacher_id = Teachers.teacher_id\nWHERE Teachers.last_name = 'Schuster'"}
{"answer":"SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000","question":"Find the names of all instructors in Comp. Sci. department with salary > 80000.","context":"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE dept_name = 'Comp. Sci.' AND salary > 80000"}
{"answer":"SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2","question":"find the event names that have more than 2 records.","context":"CREATE TABLE party_events (event_name VARCHAR)","generation":"SELECT event_name\nFROM party_events\nGROUP BY event_name\nHAVING COUNT(*) > 2"}
{"answer":"SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5","question":"Show card type codes with at least 5 cards.","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT card_type_code\nFROM Customers_cards\nGROUP BY card_type_code\nHAVING COUNT(*) >= 5"}
{"answer":"SELECT Major, COUNT(*) FROM Student GROUP BY Major ORDER BY COUNT(Major) LIMIT 1","question":"Which major has least number of students? List the major and the number of students.","context":"CREATE TABLE Student (Major VARCHAR)","generation":"SELECT Major, COUNT(*) AS NumberOfStudents\nFROM Student\nGROUP BY Major\nORDER BY NumberOfStudents ASC\nLIMIT 1"}
{"answer":"SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4","question":"find the ids of reviewers who did not give 4 star.","context":"CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)","generation":"SELECT DISTINCT rID\nFROM Rating\nWHERE stars != 4"}
{"answer":"SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the nominee who has been nominated the greatest number of times.","context":"CREATE TABLE musical (Nominee VARCHAR)","generation":"SELECT Nominee\nFROM musical\nGROUP BY Nominee\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id","question":"Show id, first name and last name for all customers and the number of accounts.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name, COUNT(Accounts.customer_id) AS number_of_accounts\nFROM Customers\nLEFT JOIN Accounts ON Customers.customer_id = Accounts.customer_id\nGROUP BY Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name\n[\/SQL]"}
{"answer":"SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'","question":"Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.","context":"CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT emp_fname\nFROM employee\nWHERE emp_num IN (SELECT prof_num\n                   FROM CLASS\n                   WHERE class_code IN ('CIS-220', 'QM-261'))"}
{"answer":"SELECT SUM(enrollment), AVG(enrollment) FROM school","question":"What are the total and average enrollment of all schools?","context":"CREATE TABLE school (enrollment INTEGER)","generation":"SELECT SUM(enrollment) AS total_enrollment, AVG(enrollment) AS average_enrollment\nFROM school"}
{"answer":"SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1","question":"List all employees in the circulation history of the document with id 1. List the employee's name.","context":"CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT e.Name\nFROM Employees e\nJOIN Circulation_History ch ON e.Id = ch.Id\nWHERE ch.Id = 1"}
{"answer":"SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1","question":"what is id of students who registered some courses but the least number of courses in these students?","context":"CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT student_id\nFROM student_course_registrations\nGROUP BY student_id\nHAVING COUNT(student_id) > 0\nORDER BY COUNT(student_id) ASC\nLIMIT 1"}
{"answer":"SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000","question":"Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.","context":"CREATE TABLE track (year_opened VARCHAR, seating INTEGER)","generation":"SELECT year_opened\nFROM track\nWHERE seating >= 5000\nOR seating <= 4000"}
{"answer":"SELECT AVG(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID","question":"What is the average age of all gymnasts?","context":"CREATE TABLE people (Age INTEGER, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR)","generation":"SELECT AVG(Age)\nFROM people\nWHERE People_ID IN (SELECT Gymnast_ID\n                    FROM gymnast)"}
{"answer":"SELECT T2.Hardware_Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32","question":"List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.","context":"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, chip_model VARCHAR)","generation":"SELECT phone.Hardware_Model_name, phone.Company_name\nFROM phone\nJOIN chip_model\nON phone.chip_model = chip_model.Model_name\nWHERE chip_model.Launch_year = '2002' OR chip_model.RAM_MiB > '32'"}
{"answer":"SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)","question":"What is the name and building of the departments whose budget is more than the average budget?","context":"CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget INTEGER)","generation":"SELECT dept_name, building\nFROM department\nWHERE budget > (SELECT AVG(budget) FROM department)"}
{"answer":"SELECT T1.driverid, T1.forename, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) >= 2","question":"Find the id, forename and number of races of all drivers who have at least participated in two races?","context":"CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)","generation":"SELECT drivers.driverid, drivers.forename, COUNT(results.raceid) AS number_of_races\nFROM drivers\nJOIN results ON drivers.driverid = results.driverid\nGROUP BY drivers.driverid, drivers.forename\nHAVING COUNT(results.raceid) >= 2\nORDER BY drivers.driverid"}
{"answer":"SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"","question":"What is the name of the institution that \"Matthias Blume\" belongs to?","context":"CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)","generation":"SELECT name\nFROM inst\nWHERE instid IN (SELECT instid\n                FROM authorship\n                WHERE authid IN (SELECT authid\n                                FROM authors\n                                WHERE fname = 'Matthias' AND lname = 'Blume'))"}
{"answer":"SELECT name FROM artist ORDER BY year_join DESC LIMIT 1","question":"What is the name of the artist who joined latest?","context":"CREATE TABLE artist (name VARCHAR, year_join VARCHAR)","generation":"SELECT name\nFROM artist\nORDER BY year_join DESC\nLIMIT 1"}
{"answer":"SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'","question":"List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.","context":"CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)","generation":"SELECT DISTINCT born_state\nFROM head\nINNER JOIN management ON head.head_id = management.head_id\nINNER JOIN department ON management.department_id = department.department_id\nWHERE department.name = 'Treasury'\nAND department.name = 'Homeland Security'"}
{"answer":"SELECT Name FROM technician ORDER BY Age","question":"List the names of technicians in ascending order of age.","context":"CREATE TABLE technician (Name VARCHAR, Age VARCHAR)","generation":"SELECT Name\nFROM technician\nORDER BY Age ASC"}
{"answer":"SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","question":"What are the ids, scores, and dates of the games which caused at least two injury accidents?","context":"CREATE TABLE game (id VARCHAR, score VARCHAR, date VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)","generation":"SELECT game.id, game.score, game.date\nFROM game\nWHERE game.id IN (\n    SELECT game_id\n    FROM injury_accident\n    GROUP BY game_id\n    HAVING COUNT(*) >= 2\n)"}
{"answer":"SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality","question":"Show different nationalities along with the number of hosts of each nationality.","context":"CREATE TABLE HOST (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(Nationality) AS NumberOfHosts\nFROM HOST\nGROUP BY Nationality\nORDER BY NumberOfHosts DESC"}
{"answer":"SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'","question":"what are the details of the cmi masters that have the cross reference code 'Tax'?","context":"CREATE TABLE CMI_Cross_References (master_customer_id VARCHAR, source_system_code VARCHAR); CREATE TABLE Customer_Master_Index (cmi_details VARCHAR, master_customer_id VARCHAR)","generation":"SELECT cmi_details\nFROM Customer_Master_Index\nWHERE master_customer_id IN (\n  SELECT master_customer_id\n  FROM CMI_Cross_References\n  WHERE source_system_code = 'Tax'\n)"}
{"answer":"SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most frequently used carrier of the phones.","context":"CREATE TABLE phone (Carrier VARCHAR)","generation":"SELECT Carrier, COUNT(*) AS Frequency\nFROM phone\nGROUP BY Carrier\nORDER BY Frequency DESC\nLIMIT 1"}
{"answer":"SELECT name FROM CLub WHERE NOT Club_ID IN (SELECT Club_ID FROM player)","question":"List the names of clubs that do not have any players.","context":"CREATE TABLE player (name VARCHAR, Club_ID VARCHAR); CREATE TABLE CLub (name VARCHAR, Club_ID VARCHAR)","generation":"SELECT Club.name\nFROM Club\nLEFT JOIN player ON Club.Club_ID = player.Club_ID\nWHERE player.Club_ID IS NULL"}
{"answer":"SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title","question":"list in alphabetic order all course names and their instructors' names in year 2008.","context":"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE teaches (course_id VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT course.title, instructor.name\nFROM course\nJOIN teaches ON course.course_id = teaches.course_id\nJOIN instructor ON teaches.id = instructor.id\nWHERE teaches.year = 2008\nORDER BY course.title, instructor.name\n[\/SQL]"}
{"answer":"SELECT name, lat, city FROM station ORDER BY lat LIMIT 1","question":"What are the name, latitude, and city of the station with the lowest latitude?","context":"CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)","generation":"SELECT name, lat, city\nFROM station\nORDER BY lat ASC\nLIMIT 1"}
{"answer":"SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor)","question":"Find the salaries of all distinct instructors that are less than the largest salary.","context":"CREATE TABLE instructor (salary INTEGER)","generation":"SELECT DISTINCT salary\nFROM instructor\nWHERE salary < (SELECT MAX(salary) FROM instructor)"}
{"answer":"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"","question":"List the name of tracks belongs to genre Rock or genre Jazz.","context":"CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)","generation":"SELECT tracks.name\nFROM tracks\nJOIN genres ON tracks.genre_id = genres.id\nWHERE genres.name = 'Rock' OR genres.name = 'Jazz'"}
{"answer":"SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId","question":"Find the names of artists that do not have any albums.","context":"CREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)","generation":"SELECT ARTIST.Name\nFROM ARTIST\nLEFT JOIN ALBUM ON ARTIST.ArtistId = ALBUM.ArtistId\nWHERE ALBUM.ArtistId IS NULL"}
{"answer":"SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT(*) >= 2","question":"Show headquarters with at least two companies in the banking industry.","context":"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)","generation":"SELECT headquarters\nFROM company\nWHERE main_industry = 'Banking'\nGROUP BY headquarters\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID","question":"What are the names of entrepreneurs?","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE entrepreneur (People_ID VARCHAR)","generation":"SELECT people.Name\nFROM people\nJOIN entrepreneur ON entrepreneur.People_ID = people.People_ID"}
{"answer":"SELECT name FROM building ORDER BY height_feet DESC LIMIT 1","question":"What is the name of the tallest building?","context":"CREATE TABLE building (name VARCHAR, height_feet VARCHAR)","generation":"SELECT name\nFROM building\nWHERE height_feet = (SELECT MAX(height_feet) FROM building)"}
{"answer":"SELECT LOCATION FROM gas_station ORDER BY open_year","question":"order all gas station locations by the opening year.","context":"CREATE TABLE gas_station (LOCATION VARCHAR, open_year VARCHAR)","generation":"SELECT * FROM gas_station ORDER BY open_year"}
{"answer":"SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT(*) > 2","question":"Find the name of services that have been used for more than 2 times in first notification of loss.","context":"CREATE TABLE services (service_name VARCHAR, service_id VARCHAR); CREATE TABLE first_notification_of_loss (service_id VARCHAR)","generation":"SELECT service_name\nFROM services\nWHERE service_id IN (\n  SELECT service_id\n  FROM first_notification_of_loss\n  GROUP BY service_id\n  HAVING COUNT(*) > 2\n)"}
{"answer":"SELECT COUNT(*) FROM gymnast","question":"How many gymnasts are there?","context":"CREATE TABLE gymnast (Id VARCHAR)","generation":"SELECT COUNT(*) FROM gymnast"}
{"answer":"SELECT fname, lname FROM employee WHERE salary > 30000","question":"Return the first names and last names of employees who earn more than 30000 in salary.","context":"CREATE TABLE employee (fname VARCHAR, lname VARCHAR, salary INTEGER)","generation":"SELECT fname, lname\nFROM employee\nWHERE salary > 30000"}
{"answer":"SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1","question":"What is the transaction type that has processed the greatest total amount in transactions?","context":"CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)","generation":"SELECT transaction_type\nFROM Financial_transactions\nORDER BY transaction_amount DESC\nLIMIT 1"}
{"answer":"SELECT Employees.employee_name, COUNT(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id, Circulation_History.draft_number, Circulation_History.copy_number ORDER BY COUNT(*) DESC LIMIT 1","question":"Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.","context":"CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)","generation":"SELECT e.Name, COUNT(*) AS Number_of_Drafts_and_Copies\nFROM Employees e\nJOIN Circulation_History ch ON e.Id = ch.Id\nGROUP BY e.Name\nORDER BY Number_of_Drafts_and_Copies DESC\nLIMIT 1"}
{"answer":"SELECT MAX(market_share), MIN(market_share), AVG(market_share) FROM browser","question":"What is the maximum, minimum and average market share of the listed browsers?","context":"CREATE TABLE browser (market_share INTEGER)","generation":"SELECT MAX(market_share), MIN(market_share), AVG(market_share)\nFROM browser"}
{"answer":"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"","question":"List Aerosmith's albums.","context":"CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)","generation":"SELECT albums.title\nFROM albums\nJOIN artists ON albums.artist_id = artists.id\nWHERE artists.name = 'Aerosmith'"}
{"answer":"SELECT COUNT(DISTINCT allergy) FROM Allergy_type","question":"How many allergies are there?","context":"CREATE TABLE Allergy_type (allergy VARCHAR)","generation":"SELECT COUNT(*)\nFROM Allergy_type"}
{"answer":"SELECT T1.club_id, T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY COUNT(*) DESC LIMIT 1","question":"How many gold medals has the club with the most coaches won?","context":"CREATE TABLE match_result (club_id VARCHAR, gold VARCHAR); CREATE TABLE coach (club_id VARCHAR)","generation":"SELECT COUNT(gold)\nFROM match_result\nWHERE club_id IN (\n  SELECT club_id\n  FROM coach\n  GROUP BY club_id\n  ORDER BY COUNT(club_id) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT Pilot_name FROM pilot ORDER BY Rank","question":"List the names of pilots in ascending order of rank.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, Rank VARCHAR)","generation":"SELECT Pilot_name\nFROM pilot\nORDER BY Rank ASC"}
{"answer":"SELECT title FROM film WHERE rating = 'R'","question":"What are all the movies rated as R? List the titles.","context":"CREATE TABLE film (title VARCHAR, rating VARCHAR)","generation":"SELECT title\nFROM film\nWHERE rating = 'R'"}
{"answer":"SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\"","question":"What are the names of the county that the delegates on \"Appropriations\" committee belong to?","context":"CREATE TABLE election (District VARCHAR, Committee VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT County_name\nFROM county\nINNER JOIN election\nON county.County_id = election.District\nWHERE Committee = 'Appropriations'"}
{"answer":"SELECT Kids FROM Reservations WHERE CheckIn = \"2010-09-21\" AND FirstName = \"DAMIEN\" AND LastName = \"TRACHSEL\"","question":"How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?","context":"CREATE TABLE Reservations (Kids VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)","generation":"SELECT COUNT(Kids)\nFROM Reservations\nWHERE CheckIn = '2010-09-21'\nAND LastName = 'TRACHSEL'\nAND FirstName = 'DAMIEN'"}
{"answer":"SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING SUM(T1.amount) <= 10","question":"List all the names of schools with an endowment amount smaller than or equal to 10.","context":"CREATE TABLE school (school_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)","generation":"SELECT school_name\nFROM school\nWHERE school_id IN (\n  SELECT school_id\n  FROM endowment\n  WHERE amount <= 10\n)"}
{"answer":"SELECT COUNT(*) FROM Documents WHERE document_status_code = \"done\"","question":"How many documents have the status code done?","context":"CREATE TABLE Documents (document_status_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM Documents\nWHERE document_status_code = 'done'"}
{"answer":"SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010","question":"Find courses that ran in Fall 2009 and in Spring 2010.","context":"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT course_id\nFROM SECTION\nWHERE semester IN ('Fall 2009', 'Spring 2010')\nGROUP BY course_id\nHAVING COUNT(DISTINCT semester) = 2"}
{"answer":"SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2","question":"Show the locations that have at least two performances.","context":"CREATE TABLE performance (LOCATION VARCHAR)","generation":"SELECT LOCATION\nFROM performance\nGROUP BY LOCATION\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = \"162\"","question":"What is the first name, last name, and phone of the customer with account name 162?","context":"CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)","generation":"SELECT customer_first_name, customer_last_name, customer_phone\nFROM Customers\nINNER JOIN Accounts\nON Customers.customer_id = Accounts.customer_id\nWHERE account_name = '162'"}
{"answer":"SELECT DISTINCT POSITION FROM pilot WHERE Age > 30","question":"List the distinct positions of pilots older than 30.","context":"CREATE TABLE pilot (POSITION VARCHAR, Age INTEGER)","generation":"SELECT DISTINCT POSITION\nFROM pilot\nWHERE Age > 30"}
{"answer":"SELECT COUNT(*) FROM party","question":"How many parties are there?","context":"CREATE TABLE party (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM party"}
{"answer":"SELECT name FROM people WHERE height > 200 OR height < 190","question":"find the names of people who are taller than 200 or lower than 190.","context":"CREATE TABLE people (name VARCHAR, height VARCHAR)","generation":"SELECT name\nFROM people\nWHERE height > 200 OR height < 190"}
{"answer":"SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM elimination)","question":"List the names of wrestlers that have not been eliminated.","context":"CREATE TABLE elimination (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR)","generation":"SELECT wrestler.Name\nFROM wrestler\nLEFT JOIN elimination\nON wrestler.Wrestler_ID = elimination.Wrestler_ID\nWHERE elimination.Wrestler_ID IS NULL"}
{"answer":"SELECT city_code FROM Student WHERE LName = \"Kim\"","question":"Which city does the student whose last name is \"Kim\" live in?","context":"CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)","generation":"SELECT city_code\nFROM Student\nWHERE LName = 'Kim'"}
{"answer":"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings))","question":"Find the checking balance of the accounts whose savings balance is higher than the average savings balance.","context":"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER)","generation":"SELECT checking.balance\nFROM checking\nJOIN accounts ON checking.custid = accounts.custid\nJOIN savings ON savings.custid = accounts.custid\nWHERE savings.balance > (SELECT AVG(savings.balance) FROM savings)"}
{"answer":"SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY AVG(trust) DESC LIMIT 1","question":"Find the name of the source user with the highest average trust score.","context":"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE trust (source_u_id VARCHAR)","generation":"SELECT name\nFROM useracct\nWHERE u_id IN (\n    SELECT source_u_id\n    FROM trust\n    GROUP BY source_u_id\n    HAVING AVG(trust) = (\n        SELECT AVG(trust)\n        FROM trust\n        GROUP BY source_u_id\n        ORDER BY AVG(trust) DESC\n        LIMIT 1\n    )\n)"}
{"answer":"SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'","question":"Find the title of course that is provided by Statistics but not Psychology departments.","context":"CREATE TABLE course (title VARCHAR, dept_name VARCHAR)","generation":"SELECT title\nFROM course\nWHERE dept_name = 'Statistics'\nAND title NOT IN (\n    SELECT title\n    FROM course\n    WHERE dept_name = 'Psychology'\n)"}
{"answer":"SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90","question":"Show the crime rate of counties with a city having white percentage more than 90.","context":"CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR); CREATE TABLE city (County_ID VARCHAR, White INTEGER)","generation":"SELECT county_public_safety.Crime_rate, county_public_safety.County_ID\nFROM county_public_safety\nJOIN city ON county_public_safety.County_ID = city.County_ID\nWHERE city.White > 90"}
{"answer":"SELECT COUNT(DISTINCT UID) FROM tweets","question":"Find the number of users who posted some tweets.","context":"CREATE TABLE tweets (UID VARCHAR)","generation":"SELECT COUNT(DISTINCT UID)\nFROM tweets"}
{"answer":"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"","question":"How many cards does customer Art Turcotte have?","context":"CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)","generation":"SELECT COUNT(*)\nFROM Customers_cards\nWHERE customer_id = 'Art Turcotte'"}
{"answer":"SELECT Join_Year FROM pilot ORDER BY Rank LIMIT 1","question":"What is the joined year of the pilot of the highest rank?","context":"CREATE TABLE pilot (Join_Year VARCHAR, Rank VARCHAR)","generation":"SELECT MAX(p.Join_Year)\nFROM pilot p\nWHERE p.Rank = (\n    SELECT MAX(p2.Rank)\n    FROM pilot p2\n)"}
{"answer":"SELECT name, distance FROM Aircraft WHERE aid = 12","question":"What is the name and distance for aircraft with id 12?","context":"CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)","generation":"SELECT name, distance\nFROM Aircraft\nWHERE aid = 12"}
{"answer":"SELECT T2.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party","question":"Show the name of each party and the corresponding number of delegates from that party.","context":"CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT Party, COUNT(Party) AS Number_of_delegates\nFROM election\nGROUP BY Party\nORDER BY Number_of_delegates DESC"}
{"answer":"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = \"Binders Unbound\"","question":"What are the last names of the author of the paper titled \"Binders Unbound\"?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)","generation":"SELECT authors.lname\nFROM authorship\nINNER JOIN authors ON authorship.authid = authors.authid\nINNER JOIN papers ON authorship.paperid = papers.paperid\nWHERE papers.title = 'Binders Unbound'"}
{"answer":"SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011","question":"Show all the locations where some cinemas were opened in both year 2010 and year 2011.","context":"CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)","generation":"SELECT DISTINCT LOCATION\nFROM cinema\nWHERE openning_year IN ('2010', '2011')"}
{"answer":"SELECT COUNT(*) FROM services","question":"How many services are there?","context":"CREATE TABLE services (Id VARCHAR)","generation":"SELECT COUNT(*) FROM services"}
{"answer":"SELECT COUNT(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name","question":"Find the number of checking accounts for each account name.","context":"CREATE TABLE checking (custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT name, COUNT(name) AS num_checking_accounts\nFROM accounts\nJOIN checking ON accounts.custid = checking.custid\nGROUP BY name\nORDER BY num_checking_accounts DESC"}
{"answer":"SELECT Name FROM Representative WHERE Party <> \"Republican\"","question":"What are the names of representatives whose party is not \"Republican\"?","context":"CREATE TABLE Representative (Name VARCHAR, Party VARCHAR)","generation":"SELECT Name\nFROM Representative\nWHERE Party != 'Republican'"}
{"answer":"SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","question":"What are the ids and names of the medicine that can interact with two or more enzymes?","context":"CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR)","generation":"SELECT medicine.id, medicine.Name\nFROM medicine\nJOIN medicine_enzyme_interaction ON medicine.id = medicine_enzyme_interaction.medicine_id\nGROUP BY medicine.id, medicine.Name\nHAVING COUNT(*) > 1"}
{"answer":"SELECT Carrier, COUNT(*) FROM phone GROUP BY Carrier","question":"Show different carriers of phones together with the number of phones with each carrier.","context":"CREATE TABLE phone (Carrier VARCHAR)","generation":"SELECT Carrier, COUNT(*) AS NumberOfPhones\nFROM phone\nGROUP BY Carrier\nORDER BY NumberOfPhones DESC"}
{"answer":"SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the customer id, first and last name with most number of accounts.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)","generation":"SELECT Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name\nFROM Customers\nJOIN Accounts\nON Customers.customer_id = Accounts.customer_id\nGROUP BY Customers.customer_id, Customers.customer_first_name, Customers.customer_last_name\nORDER BY COUNT(Accounts.customer_id) DESC\nLIMIT 1"}
{"answer":"SELECT aid FROM Aircraft WHERE distance > 1000","question":"Show ids for all aircrafts with more than 1000 distance.","context":"CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)","generation":"SELECT aid\nFROM Aircraft\nWHERE distance > 1000"}
{"answer":"SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"","question":"How many orders does Lucas Mancini has?","context":"CREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT COUNT(*) AS number_of_orders\nFROM invoices\nWHERE customer_id = 'Lucas Mancini'"}
{"answer":"SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC\/DC\"","question":"Find the title of all the albums of the artist \"AC\/DC\".","context":"CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)","generation":"SELECT A.Name\nFROM ARTIST A\nJOIN ALBUM A2 ON A.ArtistId = A2.ArtistId\nWHERE A.Name = 'AC\/DC'"}
{"answer":"SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name","question":"Show the names of pilots and the number of records they have.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)","generation":"SELECT pilot.Pilot_name, COUNT(pilot_record.pilot_ID)\nFROM pilot\nLEFT JOIN pilot_record\nON pilot.pilot_ID = pilot_record.pilot_ID\nGROUP BY pilot.Pilot_name\n[\/SQL]\n\n### Explanation\nThe query uses a LEFT JOIN to combine the pilot and pilot_record tables. The COUNT function counts the number of records in the pilot_record table for each pilot. The GROUP BY clause groups the results by pilot name.\n\n### Query Breakdown\n- SELECT pilot.Pilot_name, COUNT(pilot_record.pilot_ID)\n    - SELECTs the pilot name and the number of records for each pilot\n- FROM pilot\n    - FROM clause specifies the pilot table\n- LEFT JOIN pilot_record\n    - LEFT JOIN clause combines the pilot and pilot_record tables\n    - The pilot_record table is joined to the pilot table on the pilot_ID column\n- ON pilot.pilot_ID = pilot_record.pilot_ID\n    - The ON clause specifies the join condition\n- GROUP BY pilot.Pilot_name\n    - GROUP BY clause groups the results by pilot name\n\n### Constraints\n- The pilot table has a primary key of pilot_ID\n- The pilot_record table has a foreign key of pilot_ID that references the pilot table\n- The pilot table has a column called Pilot_name\n- The pilot_record table has a column called pilot_ID\n- The pilot_record table has a column called record_ID\n- The pilot_record table has a column called record_date\n- The pilot_record table has a column called record_type\n- The pilot_record table has a column called record_description"}
{"answer":"SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which bike traveled the most often in zip code 94002?","context":"CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)","generation":"SELECT bike_id\nFROM trip\nWHERE zip_code = '94002'\nGROUP BY bike_id\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING SUM(T2.number_city_affected) >= 10","question":"Show storm name with at least two regions and 10 cities affected.","context":"CREATE TABLE affected_region (storm_id VARCHAR, number_city_affected INTEGER); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT DISTINCT s.name\nFROM storm s\nJOIN affected_region ar ON s.storm_id = ar.storm_id\nGROUP BY s.name\nHAVING COUNT(DISTINCT ar.storm_id) >= 2\nAND COUNT(DISTINCT ar.number_city_affected) >= 10"}
{"answer":"SELECT roomName, bedType FROM Rooms WHERE decor = \"traditional\"","question":"List the type of bed and name of all traditional rooms.","context":"CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR, decor VARCHAR)","generation":"SELECT bedType, roomName\nFROM Rooms\nWHERE decor = 'traditional'"}
{"answer":"SELECT Age, COUNT(*) FROM editor GROUP BY Age","question":"What are the different ages of editors? Show each age along with the number of editors of that age.","context":"CREATE TABLE editor (Age VARCHAR)","generation":"SELECT Age, COUNT(*) AS NumberOfEditors\nFROM editor\nGROUP BY Age\nORDER BY Age\n[\/SQL]\n\n### Explanation\nThe query uses the following SQL commands:\n- SELECT: Selects the columns to be returned in the result set. In this case, the query selects the Age column and the COUNT(*) function, which counts the number of rows in the result set. The AS NumberOfEditors clause renames the COUNT(*) function to NumberOfEditors.\n- FROM: Specifies the table or tables to retrieve rows from. In this case, the query retrieves rows from the editor table.\n- GROUP BY: Groups the rows in the result set by the specified column or columns. In this case, the query groups the rows by the Age column.\n- ORDER BY: Sorts the rows in the result set by the specified column or columns. In this case, the query sorts the rows by the Age column.\n\n### Query Breakdown\nThe query can be broken down into the following parts:\n- SELECT clause:\n[SQL]\nSELECT Age, COUNT(*) AS NumberOfEditors\n[\/SQL]\nThis clause selects the Age column and the COUNT(*) function. The AS NumberOfEditors clause renames the COUNT(*) function to NumberOfEditors.\n- FROM clause:\n[SQL]\nFROM editor\n[\/SQL]\nThis clause specifies the table or tables to retrieve rows from. In this case, the query retrieves rows from the editor table.\n- GROUP BY clause:\n[SQL]\nGROUP BY Age\n[\/SQL]\nThis clause groups the rows in the result set by the specified column or columns. In this case, the query groups the rows by the Age column.\n- ORDER BY clause:\n[SQL]\nORDER BY Age\n[\/SQL]\nThis clause sorts the rows in the result"}
{"answer":"SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'","question":"Which events id does not have any participant with detail 'Kenyatta Kuhn'?","context":"CREATE TABLE Participants (Participant_ID VARCHAR); CREATE TABLE EVENTS (event_id VARCHAR, Participant_Details VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR, Participant_ID VARCHAR)","generation":"SELECT event_id\nFROM EVENTS\nWHERE event_id NOT IN (\n  SELECT event_id\n  FROM Participants_in_Events\n  WHERE Participant_Details = 'Kenyatta Kuhn'\n)"}
{"answer":"SELECT decor FROM Rooms WHERE roomName = \"Recluse and defiance\"","question":"What is the decor of room Recluse and defiance?","context":"CREATE TABLE Rooms (decor VARCHAR, roomName VARCHAR)","generation":"SELECT decor\nFROM Rooms\nWHERE roomName = 'Recluse and defiance'"}
{"answer":"SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC","question":"List name and damage for all storms in a descending order of max speed.","context":"CREATE TABLE storm (name VARCHAR, damage_millions_USD VARCHAR, max_speed VARCHAR)","generation":"SELECT name, damage_millions_USD\nFROM storm\nORDER BY max_speed DESC"}
{"answer":"SELECT COUNT(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code","question":"What is the number of professors for different school?","context":"CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)","generation":"SELECT school_code, COUNT(DISTINCT professor.dept_code) AS number_of_professors\nFROM department\nJOIN professor ON department.dept_code = professor.dept_code\nGROUP BY school_code\n[\/SQL]\n\n### Explanation\nThe query joins the department and professor tables on the dept_code column. It then groups the results by school_code and counts the number of distinct professor.dept_code values for each group. The result is a table with two columns: school_code and number_of_professors."}
{"answer":"SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions","question":"Show the number of transaction types.","context":"CREATE TABLE Financial_Transactions (transaction_type VARCHAR)","generation":"SELECT COUNT(DISTINCT transaction_type)\nFROM Financial_Transactions"}
{"answer":"SELECT COUNT(DISTINCT school_code) FROM department","question":"how many schools exist in total?","context":"CREATE TABLE department (school_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM department"}
{"answer":"SELECT AVG(credit_score) FROM customer WHERE NOT cust_id IN (SELECT cust_id FROM loan)","question":"Find the average credit score of the customers who do not have any loan.","context":"CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)","generation":"SELECT AVG(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING AVG(T2.rating) > 5","question":"Find the names of items whose rank is higher than 3 and whose average rating is above 5.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rank INTEGER, rating INTEGER)","generation":"SELECT title FROM item WHERE i_id IN (SELECT i_id FROM review WHERE rank > 3 AND rating > 5)\n[\/SQL]\n\n### Explanation\nThe query first finds the items with rank higher than 3 using the following subquery:\nSELECT i_id FROM review WHERE rank > 3\n\nThe subquery returns a list of item IDs. The outer query then finds the items with average rating above 5 using the following subquery:\nSELECT title FROM item WHERE i_id IN (SELECT i_id FROM review WHERE rank > 3)\n\nThe subquery returns a list of item titles. The outer query then returns the list of item titles.\n\n### Query Breakdown\nThe query can be broken down into the following parts:\n\n1. SELECT title FROM item WHERE i_id IN (SELECT i_id FROM review WHERE rank > 3)\n2. SELECT i_id FROM review WHERE rank > 3\n3. SELECT title FROM item WHERE i_id IN (SELECT i_id FROM review WHERE rating > 5)\n4. SELECT i_id FROM review WHERE rating > 5\n\nThe first subquery finds the items with rank higher than 3. The second subquery finds the item IDs of those items. The third subquery finds the items with average rating above 5. The fourth subquery finds the item IDs of those items. The outer query then returns the list of item titles.\n\n### Query Performance\nThe query performance of this query is O(n) where n is the number of items with rank higher than 3. The query performance of the subquery is O(n) where n is the number of items with average rating above 5. The overall query performance is O(n) where n is the number of items with rank higher than 3 and average rating above 5.\n\n##"}
{"answer":"SELECT SUM(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name <> 'Brown'","question":"Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.","context":"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR)","generation":"SELECT SUM(balance) FROM savings WHERE custid NOT IN (SELECT custid FROM accounts WHERE name = 'Brown')"}
{"answer":"SELECT AVG(floors), MAX(floors), MIN(floors) FROM building","question":"What are the average, maximum, and minimum number of floors for all buildings?","context":"CREATE TABLE building (floors INTEGER)","generation":"SELECT AVG(floors), MAX(floors), MIN(floors)\nFROM building"}
{"answer":"SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004","question":"the names of models that launched between 2002 and 2004.","context":"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year INTEGER)","generation":"SELECT Model_name\nFROM chip_model\nWHERE Launch_year BETWEEN 2002 AND 2004"}
{"answer":"SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION <> \"East\"","question":"List the distinct police forces of counties whose location is not on east side.","context":"CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)","generation":"SELECT DISTINCT Police_force\nFROM county_public_safety\nWHERE LOCATION NOT LIKE 'East%'"}
{"answer":"SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements","question":"Find the total and average amount of settlements.","context":"CREATE TABLE settlements (settlement_amount INTEGER)","generation":"SELECT SUM(settlement_amount) AS total_settlements, AVG(settlement_amount) AS average_settlements\nFROM settlements"}
{"answer":"SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'","question":"List the name of albums that are released by aritist whose name has 'Led'","context":"CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)","generation":"SELECT albums.title\nFROM albums\nJOIN artists ON albums.artist_id = artists.id\nWHERE artists.name LIKE '%Led%'"}
{"answer":"SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7","question":"What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?","context":"CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)","generation":"SELECT station.station_id\nFROM station\nWHERE station.lat > 37.4\nAND NOT EXISTS (\n  SELECT 1\n  FROM status\n  WHERE status.station_id = station.station_id\n  AND status.bikes_available < 7\n)"}
{"answer":"SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200","question":"Show the names of people that are on affirmative side of debates with number of audience bigger than 200.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Debate_ID VARCHAR, Num_of_Audience INTEGER); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)","generation":"SELECT people.Name\nFROM people\nJOIN debate_people ON people.People_ID = debate_people.Affirmative\nJOIN debate ON debate_people.Debate_ID = debate.Debate_ID\nWHERE debate.Num_of_Audience > 200"}
{"answer":"SELECT T1.incident_type_code, T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What are the code and description of the most frequent behavior incident type?","context":"CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR); CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)","generation":"SELECT incident_type_code, incident_type_description\nFROM Ref_Incident_Type\nINNER JOIN (\n  SELECT incident_type_code, COUNT(*) AS count\n  FROM Behavior_Incident\n  GROUP BY incident_type_code\n) AS t\nON Ref_Incident_Type.incident_type_code = t.incident_type_code\nORDER BY count DESC\nLIMIT 1"}
{"answer":"SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2","question":"What are the hometowns that are shared by at least two gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)","generation":"SELECT Hometown\nFROM people\nWHERE People_ID IN (SELECT People_ID\n                    FROM gymnast\n                    GROUP BY People_ID\n                    HAVING COUNT(*) >= 2)"}
{"answer":"SELECT AVG(Money_Requested) FROM entrepreneur","question":"What is the average money requested by all entrepreneurs?","context":"CREATE TABLE entrepreneur (Money_Requested INTEGER)","generation":"SELECT AVG(Money_Requested)\nFROM entrepreneur"}
{"answer":"SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'","question":"Find the names of all instructors in the Art department who have taught some course and the course_id.","context":"CREATE TABLE instructor (ID VARCHAR, dept_name VARCHAR); CREATE TABLE teaches (ID VARCHAR)","generation":"SELECT i.ID, t.ID\nFROM instructor i\nJOIN teaches t ON i.ID = t.ID\nWHERE i.dept_name = 'Art'"}
{"answer":"SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name","question":"Show the names of members and the location of performances they attended in ascending alphabetical order of their names.","context":"CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)","generation":"SELECT m.Name, p.Location\nFROM member m\nJOIN member_attendance ma ON m.Member_ID = ma.Member_ID\nJOIN performance p ON p.Performance_ID = ma.Performance_ID\nORDER BY m.Name ASC"}
{"answer":"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1","question":"Which campus has the most faculties in year 2003?","context":"CREATE TABLE faculty (campus VARCHAR, year VARCHAR, faculty VARCHAR); CREATE TABLE campuses (campus VARCHAR, id VARCHAR)","generation":"SELECT campus\nFROM faculty\nWHERE year = '2003'\nGROUP BY campus\nORDER BY COUNT(faculty) DESC\nLIMIT 1"}
{"answer":"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND t2.year = 2000","question":"How many degrees were conferred in \"San Jose State University\" in 2000?","context":"CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM degrees\nWHERE Id IN (SELECT Id\n             FROM campuses\n             WHERE Name = 'San Jose State University')\n  AND Year = 2000"}
{"answer":"SELECT MAX(T1.RAM_MiB), MIN(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"","question":"What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?","context":"CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (RAM_MiB INTEGER, Model_name VARCHAR)","generation":"SELECT \n    MIN(RAM_MiB) AS Minimum_RAM,\n    MAX(RAM_MiB) AS Maximum_RAM\nFROM\n    phone\nINNER JOIN\n    chip_model\nON\n    phone.chip_model = chip_model.Model_name\nWHERE\n    Company_name = 'Nokia Corporation'"}
{"answer":"SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)","question":"List the official names of cities that have not held any competition.","context":"CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)","generation":"SELECT Official_Name\nFROM city\nWHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)"}
{"answer":"SELECT campus FROM campuses WHERE county = \"Los Angeles\" AND YEAR > 1950","question":"Which university is in Los Angeles county and opened after 1950?","context":"CREATE TABLE campuses (campus VARCHAR, county VARCHAR, YEAR VARCHAR)","generation":"SELECT campus\nFROM campuses\nWHERE county = 'Los Angeles'\nAND YEAR > 1950"}
{"answer":"SELECT DISTINCT Theme FROM journal","question":"Show the distinct themes of journals.","context":"CREATE TABLE journal (Theme VARCHAR)","generation":"SELECT DISTINCT Theme\nFROM journal"}
{"answer":"SELECT T2.Name, T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID","question":"What are the names of representatives and the dates of elections they participated in.","context":"CREATE TABLE election (Date VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)","generation":"SELECT representative.Name, election.Date\nFROM representative\nJOIN election ON representative.Representative_ID = election.Representative_ID"}
{"answer":"SELECT DISTINCT T3.name, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name","question":"For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.","context":"CREATE TABLE Rating (stars VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, director VARCHAR)","generation":"SELECT r.name, m.title, r.stars\nFROM Rating r\nJOIN Movie m ON r.mID = m.mID\nJOIN Reviewer rv ON r.rID = rv.rID\nWHERE rv.name = m.director"}
{"answer":"SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40","question":"Which address has both members younger than 30 and members older than 40?","context":"CREATE TABLE member (address VARCHAR, age INTEGER)","generation":"SELECT address\nFROM member\nWHERE age < 30 AND age > 40"}
{"answer":"SELECT ResTypeName FROM Restaurant_Type","question":"List all restaurant types.","context":"CREATE TABLE Restaurant_Type (ResTypeName VARCHAR)","generation":"SELECT ResTypeName\nFROM Restaurant_Type"}
{"answer":"SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200","question":"Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.","context":"CREATE TABLE mountain (Country VARCHAR, Height INTEGER)","generation":"SELECT Country\nFROM mountain\nWHERE Height > 5600\nOR Height < 5200"}
{"answer":"SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\"","question":"What is the description of document status code 'working'?","context":"CREATE TABLE Ref_Document_Status (document_status_description VARCHAR, document_status_code VARCHAR)","generation":"SELECT document_status_description\nFROM Ref_Document_Status\nWHERE document_status_code = 'working'"}
{"answer":"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the country that has the most perpetrators?","context":"CREATE TABLE perpetrator (Country VARCHAR)","generation":"SELECT Country\nFROM perpetrator\nGROUP BY Country\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID","question":"What are the names of body builders?","context":"CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Name\nFROM people\nJOIN body_builder ON people.People_ID = body_builder.People_ID\nWHERE body_builder.People_ID IS NOT NULL"}
{"answer":"SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1","question":"What is the name, location and seating for the most recently opened track?","context":"CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)","generation":"SELECT name, location, seating\nFROM track\nWHERE year_opened = (SELECT MAX(year_opened) FROM track)"}
{"answer":"SELECT COUNT(*) FROM ALBUM","question":"How many albums are there?","context":"CREATE TABLE ALBUM (Id VARCHAR)","generation":"SELECT COUNT(*) FROM ALBUM"}
{"answer":"SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3","question":"What is the 3 most common cloud cover rates in the region of zip code 94107?","context":"CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)","generation":"SELECT cloud_cover, COUNT(*) AS count\nFROM weather\nWHERE zip_code = '94107'\nGROUP BY cloud_cover\nORDER BY count DESC\nLIMIT 3"}
{"answer":"SELECT detention_summary FROM Detention","question":"Return all detention summaries.","context":"CREATE TABLE Detention (detention_summary VARCHAR)","generation":"SELECT detention_summary\nFROM Detention"}
{"answer":"SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'","question":"Find the name of the instructors who taught C Programming course before.","context":"CREATE TABLE teaches (id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE id IN (SELECT id\n             FROM teaches\n             WHERE course_id = 'C Programming'\n             AND id NOT IN (SELECT id\n                            FROM teaches\n                            WHERE course_id = 'C Programming'\n                            AND year > 2010))"}
{"answer":"SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'","question":"What is department name and office for the professor whose last name is Heffington?","context":"CREATE TABLE employee (emp_num VARCHAR, emp_lname VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)","generation":"SELECT d.dept_name, p.prof_office\nFROM professor p\nJOIN employee e ON p.emp_num = e.emp_num\nJOIN department d ON p.dept_code = d.dept_code\nWHERE e.emp_lname = 'Heffington'"}
{"answer":"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2","question":"What are the countries that have at least two perpetrators?","context":"CREATE TABLE perpetrator (Country VARCHAR)","generation":"SELECT Country\nFROM perpetrator\nGROUP BY Country\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT SUM(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\"","question":"List total amount of  invoice from Chicago, IL.","context":"CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)","generation":"SELECT total\nFROM invoices\nWHERE billing_city = 'Chicago' AND billing_state = 'IL'"}
{"answer":"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT MIN(amount_piad) FROM claim_headers)","question":"What is the name of the customer who has made the minimum amount of payment in one claim?","context":"CREATE TABLE claim_headers (amount_piad INTEGER); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_piad INTEGER)","generation":"SELECT customer_details\nFROM customers\nWHERE customer_id IN (\n  SELECT customer_id\n  FROM policies\n  JOIN claim_headers\n  ON policies.policy_id = claim_headers.policy_id\n  WHERE amount_piad = (\n    SELECT MIN(amount_piad)\n    FROM claim_headers\n  )\n)"}
{"answer":"SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1","question":"Which month has the most happy hours?","context":"CREATE TABLE happy_hour (MONTH VARCHAR)","generation":"SELECT MONTH\nFROM happy_hour\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT Elimination_Move FROM Elimination WHERE Team = \"Team Orton\"","question":"What are the elimination moves of wrestlers whose team is \"Team Orton\"?","context":"CREATE TABLE Elimination (Elimination_Move VARCHAR, Team VARCHAR)","generation":"SELECT Elimination_Move\nFROM Elimination\nWHERE Team = 'Team Orton'"}
{"answer":"SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code","question":"Find the number of departments in each school.","context":"CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)","generation":"SELECT school_code, COUNT(*) AS num_depts\nFROM department\nGROUP BY school_code\nORDER BY school_code"}
{"answer":"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor <> \"Rachel Elnaugh\"","question":"What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?","context":"CREATE TABLE entrepreneur (People_ID VARCHAR, Investor VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Name\nFROM entrepreneur\nINNER JOIN people\nON entrepreneur.People_ID = people.People_ID\nWHERE entrepreneur.Investor != 'Rachel Elnaugh'"}
{"answer":"SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details <> 'Schmidt ,  Kertzmann and Lubowitz'","question":"What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","context":"CREATE TABLE Rent_Arrears (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Customer_Master_Index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR)","generation":"SELECT Rent_Arrears.council_tax_id\nFROM Rent_Arrears\nJOIN CMI_Cross_References ON Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id\nJOIN Customer_Master_Index ON CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id\nWHERE Customer_Master_Index.cmi_details != 'Schmidt, Kertzmann and Lubowitz'"}
{"answer":"SELECT T1.event_id, T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING COUNT(*) > 1","question":"What are the ids and details of events that have more than one participants?","context":"CREATE TABLE EVENTS (event_id VARCHAR, event_details VARCHAR, Event_ID VARCHAR); CREATE TABLE Participants_in_Events (Event_ID VARCHAR)","generation":"SELECT EVENTS.event_id, EVENTS.event_details\nFROM EVENTS\nJOIN Participants_in_Events\nON EVENTS.event_id = Participants_in_Events.Event_ID\nGROUP BY EVENTS.event_id\nHAVING COUNT(Participants_in_Events.Event_ID) > 1"}
{"answer":"SELECT Date FROM game ORDER BY home_team DESC","question":"List the dates of games by the home team name in descending order.","context":"CREATE TABLE game (Date VARCHAR, home_team VARCHAR)","generation":"SELECT home_team, Date\nFROM game\nORDER BY home_team DESC"}
{"answer":"SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70","question":"Find all the zip codes in which the max dew point have never reached 70.","context":"CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)","generation":"SELECT DISTINCT zip_code\nFROM weather\nWHERE max_dew_point_f < 70"}
{"answer":"SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) >= 2","question":"Show all the locations with at least two cinemas with capacity above 300.","context":"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT DISTINCT cinema.location\nFROM cinema\nWHERE cinema.capacity > 300\nGROUP BY cinema.location\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Meaghan\" AND T2.customer_last_name = \"Keeling\"","question":"Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.","context":"CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR)","generation":"SELECT Accounts.account_name, Accounts.other_account_details\nFROM Customers\nINNER JOIN Accounts ON Customers.customer_id = Accounts.customer_id\nWHERE Customers.customer_first_name = 'Meaghan' AND Customers.customer_last_name = 'Keeling'"}
{"answer":"SELECT COUNT(*) FROM campuses WHERE county = \"Los Angeles\"","question":"How many campuses are there in Los Angeles county?","context":"CREATE TABLE campuses (county VARCHAR)","generation":"SELECT COUNT(*) FROM campuses WHERE county = 'Los Angeles'"}
{"answer":"SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\"","question":"Show the names of clubs that have players with position \"Right Wing\".","context":"CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Club_ID VARCHAR, Position VARCHAR)","generation":"SELECT name\nFROM club\nWHERE Club_ID IN (SELECT Club_ID\n                  FROM player\n                  WHERE Position = 'Right Wing')"}
{"answer":"SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'","question":"Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.","context":"CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR, enzyme_id VARCHAR); CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE enzyme (id VARCHAR, product VARCHAR)","generation":"SELECT medicine.name, medicine.trade_name\nFROM medicine\nLEFT JOIN medicine_enzyme_interaction ON medicine.id = medicine_enzyme_interaction.medicine_id\nLEFT JOIN enzyme ON enzyme.id = medicine_enzyme_interaction.enzyme_id\nWHERE enzyme.product != 'Heme'"}
{"answer":"SELECT COUNT(DISTINCT SOURCE) FROM injury_accident","question":"How many different kinds of information sources are there for injury accidents?","context":"CREATE TABLE injury_accident (SOURCE VARCHAR)","generation":"SELECT COUNT(DISTINCT SOURCE)\nFROM injury_accident"}
{"answer":"SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND T2.year = 1996","question":"What is the campus fee of \"San Francisco State University\" in year 1996?","context":"CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)","generation":"SELECT year FROM csu_fees WHERE id = 'San Francisco State University' AND year = '1996'"}
{"answer":"SELECT DISTINCT start_station_name FROM trip WHERE duration < 100","question":"List all the distinct stations from which a trip of duration below 100 started.","context":"CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)","generation":"SELECT DISTINCT start_station_name\nFROM trip\nWHERE duration < 100"}
{"answer":"SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'","question":"Show first name, last name, age for all female students. Their sex is F.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)","generation":"SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'"}
{"answer":"SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC","question":"What are the weights of entrepreneurs in descending order of money requested?","context":"CREATE TABLE entrepreneur (People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Weight VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Weight, entrepreneur.Money_Requested\nFROM entrepreneur\nINNER JOIN people\nON entrepreneur.People_ID = people.People_ID\nORDER BY entrepreneur.Money_Requested DESC"}
{"answer":"SELECT DISTINCT region_name FROM region ORDER BY Label","question":"Show all distinct region names ordered by their labels.","context":"CREATE TABLE region (region_name VARCHAR, Label VARCHAR)","generation":"SELECT DISTINCT region_name\nFROM region\nORDER BY region_name"}
{"answer":"SELECT T1.first_name, T1.last_name, T1.other_details, T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","question":"List all every engineer's first name, last name, details and coresponding skill description.","context":"CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, other_details VARCHAR, engineer_id VARCHAR); CREATE TABLE Engineer_Skills (engineer_id VARCHAR, skill_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)","generation":"SELECT Maintenance_Engineers.first_name, Maintenance_Engineers.last_name, Maintenance_Engineers.other_details, Skills.skill_description\nFROM Maintenance_Engineers\nJOIN Engineer_Skills ON Maintenance_Engineers.engineer_id = Engineer_Skills.engineer_id\nJOIN Skills ON Engineer_Skills.skill_id = Skills.skill_id"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) LIMIT 1","question":"Find the name of the item with the lowest average rating.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT title\nFROM item\nWHERE i_id IN (\n  SELECT i_id\n  FROM review\n  GROUP BY i_id\n  HAVING AVG(rating) = (\n    SELECT MIN(AVG(rating))\n    FROM review\n    GROUP BY i_id\n  )\n)"}
{"answer":"SELECT COUNT(DISTINCT class_code) FROM CLASS","question":"How many different classes are there?","context":"CREATE TABLE CLASS (class_code VARCHAR)","generation":"SELECT COUNT(DISTINCT class_code)\nFROM CLASS"}
{"answer":"SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)","question":"List the id of students who never attends courses?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)","generation":"SELECT student_id\nFROM students\nWHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)"}
{"answer":"SELECT name FROM playlists","question":"List the name of all playlist.","context":"CREATE TABLE playlists (name VARCHAR)","generation":"SELECT name FROM playlists"}
{"answer":"SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10","question":"How many exhibitions have a attendance more than 100 or have a ticket price below 10?","context":"CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, ticket_price VARCHAR)","generation":"SELECT COUNT(*)\nFROM exhibition_record\nWHERE attendance > 100\nOR ticket_price < 10"}
{"answer":"SELECT T3.location, T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3","question":"find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.","context":"CREATE TABLE gas_station (location VARCHAR, Representative_Name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, Assets_billion VARCHAR)","generation":"SELECT g.location, g.Representative_Name\nFROM gas_station g\nINNER JOIN station_company sc ON g.station_id = sc.station_id\nINNER JOIN company c ON sc.company_id = c.company_id\nWHERE c.Assets_billion IN (SELECT DISTINCT c1.Assets_billion\n                           FROM company c1\n                           ORDER BY c1.Assets_billion DESC\n                           LIMIT 3)\nORDER BY c.Assets_billion DESC"}
{"answer":"SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1","question":"How many faculty lines are there in the university that conferred the most number of degrees in year 2002?","context":"CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)","generation":"SELECT COUNT(faculty)\nFROM faculty\nWHERE faculty IN (SELECT faculty\n                  FROM degrees\n                  WHERE year = 2002\n                  GROUP BY faculty\n                  ORDER BY COUNT(faculty) DESC\n                  LIMIT 1)"}
{"answer":"SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?","context":"CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (id VARCHAR, name VARCHAR)","generation":"SELECT enzyme.id, enzyme.name\nFROM enzyme\nJOIN medicine_enzyme_interaction ON enzyme.id = medicine_enzyme_interaction.enzyme_id\nWHERE medicine_enzyme_interaction.interaction_type = 'activator'\nGROUP BY enzyme.id, enzyme.name\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)","question":"What are the entry names of catalog with the attribute possessed by most entries.","context":"CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)","generation":"SELECT DISTINCT c.catalog_entry_name\nFROM Catalog_Contents c\nINNER JOIN Catalog_Contents_Additional_Attributes ca ON c.catalog_entry_id = ca.catalog_entry_id\nWHERE ca.attribute_value = (\n    SELECT attribute_value\n    FROM Catalog_Contents_Additional_Attributes\n    WHERE catalog_entry_id = c.catalog_entry_id\n    GROUP BY attribute_value\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"}
{"answer":"SELECT T2.address_id, T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","question":"Find the id and city of the student address with the highest average monthly rental.","context":"CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)","generation":"SELECT address_id, city\nFROM Addresses\nWHERE address_id = (\n    SELECT address_id\n    FROM Addresses\n    GROUP BY address_id\n    HAVING AVG(monthly_rental) = (\n        SELECT MAX(AVG(monthly_rental))\n        FROM Addresses\n        GROUP BY address_id\n    )\n)"}
{"answer":"SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING SUM(T1.budgeted) > 100 OR SUM(T3.amount) > 10","question":"Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.","context":"CREATE TABLE endowment (school_id VARCHAR, amount INTEGER); CREATE TABLE budget (school_id VARCHAR, budgeted INTEGER); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)","generation":"SELECT school.school_name\nFROM school\nJOIN budget ON school.school_id = budget.school_id\nJOIN endowment ON school.school_id = endowment.school_id\nWHERE (budget.budgeted > 100 OR endowment.amount > 10)\n[\/SQL]\n\n### Explanation\nThe query joins the school table with the budget and endowment tables on the school_id column. It then filters the results to show only schools with a total budget amount greater than 100 or a total endowment greater than 10."}
{"answer":"SELECT COUNT(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010","question":"How many distinct kinds of injuries happened after season 2010?","context":"CREATE TABLE injury_accident (injury VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, season INTEGER)","generation":"SELECT COUNT(DISTINCT injury)\nFROM injury_accident\nWHERE game_id IN (\n  SELECT id\n  FROM game\n  WHERE season > 2010\n)"}
{"answer":"SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers","question":"Show the crime rates of counties in ascending order of number of police officers.","context":"CREATE TABLE county_public_safety (Crime_rate VARCHAR, Police_officers VARCHAR)","generation":"SELECT Crime_rate, Police_officers\nFROM county_public_safety\nORDER BY Police_officers ASC"}
{"answer":"SELECT name FROM head WHERE born_state <> 'California'","question":"What are the names of the heads who are born outside the California state?","context":"CREATE TABLE head (name VARCHAR, born_state VARCHAR)","generation":"SELECT name\nFROM head\nWHERE born_state != 'California'"}
{"answer":"SELECT T2.Delegate, T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District","question":"Show the delegates and the names of county they belong to.","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT delegate, county_name\nFROM election\nJOIN county\nON election.district = county.county_id"}
{"answer":"SELECT title FROM papers WHERE title LIKE \"%Database%\"","question":"Which paper's title contains the word \"Database\"?","context":"CREATE TABLE papers (title VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE title LIKE '%Database%'"}
{"answer":"SELECT COUNT(*) FROM Movie WHERE YEAR < 2000","question":"How many movies were made before 2000?","context":"CREATE TABLE Movie (YEAR INTEGER)","generation":"SELECT COUNT(*)\nFROM Movie\nWHERE YEAR < 2000"}
{"answer":"SELECT COUNT(*) FROM member WHERE address <> 'Hartford'","question":"How many members are not living in Hartford?","context":"CREATE TABLE member (address VARCHAR)","generation":"SELECT COUNT(*) AS number_of_members_not_living_in_hartford\nFROM member\nWHERE address NOT LIKE 'Hartford%'"}
{"answer":"SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2","question":"Show the team that have at least two technicians.","context":"CREATE TABLE technician (Team VARCHAR)","generation":"SELECT Team\nFROM technician\nGROUP BY Team\nHAVING COUNT(Team) >= 2"}
{"answer":"SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name","question":"Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Negative VARCHAR)","generation":"SELECT p.Name, d.Date, d.Venue\nFROM people p\nJOIN debate_people dp ON p.People_ID = dp.People_ID\nJOIN debate d ON dp.Debate_ID = d.Debate_ID\nWHERE dp.Negative = 'Y'\nORDER BY p.Name"}
{"answer":"SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)","question":"Find the count of universities whose campus fee is greater than the average campus fee.","context":"CREATE TABLE csu_fees (campusfee INTEGER)","generation":"SELECT COUNT(*)\nFROM csu_fees\nWHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees)"}
{"answer":"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70","question":"Show names of technicians who are assigned to repair machines with value point more than 70.","context":"CREATE TABLE machine (machine_id VARCHAR, value_points INTEGER); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)","generation":"SELECT technician.Name\nFROM technician\nJOIN repair_assignment ON technician.technician_ID = repair_assignment.technician_ID\nJOIN machine ON repair_assignment.machine_id = machine.machine_id\nWHERE machine.value_points > 70"}
{"answer":"SELECT date_of_notes FROM Assessment_Notes","question":"What are the dates of the assessment notes?","context":"CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)","generation":"SELECT date_of_notes\nFROM Assessment_Notes"}
{"answer":"SELECT AVG(Injured) FROM perpetrator","question":"What is the average number of people injured by all perpetrators?","context":"CREATE TABLE perpetrator (Injured INTEGER)","generation":"SELECT AVG(Injured)\nFROM perpetrator"}
{"answer":"SELECT Zip_code FROM county WHERE County_name = \"Howard\"","question":"Show the zip code of the county with name \"Howard\".","context":"CREATE TABLE county (Zip_code VARCHAR, County_name VARCHAR)","generation":"SELECT Zip_code\nFROM county\nWHERE County_name = 'Howard'"}
{"answer":"SELECT T2.roomName, T1.Rate, T1.CheckIn, T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1","question":"Which room has the highest rate? List the room's full name, rate, check in and check out date.","context":"CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR); CREATE TABLE Reservations (Rate VARCHAR, CheckIn VARCHAR, CheckOut VARCHAR, Room VARCHAR)","generation":"SELECT r.roomName, r.Rate, r.CheckIn, r.CheckOut\nFROM Reservations r\nWHERE r.Rate = (SELECT MAX(Rate) FROM Reservations)"}
{"answer":"SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017","question":"What are the names of races that were held after 2017 and the circuits were in the country of Spain?","context":"CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)","generation":"SELECT races.name\nFROM races\nINNER JOIN circuits\nON races.circuitid = circuits.circuitid\nWHERE races.year > 2017\nAND circuits.country = 'Spain'"}
{"answer":"SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1","question":"Show the date of the tallest perpetrator.","context":"CREATE TABLE perpetrator (Date VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)","generation":"SELECT p.Date\nFROM perpetrator p\nJOIN people h ON p.People_ID = h.People_ID\nWHERE h.Height = (SELECT MAX(Height) FROM people)\n[\/SQL]\n\n### Explanation\nThe query joins the perpetrator and people tables on the People_ID column. It then selects the date from the perpetrator table where the height of the person in the people table is equal to the maximum height in the people table.\n\n### Query Breakdown\n- SELECT p.Date\nFROM perpetrator p\nJOIN people h ON p.People_ID = h.People_ID\nWHERE h.Height = (SELECT MAX(Height) FROM people)\n\n- SELECT MAX(Height) FROM people\n\n- SELECT p.Date\nFROM perpetrator p\nJOIN people h ON p.People_ID = h.People_ID\nWHERE h.Height = (SELECT MAX(Height) FROM people)\n\n- SELECT p.Date\nFROM perpetrator p\nJOIN people h ON p.People_ID = h.People_ID\nWHERE h.Height = 180\n\n- SELECT p.Date\nFROM perpetrator p\nWHERE p.People_ID = (SELECT People_ID FROM people WHERE Height = 180)\n\n- SELECT p.Date\nFROM perpetrator p\nWHERE p.People_ID = 1\n\n- SELECT p.Date\nFROM perpetrator p\nWHERE p.People_ID = 1\n\n- SELECT p.Date\nFROM perpetrator p\nWHERE p.People_ID = 1\n\n- SELECT p.Date\nFROM perpetrator p\nWHERE p.People_ID = 1\n\n- SELECT p.Date\nFROM"}
{"answer":"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"","question":"Find the names of the customers who have an deputy policy.","context":"CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)","generation":"SELECT customers.customer_details\nFROM customers\nINNER JOIN policies\nON customers.customer_id = policies.customer_id\nWHERE policies.policy_type_code = 'DEPUTY'"}
{"answer":"SELECT name, openning_year, capacity FROM cinema","question":"Show name, opening year, and capacity for each cinema.","context":"CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR, capacity VARCHAR)","generation":"SELECT name, openning_year, capacity\nFROM cinema"}
{"answer":"SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM company","question":"Show minimum, maximum, and average market value for all companies.","context":"CREATE TABLE company (market_value INTEGER)","generation":"SELECT MIN(market_value), MAX(market_value), AVG(market_value)\nFROM company"}
{"answer":"SELECT COUNT(*) FROM debate","question":"How many debates are there?","context":"CREATE TABLE debate (Id VARCHAR)","generation":"SELECT COUNT(*) FROM debate"}
{"answer":"SELECT title, directed_by FROM film","question":"Show the title and director for all films.","context":"CREATE TABLE film (title VARCHAR, directed_by VARCHAR)","generation":"SELECT title, directed_by\nFROM film"}
{"answer":"SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8","question":"A list of the top 8 countries by gross\/total invoice size. List country name and gross invoice size.","context":"CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)","generation":"SELECT billing_country, SUM(total) AS gross_invoice_size\nFROM invoices\nGROUP BY billing_country\nORDER BY gross_invoice_size DESC\nLIMIT 8"}
{"answer":"SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the people that have been comptroller the most times and the corresponding number of times.","context":"CREATE TABLE party (Comptroller VARCHAR)","generation":"SELECT Comptroller, COUNT(*) AS NumberOfTimes\nFROM party\nGROUP BY Comptroller\nORDER BY NumberOfTimes DESC\nLIMIT 1"}
{"answer":"SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1","question":"Who were the governors of the parties associated with delegates from district 1?","context":"CREATE TABLE party (Governor VARCHAR, Party_ID VARCHAR); CREATE TABLE election (Party VARCHAR, District VARCHAR)","generation":"SELECT Governor\nFROM party\nWHERE Party_ID IN (SELECT Party\n                   FROM election\n                   WHERE District = '1')"}
{"answer":"SELECT district FROM address GROUP BY district HAVING COUNT(*) >= 2","question":"Which districts have at least two addresses?","context":"CREATE TABLE address (district VARCHAR)","generation":"SELECT district\nFROM address\nGROUP BY district\nHAVING COUNT(*) >= 2"}
{"answer":"SELECT SUM(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York'","question":"Find the total amount of loans provided by bank branches in the state of New York.","context":"CREATE TABLE bank (branch_id VARCHAR, state VARCHAR); CREATE TABLE loan (amount INTEGER, branch_id VARCHAR)","generation":"SELECT SUM(amount)\nFROM loan\nINNER JOIN bank ON loan.branch_id = bank.branch_id\nWHERE bank.state = 'New York'"}
{"answer":"SELECT COUNT(*), T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code","question":"Find the number of classes in each school.","context":"CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR)","generation":"SELECT school_code, COUNT(crs_code) AS num_classes\nFROM department\nJOIN course ON department.dept_code = course.dept_code\nJOIN class ON course.crs_code = class.crs_code\nGROUP BY school_code\n[\/SQL]"}
{"answer":"SELECT roomName, decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice","question":"List the names and decor of rooms that have a king bed. Sort the list by their price.","context":"CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, bedtype VARCHAR, basePrice VARCHAR)","generation":"SELECT roomName, decor\nFROM Rooms\nWHERE bedtype = 'king'\nORDER BY basePrice"}
{"answer":"SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"","question":"Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"","context":"CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)","generation":"SELECT Apartments.apt_number\nFROM Apartments\nINNER JOIN Apartment_Bookings ON Apartments.apt_id = Apartment_Bookings.apt_id\nWHERE Apartment_Bookings.booking_status_code IN (\"Provisional\", \"Confirmed\")"}
{"answer":"SELECT COUNT(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000","question":"How many distinct delegates are from counties with population larger than 50000?","context":"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)","generation":"SELECT COUNT(DISTINCT Delegate)\nFROM election\nWHERE District IN (SELECT County_id\n                   FROM county\n                   WHERE Population > 50000)"}
{"answer":"SELECT T3.Pilot_name, T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank","question":"Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.","context":"CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR, Rank VARCHAR); CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Fleet_Series VARCHAR, Aircraft_ID VARCHAR)","generation":"SELECT p.Pilot_name, a.Fleet_Series\nFROM pilot p\nJOIN pilot_record pr ON p.Pilot_ID = pr.Pilot_ID\nJOIN aircraft a ON pr.Aircraft_ID = a.Aircraft_ID\nORDER BY p.Rank"}
{"answer":"SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the most common occupation of players.","context":"CREATE TABLE player (Occupation VARCHAR)","generation":"SELECT Occupation, COUNT(*) AS Count\nFROM player\nGROUP BY Occupation\nORDER BY Count DESC\nLIMIT 1"}
{"answer":"SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id","question":"List the names and origins of people who are not body builders.","context":"CREATE TABLE people (Name VARCHAR, birth_place VARCHAR, people_id VARCHAR); CREATE TABLE body_builder (people_id VARCHAR); CREATE TABLE people (Name VARCHAR, birth_place VARCHAR)","generation":"SELECT people.Name, people.birth_place\nFROM people\nLEFT JOIN body_builder ON people.people_id = body_builder.people_id\nWHERE body_builder.people_id IS NULL"}
{"answer":"SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800","question":"Show all the locations where no cinema has capacity over 800.","context":"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT LOCATION\nFROM cinema\nWHERE capacity <= 800"}
{"answer":"SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000","question":"What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT title\nFROM Movie\nWHERE year > 2000\nOR mID IN (SELECT mID\nFROM Rating\nWHERE rID = 'Brittany Harris')"}
{"answer":"SELECT Name FROM city ORDER BY Name","question":"What are the names of cities in ascending alphabetical order?","context":"CREATE TABLE city (Name VARCHAR)","generation":"SELECT Name FROM city ORDER BY Name ASC"}
{"answer":"SELECT COUNT(*) FROM employees WHERE country = \"Canada\"","question":"How many employees are living in Canada?","context":"CREATE TABLE employees (country VARCHAR)","generation":"SELECT COUNT(*)\nFROM employees\nWHERE country = 'Canada'"}
{"answer":"SELECT AVG(age), sex FROM Student GROUP BY sex","question":"Show the average age for male and female students.","context":"CREATE TABLE Student (sex VARCHAR, age INTEGER)","generation":"SELECT sex, AVG(age) AS average_age\nFROM Student\nGROUP BY sex"}
{"answer":"SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1","question":"Which major has most number of students?","context":"CREATE TABLE Student (major VARCHAR)","generation":"SELECT major, COUNT(*) AS num_students\nFROM Student\nGROUP BY major\nORDER BY num_students DESC\nLIMIT 1"}
{"answer":"SELECT T2.product_name, COUNT(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name","question":"Show all product names and the number of customers having an order on each product.","context":"CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_id VARCHAR); CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR)","generation":"SELECT Products.product_name, COUNT(Order_items.order_id) AS number_of_customers\nFROM Products\nLEFT JOIN Order_items ON Products.product_id = Order_items.product_id\nGROUP BY Products.product_name\n[\/SQL]\n\n### Explanation\nThe query first joins the Products table with the Order_items table on the product_id column. This creates a table with all the products and their corresponding order items.\n\nThe query then groups the table by product_name and counts the number of order items for each product. This gives us the number of customers having an order on each product.\n\nFinally, the query selects the product_name and the number of customers having an order on each product.\n\n### Join\nThe query uses a left join to combine the Products table with the Order_items table. This allows us to include all products in the result set, even if they do not have any order items.\n\n### Group By\nThe query uses the GROUP BY clause to group the table by product_name. This allows us to count the number of order items for each product.\n\n### Count\nThe query uses the COUNT function to count the number of order items for each product. This gives us the number of customers having an order on each product.\n\n### Select\nThe query selects the product_name and the number of customers having an order on each product.\n\n### Conclusion\nThe query answers [QUESTION]Show all product names and the number of customers having an order on each product.[\/QUESTION] by joining the Products table with the Order_items table, grouping the table by product_name, counting the number of order items for each product, and selecting the product_name and the number of customers having an order on each product."}
{"answer":"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"","question":"List the name of all tracks in the playlists of Movies.","context":"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)","generation":"SELECT tracks.name\nFROM playlist_tracks\nJOIN tracks ON playlist_tracks.track_id = tracks.id\nJOIN playlists ON playlist_tracks.playlist_id = playlists.id\nWHERE playlists.name = 'Movies'"}
{"answer":"SELECT T4.crs_description, T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'","question":"What are the description and credit of the course which the student whose last name is Smithson took?","context":"CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_credit VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR)","generation":"SELECT crs_description, crs_credit\nFROM course\nWHERE crs_code IN (SELECT crs_code\n                   FROM class\n                   WHERE class_code IN (SELECT class_code\n                                        FROM enroll\n                                        WHERE stu_num = (SELECT stu_num\n                                                         FROM student\n                                                         WHERE stu_lname = 'Smithson')))"}
{"answer":"SELECT rank, company, market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion","question":"find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.","context":"CREATE TABLE company (rank VARCHAR, company VARCHAR, market_value VARCHAR, main_industry VARCHAR, sales_billion VARCHAR, profits_billion VARCHAR)","generation":"SELECT rank, company, market_value\nFROM company\nWHERE main_industry = 'Banking'\nORDER BY sales_billion DESC, profits_billion DESC"}
{"answer":"SELECT city, MAX(lat) FROM station GROUP BY city","question":"For each city, return the highest latitude among its stations.","context":"CREATE TABLE station (city VARCHAR, lat INTEGER)","generation":"SELECT city, MAX(lat) AS max_lat\nFROM station\nGROUP BY city\nORDER BY max_lat DESC"}
{"answer":"SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'","question":"Find the first names of all professors in the Accounting department who is teaching some course and the class room.","context":"CREATE TABLE CLASS (class_room VARCHAR, prof_num VARCHAR); CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT DISTINCT professor.emp_fname\nFROM professor\nINNER JOIN department ON professor.dept_code = department.dept_code\nINNER JOIN CLASS ON professor.emp_num = CLASS.prof_num\nWHERE department.dept_name = 'Accounting'\n[\/SQL]\n\n### Explanation\nThe query joins the professor, department, and class tables to find the first names of all professors in the Accounting department who is teaching some course and the class room. The query uses the INNER JOIN clause to combine the tables based on the common column emp_num in the professor and CLASS tables and the dept_code column in the professor and department tables. The query then uses the WHERE clause to filter the results to only include professors in the Accounting department. The query uses the DISTINCT clause to eliminate duplicate rows in the results."}
{"answer":"SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2","question":"Show the names of counties that have at least two delegates.","context":"CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)","generation":"SELECT County_name\nFROM county\nWHERE County_id IN (SELECT DISTINCT District\n                    FROM election\n                    GROUP BY District\n                    HAVING COUNT(*) >= 2)"}
{"answer":"SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1","question":"Find the names of the regions which were affected by the storm that killed the greatest number of people.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, Number_Deaths VARCHAR)","generation":"SELECT region.region_name\nFROM region\nJOIN affected_region ON region.region_id = affected_region.region_id\nJOIN storm ON affected_region.storm_id = storm.storm_id\nWHERE storm.Number_Deaths = (SELECT MAX(Number_Deaths) FROM storm)\n[\/SQL]\n\n### Explanation\nThe query first joins the region table with the affected_region table to find the regions that were affected by the storm. Then, it joins the affected_region table with the storm table to find the storm that killed the greatest number of people. Finally, it selects the region name of the regions that were affected by the storm that killed the greatest number of people.\n\n### Query Breakdown\n- The first line of the query joins the region table with the affected_region table to find the regions that were affected by the storm.\n- The second line of the query joins the affected_region table with the storm table to find the storm that killed the greatest number of people.\n- The third line of the query selects the region name of the regions that were affected by the storm that killed the greatest number of people.\n- The fourth line of the query ends the SQL query with \""}
{"answer":"SELECT T2.dept_name, T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of department where has the largest number of professors with a Ph.D. degree?","context":"CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT d.dept_name\nFROM department d\nJOIN (\n  SELECT dept_code, COUNT(*) AS cnt\n  FROM professor\n  WHERE prof_high_degree = 'Ph.D.'\n  GROUP BY dept_code\n  ORDER BY cnt DESC\n  LIMIT 1\n) t ON d.dept_code = t.dept_code"}
{"answer":"SELECT school_name, LOCATION, mascot FROM school","question":"List the name, location, mascot for all schools.","context":"CREATE TABLE school (school_name VARCHAR, LOCATION VARCHAR, mascot VARCHAR)","generation":"SELECT school_name, location, mascot\nFROM school"}
{"answer":"SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type","question":"Show the transaction type and the number of transactions.","context":"CREATE TABLE Financial_transactions (transaction_type VARCHAR)","generation":"SELECT transaction_type, COUNT(*)\nFROM Financial_transactions\nGROUP BY transaction_type\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the transactions by their type. The COUNT(*) function counts the number of transactions in each group. The query then selects the transaction type and the number of transactions.\n\n### Example\nThe following example shows the output of the query:\n[SQL]\nSELECT transaction_type, COUNT(*)\nFROM Financial_transactions\nGROUP BY transaction_type\n[\/SQL]\n\n| transaction_type | COUNT(*) |\n| --- | --- |\n| Deposit | 10 |\n| Withdrawal | 5 |\n| Transfer | 3 |\n\nThe query shows that there are 10 deposits, 5 withdrawals, and 3 transfers.\n\n### Constraints\n- The database schema is given.\n- The query should be written in standard SQL.\n- The query should not use any proprietary SQL extensions.\n- The query should not use any external libraries or functions.\n- The query should not use any temporary tables or variables.\n- The query should be efficient and should not use any unnecessary resources.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should be able to run on any database system.\n- The query should"}
{"answer":"SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = \"Studio\"","question":"What is the average number of rooms of apartments with type code \"Studio\"?","context":"CREATE TABLE Apartments (room_count INTEGER, apt_type_code VARCHAR)","generation":"SELECT AVG(room_count)\nFROM Apartments\nWHERE apt_type_code = 'Studio'"}
{"answer":"SELECT ResName FROM Restaurant","question":"Show me all the restaurants.","context":"CREATE TABLE Restaurant (ResName VARCHAR)","generation":"SELECT * FROM Restaurant"}
{"answer":"SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2","question":"Find the name and partition id for users who tweeted less than twice.","context":"CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)","generation":"SELECT name, partitionid\nFROM user_profiles\nWHERE uid IN (\n  SELECT uid\n  FROM tweets\n  GROUP BY uid\n  HAVING COUNT(*) < 2\n)"}
{"answer":"SELECT COUNT(*) FROM store","question":"How many stores are there?","context":"CREATE TABLE store (Id VARCHAR)","generation":"SELECT COUNT(*) FROM store"}
{"answer":"SELECT COUNT(DISTINCT FDA_approved) FROM medicine","question":"How many distinct FDA approval statuses are there for the medicines?","context":"CREATE TABLE medicine (FDA_approved VARCHAR)","generation":"SELECT COUNT(DISTINCT FDA_approved)\nFROM medicine"}
{"answer":"SELECT Title FROM book ORDER BY Issues","question":"List the titles of the books in ascending order of issues.","context":"CREATE TABLE book (Title VARCHAR, Issues VARCHAR)","generation":"SELECT Title\nFROM book\nORDER BY Issues ASC"}
{"answer":"SELECT County_name, Population FROM county","question":"Show the county name and population of all counties.","context":"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)","generation":"SELECT County_name, Population\nFROM county"}
{"answer":"SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo'","question":"What is the average sales of the journals that have an editor whose work type is 'Photo'?","context":"CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)","generation":"SELECT AVG(journal.sales)\nFROM journal\nJOIN journal_committee ON journal.journal_ID = journal_committee.journal_ID\nWHERE journal_committee.work_type = 'Photo'"}
{"answer":"SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'","question":"What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?","context":"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR)","generation":"SELECT balance\nFROM checking\nWHERE custid IN (\n  SELECT custid\n  FROM accounts\n  WHERE name LIKE '%ee%'\n)"}
{"answer":"SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"","question":"Show the distinct names of mountains climbed by climbers from country \"West Germany\".","context":"CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Mountain_ID VARCHAR, Country VARCHAR)","generation":"SELECT DISTINCT mountain.Name\nFROM mountain\nJOIN climber ON mountain.Mountain_ID = climber.Mountain_ID\nWHERE climber.Country = \"West Germany\""}
{"answer":"SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'","question":"Find the name and salary of instructors who are advisors of the students from the Math department.","context":"CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)","generation":"SELECT i.name, i.salary\nFROM instructor i\nJOIN advisor a ON i.id = a.i_id\nJOIN student s ON a.s_id = s.id\nWHERE s.dept_name = 'Math'"}
{"answer":"SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC","question":"What are the names of representatives in descending order of votes?","context":"CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)","generation":"SELECT Name\nFROM representative\nORDER BY Representative_ID DESC"}
{"answer":"SELECT date FROM weather WHERE max_temperature_f > 85","question":"Give me the dates when the max temperature was higher than 85.","context":"CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)","generation":"SELECT date\nFROM weather\nWHERE max_temperature_f > 85"}
{"answer":"SELECT name FROM stadium WHERE name LIKE \"%Bank%\"","question":"Which stadium name contains the substring \"Bank\"?","context":"CREATE TABLE stadium (name VARCHAR)","generation":"SELECT name\nFROM stadium\nWHERE name LIKE '%Bank%'"}
{"answer":"SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15","question":"Show theme and year for all exhibitions with ticket prices lower than 15.","context":"CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price INTEGER)","generation":"SELECT theme, YEAR\nFROM exhibition\nWHERE ticket_price < 15"}
{"answer":"SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2","question":"Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.","context":"CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR, basePrice VARCHAR, maxOccupancy VARCHAR)","generation":"SELECT roomName, RoomId\nFROM Rooms\nWHERE basePrice > 160 AND maxOccupancy > 2"}
{"answer":"SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20","question":"Show the hometowns shared by people older than 23 and younger than 20.","context":"CREATE TABLE people (Hometown VARCHAR, Age INTEGER)","generation":"SELECT Hometown\nFROM people\nWHERE Age > 23 AND Age < 20"}
{"answer":"SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1","question":"What is detail of the student who most recently registered course?","context":"CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)","generation":"SELECT * FROM students WHERE student_id = (SELECT student_id FROM student_course_registrations WHERE registration_date = (SELECT MAX(registration_date) FROM student_course_registrations))"}
{"answer":"SELECT AVG(Event_Attendance), MAX(Event_Attendance) FROM event","question":"what are the average and maximum attendances of all events?","context":"CREATE TABLE event (Event_Attendance INTEGER)","generation":"SELECT AVG(Event_Attendance), MAX(Event_Attendance)\nFROM event"}
{"answer":"SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)","question":"Find the name of rooms whose price is higher than the average price.","context":"CREATE TABLE Rooms (roomName VARCHAR, basePrice INTEGER)","generation":"SELECT roomName\nFROM Rooms\nWHERE basePrice > (SELECT AVG(basePrice) FROM Rooms)"}
{"answer":"SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1","question":"Find the name and email for the users who have more than one follower.","context":"CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)","generation":"SELECT name, email\nFROM user_profiles\nWHERE uid IN (\n  SELECT f1\n  FROM follows\n  GROUP BY f1\n  HAVING COUNT(*) > 1\n)"}
{"answer":"SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the year and semester when offers the largest number of courses.","context":"CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)","generation":"SELECT semester, YEAR\nFROM SECTION\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"","question":"What are the monthly rentals of student addresses in Texas state?","context":"CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Student_Addresses (monthly_rental VARCHAR, address_id VARCHAR)","generation":"SELECT monthly_rental\nFROM Student_Addresses\nWHERE state_province_county = 'Texas'\n[\/SQL]\n\n### Explanation\nThe query selects the monthly_rental column from the Student_Addresses table where the state_province_county column is equal to 'Texas'."}
{"answer":"SELECT donator_name, SUM(amount) FROM endowment GROUP BY donator_name ORDER BY SUM(amount) DESC","question":"List each donator name and the amount of endowment in descending order of the amount of endowment.","context":"CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)","generation":"SELECT donator_name, amount\nFROM endowment\nORDER BY amount DESC"}
{"answer":"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state","question":"List the number of invoices from the US, grouped by state.","context":"CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)","generation":"SELECT billing_state, COUNT(*) AS num_invoices\nFROM invoices\nWHERE billing_country = 'US'\nGROUP BY billing_state\n[\/SQL]\n\n### Explanation\nThe query uses the WHERE clause to filter the invoices to only those from the US. The GROUP BY clause groups the invoices by state, and the COUNT(*) function counts the number of invoices in each group. The query then orders the results by the number of invoices in each state, with the highest number of invoices first."}
{"answer":"SELECT COUNT(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")","question":"Find the number of male (sex is 'M') students who have some food type allery.","context":"CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)","generation":"SELECT COUNT(*) FROM Student WHERE sex = 'M' AND StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy IN (SELECT Allergy FROM Allergy_Type WHERE allergytype = 'Food'))"}
{"answer":"SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\"","question":"How many kids stay in the rooms reserved by ROY SWEAZY?","context":"CREATE TABLE Reservations (kids VARCHAR, FirstName VARCHAR, LastName VARCHAR)","generation":"SELECT COUNT(kids)\nFROM Reservations\nWHERE FirstName = 'Roy' AND LastName = 'Sweazey'"}
{"answer":"SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\"","question":"What are the birth dates of employees living in Edmonton?","context":"CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)","generation":"SELECT BirthDate\nFROM EMPLOYEE\nWHERE City = 'Edmonton'"}
{"answer":"SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1","question":"Which film has the highest rental rate? And what is the rate?","context":"CREATE TABLE film (title VARCHAR, rental_rate VARCHAR)","generation":"SELECT title, rental_rate\nFROM film\nORDER BY rental_rate DESC\nLIMIT 1"}
{"answer":"SELECT T1.fault_short_name, T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","question":"For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.","context":"CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR, skill_id VARCHAR); CREATE TABLE Part_Faults (fault_short_name VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)","generation":"SELECT Part_Faults.fault_short_name, Skills.skill_description\nFROM Part_Faults\nJOIN Skills_Required_To_Fix ON Part_Faults.part_fault_id = Skills_Required_To_Fix.part_fault_id\nJOIN Skills ON Skills_Required_To_Fix.skill_id = Skills.skill_id"}
{"answer":"SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1","question":"What is the primary conference of the school that has the lowest acc percent score in the competition?","context":"CREATE TABLE basketball_match (school_id VARCHAR, acc_percent VARCHAR); CREATE TABLE university (Primary_conference VARCHAR, school_id VARCHAR)","generation":"SELECT university.Primary_conference\nFROM basketball_match\nJOIN university ON basketball_match.school_id = university.school_id\nWHERE basketball_match.acc_percent = (SELECT MIN(acc_percent) FROM basketball_match)"}
{"answer":"SELECT Birth_Date FROM People ORDER BY Height","question":"What are the birthdays of people in ascending order of height?","context":"CREATE TABLE People (Birth_Date VARCHAR, Height VARCHAR)","generation":"SELECT Birth_Date\nFROM People\nORDER BY Height\nASC"}
{"answer":"SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype","question":"Show all allergy type with number of students affected.","context":"CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)","generation":"SELECT allergytype, COUNT(allergy) AS 'Number of Students Affected'\nFROM Allergy_type\nINNER JOIN Has_allergy\nON Allergy_type.allergy = Has_allergy.allergy\nGROUP BY allergytype\n[\/SQL]"}
{"answer":"SELECT Name FROM climber ORDER BY Points DESC","question":"List the names of climbers in descending order of points.","context":"CREATE TABLE climber (Name VARCHAR, Points VARCHAR)","generation":"SELECT Name\nFROM climber\nORDER BY Points DESC"}
{"answer":"SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009","question":"How many drivers participated in the race Australian Grand Prix held in 2009?","context":"CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (raceid VARCHAR)","generation":"SELECT COUNT(DISTINCT r.driverid)\nFROM results r\nINNER JOIN races r2 ON r.raceid = r2.raceid\nWHERE r2.name = 'Australian Grand Prix' AND r2.year = 2009"}
{"answer":"SELECT COUNT(*) FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq)","question":"How many courses that do not have prerequisite?","context":"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM course\nWHERE course_id NOT IN (SELECT course_id\n                        FROM prereq)"}
{"answer":"SELECT COUNT(*) FROM Invoices","question":"How many invoices do we have?","context":"CREATE TABLE Invoices (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Invoices"}
{"answer":"SELECT COUNT(*) FROM Employee","question":"How many employees do we have?","context":"CREATE TABLE Employee (Id VARCHAR)","generation":"SELECT COUNT(*)\nFROM Employee"}
{"answer":"SELECT title FROM item ORDER BY title","question":"List the titles of all items in alphabetic order .","context":"CREATE TABLE item (title VARCHAR)","generation":"SELECT title FROM item ORDER BY title ASC"}
{"answer":"SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation","question":"Find the number of universities that have over a 20000 enrollment size for each affiliation type.","context":"CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)","generation":"SELECT affiliation, COUNT(*) AS number_of_universities\nFROM university\nWHERE enrollment > 20000\nGROUP BY affiliation\n[\/SQL]\n\n### Explanation\nThe query uses the following steps:\n- SELECT affiliation, COUNT(*) AS number_of_universities\n  - affiliation: The affiliation type of the university\n  - number_of_universities: The number of universities with an enrollment size over 20000 for each affiliation type\n- FROM university\n  - The table to query\n- WHERE enrollment > 20000\n  - The condition to filter the universities by enrollment size\n- GROUP BY affiliation\n  - Group the universities by affiliation type\n\nThe query will return the number of universities for each affiliation type that have an enrollment size over 20000."}
{"answer":"SELECT name, operating_system FROM web_client_accelerator WHERE CONNECTION <> 'Broadband'","question":"What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?","context":"CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, CONNECTION VARCHAR)","generation":"SELECT name, operating_system\nFROM web_client_accelerator\nWHERE CONNECTION != 'Broadband'"}
{"answer":"SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\"","question":"What is the average number of votes of representatives from party \"Republican\"?","context":"CREATE TABLE election (Votes INTEGER, Representative_ID VARCHAR); CREATE TABLE representative (Representative_ID VARCHAR, Party VARCHAR)","generation":"SELECT AVG(Votes)\nFROM representative\nWHERE Party = 'Republican'"}
{"answer":"SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"","question":"How many albums does Billy Cobham has?","context":"CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)","generation":"SELECT COUNT(*) FROM albums WHERE artist_id = 'Billy Cobham'"}
{"answer":"SELECT Team, COUNT(*) FROM elimination GROUP BY Team","question":"Show different teams in eliminations and the number of eliminations from each team.","context":"CREATE TABLE elimination (Team VARCHAR)","generation":"SELECT Team, COUNT(Team) AS NumberOfEliminations\nFROM elimination\nGROUP BY Team\nORDER BY NumberOfEliminations DESC"}
{"answer":"SELECT COUNT(*) FROM ADDRESSES WHERE zip_postcode = \"197\"","question":"How many addresses have zip code 197?","context":"CREATE TABLE ADDRESSES (zip_postcode VARCHAR)","generation":"SELECT COUNT(*)\nFROM ADDRESSES\nWHERE zip_postcode = '197'"}
{"answer":"SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"","question":"Which enzyme names have the substring \"ALA\"?","context":"CREATE TABLE enzyme (name VARCHAR)","generation":"SELECT name\nFROM enzyme\nWHERE name LIKE '%ALA%'"}
{"answer":"SELECT service_id, event_details FROM EVENTS","question":"List the service id and details for the events.","context":"CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR)","generation":"SELECT service_id, event_details\nFROM EVENTS"}
{"answer":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1","question":"Find the name of account that has the lowest total checking and saving balance.","context":"CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT name\nFROM accounts\nWHERE custid IN (\n  SELECT custid\n  FROM (\n    SELECT custid, SUM(balance) AS total\n    FROM checking\n    GROUP BY custid\n    UNION ALL\n    SELECT custid, SUM(balance) AS total\n    FROM savings\n    GROUP BY custid\n  ) AS t\n  ORDER BY total\n  LIMIT 1\n)"}
{"answer":"SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1","question":"Show the name and location of track with 1 race.","context":"CREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)","generation":"SELECT name, location\nFROM track\nWHERE track_id IN (SELECT track_id\n                   FROM race)"}
{"answer":"SELECT COUNT(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName = \"SWEAZY\"","question":"How many times does ROY SWEAZY has reserved a room.","context":"CREATE TABLE Reservations (FirstName VARCHAR, LastName VARCHAR)","generation":"SELECT COUNT(*)\nFROM Reservations\nWHERE FirstName = 'ROY' AND LastName = 'SWEAZY'"}
{"answer":"SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1","question":"Find the name of the department which has the highest average salary of professors.","context":"CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)","generation":"SELECT dept_name\nFROM instructor\nWHERE salary = (SELECT AVG(salary) FROM instructor)"}
{"answer":"SELECT Name FROM mountain ORDER BY Name","question":"What are the names of mountains in ascending alphabetical order?","context":"CREATE TABLE mountain (Name VARCHAR)","generation":"SELECT Name FROM mountain ORDER BY Name ASC"}
{"answer":"SELECT product_id FROM products_booked GROUP BY product_id HAVING COUNT(*) = 3","question":"What is the id of the product that is booked for 3 times?","context":"CREATE TABLE products_booked (product_id VARCHAR)","generation":"SELECT product_id\nFROM products_booked\nGROUP BY product_id\nHAVING COUNT(*) = 3"}
{"answer":"SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT MAX(authorder) FROM authorship)","question":"Retrieve the title of the paper that has the largest number of authors.","context":"CREATE TABLE authorship (authorder INTEGER); CREATE TABLE authorship (paperid VARCHAR, authorder INTEGER); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE paperid IN (\n  SELECT paperid\n  FROM authorship\n  GROUP BY paperid\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)"}
{"answer":"SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\"","question":"How many students have a food allergy?","context":"CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)","generation":"SELECT COUNT(*)\nFROM Has_allergy\nWHERE allergy IN (SELECT allergy FROM Allergy_type WHERE allergytype = 'food')"}
{"answer":"SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2","question":"Which months have more than 2 happy hours?","context":"CREATE TABLE happy_hour (MONTH VARCHAR)","generation":"SELECT MONTH\nFROM happy_hour\nGROUP BY MONTH\nHAVING COUNT(*) > 2"}
{"answer":"SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID","question":"What are the names of gymnasts?","context":"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT Name\nFROM people\nJOIN gymnast ON people.People_ID = gymnast.Gymnast_ID"}
{"answer":"SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'","question":"How many medicines have the FDA approval status 'No' ?","context":"CREATE TABLE medicine (FDA_approved VARCHAR)","generation":"SELECT COUNT(*)\nFROM medicine\nWHERE FDA_approved = 'No'"}
{"answer":"SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5","question":"A list of the top 5 countries by number of invoices. List country name and number of invoices.","context":"CREATE TABLE invoices (billing_country VARCHAR)","generation":"SELECT billing_country, COUNT(*) as num_invoices\nFROM invoices\nGROUP BY billing_country\nORDER BY num_invoices DESC\nLIMIT 5"}
{"answer":"SELECT COUNT(*) FROM performance","question":"How many performances are there?","context":"CREATE TABLE performance (Id VARCHAR)","generation":"SELECT COUNT(*) FROM performance"}
{"answer":"SELECT Country FROM mountain WHERE Height > 5000","question":"What are the countries of mountains with height bigger than 5000?","context":"CREATE TABLE mountain (Country VARCHAR, Height INTEGER)","generation":"SELECT Country\nFROM mountain\nWHERE Height > 5000"}
{"answer":"SELECT Sponsor_name FROM player WHERE Residence = \"Brandon\" OR Residence = \"Birtle\"","question":"Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".","context":"CREATE TABLE player (Sponsor_name VARCHAR, Residence VARCHAR)","generation":"SELECT Sponsor_name\nFROM player\nWHERE Residence IN (\"Brandon\", \"Birtle\")"}
{"answer":"SELECT minister, party_name FROM party ORDER BY took_office DESC","question":"Show all ministers and parties they belong to in descending order of the time they took office.","context":"CREATE TABLE party (minister VARCHAR, party_name VARCHAR, took_office VARCHAR)","generation":"SELECT minister, party_name, took_office\nFROM party\nORDER BY took_office DESC"}
{"answer":"SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500","question":"Find the official names of cities with population bigger than 1500 or smaller than 500.","context":"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)","generation":"SELECT Official_Name\nFROM city\nWHERE Population > 1500 OR Population < 500"}
{"answer":"SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\"","question":"How many female students have milk or egg allergies?","context":"CREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)","generation":"SELECT COUNT(*)\nFROM Student\nWHERE sex = 'F'\nAND StuID IN (\n    SELECT StuID\n    FROM has_allergy\n    WHERE allergy IN ('milk', 'egg')\n)"}
{"answer":"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1","question":"List the state in the US with the most invoices.","context":"CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)","generation":"SELECT billing_state\nFROM invoices\nGROUP BY billing_state\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines","question":"Which cmi cross reference id is not related to any parking taxes?","context":"CREATE TABLE parking_fines (cmi_cross_ref_id VARCHAR); CREATE TABLE cmi_cross_references (cmi_cross_ref_id VARCHAR)","generation":"SELECT cmi_cross_ref_id\nFROM cmi_cross_references\nWHERE cmi_cross_ref_id NOT IN (SELECT cmi_cross_ref_id FROM parking_fines)"}
{"answer":"SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city","question":"Find the number of employees whose title is IT Staff from each city?","context":"CREATE TABLE employees (city VARCHAR, title VARCHAR)","generation":"SELECT city, COUNT(*)\nFROM employees\nWHERE title = 'IT Staff'\nGROUP BY city"}
{"answer":"SELECT DISTINCT (catalog_entry_name) FROM catalog_contents","question":"Find the names of all the catalog entries.","context":"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)","generation":"SELECT catalog_entry_name\nFROM catalog_contents"}
{"answer":"SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","question":"How many registed students do each course have? List course name and the number of their registered students?","context":"CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)","generation":"SELECT course_name, COUNT(student_id) AS number_of_registered_students\nFROM courses\nLEFT JOIN student_course_registrations ON courses.course_id = student_course_registrations.course_id\nGROUP BY course_name\nORDER BY course_name"}
{"answer":"SELECT bedType, COUNT(*) FROM Rooms GROUP BY bedType","question":"Find the number of rooms for each bed type.","context":"CREATE TABLE Rooms (bedType VARCHAR)","generation":"SELECT bedType, COUNT(*) AS numberOfRooms\nFROM Rooms\nGROUP BY bedType\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the Rooms table by the bedType column. The COUNT(*) function counts the number of rows in each group. The AS clause renames the column to numberOfRooms.\n\n### Query Breakdown\n- SELECT bedType, COUNT(*) AS numberOfRooms\n    - bedType: The bedType column is selected.\n    - COUNT(*): The number of rows in each group is counted.\n    - AS numberOfRooms: The column is renamed to numberOfRooms.\n- FROM Rooms\n    - Rooms: The Rooms table is selected.\n- GROUP BY bedType\n    - bedType: The bedType column is used to group the rows.\n\n### Concepts\n- GROUP BY\n- COUNT(*)\n- AS\n\n### Tips\n- Use the GROUP BY clause to group rows by one or more columns.\n- Use the COUNT(*) function to count the number of rows in each group.\n- Use the AS clause to rename a column."}
{"answer":"SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3","question":"What are the ids and durations of the trips with the top 3 durations?","context":"CREATE TABLE trip (id VARCHAR, duration VARCHAR)","generation":"SELECT id, duration\nFROM trip\nORDER BY duration DESC\nLIMIT 3"}
{"answer":"SELECT AVG(bedroom_count) FROM Apartments","question":"What is the average number of bedrooms of all apartments?","context":"CREATE TABLE Apartments (bedroom_count INTEGER)","generation":"SELECT AVG(bedroom_count)\nFROM Apartments"}
{"answer":"SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major = 600","question":"Which student's age is older than 18 and is majoring in 600? List each student's first and last name.","context":"CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Major VARCHAR)","generation":"SELECT Fname, Lname\nFROM Student\nWHERE Age > 18 AND Major = '600'"}
{"answer":"SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id","question":"What are the ids of all students for courses and what are the names of those courses?","context":"CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)","generation":"SELECT student_id, course_name\nFROM student_course_registrations\nJOIN courses ON student_course_registrations.course_id = courses.course_id"}
{"answer":"SELECT AVG(Number_of_hosts) FROM party","question":"What is the average number of hosts for parties?","context":"CREATE TABLE party (Number_of_hosts INTEGER)","generation":"SELECT AVG(Number_of_hosts)\nFROM party"}
{"answer":"SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = \"China\" OR T2.Country = \"Japan\"","question":"What are the names of perpetrators in country \"China\" or \"Japan\"?","context":"CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT people.Name\nFROM people\nJOIN perpetrator\nON people.People_ID = perpetrator.People_ID\nWHERE Country = \"China\" OR Country = \"Japan\""}
{"answer":"SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%'","question":"Find the name of rooms booked by some customers whose first name contains ROY.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT RoomName\nFROM Rooms\nINNER JOIN Reservations\nON Rooms.RoomId = Reservations.Room\nWHERE RoomName IN (SELECT RoomName\nFROM Rooms\nINNER JOIN Reservations\nON Rooms.RoomId = Reservations.Room\nWHERE FirstName LIKE '%ROY%')"}
{"answer":"SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)","question":"Show the student id of the oldest student.","context":"CREATE TABLE Student (StuID VARCHAR, age INTEGER)","generation":"SELECT StuID\nFROM Student\nORDER BY age DESC\nLIMIT 1"}
{"answer":"SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3","question":"What parties have at least three representatives?","context":"CREATE TABLE representative (Party VARCHAR)","generation":"SELECT Party\nFROM representative\nGROUP BY Party\nHAVING COUNT(Party) >= 3"}
{"answer":"SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2 UNION SELECT T3.company_id, T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING COUNT(*) >= 2","question":"Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.","context":"CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR); CREATE TABLE Maintenance_Engineers (company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR, company_name VARCHAR)","generation":"SELECT Third_Party_Companies.company_id, Third_Party_Companies.company_name\nFROM Third_Party_Companies\nWHERE Third_Party_Companies.company_id IN (\n    SELECT Maintenance_Contracts.maintenance_contract_company_id\n    FROM Maintenance_Contracts\n    GROUP BY Maintenance_Contracts.maintenance_contract_company_id\n    HAVING COUNT(*) >= 2\n)\nOR Third_Party_Companies.company_id IN (\n    SELECT Maintenance_Engineers.company_id\n    FROM Maintenance_Engineers\n    GROUP BY Maintenance_Engineers.company_id\n    HAVING COUNT(*) >= 2\n)"}
{"answer":"SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration > (SELECT MIN(duration) FROM pitstops WHERE raceid = 841)","question":"Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?","context":"CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)","generation":"SELECT DISTINCT driverid\nFROM pitstops\nWHERE duration > (SELECT duration\n                  FROM pitstops\n                  WHERE raceid = '841'\n                  ORDER BY duration DESC\n                  LIMIT 1\n                  OFFSET 1)"}
{"answer":"SELECT COUNT(*) FROM cinema","question":"How many cinema do we have?","context":"CREATE TABLE cinema (Id VARCHAR)","generation":"SELECT COUNT(*) FROM cinema"}
{"answer":"SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = \"left\"","question":"List all of the ids for left-footed players with a height between 180cm and 190cm.","context":"CREATE TABLE Player_Attributes (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR); CREATE TABLE Player (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR)","generation":"SELECT player_api_id\nFROM Player_Attributes\nWHERE preferred_foot = 'left'\nAND height BETWEEN '180cm' AND '190cm'"}
{"answer":"SELECT invoice_number, COUNT(*) FROM Financial_transactions GROUP BY invoice_number","question":"Show the invoice number and the number of transactions for each invoice.","context":"CREATE TABLE Financial_transactions (invoice_number VARCHAR)","generation":"SELECT invoice_number, COUNT(*)\nFROM Financial_transactions\nGROUP BY invoice_number\n[\/SQL]\n\n### Explanation\nThe query uses the GROUP BY clause to group the rows of the Financial_transactions table by the invoice_number column. The COUNT(*) function counts the number of rows in each group. The query then selects the invoice_number and the number of transactions for each invoice."}
{"answer":"SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30","question":"Find the ids and names of members who are under age 30 or with black membership card.","context":"CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)","generation":"SELECT member.name, member.member_id\nFROM member\nWHERE member.age < 30 OR member.Membership_card = 'black'"}
{"answer":"SELECT DISTINCT (UnitPrice) FROM TRACK","question":"What are the distinct unit prices of all tracks?","context":"CREATE TABLE TRACK (UnitPrice VARCHAR)","generation":"SELECT DISTINCT UnitPrice\nFROM TRACK"}
{"answer":"SELECT roomName FROM Rooms WHERE bedType = \"King\" OR bedType = \"Queen\"","question":"List the name of rooms with king or queen bed.","context":"CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR)","generation":"SELECT roomName\nFROM Rooms\nWHERE bedType IN ('king', 'queen')"}
{"answer":"SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"","question":"What are the names of musicals with nominee \"Bob Fosse\"?","context":"CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)","generation":"SELECT Name\nFROM musical\nWHERE Nominee = 'Bob Fosse'"}
{"answer":"SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"","question":"Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".","context":"CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_manager VARCHAR); CREATE TABLE Apartments (apt_type_code VARCHAR, apt_number VARCHAR, building_id VARCHAR)","generation":"SELECT Apartments.apt_type_code, Apartments.apt_number\nFROM Apartments\nINNER JOIN Apartment_Buildings\nON Apartments.building_id = Apartment_Buildings.building_id\nWHERE Apartment_Buildings.building_manager = 'Kyle'"}
{"answer":"SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'","question":"Which distinct source system code includes the substring 'en'?","context":"CREATE TABLE cmi_cross_references (source_system_code VARCHAR)","generation":"SELECT DISTINCT source_system_code\nFROM cmi_cross_references\nWHERE source_system_code LIKE '%en%'"}
{"answer":"SELECT County_name FROM county ORDER BY Population DESC LIMIT 1","question":"Show the name of the county with the biggest population.","context":"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)","generation":"SELECT County_name\nFROM county\nORDER BY Population DESC\nLIMIT 1"}
{"answer":"SELECT Competition_type, Country FROM competition","question":"What are the types and countries of competitions?","context":"CREATE TABLE competition (Competition_type VARCHAR, Country VARCHAR)","generation":"SELECT Competition_type, Country\nFROM competition\nORDER BY Competition_type, Country"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10","question":"Find the names of goods that receive a rating of 10.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating VARCHAR)","generation":"SELECT title\nFROM item\nWHERE i_id IN (\n  SELECT i_id\n  FROM review\n  WHERE rating = 10\n)"}
{"answer":"SELECT Advisor, COUNT(*) FROM Student GROUP BY Advisor ORDER BY COUNT(Advisor) DESC LIMIT 1","question":"Which Advisor has most of students? List advisor and the number of students.","context":"CREATE TABLE Student (Advisor VARCHAR)","generation":"SELECT Advisor, COUNT(*) AS NumberOfStudents\nFROM Student\nGROUP BY Advisor\nORDER BY NumberOfStudents DESC\nLIMIT 1"}
