{"answer":"SELECT transaction_type, SUM(transaction_amount) FROM Financial_transactions GROUP BY transaction_type","question":"Show the transaction types and the total amount of transactions.","context":"CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)","generation":"SELECT ft.transaction_type, SUM(ft.transaction_amount) AS total_transaction_amount FROM Financial_transactions ft GROUP BY ft.transaction_type"}
{"answer":"SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","question":"Show the unique first names, last names, and phone numbers for all customers with any account.","context":"CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)","generation":"SELECT DISTINCT c.customer_first_name, c.customer_last_name, c.phone_number FROM Customers c JOIN Accounts a ON c.customer_id = a.customer_id"}
{"answer":"SELECT name, born_state, age FROM head ORDER BY age","question":"List the name, born state and age of the heads of departments ordered by age.","context":"CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)","generation":"SELECT h.name, h.born_state, h.age FROM head h ORDER BY CAST(h.age AS INT) NULLS LAST"}
{"answer":"SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10","question":"Please show the employee first names and ids of employees who serve at least 10 customers.","context":"CREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)","generation":"SELECT e.FirstName, e.EmployeeId FROM EMPLOYEE e JOIN CUSTOMER c ON e.EmployeeId = c.SupportRepId GROUP BY e.FirstName, e.EmployeeId HAVING COUNT(c.SupportRepId) >= 10"}
{"answer":"SELECT COUNT(*) FROM Apartments WHERE NOT apt_id IN (SELECT apt_id FROM Apartment_Facilities)","question":"How many apartments do not have any facility?","context":"CREATE TABLE Apartment_Facilities (apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)","generation":"SELECT COUNT(DISTINCT(a.apt_id)) AS num_apartments FROM Apartments a LEFT JOIN Apartment_Facilities af ON a.apt_id = af.apt_id WHERE af.apt_id IS NULL"}
{"answer":"SELECT service_name FROM services ORDER BY service_name","question":"List all the services in the alphabetical order.","context":"CREATE TABLE services (service_name VARCHAR)","generation":"SELECT s.service_name FROM services s ORDER BY s.service_name ASC"}
{"answer":"SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2","question":"What are the birth places that are shared by at least two people?","context":"CREATE TABLE people (Birth_Place VARCHAR)","generation":"SELECT p.Birth_Place FROM people p GROUP BY p.Birth_Place HAVING COUNT(p.Birth_Place) >= 2"}
{"answer":"SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank","question":"Show names of technicians in ascending order of quality rank of the machine they are assigned.","context":"CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE machine (machine_id VARCHAR, quality_rank VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)","generation":"SELECT t.name, m.quality_rank FROM repair_assignment ra JOIN machine m ON ra.machine_id = m.machine_id JOIN technician t ON ra.technician_id = t.technician_id ORDER BY m.quality_rank ASC"}
{"answer":"SELECT T1.source_system_code, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id","question":"What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.","context":"CREATE TABLE CMI_Cross_References (source_system_code VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Benefits_Overpayments (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)","generation":"SELECT b.cmi_benefit_id, c.source_system_code FROM Benefits_Overpayments bo JOIN CMI_Cross_References c ON bo.cmi_cross_ref_id = c.cmi_cross_ref_id ORDER BY b.cmi_benefit_id NULLS LAST"}
{"answer":"SELECT name FROM races ORDER BY date DESC LIMIT 1","question":"What is the name of the race held most recently?","context":"CREATE TABLE races (name VARCHAR, date VARCHAR)","generation":"SELECT r.name FROM races r ORDER BY r.date DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Reviewer","question":"How many reviewers listed?","context":"CREATE TABLE Reviewer (Id VARCHAR)","generation":"SELECT COUNT(DISTINCT r.id) FROM Reviewer r"}
{"answer":"SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = \"CA\"","question":"List the number of invoices and the invoice total from California.","context":"CREATE TABLE invoices (billing_state VARCHAR, total INTEGER)","generation":"SELECT COUNT(i.billing_state) AS number_of_invoices, SUM(i.total) AS total_amount_spent FROM invoices i WHERE i.billing_state ilike '%California%'"}
{"answer":"SELECT emp_jobcode, COUNT(*) FROM employee GROUP BY emp_jobcode ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the count and code of the job has most employees.","context":"CREATE TABLE employee (emp_jobcode VARCHAR)","generation":"SELECT e.emp_jobcode, COUNT(e.emp_jobcode) AS COUNT FROM employee e GROUP BY e.emp_jobcode ORDER BY COUNT DESC LIMIT 1"}
{"answer":"SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1","question":"What is the location of the perpetrator with the largest kills.","context":"CREATE TABLE perpetrator (LOCATION VARCHAR, Killed VARCHAR)","generation":"SELECT p.LOCATION, COUNT(p.Killed) AS kill_count FROM perpetrator p GROUP BY p.LOCATION ORDER BY kill_count DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"","question":"Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.","context":"CREATE TABLE campuses (campus VARCHAR, LOCATION VARCHAR, county VARCHAR)","generation":"SELECT c.campus FROM campuses c WHERE c.LOCATION ilike '%Northridge%' OR c.LOCATION ilike '%Los Angeles%' OR c.LOCATION ilike '%San%Francisco%' OR c.LOCATION ilike '%San%Francisco%' ORDER BY c.campus NULLS LAST"}
{"answer":"SELECT name, openning_year FROM cinema ORDER BY openning_year DESC","question":"Show all the cinema names and opening years in descending order of opening year.","context":"CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR)","generation":"SELECT c.name, c.openning_year FROM cinema c ORDER BY c.openning_year DESC"}
{"answer":"SELECT MIN(Vote_Percent), MAX(Vote_Percent) FROM election","question":"What are the minimum and maximum vote percents of elections?","context":"CREATE TABLE election (Vote_Percent INTEGER)","generation":"SELECT MIN(e.Vote_Percent) AS Minimum_Vote_Percent, MAX(e.Vote_Percent) AS Maximum_Vote_Percent FROM election e"}
{"answer":"SELECT MIN(bathroom_count), MAX(bathroom_count) FROM Apartments","question":"What is the minimum and maximum number of bathrooms of all the apartments?","context":"CREATE TABLE Apartments (bathroom_count INTEGER)","generation":"SELECT MIN(a.bathroom_count) AS min_bathrooms, MAX(a.bathroom_count) AS max_bathrooms FROM Apartments a"}
{"answer":"SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\"","question":"Return the date of birth for all the guests with gender code \"Male\".","context":"CREATE TABLE Guests (date_of_birth VARCHAR, gender_code VARCHAR)","generation":"SELECT g.date_of_birth FROM Guests g WHERE g.gender_code = 'Male'"}
{"answer":"SELECT SUM(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'","question":"What is the total budget amount for school \"Glenn\" in all years?","context":"CREATE TABLE budget (budgeted INTEGER, school_id VARCHAR); CREATE TABLE school (school_id VARCHAR, school_name VARCHAR)","generation":"SELECT SUM(b.budgeted) AS total_budget FROM budget b JOIN school s ON b.school_id = s.school_id WHERE s.school_name = 'Glenn'"}
{"answer":"SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = \"Orange\" AND T2.year >= 2000 GROUP BY T1.campus","question":"For each Orange county campus, report the number of degrees granted after 2000.","context":"CREATE TABLE campuses (campus VARCHAR, id VARCHAR, county VARCHAR); CREATE TABLE degrees (degrees INTEGER, campus VARCHAR, year VARCHAR)","generation":"SELECT c.campus, COUNT(d.degrees) AS number_of_degrees FROM campuses c JOIN degrees d ON c.id = d.campus WHERE c.county = 'Orange' AND d.year > '2000' GROUP BY c.campus ORDER BY number_of_degrees DESC NULLS LAST"}
{"answer":"SELECT booking_start_date, booking_end_date FROM Apartment_Bookings","question":"Show the start dates and end dates of all the apartment bookings.","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, booking_end_date VARCHAR)","generation":"SELECT ab.booking_start_date, ab.booking_end_date FROM Apartment_Bookings ab"}
{"answer":"SELECT COUNT(*) FROM member WHERE Membership_card = 'Black'","question":"How many members have the black membership card?","context":"CREATE TABLE member (Membership_card VARCHAR)","generation":"SELECT COUNT(*) FROM member m WHERE m.membership_card ilike '%black%'"}
{"answer":"SELECT dept_name, building FROM department ORDER BY budget DESC","question":"List the names and buildings of all departments sorted by the budget from large to small.","context":"CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)","generation":"SELECT d.dept_name, d.building, d.budget FROM department d ORDER BY d.budget DESC NULLS LAST"}
{"answer":"SELECT LOCATION, COUNT(*) FROM cinema GROUP BY LOCATION","question":"Show each location and the number of cinemas there.","context":"CREATE TABLE cinema (LOCATION VARCHAR)","generation":"SELECT c.LOCATION, COUNT(c.LOCATION) AS number_of_cinemas FROM cinema c GROUP BY c.LOCATION ORDER BY number_of_cinemas DESC NULLS LAST"}
{"answer":"SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5","question":"Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.","context":"CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)","generation":"SELECT a.name, a.distance FROM Aircraft a JOIN Certificate c ON a.aid = c.aid GROUP BY a.name, a.distance HAVING COUNT(c.aid) >= 5 AND SUM(a.distance) > 5000"}
{"answer":"SELECT DISTINCT product_color FROM Products","question":"Show all product colors.","context":"CREATE TABLE Products (product_color VARCHAR)","generation":"SELECT p.product_color FROM Products p"}
{"answer":"SELECT organized_by, name FROM church WHERE open_date BETWEEN 1830 AND 1840","question":"Show the organizer and name for churches that opened between 1830 and 1840.","context":"CREATE TABLE church (organized_by VARCHAR, name VARCHAR, open_date INTEGER)","generation":"SELECT c.organized_by, c.name FROM church c WHERE c.open_date BETWEEN 1830 AND 1840"}
{"answer":"SELECT dname FROM department ORDER BY mgr_start_date","question":"List all department names ordered by their starting date.","context":"CREATE TABLE department (dname VARCHAR, mgr_start_date VARCHAR)","generation":"SELECT d.dname FROM department d ORDER BY d.mgr_start_date NULLS LAST"}
{"answer":"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = \"Long Beach State University\"","question":"What is the number of faculty lines in campus \"Long Beach State University\" in 2002?","context":"CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)","generation":"SELECT COUNT(f.id) FROM faculty f WHERE f.campus = 'Long Beach State University' AND f.year = '2002'"}
{"answer":"SELECT Occupation, COUNT(*) FROM player GROUP BY Occupation","question":"Show different occupations along with the number of players in each occupation.","context":"CREATE TABLE player (Occupation VARCHAR)","generation":"SELECT p.Occupation, COUNT(p.Occupation) AS COUNT FROM player p GROUP BY p.Occupation ORDER BY COUNT DESC NULLS LAST"}
{"answer":"SELECT County_name FROM county ORDER BY Population","question":"Return the names of all counties sorted by population in ascending order.","context":"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)","generation":"SELECT c.County_name FROM county c ORDER BY c.Population ASC"}
{"answer":"SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)","question":"List the titles of books that are not published.","context":"CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)","generation":"SELECT b.Title FROM book b LEFT JOIN publication p ON b.Book_ID = p.Book_ID WHERE p.Book_ID IS NULL"}
{"answer":"SELECT COUNT(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Dayana Robel\"","question":"How many policies are listed for the customer named \"Dayana Robel\"?","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)","generation":"SELECT COUNT(cp.customer_id) FROM customers_policies cp JOIN customers c ON cp.customer_id = c.customer_id WHERE c.customer_name ilike '%Dayana%Roberl%'"}
{"answer":"SELECT AVG(height), AVG(weight) FROM people WHERE sex = 'M'","question":"Find the average height and weight for all males (sex is M).","context":"CREATE TABLE people (height INTEGER, weight INTEGER, sex VARCHAR)","generation":"SELECT AVG(p.height), AVG(p.weight) FROM people p WHERE p.sex = 'M'"}
{"answer":"SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4","question":"Show the facility codes of apartments with more than 4 bedrooms.","context":"CREATE TABLE Apartment_Facilities (facility_code VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)","generation":"SELECT af.facility_code FROM Apartment_Facilities af JOIN Apartments a ON af.apt_id = a.apt_id WHERE a.bedroom_count > 4"}
{"answer":"SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the most common reigns of wrestlers.","context":"CREATE TABLE wrestler (Reign VARCHAR)","generation":"SELECT w.reign, COUNT(w.reign) AS COUNT FROM wrestler w GROUP BY w.reign ORDER BY COUNT DESC LIMIT 10"}
{"answer":"SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common apartment type code.","context":"CREATE TABLE Apartments (apt_type_code VARCHAR)","generation":"SELECT a.apt_type_code FROM Apartments a GROUP BY a.apt_type_code ORDER BY COUNT(a.apt_type_code) DESC LIMIT 1"}
{"answer":"SELECT * FROM instructor ORDER BY salary","question":"List the information of all instructors ordered by their salary in ascending order.","context":"CREATE TABLE instructor (salary VARCHAR)","generation":"SELECT * FROM instructor i ORDER BY CAST(i.salary AS INT) ASC"}
{"answer":"SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211'","question":"What is the first name of each student enrolled in class ACCT-211?","context":"CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR)","generation":"SELECT s.stu_fname FROM enroll e JOIN student s ON e.stu_num = s.stu_num JOIN CLASS c ON e.class_code = c.class_code WHERE c.class_code = 'ACCT-211'"}
{"answer":"SELECT COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = \"337\"","question":"How many transaction does account with name 337 have?","context":"CREATE TABLE Accounts (account_id VARCHAR, account_name VARCHAR); CREATE TABLE Financial_transactions (account_id VARCHAR)","generation":"SELECT COUNT(ft.account_id) AS number_of_transactions FROM Financial_transactions ft JOIN Accounts a ON ft.account_id = a.account_id WHERE a.account_name = '337'"}
{"answer":"SELECT COUNT(DISTINCT u_id) FROM review","question":"How many different users wrote some reviews?","context":"CREATE TABLE review (u_id VARCHAR)","generation":"SELECT COUNT(DISTINCT r.u_id) FROM review r"}
{"answer":"SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')","question":"What is the course title of the prerequisite of course Mobile Computing?","context":"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)","generation":"SELECT c.title FROM prereq p JOIN course c ON p.prereq_id = c.course_id WHERE p.course_id = 'Mobile Computing'"}
{"answer":"SELECT COUNT(DISTINCT allergytype) FROM Allergy_type","question":"How many different allergy types exist?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT COUNT(DISTINCT a.allergytype) FROM Allergy_type a"}
{"answer":"SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2","question":"Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?","context":"CREATE TABLE party (Comptroller VARCHAR, Party_ID VARCHAR); CREATE TABLE election (Party VARCHAR, District VARCHAR)","generation":"SELECT p.Comptroller FROM party p JOIN election e ON p.Party_ID = e.Party WHERE e.District IN ('District 1', 'District 2')"}
{"answer":"SELECT First_year, Last_year FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"","question":"Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".","context":"CREATE TABLE party (First_year VARCHAR, Last_year VARCHAR, Party_Theme VARCHAR)","generation":"SELECT p.First_year, p.Last_year FROM party p WHERE p.Party_Theme ilike '%Spring%' OR p.Party_Theme ilike '%Teqnology%'"}
{"answer":"SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2","question":"Show all student IDs who have at least two allergies.","context":"CREATE TABLE Has_allergy (StuID VARCHAR)","generation":"SELECT h.stuID FROM Has_allergy h GROUP BY h.stuID HAVING COUNT(h.stuID) >= 2"}
{"answer":"SELECT name, country FROM people WHERE age < (SELECT AVG(age) FROM people)","question":"Show the name and country for all people whose age is smaller than the average.","context":"CREATE TABLE people (name VARCHAR, country VARCHAR, age INTEGER)","generation":"SELECT p.name, p.country FROM people p WHERE p.age < (SELECT AVG(p.age) FROM people)"}
{"answer":"SELECT major, COUNT(*) FROM Student GROUP BY major","question":"Show all majors and corresponding number of students.","context":"CREATE TABLE Student (major VARCHAR)","generation":"SELECT s.major, COUNT(s.major) AS number_of_students FROM Student s GROUP BY s.major ORDER BY number_of_students DESC NULLS LAST"}
{"answer":"SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY AVG(high_temperature) DESC LIMIT 1","question":"Find the id and local authority of the station with has the highest average high temperature.","context":"CREATE TABLE weekly_weather (station_id VARCHAR); CREATE TABLE station (id VARCHAR, local_authority VARCHAR)","generation":"SELECT s.id, s.local_authority FROM station s JOIN weekly_weather w ON s.id = w.station_id GROUP BY s.id, s.local_authority ORDER BY AVG(w.high_temperature) DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT Country, COUNT(*) FROM climber GROUP BY Country","question":"Please show the countries and the number of climbers from each country.","context":"CREATE TABLE climber (Country VARCHAR)","generation":"SELECT c.country, COUNT(c.country) AS number_of_climbers FROM climber c GROUP BY c.country ORDER BY number_of_climbers DESC NULLS LAST"}
{"answer":"SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING COUNT(*) >= 2","question":"Show all church names that have hosted least two weddings.","context":"CREATE TABLE wedding (church_id VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)","generation":"SELECT c.name FROM church c JOIN wedding w ON c.church_id = w.church_id GROUP BY c.name HAVING COUNT(w.church_id) >= 2 ORDER BY c.name NULLS LAST"}
{"answer":"SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store_id = 1","question":"Where is store 1 located?","context":"CREATE TABLE store (address_id VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)","generation":"SELECT a.address FROM store s JOIN address a ON s.address_id = a.address_id WHERE s.store_id = 1"}
{"answer":"SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1","question":"What is the duration of the oldest actor?","context":"CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)","generation":"SELECT a.duration FROM actor a ORDER BY a.age ASC NULLS LAST LIMIT 1"}
{"answer":"SELECT Name FROM actor ORDER BY Name","question":"List the name of actors in ascending alphabetical order.","context":"CREATE TABLE actor (Name VARCHAR)","generation":"SELECT a.name FROM actor a ORDER BY a.name ASC"}
{"answer":"SELECT DISTINCT name FROM genres","question":"List all different genre types.","context":"CREATE TABLE genres (name VARCHAR)","generation":"SELECT DISTINCT g.name FROM genres g"}
{"answer":"SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC","question":"Show the name of colleges that have at least two players in descending alphabetical order.","context":"CREATE TABLE match_season (College VARCHAR)","generation":"SELECT m.College FROM match_season m GROUP BY m.College HAVING COUNT(m.College) >= 2 ORDER BY m.College DESC"}
{"answer":"SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE \"12\/%\"","question":"What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?","context":"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)","generation":"SELECT s.name, s.id FROM station s JOIN status st ON s.id = st.station_id WHERE (st.bikes_available > 14 OR EXTRACT(MONTH FROM s.installation_date::DATE) = 12) GROUP BY s.name, s.id"}
{"answer":"SELECT SUM(enrollment), affiliation FROM university GROUP BY affiliation","question":"Find the total student enrollment for different affiliation type schools.","context":"CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)","generation":"SELECT u.affiliation, SUM(u.enrollment) AS total_enrollment FROM university u GROUP BY u.affiliation ORDER BY total_enrollment DESC NULLS LAST"}
{"answer":"SELECT name FROM media_types","question":"List all media types.","context":"CREATE TABLE media_types (name VARCHAR)","generation":"SELECT m.name FROM media_types m"}
{"answer":"SELECT T1.role_description, T2.role_code, COUNT(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code","question":"How many employees does each role have? List role description, id and number of employees.","context":"CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR); CREATE TABLE Employees (role_code VARCHAR)","generation":"SELECT r.role_description, r.role_code, COUNT(e.role_code) AS number_of_employees FROM ROLES r JOIN Employees e ON r.role_code = e.role_code GROUP BY r.role_description, r.role_code ORDER BY number_of_employees DESC NULLS LAST"}
{"answer":"SELECT roomName, basePrice FROM Rooms ORDER BY basePrice LIMIT 1","question":"Which room has cheapest base price? List the room's name and the base price.","context":"CREATE TABLE Rooms (roomName VARCHAR, basePrice VARCHAR)","generation":"SELECT r.roomName, r.basePrice FROM Rooms r ORDER BY r.basePrice ASC NULLS LAST LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM wedding WHERE YEAR = 2016","question":"How many weddings are there in year 2016?","context":"CREATE TABLE wedding (YEAR VARCHAR)","generation":"SELECT COUNT(*) FROM wedding w WHERE w.YEAR = '2016'"}
{"answer":"SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of the train whose route runs through greatest number of stations.","context":"CREATE TABLE route (train_id VARCHAR); CREATE TABLE train (name VARCHAR, id VARCHAR)","generation":"SELECT t.name FROM train t JOIN route r ON t.id = r.train_id GROUP BY t.name ORDER BY COUNT(r.train_id) DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT t3.name, t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"","question":"Find names and times of trains that run through stations for the local authority Chiltern.","context":"CREATE TABLE station (id VARCHAR, local_authority VARCHAR); CREATE TABLE route (station_id VARCHAR, train_id VARCHAR); CREATE TABLE train (name VARCHAR, time VARCHAR, id VARCHAR)","generation":"SELECT t.name, t.time FROM train t JOIN route r ON t.id = r.train_id WHERE r.station_id IN (SELECT id FROM station WHERE local_authority = 'Chiltern') ORDER BY t.name NULLS LAST"}
{"answer":"SELECT DISTINCT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000","question":"List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?","context":"CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE laptimes (driverid VARCHAR, milliseconds INTEGER)","generation":"SELECT d.forename, d.surname FROM drivers d JOIN laptimes l ON d.driverid = l.driverid WHERE l.milliseconds < 93000 GROUP BY d.forename, d.surname ORDER BY d.forename, d.surname NULLS LAST"}
{"answer":"SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id","question":"For each station, return its longitude and the average duration of trips that started from the station.","context":"CREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)","generation":"SELECT s.long, AVG(t.duration) AS average_duration FROM station s JOIN trip t ON s.id = t.start_station_id GROUP BY s.long ORDER BY average_duration DESC NULLS LAST"}
{"answer":"SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the customer id and number of accounts with most accounts.","context":"CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT a.customer_id, COUNT(a.customer_id) AS account_count FROM Accounts a GROUP BY a.customer_id ORDER BY account_count DESC LIMIT 1"}
{"answer":"SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id","question":"what are the first name and last name of all candidates?","context":"CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)","generation":"SELECT p.first_name, p.last_name FROM candidates c JOIN people p ON c.candidate_id = p.person_id"}
{"answer":"SELECT COUNT(*), account_id FROM Financial_transactions","question":"How many transaction does each account have? Show the number and account id.","context":"CREATE TABLE Financial_transactions (account_id VARCHAR)","generation":"SELECT ft.account_id, COUNT(ft.account_id) AS number_of_transactions FROM Financial_transactions ft GROUP BY ft.account_id ORDER BY number_of_transactions DESC NULLS LAST"}
{"answer":"SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018","question":"What is the last name of the student who got a grade A in the class with code 10018.","context":"CREATE TABLE enroll (stu_num VARCHAR, enroll_grade VARCHAR, class_code VARCHAR); CREATE TABLE student (stu_lname VARCHAR, stu_num VARCHAR)","generation":"SELECT s.stu_lname FROM enroll e JOIN student s ON e.stu_num = s.stu_num WHERE e.enroll_grade = 'A' AND e.class_code = '10018'"}
{"answer":"SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY COUNT(*) LIMIT 1","question":"Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.","context":"CREATE TABLE Engineer_Visits (engineer_id VARCHAR); CREATE TABLE Maintenance_Engineers (engineer_id VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT e.engineer_id, e.first_name, e.last_name FROM Engineer_Visits ev JOIN Maintenance_Engineers e ON ev.engineer_id = e.engineer_id GROUP BY e.engineer_id, e.first_name, e.last_name ORDER BY COUNT(ev.engineer_id) ASC LIMIT 1"}
{"answer":"SELECT MIN(snatch) FROM body_builder","question":"What is the minimum snatch score?","context":"CREATE TABLE body_builder (snatch INTEGER)","generation":"SELECT MIN(bb.snatch) AS minimum_snatch FROM body_builder bb"}
{"answer":"SELECT T1.season, T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'","question":"In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?","context":"CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, injury VARCHAR); CREATE TABLE game (season VARCHAR, stadium_id VARCHAR, id VARCHAR)","generation":"SELECT g.season, s.name FROM injury_accident i JOIN game g ON i.game_id = g.id JOIN stadium s ON g.stadium_id = s.id WHERE i.injury IN ('Foot injury', 'Knee problem')"}
{"answer":"SELECT Name FROM editor ORDER BY Age","question":"List the names of editors in ascending order of age.","context":"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)","generation":"SELECT e.name FROM editor e ORDER BY CAST(e.age AS INT) ASC"}
{"answer":"SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"","question":"What are all the policy types of the customer named \"Dayana Robel\"?","context":"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)","generation":"SELECT ap.policy_type_code FROM customers c JOIN customers_policies cp ON c.customer_id = cp.customer_id JOIN available_policies ap ON cp.policy_id = ap.policy_id WHERE c.customer_name = 'Dayana Robel'"}
{"answer":"SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1","question":"List the most common type of Status across cities.","context":"CREATE TABLE city (Status VARCHAR)","generation":"SELECT c.Status, COUNT(c.Status) AS COUNT FROM city c GROUP BY c.Status ORDER BY COUNT DESC LIMIT 1"}
{"answer":"SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1","question":"What is the location of the party with the most hosts?","context":"CREATE TABLE party (LOCATION VARCHAR, Number_of_hosts VARCHAR)","generation":"SELECT p.LOCATION FROM party p ORDER BY CAST(p.Number_of_hosts AS INT) DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"","question":"Find id of the candidate whose email is stanley.monahan@example.org?","context":"CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)","generation":"SELECT c.candidate_id FROM candidates c JOIN people p ON c.candidate_id = p.person_id WHERE p.email_address = 'stanley.monahan@example.org'"}
{"answer":"SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id","question":"What are the line 1 of addresses shared by some students and some teachers?","context":"CREATE TABLE Teachers (address_id VARCHAR); CREATE TABLE Students (address_id VARCHAR); CREATE TABLE Addresses (line_1 VARCHAR, address_id VARCHAR)","generation":"SELECT a.line_1 FROM Addresses a JOIN (SELECT s.address_id FROM Students s UNION SELECT t.address_id FROM Teachers t) AS u ON a.address_id = u.address_id"}
{"answer":"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = (SELECT MAX(overall_rating) FROM Player_Attributes)","question":"What are the names of players who have the best dribbling?","context":"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, dribbling VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER)","generation":"SELECT p.player_name, p.player_api_id FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id ORDER BY pa.dribbling DESC NULLS LAST"}
{"answer":"SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990","question":"How many artists are above age 46 and joined after 1990?","context":"CREATE TABLE artist (age VARCHAR, year_join VARCHAR)","generation":"SELECT COUNT(*) FROM artist a WHERE CAST(a.age AS INTEGER) > 46 AND CAST(a.year_join AS INTEGER) > 1990"}
{"answer":"SELECT COUNT(*) FROM Rooms","question":"How many rooms are there?","context":"CREATE TABLE Rooms (Id VARCHAR)","generation":"SELECT COUNT(r.id) FROM Rooms r"}
{"answer":"SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = \"Simon Woodroffe\" OR T1.Investor = \"Peter Jones\"","question":"What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?","context":"CREATE TABLE entrepreneur (People_ID VARCHAR, Investor VARCHAR); CREATE TABLE people (Date_of_Birth VARCHAR, People_ID VARCHAR)","generation":"SELECT p.date_of_birth FROM entrepreneur e JOIN people p ON e.people_id = p.people_id WHERE e.investor ilike '%Simon%Woodroffe%' OR e.investor ilike '%Peter%Jones%' ORDER BY p.date_of_birth NULLS LAST"}
{"answer":"SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of department has the highest amount of students?","context":"CREATE TABLE student (dept_name VARCHAR)","generation":"SELECT s.dept_name FROM student s ORDER BY COUNT(s.dept_name) DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT COUNT(*), constructorid FROM constructorStandings GROUP BY constructorid","question":"What are the numbers of races for each constructor id?","context":"CREATE TABLE constructorStandings (constructorid VARCHAR)","generation":"SELECT c.constructorid, COUNT(c.constructorid) AS number_of_races FROM constructorStandings c GROUP BY c.constructorid ORDER BY number_of_races DESC NULLS LAST"}
{"answer":"SELECT truck_details FROM trucks ORDER BY truck_licence_number","question":"Show the details of all trucks in the order of their license number.","context":"CREATE TABLE trucks (truck_details VARCHAR, truck_licence_number VARCHAR)","generation":"SELECT t.truck_details, t.truck_licence_number FROM trucks t ORDER BY t.truck_licence_number NULLS LAST"}
{"answer":"SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1","question":"What is the zip code in which the average mean sea level pressure is the lowest?","context":"CREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)","generation":"SELECT w.zip_code FROM weather w ORDER BY w.mean_sea_level_pressure_inches ASC LIMIT 1"}
{"answer":"SELECT COUNT(*), T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director","question":"How many movie reviews does each director get?","context":"CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Movie (director VARCHAR, mID VARCHAR)","generation":"SELECT m.director, COUNT(r.mID) AS review_count FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.director ORDER BY review_count DESC NULLS LAST"}
{"answer":"SELECT Reign, Days_held FROM wrestler","question":"Show the reign and days held of wrestlers.","context":"CREATE TABLE wrestler (Reign VARCHAR, Days_held VARCHAR)","generation":"SELECT w.reign, w.days_held FROM wrestler w"}
{"answer":"SELECT T2.guest_first_name, T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = \"Confirmed\"","question":"Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".","context":"CREATE TABLE Apartment_Bookings (guest_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR, guest_id VARCHAR)","generation":"SELECT g.guest_first_name, g.guest_last_name FROM Apartment_Bookings ab JOIN Guests g ON ab.guest_id = g.guest_id WHERE ab.booking_status_code = 'Confirmed'"}
{"answer":"SELECT T2.title, T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the movie that is rated by most of times?","context":"CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT m.title FROM Movie m JOIN Rating r ON m.mID = r.mID GROUP BY m.title ORDER BY COUNT(r.mID) DESC LIMIT 1"}
{"answer":"SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)","question":"Find the name and budget of departments whose budgets are more than the average budget.","context":"CREATE TABLE department (dept_name VARCHAR, budget INTEGER)","generation":"SELECT d.dept_name, d.budget FROM department d WHERE d.budget > (SELECT AVG(d2.budget) FROM department d2)"}
{"answer":"SELECT venue, name FROM event ORDER BY Event_Attendance DESC LIMIT 2","question":"List the event venues and names that have the top 2 most number of people attended.","context":"CREATE TABLE event (venue VARCHAR, name VARCHAR, Event_Attendance VARCHAR)","generation":"SELECT e.venue, e.name, COUNT(e.event_attendance) AS total_attendance FROM event e GROUP BY e.venue, e.name ORDER BY total_attendance DESC NULLS LAST LIMIT 2"}
{"answer":"SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num","question":"What are the first names of the professors who do not teach a class.","context":"CREATE TABLE employee (emp_fname VARCHAR, emp_jobcode VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT e.emp_fname FROM employee e LEFT JOIN CLASS c ON e.emp_num = c.prof_num WHERE c.prof_num IS NULL"}
{"answer":"SELECT T2.name, T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC","question":"give me names of all compatible browsers and accelerators in the descending order of compatible year","context":"CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)","generation":"SELECT b.name AS browser_name, wca.name AS accelerator_name, CAST(ac.compatible_since_year AS INTEGER) AS compatible_year FROM accelerator_compatible_browser ac JOIN browser b ON ac.browser_id = b.id JOIN web_client_accelerator wca ON ac.accelerator_id = wca.id ORDER BY compatible_year DESC"}
{"answer":"SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3","question":"Find the accreditation level that more than 3 phones use.","context":"CREATE TABLE phone (Accreditation_level VARCHAR)","generation":"SELECT p.Accreditation_level FROM phone p GROUP BY p.Accreditation_level HAVING COUNT(p.Accreditation_level) > 3"}
{"answer":"SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'","question":"what are the event details of the services that have the type code 'Marriage'?","context":"CREATE TABLE EVENTS (event_details VARCHAR, Service_ID VARCHAR); CREATE TABLE Services (Service_ID VARCHAR, Service_Type_Code VARCHAR)","generation":"SELECT e.event_details FROM EVENTS e JOIN Services s ON e.service_id = s.service_id WHERE s.service_type_code = 'Marriage'"}
{"answer":"SELECT COUNT(DISTINCT affiliation) FROM university","question":"Find how many different affiliation types there are.","context":"CREATE TABLE university (affiliation VARCHAR)","generation":"SELECT COUNT(DISTINCT u.affiliation) FROM university u"}
{"answer":"SELECT Starting_Year FROM technician WHERE Team = \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team = \"CWS\"","question":"Show the starting years shared by technicians from team \"CLE\" and \"CWS\".","context":"CREATE TABLE technician (Starting_Year VARCHAR, Team VARCHAR)","generation":"SELECT t.Starting_Year FROM technician t WHERE t.Team ilike '%CLE%' AND t.Team ilike '%CWS%' ORDER BY t.Starting_Year NULLS LAST"}
{"answer":"SELECT COUNT(*) FROM film WHERE title LIKE \"%Dummy%\"","question":"How many films have the word 'Dummy' in their titles?","context":"CREATE TABLE film (title VARCHAR)","generation":"SELECT COUNT(*) FROM film f WHERE f.title ilike '%Dummy%'"}
{"answer":"SELECT flno, origin, destination FROM Flight ORDER BY origin","question":"Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.","context":"CREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)","generation":"SELECT f.flno, f.origin, f.destination FROM Flight f ORDER BY f.origin ASC"}
{"answer":"SELECT T2.Name, COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name","question":"Show names of technicians and the number of machines they are assigned to repair.","context":"CREATE TABLE repair_assignment (technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)","generation":"SELECT t.name, COUNT(ra.technician_ID) AS number_of_machines FROM technician t JOIN repair_assignment ra ON t.technician_ID = ra.technician_ID GROUP BY t.name ORDER BY number_of_machines DESC NULLS LAST"}
{"answer":"SELECT AVG(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = \"AIB\"","question":"What is the average points of players from club with name \"AIB\".","context":"CREATE TABLE player (Points INTEGER, Club_ID VARCHAR); CREATE TABLE club (Club_ID VARCHAR, name VARCHAR)","generation":"SELECT AVG(p.Points) FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.name = 'AIB'"}
{"answer":"SELECT COUNT(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"","question":"How many documents were shipped by USPS?","context":"CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)","generation":"SELECT COUNT(DISTINCT d.Id) FROM Documents d JOIN Ref_Shipping_Agents r ON d.Shipping_Agent_Id = r.Id WHERE r.Name = 'USPS'"}
{"answer":"SELECT T1.driverid, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) <= 30","question":"Find the driver id and number of races of all drivers who have at most participated in 30 races?","context":"CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR); CREATE TABLE drivers (driverid VARCHAR)","generation":"SELECT d.driverid, COUNT(r.raceid) AS number_of_races FROM drivers d JOIN results r ON d.driverid = r.driverid GROUP BY d.driverid HAVING COUNT(r.raceid) <= 30 ORDER BY number_of_races DESC NULLS LAST"}
{"answer":"SELECT Operating_system, COUNT(*) FROM web_client_accelerator GROUP BY Operating_system","question":"Find the number of web accelerators used for each Operating system.","context":"CREATE TABLE web_client_accelerator (Operating_system VARCHAR)","generation":"SELECT wca.Operating_system, COUNT(*) AS number_of_accelerators FROM web_client_accelerator wca GROUP BY wca.Operating_system ORDER BY number_of_accelerators DESC NULLS LAST"}
{"answer":"SELECT MAX(monthly_rental), MIN(monthly_rental) FROM Student_Addresses","question":"Find the maximum and minimum monthly rental for all student addresses.","context":"CREATE TABLE Student_Addresses (monthly_rental INTEGER)","generation":"SELECT MAX(monthly_rental) AS max_monthly_rental, MIN(monthly_rental) AS min_monthly_rental FROM Student_Addresses"}
{"answer":"SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2","question":"List the race class with at least two races.","context":"CREATE TABLE race (CLASS VARCHAR)","generation":"SELECT r.CLASS FROM race r GROUP BY r.CLASS HAVING COUNT(r.CLASS) >= 2"}
{"answer":"SELECT COUNT(*) FROM Rating WHERE stars > 3","question":"What is the total number of ratings that has more than 3 stars?","context":"CREATE TABLE Rating (stars INTEGER)","generation":"SELECT COUNT(*) FROM Rating r WHERE r.stars > 3"}
{"answer":"SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 1996","question":"Find the average fee on a CSU campus in 1996","context":"CREATE TABLE csu_fees (campusfee INTEGER, YEAR VARCHAR)","generation":"SELECT AVG(c.campusfee) AS average_fee FROM csu_fees c WHERE c.YEAR = '1996'"}
{"answer":"SELECT FirstName, LastName FROM CUSTOMER WHERE Email = \"luisg@embraer.com.br\"","question":"What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?","context":"CREATE TABLE CUSTOMER (FirstName VARCHAR, LastName VARCHAR, Email VARCHAR)","generation":"SELECT c.FirstName, c.LastName FROM CUSTOMER c WHERE c.Email = 'luisg@embraer.com.br'"}
{"answer":"SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15","question":"What is the average number of employees of the departments whose rank is between 10 and 15?","context":"CREATE TABLE department (num_employees INTEGER, ranking INTEGER)","generation":"SELECT AVG(d.num_employees) FROM department d WHERE d.ranking BETWEEN 10 AND 15"}
{"answer":"SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance)","question":"What are all info of students who registered courses but not attended courses?","context":"CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT scr.student_id, scr.first_name, scr.last_name FROM student_course_registrations scr LEFT JOIN student_course_attendance sca ON scr.student_id = sca.student_id WHERE sca.student_id IS NULL"}
{"answer":"SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1","question":"What is the name of the entrepreneur with the greatest weight?","context":"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR); CREATE TABLE entrepreneur (People_ID VARCHAR)","generation":"SELECT p.name FROM people p JOIN entrepreneur e ON p.people_id = e.people_id ORDER BY CAST(p.weight AS FLOAT) DESC LIMIT 1"}
{"answer":"SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34","question":"Show the fleet series of the aircrafts flied by pilots younger than 34","context":"CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_ID VARCHAR, Age INTEGER); CREATE TABLE aircraft (Fleet_Series VARCHAR, Aircraft_ID VARCHAR)","generation":"SELECT a.fleet_series FROM aircraft a JOIN pilot_record pr ON a.aircraft_id = pr.aircraft_id JOIN pilot p ON pr.pilot_id = p.pilot_id WHERE p.age < 34"}
{"answer":"SELECT DISTINCT fault_status FROM Fault_Log_Parts","question":"How many fault status codes are recorded in the fault log parts table?","context":"CREATE TABLE Fault_Log_Parts (fault_status VARCHAR)","generation":"SELECT COUNT(DISTINCT fault_status) FROM Fault_Log_Parts"}
{"answer":"SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'","question":"Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.","context":"CREATE TABLE payment (payment_date VARCHAR, staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, first_name VARCHAR); CREATE TABLE payment (payment_date VARCHAR, amount INTEGER)","generation":"SELECT p.payment_date FROM payment p JOIN staff s ON p.staff_id = s.staff_id WHERE p.amount > 10 AND s.first_name = 'Elsa'"}
{"answer":"SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM savings)","question":"Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.","context":"CREATE TABLE checking (custid VARCHAR, balance INTEGER); CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE savings (balance INTEGER); CREATE TABLE checking (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"WITH avg_checking AS (SELECT AVG(balance) AS avg_balance FROM checking), avg_savings AS (SELECT AVG(balance) AS avg_balance FROM savings) SELECT a.name FROM accounts a JOIN checking c ON a.custid = c.custid JOIN savings s ON a.custid = s.custid JOIN avg_checking ac ON ac.avg_balance > c.balance JOIN avg_savings as AS ON AS.avg_balance < s.balance"}
{"answer":"SELECT asset_id, asset_details, asset_make, asset_model FROM Assets","question":"List the asset id, details, make and model for every asset.","context":"CREATE TABLE Assets (asset_id VARCHAR, asset_details VARCHAR, asset_make VARCHAR, asset_model VARCHAR)","generation":"SELECT a.asset_id, a.asset_details, a.asset_make, a.asset_model FROM Assets a"}
{"answer":"SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC","question":"What are the heights of perpetrators in descending order of the number of people they injured?","context":"CREATE TABLE perpetrator (People_ID VARCHAR, Injured VARCHAR); CREATE TABLE people (Height VARCHAR, People_ID VARCHAR)","generation":"SELECT p.height, COUNT(pr.people_id) AS number_of_people_injured FROM perpetrator pr JOIN people p ON pr.people_id = p.people_id GROUP BY p.height ORDER BY number_of_people_injured DESC"}
{"answer":"SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'","question":"Find the schools that were either founded after 1850 or public.","context":"CREATE TABLE university (school VARCHAR, founded VARCHAR, affiliation VARCHAR)","generation":"SELECT u.school FROM university u WHERE (u.founded > '1850' OR u.affiliation ilike '%public%') ORDER BY u.school NULLS LAST"}
{"answer":"SELECT document_status_code FROM Ref_Document_Status","question":"What document status codes do we have?","context":"CREATE TABLE Ref_Document_Status (document_status_code VARCHAR)","generation":"SELECT r.document_status_code FROM Ref_Document_Status r"}
{"answer":"SELECT COUNT(*) FROM accounts","question":"How many accounts are there in total?","context":"CREATE TABLE accounts (Id VARCHAR)","generation":"SELECT COUNT(a.id) AS total_accounts FROM accounts a"}
{"answer":"SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind'","question":"Find the names of all reviewers who rated Gone with the Wind.","context":"CREATE TABLE Movie (mID VARCHAR, title VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT DISTINCT r.name FROM Rating r JOIN Movie m ON r.mID = m.mID WHERE m.title ilike '%Gone%with%the%Wind%'"}
{"answer":"SELECT COUNT(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'","question":"How many events had participants whose details had the substring 'Dr.'","context":"CREATE TABLE participants (Participant_ID VARCHAR, participant_details VARCHAR); CREATE TABLE Participants_in_Events (Participant_ID VARCHAR)","generation":"SELECT COUNT(DISTINCT p.participant_id) AS number_of_events FROM participants p JOIN Participants_in_Events e ON p.participant_id = e.participant_id WHERE p.participant_details ilike '%Dr.%'"}
{"answer":"SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1","question":"Show the enrollment and primary_conference of the oldest college.","context":"CREATE TABLE university (enrollment VARCHAR, primary_conference VARCHAR, founded VARCHAR)","generation":"SELECT u.enrollment, u.primary_conference FROM university u ORDER BY u.founded ASC LIMIT 1"}
{"answer":"SELECT T2.emp_fname, T4.prof_office, T3.crs_description, T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code","question":"Find the first names and offices of all instructors who have taught some course and the course description and the department name.","context":"CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)","generation":"SELECT p.emp_fname, p.prof_office, c.crs_description, d.dept_name FROM professor p JOIN CLASS c ON p.emp_num = c.prof_num JOIN department d ON p.dept_code = d.dept_code"}
{"answer":"SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010","question":"Find courses that ran in Fall 2009 or in Spring 2010.","context":"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)","generation":"SELECT DISTINCT s.course_id FROM SECTION s WHERE (s.semester = 'Fall' AND s.YEAR = '2009') OR (s.semester = 'Spring' AND s.YEAR = '2010')"}
{"answer":"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"","question":"List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.","context":"CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)","generation":"SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' AND m.name = 'MPEG audio file'"}
{"answer":"SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = \"Los Angeles\"","question":"What is the average distance and average price for flights from Los Angeles.","context":"CREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)","generation":"SELECT AVG(f.distance) AS average_distance, AVG(f.price) AS average_price FROM Flight f WHERE f.origin = 'Los Angeles'"}
{"answer":"SELECT T2.company, COUNT(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id","question":"Show the company name with the number of gas station.","context":"CREATE TABLE station_company (company_id VARCHAR); CREATE TABLE company (company VARCHAR, company_id VARCHAR)","generation":"SELECT c.company, COUNT(sc.company_id) AS number_of_stations FROM station_company sc JOIN company c ON sc.company_id = c.company_id GROUP BY c.company ORDER BY number_of_stations DESC NULLS LAST"}
{"answer":"SELECT country, COUNT(*) FROM people GROUP BY country","question":"Show all countries and the number of people from each country.","context":"CREATE TABLE people (country VARCHAR)","generation":"SELECT p.country, COUNT(p.country) AS number_of_people FROM people p GROUP BY p.country ORDER BY number_of_people DESC NULLS LAST"}
{"answer":"SELECT COUNT(*) FROM phone","question":"How many phones are there?","context":"CREATE TABLE phone (Id VARCHAR)","generation":"SELECT COUNT(p.id) FROM phone p"}
{"answer":"SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING COUNT(*) > 1","question":"Find the names of schools that have more than one donator with donation amount above 8.5.","context":"CREATE TABLE school (School_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)","generation":"SELECT s.school_name FROM school s JOIN endowment e ON s.school_id = e.school_id GROUP BY s.school_name HAVING COUNT(e.amount) > 1 AND SUM(e.amount) > 8.5"}
{"answer":"SELECT Writer FROM book ORDER BY Writer","question":"List the writers of the books in ascending alphabetical order.","context":"CREATE TABLE book (Writer VARCHAR)","generation":"SELECT b.Writer FROM book b ORDER BY b.Writer ASC"}
{"answer":"SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5","question":"Find the titles of items that received both a rating higher than 8 and a rating below 5.","context":"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)","generation":"SELECT DISTINCT i.title FROM item i JOIN review r ON i.i_id = r.i_id WHERE r.rating > 8 AND r.rating < 5"}
{"answer":"SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000","question":"What is the average number of working horses of farms with more than 5000 total number of horses?","context":"CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)","generation":"SELECT AVG(f.Working_Horses) FROM farm f WHERE f.Total_Horses > 5000"}
{"answer":"SELECT T2.Name, T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID","question":"What are the names of wrestlers and the elimination moves?","context":"CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE elimination (Elimination_Move VARCHAR, Wrestler_ID VARCHAR)","generation":"SELECT w.name, e.elimination_move FROM wrestler w JOIN elimination e ON w.wrestler_id = e.wrestler_id"}
{"answer":"SELECT T2.party_name, COUNT(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id","question":"Show all party names and the number of members in each party.","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_id VARCHAR)","generation":"SELECT p.party_name, COUNT(m.party_id) AS member_count FROM party p JOIN Member m ON p.party_id = m.party_id GROUP BY p.party_name ORDER BY member_count DESC NULLS LAST"}
{"answer":"SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1","question":"List the most common type of competition.","context":"CREATE TABLE competition (Competition_type VARCHAR)","generation":"SELECT c.competition_type FROM competition c GROUP BY c.competition_type ORDER BY COUNT(c.competition_type) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM wrestler","question":"How many wrestlers are there?","context":"CREATE TABLE wrestler (Id VARCHAR)","generation":"SELECT COUNT(DISTINCT w.id) FROM wrestler w"}
{"answer":"SELECT AVG(lat), AVG(long) FROM station WHERE city = \"San Jose\"","question":"What is the average latitude and longitude of stations located in San Jose city?","context":"CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)","generation":"SELECT AVG(s.lat) AS average_latitude, AVG(s.long) AS average_longitude FROM station s WHERE s.city ilike '%San%Jose%'"}
{"answer":"SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY SUM(T1.crs_credit) DESC LIMIT 1","question":"Find the name of the department that offers the largest number of credits of all classes.","context":"CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_code VARCHAR, crs_credit INTEGER)","generation":"SELECT d.dept_name FROM department d JOIN course c ON d.dept_code = c.dept_code ORDER BY c.crs_credit DESC LIMIT 1"}
{"answer":"SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING COUNT(*) > 1","question":"Find the first names of professors who are teaching more than one class.","context":"CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR)","generation":"SELECT e.emp_fname FROM employee e JOIN CLASS c ON e.emp_num = c.prof_num GROUP BY e.emp_fname HAVING COUNT(c.prof_num) > 1"}
{"answer":"SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)","question":"Show the number of all customers without an account.","context":"CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)","generation":"SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Accounts a ON c.customer_id = a.customer_id WHERE a.customer_id IS NULL"}
{"answer":"SELECT COUNT(DISTINCT Company) FROM entrepreneur","question":"How many distinct companies are there?","context":"CREATE TABLE entrepreneur (Company VARCHAR)","generation":"SELECT COUNT(DISTINCT e.Company) FROM entrepreneur e"}
{"answer":"SELECT Team FROM Elimination WHERE Eliminated_By = \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = \"Benjamin\"","question":"Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".","context":"CREATE TABLE Elimination (Team VARCHAR, Eliminated_By VARCHAR)","generation":"SELECT DISTINCT e1.Team FROM Elimination e1 JOIN Elimination e2 ON e1.Team = e2.Team AND e1.Eliminated_By != e2.Eliminated_By WHERE e1.Eliminated_By = 'Orton' AND e2.Eliminated_By = 'Benjamin'"}
{"answer":"SELECT name, year_join FROM artist WHERE country <> 'United States'","question":"Show all artist names and the year joined who are not from United States.","context":"CREATE TABLE artist (name VARCHAR, year_join VARCHAR, country VARCHAR)","generation":"SELECT a.name, a.year_join FROM artist a WHERE a.country != 'United States'"}
{"answer":"SELECT SUM(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)","question":"Find the total amount claimed in the most recently created document.","context":"CREATE TABLE claim_headers (amount_claimed INTEGER, claim_header_id VARCHAR); CREATE TABLE claims_documents (claim_id VARCHAR, created_date VARCHAR); CREATE TABLE claims_documents (created_date VARCHAR)","generation":"SELECT ch.amount_claimed FROM claim_headers ch JOIN claims_documents cd ON ch.claim_header_id = cd.claim_id ORDER BY cd.created_date DESC LIMIT 1"}
{"answer":"SELECT Name FROM representative WHERE NOT Representative_ID IN (SELECT Representative_ID FROM election)","question":"List the names of representatives that have not participated in elections listed here.","context":"CREATE TABLE election (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)","generation":"SELECT r.name FROM representative r LEFT JOIN election e ON r.representative_id = e.representative_id WHERE e.representative_id IS NULL"}
{"answer":"SELECT SUM(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name","question":"Find the total saving balance for each account name.","context":"CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)","generation":"SELECT a.name, SUM(s.balance) AS total_balance FROM savings s JOIN accounts a ON s.custid = a.custid GROUP BY a.name ORDER BY total_balance DESC NULLS LAST"}
{"answer":"SELECT T1.party_name, T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id","question":"Show all party names and their region names.","context":"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE party (party_name VARCHAR, region_id VARCHAR)","generation":"SELECT p.party_name, r.region_name FROM party p JOIN region r ON p.region_id = r.region_id"}
{"answer":"SELECT allergy, allergytype FROM Allergy_type","question":"Show all allergies and their types.","context":"CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)","generation":"SELECT a.allergy, t.allergytype FROM Allergy_type t JOIN Allergy a ON t.allergy = a.allergy"}
{"answer":"SELECT T1.fault_description, T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id","question":"What are all the fault descriptions and the fault status of all the faults recoreded in the logs?","context":"CREATE TABLE Fault_Log (fault_description VARCHAR, fault_log_entry_id VARCHAR); CREATE TABLE Fault_Log_Parts (fault_status VARCHAR, fault_log_entry_id VARCHAR)","generation":"SELECT fl.fault_description, fp.fault_status FROM Fault_Log fl JOIN Fault_Log_Parts fp ON fl.fault_log_entry_id = fp.fault_log_entry_id"}
{"answer":"SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85","question":"List all of the player ids with a height of at least 180cm and an overall rating higher than 85.","context":"CREATE TABLE Player_Attributes (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER); CREATE TABLE Player (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER)","generation":"SELECT p.player_api_id FROM Player_Attributes p WHERE CAST(p.height AS INTEGER) >= 180 AND p.overall_rating > 85"}
{"answer":"SELECT COUNT(*) FROM Draft_Copies WHERE document_id = 2","question":"How many draft copies does the document with id 2 have?","context":"CREATE TABLE Draft_Copies (document_id VARCHAR)","generation":"SELECT COUNT(*) FROM Draft_Copies WHERE document_id = '2'"}
{"answer":"SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1","question":"Which origin has most number of flights?","context":"CREATE TABLE Flight (origin VARCHAR)","generation":"SELECT f.origin, COUNT(f.origin) AS flight_count FROM Flight f GROUP BY f.origin ORDER BY flight_count DESC LIMIT 1"}
{"answer":"SELECT train_number, TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'","question":"Find the number and time of the train that goes from Chennai to Guruvayur.","context":"CREATE TABLE train (train_number VARCHAR, TIME VARCHAR, origin VARCHAR, destination VARCHAR)","generation":"SELECT t.train_number, t.TIME FROM train t WHERE t.origin = 'Chennai' AND t.destination = 'Guruvayur'"}
{"answer":"SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"","question":"What are the names of circuits that belong to UK or Malaysia?","context":"CREATE TABLE circuits (name VARCHAR, country VARCHAR)","generation":"SELECT c.name FROM circuits c WHERE c.country ILIKE '%UK%' OR c.country ILIKE '%Malaysia%' ORDER BY c.name NULLS LAST"}
{"answer":"SELECT party_name FROM party WHERE NOT party_id IN (SELECT party_id FROM Member)","question":"Show names of parties that does not have any members.","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_name VARCHAR, party_id VARCHAR)","generation":"SELECT p.party_name FROM party p LEFT JOIN Member m ON p.party_id = m.party_id WHERE m.party_id IS NULL"}
{"answer":"SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of the customer that has been involved in the most policies.","context":"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (customer_id VARCHAR)","generation":"SELECT c.customer_details, COUNT(p.customer_id) AS policy_count FROM customers c JOIN policies p ON c.customer_id = p.customer_id GROUP BY c.customer_details ORDER BY policy_count DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM dependent WHERE sex = 'F'","question":"how many female dependents are there?","context":"CREATE TABLE dependent (sex VARCHAR)","generation":"SELECT COUNT(*) FROM dependent WHERE sex = 'F'"}
{"answer":"SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)","question":"List the name of musicals that do not have actors.","context":"CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT m.name FROM musical m LEFT JOIN actor a ON m.musical_id = a.musical_id WHERE a.musical_id IS NULL"}
{"answer":"SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50","question":"Show the locations of parties with hosts older than 50.","context":"CREATE TABLE party (Location VARCHAR, Party_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE HOST (Host_ID VARCHAR, Age INTEGER)","generation":"SELECT p.Location FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN HOST h ON ph.Host_ID = h.Host_ID WHERE h.Age > 50"}
{"answer":"SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1","question":"Find the name of the user who has the largest number of followers.","context":"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)","generation":"SELECT u.name FROM user_profiles u ORDER BY CAST(u.followers AS INTEGER) DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100","question":"Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.","context":"CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER); CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR)","generation":"SELECT b.bname FROM bank b JOIN loan l ON b.branch_id = l.branch_id JOIN customer c ON l.cust_id = c.cust_id WHERE c.credit_score < 100"}
{"answer":"SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100)","question":"Show the names of cities in counties that have a crime rate less than 100.","context":"CREATE TABLE county_public_safety (name VARCHAR, county_id VARCHAR, Crime_rate INTEGER); CREATE TABLE city (name VARCHAR, county_id VARCHAR, Crime_rate INTEGER)","generation":"SELECT c.name FROM city c WHERE c.crime_rate < 100"}
{"answer":"SELECT StuID FROM Student WHERE Sex = 'M'","question":"Show student ids for all male students.","context":"CREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)","generation":"SELECT s.stuid FROM Student s WHERE s.sex = 'M'"}
{"answer":"SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1","question":"List the most common result of the musicals.","context":"CREATE TABLE musical (RESULT VARCHAR)","generation":"SELECT m.RESULT FROM MUSICAL m GROUP BY m.RESULT ORDER BY COUNT(m.RESULT) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT transaction_type FROM Financial_Transactions","question":"Show all transaction types.","context":"CREATE TABLE Financial_Transactions (transaction_type VARCHAR)","generation":"SELECT ft.transaction_type FROM Financial_Transactions ft"}
{"answer":"SELECT DISTINCT name FROM races ORDER BY name DESC","question":"List the names of all distinct races in reversed  lexicographic order?","context":"CREATE TABLE races (name VARCHAR)","generation":"SELECT DISTINCT r.name FROM races r ORDER BY r.name DESC"}
{"answer":"SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = \"Palo Alto\")","question":"What is the average bike availability in stations that are not located in Palo Alto?","context":"CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)","generation":"SELECT AVG(s.bikes_available) FROM station s WHERE s.city != 'Palo Alto'"}
{"answer":"SELECT COUNT(*), sex FROM people WHERE weight > 85 GROUP BY sex","question":"how many people are there whose weight is higher than 85 for each gender?","context":"CREATE TABLE people (sex VARCHAR, weight INTEGER)","generation":"SELECT p.sex, COUNT(*) FROM people p WHERE p.weight > 85 GROUP BY p.sex"}
{"answer":"SELECT Student.Fname, Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY COUNT(*) DESC LIMIT 1","question":"Which student visited restaurant most often? List student's first name and last name.","context":"CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Student (Id VARCHAR)","generation":"SELECT s.first_name, s.last_name, COUNT(v.id) AS visit_count FROM Visits_Restaurant v JOIN Student s ON v.id = s.id GROUP BY s.first_name, s.last_name ORDER BY visit_count DESC LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT services) FROM station","question":"How many different services are provided by all stations?","context":"CREATE TABLE station (services VARCHAR)","generation":"SELECT COUNT(DISTINCT s.services) AS number_of_services FROM station s"}
{"answer":"SELECT crs_credit, crs_description FROM course WHERE crs_code = 'QM-261'","question":"Find the description and credit for the course QM-261?","context":"CREATE TABLE course (crs_credit VARCHAR, crs_description VARCHAR, crs_code VARCHAR)","generation":"SELECT c.crs_description, c.crs_credit FROM course c WHERE c.crs_code = 'QM-261'"}
{"answer":"SELECT * FROM CUSTOMER WHERE State = \"NY\"","question":"Find all the customer information in state NY.","context":"CREATE TABLE CUSTOMER (State VARCHAR)","generation":"SELECT * FROM CUSTOMER c WHERE c.STATE = 'NY'"}
{"answer":"SELECT SUM(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85","question":"What is the total money requested by entrepreneurs with height more than 1.85?","context":"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE entrepreneur (Money_Requested INTEGER, People_ID VARCHAR)","generation":"SELECT SUM(e.Money_Requested) AS total_money_requested FROM entrepreneur e JOIN people p ON e.People_ID = p.People_ID WHERE p.Height > 185"}
{"answer":"SELECT COUNT(DISTINCT temporary_acting) FROM management","question":"How many acting statuses are there?","context":"CREATE TABLE management (temporary_acting VARCHAR)","generation":"SELECT COUNT(DISTINCT m.temporary_acting) AS number_of_acting_statuses FROM management m"}
{"answer":"SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'","question":"What are the id and address of the shops which have a happy hour in May?","context":"CREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)","generation":"SELECT s.shop_id, s.address FROM shop s JOIN happy_hour h ON s.shop_id = h.shop_id WHERE date_part('month', to_date(h.start_date, 'YYYY-MM-DD')) = 5"}
{"answer":"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\"","question":"What is the name of tracks whose genre is Rock?","context":"CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)","generation":"SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id WHERE g.name = 'Rock'"}
{"answer":"SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the payment method that is used most frequently.","context":"CREATE TABLE Customers (payment_method VARCHAR)","generation":"SELECT c.payment_method, COUNT(*) AS COUNT FROM Customers c GROUP BY c.payment_method ORDER BY COUNT DESC LIMIT 1"}
{"answer":"SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'","question":"Find the titles of all movies not reviewed by Chris Jackson.","context":"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR); CREATE TABLE Movie (title VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)","generation":"SELECT m.title FROM Movie m LEFT JOIN Rating r ON m.mID = r.mID AND r.rID = 'Chris Jackson' WHERE r.rID IS NULL"}
{"answer":"SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID","question":"List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.","context":"CREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)","generation":"SELECT j.date, j.theme, j.sales FROM journal j WHERE j.journal_id NOT IN (SELECT c.journal_id FROM journal_committee c) ORDER BY j.date NULLS LAST"}
{"answer":"SELECT MAX(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"","question":"What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?","context":"CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (raceid VARCHAR, year VARCHAR, name VARCHAR)","generation":"SELECT MAX(r.fastestlapspeed) FROM results r JOIN races rc ON r.raceid = rc.raceid WHERE rc.name = 'Monaco Grand Prix' AND rc.year = '2008'"}
{"answer":"SELECT email, phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"","question":"What is Astrid Gruber's email and phone number?","context":"CREATE TABLE customers (email VARCHAR, phone VARCHAR, first_name VARCHAR, last_name VARCHAR)","generation":"SELECT c.email, c.phone FROM customers c WHERE c.first_name ilike '%Astrid%' AND c.last_name ilike '%Gruber%'"}
{"answer":"SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM entrepreneur)","question":"List the names of people that are not entrepreneurs.","context":"CREATE TABLE entrepreneur (Name VARCHAR, People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)","generation":"SELECT p.Name FROM people p LEFT JOIN entrepreneur e ON p.People_ID = e.People_ID WHERE e.People_ID IS NULL"}
{"answer":"SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC","question":"Show the names of players and names of their coaches in descending order of the votes of players.","context":"CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR); CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR, Votes VARCHAR)","generation":"SELECT p.Player_name, c.coach_name FROM player p JOIN player_coach pc ON p.Player_ID = pc.Player_ID JOIN coach c ON pc.Coach_ID = c.Coach_ID ORDER BY p.Votes DESC"}
{"answer":"SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200","question":"What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?","context":"CREATE TABLE enrollments (campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR)","generation":"SELECT e.campus FROM enrollments e WHERE e.year = '1956' GROUP BY e.campus HAVING SUM(CASE WHEN e.year = '1956' THEN 1 ELSE 0 END) > 400 AND SUM(CASE WHEN e.year = '1956' THEN 1 ELSE 0 END) > 200"}
{"answer":"SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"","question":"What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?","context":"CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)","generation":"SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN races rc ON r.raceid = rc.raceid WHERE rc.name ilike '%Australian%Grand%Prix%' AND NOT (rc.name ilike '%Chinese%Grand%Prix%') ORDER BY d.forename, d.surname NULLS LAST"}
{"answer":"SELECT Name FROM wrestler ORDER BY Days_held DESC","question":"List the names of wrestlers in descending order of days held.","context":"CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)","generation":"SELECT w.name FROM wrestler w ORDER BY CAST(w.days_held AS INT) DESC"}
{"answer":"SELECT name FROM building WHERE NOT building_id IN (SELECT building_id FROM institution)","question":"Show the name of buildings that do not have any institution.","context":"CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (name VARCHAR, building_id VARCHAR)","generation":"SELECT b.name FROM building b LEFT JOIN institution i ON b.building_id = i.building_id WHERE i.building_id IS NULL"}
{"answer":"SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING MAX(t1.precipitation) > 50","question":"Find the id and local authority of the station whose maximum precipitation is higher than 50.","context":"CREATE TABLE weekly_weather (station_id VARCHAR, precipitation INTEGER); CREATE TABLE station (id VARCHAR, local_authority VARCHAR)","generation":"SELECT s.id, s.local_authority FROM station s JOIN weekly_weather w ON s.id = w.station_id WHERE w.precipitation > 50 ORDER BY w.precipitation DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the party that has the most people.","context":"CREATE TABLE people (Party VARCHAR)","generation":"SELECT p.Party, COUNT(p.Party) AS COUNT FROM people p GROUP BY p.Party ORDER BY COUNT DESC LIMIT 1"}
{"answer":"SELECT AVG(amount_due) FROM payments","question":"What is the average amount due for all the payments?","context":"CREATE TABLE payments (amount_due INTEGER)","generation":"SELECT AVG(p.amount_due) AS average_amount_due FROM payments p"}
{"answer":"SELECT name, age FROM people WHERE is_male = 'T' AND NOT people_id IN (SELECT male_id FROM wedding)","question":"Show the name and age for all male people who don't have a wedding.","context":"CREATE TABLE wedding (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR); CREATE TABLE people (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR)","generation":"SELECT p.name, p.age FROM people p WHERE p.is_male = 'yes' AND p.people_id NOT IN (SELECT w.male_id FROM wedding w) ORDER BY p.name NULLS LAST"}
{"answer":"SELECT COUNT(*) FROM rent_arrears","question":"How many council taxes are collected for renting arrears ?","context":"CREATE TABLE rent_arrears (Id VARCHAR)","generation":"SELECT COUNT(*) AS total_rent_arrears FROM rent_arrears"}
{"answer":"SELECT T1.name, T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id","question":"List all country and league names.","context":"CREATE TABLE League (name VARCHAR, country_id VARCHAR); CREATE TABLE Country (name VARCHAR, id VARCHAR)","generation":"SELECT c.name AS country_name, l.name AS league_name FROM League l JOIN Country c ON l.country_id = c.id"}
{"answer":"SELECT T2.party_name, COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id","question":"Show party names and the number of events for each party.","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE party_events (party_id VARCHAR)","generation":"SELECT p.party_name, COUNT(pe.party_id) AS event_count FROM party p JOIN party_events pe ON p.party_id = pe.party_id GROUP BY p.party_name ORDER BY event_count DESC NULLS LAST"}
{"answer":"SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID","question":"Show names of actors and names of musicals they are in.","context":"CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT a.name AS actor_name, m.name AS musical_name FROM actor a JOIN musical m ON a.musical_id = m.musical_id"}
{"answer":"SELECT preferred_foot, COUNT(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot","question":"Of all players with an overall rating greater than 80, how many are right-footed and left-footed?","context":"CREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)","generation":"SELECT pa.preferred_foot, COUNT(*) FROM Player_Attributes pa WHERE pa.overall_rating > 80 GROUP BY pa.preferred_foot"}
{"answer":"SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)","question":"Show names for all employees with salary more than the average.","context":"CREATE TABLE Employee (name VARCHAR, salary INTEGER)","generation":"SELECT e.name FROM Employee e WHERE e.salary > (SELECT AVG(e2.salary) FROM Employee e2)"}
{"answer":"SELECT COUNT(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia'","question":"How many cities are in Australia?","context":"CREATE TABLE country (country_id VARCHAR, country VARCHAR); CREATE TABLE city (country_id VARCHAR)","generation":"SELECT COUNT(c.city_id) FROM city c JOIN country co ON c.country_id = co.country_id WHERE co.country = 'Australia'"}
{"answer":"SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT MAX(amount_claimed) FROM claim_headers)","question":"What is the name of the customer who has made the largest amount of claim in a single claim?","context":"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (amount_claimed INTEGER); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_claimed INTEGER)","generation":"SELECT c.customer_details, MAX(ch.amount_claimed) AS max_amount_claimed FROM claim_headers ch JOIN policies p ON ch.policy_id = p.policy_id JOIN customers c ON p.customer_id = c.customer_id GROUP BY c.customer_details ORDER BY max_amount_claimed DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success'","question":"Find the ids of orders whose status is 'Success'.","context":"CREATE TABLE actual_orders (actual_order_id VARCHAR, order_status_code VARCHAR)","generation":"SELECT a.actual_order_id FROM actual_orders a WHERE a.order_status_code = 'Success'"}
{"answer":"SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1","question":"Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.","context":"CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE employees (reports_to VARCHAR)","generation":"SELECT e.first_name, e.last_name, COUNT(e.reports_to) AS subordinate_count FROM employees e GROUP BY e.first_name, e.last_name ORDER BY subordinate_count DESC LIMIT 1"}
{"answer":"SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'","question":"What is the first name of students enrolled in class ACCT-211 and got grade C?","context":"CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR, enroll_grade VARCHAR)","generation":"SELECT s.stu_fname FROM enroll e JOIN student s ON e.stu_num = s.stu_num WHERE e.class_code = 'ACCT-211' AND e.enroll_grade = 'C'"}
{"answer":"SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010","question":"Find the name of students who took any class in the years of 2009 and 2010.","context":"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (id VARCHAR)","generation":"SELECT s.name FROM student s JOIN takes t ON s.id = t.id WHERE EXTRACT(YEAR FROM to_date(t.id, 'YYYY')) IN (2009, 2010) GROUP BY s.name"}
{"answer":"SELECT Name FROM journalist WHERE NOT journalist_ID IN (SELECT journalist_ID FROM news_report)","question":"List the names of journalists who have not reported any event.","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Name VARCHAR, journalist_ID VARCHAR)","generation":"SELECT j.name FROM journalist j LEFT JOIN news_report nr ON j.journalist_id = nr.journalist_id WHERE nr.journalist_id IS NULL"}
{"answer":"SELECT rID FROM Rating WHERE stars <> 4","question":"Find the ids of reviewers who didn't only give 4 star.","context":"CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)","generation":"SELECT DISTINCT r.rID FROM Rating r WHERE r.stars != '4'"}
{"answer":"SELECT COUNT(DISTINCT client) FROM web_client_accelerator","question":"How many different kinds of clients are supported by the web clients accelerators?","context":"CREATE TABLE web_client_accelerator (client VARCHAR)","generation":"SELECT COUNT(DISTINCT client) FROM web_client_accelerator"}
{"answer":"SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\"","question":"Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".","context":"CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)","generation":"SELECT a.name FROM actor a JOIN musical m ON a.musical_id = m.musical_id WHERE m.name ilike '%The Phantom of the Opera%'"}
{"answer":"SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE \"8\/%\" GROUP BY zip_code","question":"For each zip code, return the average mean temperature of August there.","context":"CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)","generation":"SELECT w.zip_code, AVG(w.mean_temperature_f) AS average_mean_temperature FROM weather w WHERE EXTRACT(MONTH FROM w.date::DATE) = 8 GROUP BY w.zip_code ORDER BY average_mean_temperature DESC NULLS LAST"}
{"answer":"SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode","question":"List the maximum, minimum and average number of used kb in screen mode.","context":"CREATE TABLE screen_mode (used_kb INTEGER)","generation":"SELECT MAX(s.used_kb), MIN(s.used_kb), AVG(s.used_kb) FROM screen_mode s"}
{"answer":"SELECT SUM(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84","question":"What is the total kills of the perpetrators with height more than 1.84.","context":"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE perpetrator (Killed INTEGER, People_ID VARCHAR)","generation":"SELECT SUM(p.Killed) AS total_kills FROM people p JOIN perpetrator e ON p.People_ID = e.People_ID WHERE p.Height > 184"}
{"answer":"SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft","question":"What is the minimum, average, and maximum distance of all aircrafts.","context":"CREATE TABLE Aircraft (distance INTEGER)","generation":"SELECT MIN(a.distance) AS minimum_distance, AVG(a.distance) AS average_distance, MAX(a.distance) AS maximum_distance FROM Aircraft a"}
{"answer":"SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)","question":"Show all track names that have had no races.","context":"CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)","generation":"SELECT t.name FROM track t WHERE t.track_id NOT IN (SELECT r.track_id FROM race r) ORDER BY t.name NULLS LAST"}
{"answer":"SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name","question":"Show the country names and the corresponding number of players.","context":"CREATE TABLE match_season (Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)","generation":"SELECT c.Country_name, COUNT(DISTINCT m.Player_id) AS player_count FROM country c JOIN match_season m ON c.Country_id = m.Country_id GROUP BY c.Country_name ORDER BY player_count DESC NULLS LAST"}
{"answer":"SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id","question":"Show the guest first names, start dates, and end dates of all the apartment bookings.","context":"CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_id VARCHAR)","generation":"SELECT g.guest_first_name, ab.booking_start_date, lag(ab.booking_end_date) OVER (PARTITION BY ab.guest_id ORDER BY ab.booking_start_date) AS previous_booking_end_date FROM Apartment_Bookings AS ab JOIN Guests AS g ON ab.guest_id = g.guest_id"}
{"answer":"SELECT COUNT(DISTINCT Hometown) FROM people","question":"How many distinct hometowns did these people have?","context":"CREATE TABLE people (Hometown VARCHAR)","generation":"SELECT COUNT(DISTINCT p.Hometown) FROM people p"}
{"answer":"SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount) DESC LIMIT 1","question":"Find the name of customer who has the highest amount of loans.","context":"CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)","generation":"SELECT c.cust_name FROM customer c JOIN loan l ON c.cust_id = l.cust_id ORDER BY l.amount DESC LIMIT 1"}
{"answer":"SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY unsure_rate","question":"Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.","context":"CREATE TABLE candidate (Support_rate VARCHAR, Consider_rate VARCHAR, Oppose_rate VARCHAR, unsure_rate VARCHAR)","generation":"SELECT c.Support_rate, c.Consider_rate, c.Oppose_rate, c.unsure_rate FROM candidate c ORDER BY c.unsure_rate ASC"}
{"answer":"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1","question":"Find the name of the user who gave the highest rating.","context":"CREATE TABLE review (u_id VARCHAR, rating VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)","generation":"SELECT u.name FROM useracct u JOIN review r ON u.u_id = r.u_id ORDER BY r.rating DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'","question":"Find the name of customers who do not have a loan with a type of Mortgages.","context":"CREATE TABLE loan (cust_id VARCHAR, loan_type VARCHAR); CREATE TABLE customer (cust_name VARCHAR); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)","generation":"SELECT c.cust_name FROM customer c LEFT JOIN loan l ON c.cust_id = l.cust_id AND l.loan_type = 'Mortgages' WHERE l.cust_id IS NULL"}
{"answer":"SELECT COUNT(*) FROM Church WHERE Open_Date < 1850","question":"How many churches opened before 1850 are there?","context":"CREATE TABLE Church (Open_Date INTEGER)","generation":"SELECT COUNT(*) FROM Church c WHERE c.open_date < 1850"}
{"answer":"SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"","question":"When did Linda Smith visit Subway?","context":"CREATE TABLE Restaurant (TIME VARCHAR); CREATE TABLE Visits_Restaurant (TIME VARCHAR); CREATE TABLE Student (TIME VARCHAR)","generation":"SELECT v.TIME FROM Visits_Restaurant v JOIN Student s ON v.STUDENT_ID = s.STUDENT_ID WHERE s.FIRST_NAME = 'Linda' AND s.LAST_NAME = 'Smith' AND v.RESTAURANT_NAME = 'Subway'"}
{"answer":"SELECT COUNT(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = \"Computer Info. Systems\"","question":"How many courses are offered by the Computer Info. Systems department?","context":"CREATE TABLE course (dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR)","generation":"SELECT COUNT(c.dept_code) FROM course c JOIN department d ON c.dept_code = d.dept_code WHERE d.dept_code = 'CIS'"}
{"answer":"SELECT Name FROM journalist ORDER BY Years_working","question":"List the names of journalists in ascending order of years working.","context":"CREATE TABLE journalist (Name VARCHAR, Years_working VARCHAR)","generation":"SELECT j.name FROM journalist j ORDER BY CAST(j.years_working AS INT) ASC"}
{"answer":"SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"","question":"Find the cell mobile number of the candidates whose assessment code is \"Fail\"?","context":"CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)","generation":"SELECT p.cell_mobile_number FROM candidate_assessments ca JOIN candidates c ON ca.candidate_id = c.candidate_id JOIN people p ON c.candidate_id = p.person_id WHERE ca.asessment_outcome_code = 'Fail'"}
{"answer":"SELECT title FROM Movie WHERE YEAR > (SELECT MAX(YEAR) FROM Movie WHERE director = \"Steven Spielberg\")","question":"What is the names of movies whose created year is after all movies directed by Steven Spielberg?","context":"CREATE TABLE Movie (title VARCHAR, YEAR INTEGER, director VARCHAR)","generation":"SELECT m.title FROM Movie m WHERE m.YEAR > (SELECT MAX(m2.YEAR) FROM Movie m2 WHERE m2.director = 'Steven Spielberg')"}
{"answer":"SELECT AVG(high_temperature), day_of_week FROM weekly_weather GROUP BY day_of_week","question":"What is the average high temperature for each day of week?","context":"CREATE TABLE weekly_weather (day_of_week VARCHAR, high_temperature INTEGER)","generation":"SELECT w.day_of_week, AVG(w.high_temperature) AS average_high_temperature FROM weekly_weather w GROUP BY w.day_of_week ORDER BY average_high_temperature DESC NULLS LAST"}
{"answer":"SELECT title FROM Movie WHERE YEAR = (SELECT MAX(YEAR) FROM Movie)","question":"What is the name of the most recent movie?","context":"CREATE TABLE Movie (title VARCHAR, YEAR INTEGER)","generation":"SELECT m.title FROM Movie m ORDER BY m.YEAR DESC LIMIT 1"}
{"answer":"SELECT COUNT(DISTINCT Party) FROM representative","question":"How many distinct parties are there for representatives?","context":"CREATE TABLE representative (Party VARCHAR)","generation":"SELECT COUNT(DISTINCT r.party) FROM representative r"}
{"answer":"SELECT Title, Issues FROM book","question":"What are the title and issues of the books?","context":"CREATE TABLE book (Title VARCHAR, Issues VARCHAR)","generation":"SELECT b.Title, b.Issues FROM book b"}
{"answer":"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Pop\"","question":"What are the duration of the longest and shortest pop tracks in milliseconds?","context":"CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)","generation":"SELECT MAX(t.Duration) AS longest_duration_ms, MIN(t.Duration) AS shortest_duration_ms FROM TRACK t JOIN GENRE g ON t.GenreId = g.GenreId WHERE g.Name = 'pop'"}
{"answer":"SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) DESC LIMIT 1","question":"Find the movies with the highest average rating. Return the movie titles and average rating.","context":"CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT m.title, AVG(r.stars) AS average_rating FROM Rating r JOIN Movie m ON r.mID = m.mID GROUP BY m.title ORDER BY average_rating DESC NULLS LAST LIMIT 10"}
{"answer":"SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0","question":"Find the state, account type, and credit score of the customer whose number of loan is 0.","context":"CREATE TABLE customer (state VARCHAR, acc_type VARCHAR, credit_score VARCHAR, no_of_loans VARCHAR)","generation":"SELECT c.state, c.acc_type, c.credit_score FROM customer c WHERE CAST(c.no_of_loans AS INTEGER) = 0"}
{"answer":"SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)","question":"Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.","context":"CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)","generation":"SELECT t.id FROM trip t WHERE t.duration >= (SELECT AVG(t2.duration) FROM trip t2 WHERE t2.zip_code = '94103')"}
{"answer":"SELECT AVG(Snatch) FROM body_builder","question":"What is the average snatch score of body builders?","context":"CREATE TABLE body_builder (Snatch INTEGER)","generation":"SELECT AVG(b.Snatch) AS average_snatch_score FROM body_builder b"}
{"answer":"SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What is detail of the student who registered the most number of courses?","context":"CREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT s.student_details, s.student_id FROM students s JOIN (SELECT student_id, COUNT(student_id) AS num_courses FROM student_course_registrations GROUP BY student_id ORDER BY num_courses DESC LIMIT 1) AS mc ON s.student_id = mc.student_id LIMIT 1"}
{"answer":"SELECT name FROM enzyme ORDER BY name DESC","question":"List the name of enzymes in descending lexicographical order.","context":"CREATE TABLE enzyme (name VARCHAR)","generation":"SELECT e.name FROM enzyme e ORDER BY e.name DESC"}
{"answer":"SELECT COUNT(*) FROM review","question":"Find the number of reviews.","context":"CREATE TABLE review (Id VARCHAR)","generation":"SELECT COUNT(r.id) AS review_count FROM review r"}
{"answer":"SELECT Name FROM editor ORDER BY Age LIMIT 1","question":"What is the name of the youngest editor?","context":"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)","generation":"SELECT e.name FROM editor e ORDER BY CAST(e.age AS INT) ASC LIMIT 1"}
{"answer":"SELECT name FROM instructor WHERE name LIKE '%dar%'","question":"Find the names of all instructors whose name includes the substring \u201cdar\u201d.","context":"CREATE TABLE instructor (name VARCHAR)","generation":"SELECT i.name FROM instructor i WHERE i.name ilike '%dar%' ORDER BY i.name NULLS LAST"}
{"answer":"SELECT AVG(weight), MIN(weight), sex FROM people GROUP BY sex","question":"Find the average and minimum weight for each gender.","context":"CREATE TABLE people (sex VARCHAR, weight INTEGER)","generation":"SELECT p.sex, AVG(p.weight) AS average_weight, MIN(p.weight) AS minimum_weight FROM people p GROUP BY p.sex"}
{"answer":"SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'","question":"Give me the names of members whose address is in Harford or Waterbury.","context":"CREATE TABLE member (name VARCHAR, address VARCHAR)","generation":"SELECT m.name FROM member m WHERE m.address ilike '%Harford%' OR m.address ilike '%Waterbury%'"}
{"answer":"SELECT AVG(T1.stars), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MIN(YEAR) FROM Movie)","question":"What is the average rating stars and title for the oldest movie?","context":"CREATE TABLE Movie (title VARCHAR, mID VARCHAR, year VARCHAR); CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (YEAR INTEGER)","generation":"SELECT AVG(r.stars), m.title FROM Movie m JOIN Rating r ON m.mID = r.mID ORDER BY m.year ASC LIMIT 1"}
{"answer":"SELECT T2.invoice_number, T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the invoice number and invoice date for the invoice with most number of transactions?","context":"CREATE TABLE Invoices (invoice_number VARCHAR, invoice_date VARCHAR); CREATE TABLE Financial_transactions (invoice_number VARCHAR)","generation":"SELECT i.invoice_number, i.invoice_date FROM Invoices i JOIN (SELECT ft.invoice_number, COUNT(*) AS transaction_count FROM Financial_transactions ft GROUP BY ft.invoice_number ORDER BY transaction_count DESC LIMIT 1) AS mt ON i.invoice_number = mt.invoice_number"}
{"answer":"SELECT COUNT(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001","question":"How many budgets are above 3000 in year 2001 or before?","context":"CREATE TABLE budget (budgeted VARCHAR, YEAR VARCHAR)","generation":"SELECT COUNT(*) FROM budget b WHERE CAST(b.budgeted AS INTEGER) > 3000 AND CAST(b.year AS INTEGER) <= 2001"}
