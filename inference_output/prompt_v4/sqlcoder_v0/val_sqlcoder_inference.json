{"answer":"SELECT T3.Location, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age","question":"Show the locations of parties and the names of the party hosts in ascending order of the age of the host.","context":"CREATE TABLE party (Location VARCHAR, Party_ID VARCHAR); CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR, Age VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR)","generation":"SELECT p.Location, h.Name FROM party p JOIN party_host ph ON p.Party_ID = ph.Party_ID JOIN HOST h ON ph.Host_ID = h.Host_ID ORDER BY h.Age ASC"}
{"answer":"SELECT name FROM accounts ORDER BY name","question":"List all customers\u2019 names in the alphabetical order.","context":"CREATE TABLE accounts (name VARCHAR)","generation":"SELECT a.name FROM accounts a ORDER BY a.name ASC"}
{"answer":"SELECT Name FROM Team","question":"Show all team names.","context":"CREATE TABLE Team (Name VARCHAR)","generation":"SELECT t.name FROM Team t"}
{"answer":"SELECT cust_name FROM customer ORDER BY acc_bal","question":"List the name of all customers sorted by their account balance in ascending order.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)","generation":"SELECT c.cust_name FROM customer c ORDER BY CAST(c.acc_bal AS FLOAT) ASC"}
{"answer":"SELECT COUNT(*) FROM train WHERE name LIKE \"%Express%\"","question":"How many trains have 'Express' in their names?","context":"CREATE TABLE train (name VARCHAR)","generation":"SELECT COUNT(*) FROM train t WHERE t.name ilike '%Express%'"}
{"answer":"SELECT COUNT(*) FROM game WHERE season > 2007","question":"How many games are held after season 2007?","context":"CREATE TABLE game (season INTEGER)","generation":"SELECT COUNT(*) FROM game g WHERE g.season > 2007"}
{"answer":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id and last name of the driver who participated in the most races after 2010?","context":"CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR, year INTEGER); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)","generation":"SELECT d.driverid, d.surname FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN races rc ON r.raceid = rc.raceid WHERE rc.year > 2010 GROUP BY d.driverid, d.surname ORDER BY COUNT(r.raceid) DESC LIMIT 1"}
{"answer":"SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the department that has the largest number of students enrolled?","context":"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT d.dept_name FROM department d JOIN course c ON d.dept_code = c.dept_code JOIN CLASS cl ON c.crs_code = cl.crs_code JOIN enroll e ON cl.class_code = e.class_code GROUP BY d.dept_name ORDER BY COUNT(e.class_code) DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT school, LOCATION FROM university WHERE affiliation = 'Public'","question":"List all public schools and their locations.","context":"CREATE TABLE university (school VARCHAR, LOCATION VARCHAR, affiliation VARCHAR)","generation":"SELECT u.school, u.location FROM university u WHERE u.affiliation ilike '%public%' ORDER BY u.school NULLS LAST"}
{"answer":"SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'","question":"Show all headquarters with both a company in banking industry and a company in Oil and gas.","context":"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)","generation":"SELECT c.headquarters FROM company c WHERE c.main_industry ilike '%banking%' AND c.headquarters IN (SELECT c.headquarters FROM company c WHERE c.main_industry ilike '%oil%gas%')"}
{"answer":"SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"","question":"How much is the track Fast As a Shark?","context":"CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)","generation":"SELECT CAST(t.unit_price AS FLOAT) AS price FROM tracks t WHERE t.name ILIKE '%Fast%As%A%Shark%'"}
{"answer":"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1","question":"Which allergy type has least number of allergies?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT a.allergytype FROM Allergy_type a ORDER BY COUNT(a.allergytype) ASC LIMIT 1"}
{"answer":"SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration < (SELECT MAX(duration) FROM pitstops WHERE raceid = 841)","question":"Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.","context":"CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)","generation":"SELECT p.driverid, p.STOP, p.duration FROM pitstops p WHERE p.raceid = '841' AND p.duration < (SELECT MIN(duration) FROM pitstops WHERE raceid = '841')"}
{"answer":"SELECT customer_email, customer_name FROM customers WHERE payment_method = 'Visa'","question":"List the names and emails of customers who payed by Visa card.","context":"CREATE TABLE customers (customer_email VARCHAR, customer_name VARCHAR, payment_method VARCHAR)","generation":"SELECT c.customer_name, c.customer_email FROM customers c WHERE c.payment_method ilike '%Visa%'"}
{"answer":"SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the people that have been governor the most times.","context":"CREATE TABLE party (Governor VARCHAR)","generation":"SELECT p.Governor, COUNT(p.Governor) AS times_governor FROM party p GROUP BY p.Governor ORDER BY times_governor DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM storm WHERE Number_Deaths > 0","question":"How many storms had death records?","context":"CREATE TABLE storm (Number_Deaths INTEGER)","generation":"SELECT COUNT(*) FROM storm WHERE number_deaths IS NOT NULL"}
{"answer":"SELECT COUNT(*) FROM county","question":"How many counties are there in total?","context":"CREATE TABLE county (Id VARCHAR)","generation":"SELECT COUNT(DISTINCT c.id) AS total_counties FROM county c"}
{"answer":"SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\"","question":"Show the police force shared by counties with location on the east and west.","context":"CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)","generation":"SELECT cp.Police_force FROM county_public_safety cp WHERE cp.LOCATION ilike '%east%' OR cp.LOCATION ilike '%west%' GROUP BY cp.Police_force ORDER BY COUNT(cp.Police_force) DESC NULLS LAST"}
{"answer":"SELECT customer_details FROM customers UNION SELECT staff_details FROM staff","question":"Find the names of all the customers and staff members.","context":"CREATE TABLE staff (customer_details VARCHAR, staff_details VARCHAR); CREATE TABLE customers (customer_details VARCHAR, staff_details VARCHAR)","generation":"SELECT c.customer_details, s.staff_details FROM customers c, staff s"}
{"answer":"SELECT T3.name, T2.title, T1.stars, T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name, T2.title, T1.stars","question":"Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.","context":"CREATE TABLE Rating (stars VARCHAR, ratingDate VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT r.name AS reviewer_name, m.title AS movie_title, r.stars AS stars, r.ratingDate AS rating_date FROM Rating r JOIN Reviewer rv ON r.rID = rv.rID JOIN Movie m ON r.mID = m.mID ORDER BY rv.name ASC, m.title ASC, r.stars DESC"}
{"answer":"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING COUNT(*) >= 2","question":"What are the names of parties with at least 2 events?","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE party_events (party_id VARCHAR)","generation":"SELECT p.party_name FROM party p JOIN party_events pe ON p.party_id = pe.party_id GROUP BY p.party_name HAVING COUNT(pe.party_id) >= 2"}
{"answer":"SELECT Address FROM Restaurant WHERE ResName = \"Subway\"","question":"What is the address of the restaurant Subway?","context":"CREATE TABLE Restaurant (Address VARCHAR, ResName VARCHAR)","generation":"SELECT r.Address FROM Restaurant r WHERE r.ResName ILIKE '%Subway%'"}
{"answer":"SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the manager name with most number of gas stations opened after 2000.","context":"CREATE TABLE gas_station (manager_name VARCHAR, open_year INTEGER)","generation":"SELECT g.manager_name, COUNT(*) AS number_of_stations FROM gas_station g WHERE g.open_year > 2000 GROUP BY g.manager_name ORDER BY number_of_stations DESC LIMIT 1"}
{"answer":"SELECT SUM(crs_credit), dept_code FROM course GROUP BY dept_code","question":"What is the total credit does each department offer?","context":"CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER)","generation":"SELECT c.dept_code, SUM(c.crs_credit) AS total_credit FROM course c GROUP BY c.dept_code ORDER BY total_credit DESC NULLS LAST"}
{"answer":"SELECT T1.name, COUNT(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id","question":"List the name for storms and the number of affected regions for each storm.","context":"CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT s.name, COUNT(a.storm_id) AS affected_region_count FROM storm s JOIN affected_region a ON s.storm_id = a.storm_id GROUP BY s.name ORDER BY affected_region_count DESC NULLS LAST"}
{"answer":"SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"","question":"Find the names of customers whose name contains \"Diana\".","context":"CREATE TABLE customers (customer_details VARCHAR)","generation":"SELECT c.customer_details FROM customers c WHERE c.customer_details ilike '%Diana%'"}
{"answer":"SELECT AVG(Horizontal_Bar_Points) FROM gymnast","question":"What is the average horizontal bar points for all gymnasts?","context":"CREATE TABLE gymnast (Horizontal_Bar_Points INTEGER)","generation":"SELECT AVG(g.Horizontal_Bar_Points) AS average_horizontal_bar_points FROM gymnast g"}
{"answer":"SELECT document_id, receipt_date FROM Documents","question":"List all document ids and receipt dates of documents.","context":"CREATE TABLE Documents (document_id VARCHAR, receipt_date VARCHAR)","generation":"SELECT d.document_id, d.receipt_date FROM Documents d"}
{"answer":"SELECT Date, Vote_Percent FROM election","question":"List the dates and vote percents of elections.","context":"CREATE TABLE election (Date VARCHAR, Vote_Percent VARCHAR)","generation":"SELECT e.date, e.vote_percent FROM election e ORDER BY e.date NULLS LAST"}
{"answer":"SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\"","question":"Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"","context":"CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)","generation":"SELECT p.Price FROM publication p WHERE p.Publisher ilike '%Person%' OR p.Publisher ilike '%Wiley%'"}
{"answer":"SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents","question":"What are the average and minimum price (in Euro) of all products?","context":"CREATE TABLE catalog_contents (price_in_euros INTEGER)","generation":"SELECT AVG(catalog_contents.price_in_euros) AS average_price_in_euros, MIN(catalog_contents.price_in_euros) AS minimum_price_in_euros FROM catalog_contents"}
{"answer":"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"","question":"What is title of album which track Balls to the Wall belongs to?","context":"CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)","generation":"SELECT a.title FROM tracks t JOIN albums a ON t.genre_id = a.id WHERE t.name = 'Balls to the Wall'"}
{"answer":"SELECT DISTINCT LOCATION FROM track","question":"What are distinct locations where tracks are located?","context":"CREATE TABLE track (LOCATION VARCHAR)","generation":"SELECT DISTINCT t.LOCATION FROM track t"}
{"answer":"SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING COUNT(*) >= 3","question":"Which countries have at least 3 cities?","context":"CREATE TABLE country (country VARCHAR, country_id VARCHAR); CREATE TABLE city (country_id VARCHAR)","generation":"SELECT c.country FROM country c JOIN city ci ON c.country_id = ci.country_id GROUP BY c.country HAVING COUNT(ci.city_id) >= 3"}
{"answer":"SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'","question":"Find the names of the chip models that are not used by any phone with full accreditation type.","context":"CREATE TABLE chip_model (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR); CREATE TABLE phone (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR)","generation":"SELECT cm.model_name FROM chip_model cm WHERE cm.accreditation_type != 'full' AND cm.model_name NOT IN (SELECT p.chip_model FROM phone p WHERE p.accreditation_type = 'full') ORDER BY cm.model_name NULLS LAST"}
{"answer":"SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'","question":"Find the first names of teachers whose email address contains the word \"man\".","context":"CREATE TABLE Teachers (first_name VARCHAR, email_address VARCHAR)","generation":"SELECT t.first_name FROM Teachers t WHERE t.email_address ilike '%man%' ORDER BY t.first_name NULLS LAST"}
{"answer":"SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60","question":"Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.","context":"CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)","generation":"SELECT t.id FROM trip t JOIN weather w ON t.zip_code = w.zip_code WHERE w.mean_temperature_f > 60"}
{"answer":"SELECT DISTINCT building FROM classroom WHERE capacity > 50","question":"Find the buildings which have rooms with capacity more than 50.","context":"CREATE TABLE classroom (building VARCHAR, capacity INTEGER)","generation":"SELECT c.building FROM classroom c WHERE c.capacity > 50"}
{"answer":"SELECT COUNT(*) FROM Student WHERE Advisor = 1121","question":"Advisor 1121 has how many students?","context":"CREATE TABLE Student (Advisor VARCHAR)","generation":"SELECT COUNT(s.Advisor) FROM Student s WHERE s.Advisor = '1121'"}
{"answer":"SELECT TIME FROM elimination WHERE Eliminated_By = \"Punk\" OR Eliminated_By = \"Orton\"","question":"Show the times of elimination by \"Punk\" or \"Orton\".","context":"CREATE TABLE elimination (TIME VARCHAR, Eliminated_By VARCHAR)","generation":"SELECT e.TIME FROM elimination e WHERE e.Eliminated_By ILIKE '%Punk%' OR e.Eliminated_By ILIKE '%Orton%' ORDER BY e.TIME NULLS LAST"}
{"answer":"SELECT AVG(salary), MAX(salary) FROM Employee","question":"What is average and maximum salary of all employees.","context":"CREATE TABLE Employee (salary INTEGER)","generation":"SELECT AVG(e.salary), MAX(e.salary) FROM Employee e"}
{"answer":"SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100","question":"Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.","context":"CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)","generation":"SELECT w.zip_code FROM weather w JOIN trip t ON w.zip_code = t.zip_code GROUP BY w.zip_code HAVING AVG(w.mean_humidity) < 70 AND COUNT(t.zip_code) >= 100 ORDER BY AVG(w.mean_humidity) NULLS LAST"}
{"answer":"SELECT title FROM papers WHERE title LIKE \"%ML%\"","question":"Find the titles of the papers that contain the word \"ML\".","context":"CREATE TABLE papers (title VARCHAR)","generation":"SELECT p.title FROM papers p WHERE p.title ilike '%ML%' ORDER BY p.title NULLS LAST"}
{"answer":"SELECT AVG(enrollment) FROM university WHERE founded < 1850","question":"What are the average enrollment size of the universities that are founded before 1850?","context":"CREATE TABLE university (enrollment INTEGER, founded INTEGER)","generation":"SELECT AVG(u.enrollment) FROM university u WHERE u.founded < 1850"}
{"answer":"SELECT AVG(Attendance) FROM performance","question":"What is the average number of attendees for performances?","context":"CREATE TABLE performance (Attendance INTEGER)","generation":"SELECT AVG(p.Attendance) AS average_attendance FROM performance p"}
{"answer":"SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")","question":"Find the number of students who are older than 18 and do not have allergy to either food or animal.","context":"CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)","generation":"SELECT COUNT(DISTINCT s.StuID) FROM Student s LEFT JOIN Has_allergy ha ON s.StuID = ha.Allergy WHERE CAST(s.age AS INT) > 18 AND (ha.Allergy IS NULL OR ha.Allergy NOT IN (SELECT a.Allergy FROM Allergy_Type a WHERE a.allergytype IN ('food', 'animal')))"}
{"answer":"SELECT decor, COUNT(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor","question":"Find the number of rooms with price higher than 120 for different decor.","context":"CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)","generation":"SELECT r.decor, COUNT(*) FROM Rooms r WHERE r.basePrice > 120 GROUP BY r.decor"}
{"answer":"SELECT class_code FROM CLASS WHERE class_room = 'KLR209'","question":"List the codes of all courses that take place in room KLR209.","context":"CREATE TABLE CLASS (class_code VARCHAR, class_room VARCHAR)","generation":"SELECT c.class_code FROM CLASS c WHERE c.class_room = 'KLR209'"}
{"answer":"SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100","question":"List the name of playlist which has number of tracks greater than 100.","context":"CREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)","generation":"SELECT p.name FROM playlist_tracks pt JOIN playlists p ON pt.playlist_id = p.id GROUP BY p.name HAVING COUNT(pt.track_id) > 100"}
{"answer":"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING COUNT(*) > 1","question":"Find the name of instructors who are advising more than one student.","context":"CREATE TABLE advisor (i_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT i.name FROM instructor i JOIN advisor a ON i.id = a.i_id GROUP BY i.name HAVING COUNT(a.i_id) > 1"}
{"answer":"SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = \"Debit\"","question":"How many debit cards do we have?","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT COUNT(*) FROM Customers_cards WHERE card_type_code ilike '%debit%'"}
{"answer":"SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\"","question":"What is the attribute data type of the attribute with name \"Green\"?","context":"CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)","generation":"SELECT ad.attribute_data_type FROM Attribute_Definitions ad WHERE ad.attribute_name = 'Green'"}
{"answer":"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"","question":"Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".","context":"CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)","generation":"SELECT c.customer_name FROM customers c JOIN first_notification_of_loss f1 ON c.customer_id = f1.customer_id JOIN services s1 ON f1.service_id = s1.service_id WHERE s1.service_name = 'Close a policy' AND EXISTS (SELECT 1 FROM first_notification_of_loss f2 JOIN services s2 ON f2.service_id = s2.service_id WHERE f2.customer_id = c.customer_id AND s2.service_name = 'New policy application')"}
{"answer":"SELECT title FROM course GROUP BY title HAVING COUNT(*) > 1","question":"Find the title of the course that is offered by more than one department.","context":"CREATE TABLE course (title VARCHAR)","generation":"SELECT c.title FROM course c WHERE c.title IN (SELECT c.title FROM course c GROUP BY c.title HAVING COUNT(DISTINCT d.department_id) > 1) ORDER BY c.title NULLS LAST"}
{"answer":"SELECT name FROM Reviewer UNION SELECT title FROM Movie","question":"Return all reviewer names and movie names together in a single list.","context":"CREATE TABLE Reviewer (name VARCHAR, title VARCHAR); CREATE TABLE Movie (name VARCHAR, title VARCHAR)","generation":"SELECT r.name AS reviewer_name, m.name AS movie_name FROM Reviewer r CROSS JOIN Movie m"}
{"answer":"SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1","question":"What is the team name and acc regular season score of the school that was founded for the longest time?","context":"CREATE TABLE university (school_id VARCHAR, founded VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, ACC_Regular_Season VARCHAR, school_id VARCHAR)","generation":"SELECT bm.team_name, bm.ACC_Regular_Season FROM basketball_match bm JOIN university u ON bm.school_id = u.school_id ORDER BY u.founded DESC LIMIT 1"}
{"answer":"SELECT COUNT(*), address FROM member GROUP BY address","question":"Find the number of members living in each address.","context":"CREATE TABLE member (address VARCHAR)","generation":"SELECT m.address, COUNT(m.address) AS number_of_members FROM member m GROUP BY m.address ORDER BY number_of_members DESC NULLS LAST"}
{"answer":"SELECT T2.name, T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014","question":"Show the pair of male and female names in all weddings after year 2014","context":"CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, year INTEGER); CREATE TABLE people (name VARCHAR, people_id VARCHAR)","generation":"SELECT p1.name AS male_name, p2.name AS female_name FROM wedding w JOIN people p1 ON w.male_id = p1.people_id JOIN people p2 ON w.female_id = p2.people_id WHERE w.year > 2014"}
{"answer":"SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton'","question":"How many rooms does the Lamberton building have?","context":"CREATE TABLE classroom (building VARCHAR)","generation":"SELECT COUNT(DISTINCT c.room) FROM classroom c WHERE c.building = 'Lamberton'"}
{"answer":"SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the most common publication date.","context":"CREATE TABLE publication (Publication_Date VARCHAR)","generation":"SELECT p.publication_date FROM publication p GROUP BY p.publication_date ORDER BY COUNT(p.publication_date) DESC LIMIT 1"}
{"answer":"SELECT AVG(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"","question":"Show the average room count of the apartments that have booking status code \"Provisional\".","context":"CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)","generation":"SELECT AVG(COUNT) AS average_rooms FROM (SELECT ab.apt_id, COUNT(*) AS COUNT FROM Apartment_Bookings ab WHERE ab.booking_status_code = 'Provisional' GROUP BY ab.apt_id) AS subquery"}
{"answer":"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30","question":"Show the church names for the weddings of all people older than 30.","context":"CREATE TABLE church (name VARCHAR, church_id VARCHAR); CREATE TABLE people (people_id VARCHAR, age VARCHAR); CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, church_id VARCHAR)","generation":"SELECT DISTINCT w.church_id AS church_name FROM people p JOIN wedding w ON p.people_id = w.male_id OR p.people_id = w.female_id WHERE CAST(p.age AS INTEGER) > 30"}
{"answer":"SELECT DISTINCT directed_by FROM film","question":"Show all directors.","context":"CREATE TABLE film (directed_by VARCHAR)","generation":"SELECT DISTINCT f.directed_by FROM film f"}
{"answer":"SELECT DISTINCT T1.EMP_FNAME, T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"","question":"What are the first names and date of birth of professors teaching course ACCT-211?","context":"CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_DOB VARCHAR, EMP_NUM VARCHAR)","generation":"SELECT e.EMP_FNAME, to_date(e.EMP_DOB, 'YYYY-MM-DD') AS EMP_DOB FROM CLASS c JOIN employee e ON c.PROF_NUM = e.EMP_NUM WHERE c.CLASS_NAME = 'ACCT-211'"}
{"answer":"SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)","question":"What is the last name of the youngest student?","context":"CREATE TABLE Student (LName VARCHAR, age INTEGER)","generation":"SELECT s.LName FROM Student s ORDER BY s.age ASC LIMIT 1"}
{"answer":"SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"","question":"Who is the composer of track Fast As a Shark?","context":"CREATE TABLE tracks (composer VARCHAR, name VARCHAR)","generation":"SELECT t.composer FROM tracks t WHERE t.name ilike '%Fast%As%a%Shark%'"}
{"answer":"SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common nationality of hosts.","context":"CREATE TABLE HOST (Nationality VARCHAR)","generation":"SELECT h.nationality FROM HOST h GROUP BY h.nationality ORDER BY COUNT(h.nationality) DESC LIMIT 1"}
{"answer":"SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1","question":"Which advisor has most number of students?","context":"CREATE TABLE Student (advisor VARCHAR)","generation":"SELECT s.advisor, COUNT(s.advisor) AS number_of_students FROM Student s GROUP BY s.advisor ORDER BY number_of_students DESC LIMIT 1"}
{"answer":"SELECT POSITION, Team FROM pilot","question":"What are the positions and teams of pilots?","context":"CREATE TABLE pilot (POSITION VARCHAR, Team VARCHAR)","generation":"SELECT p.POSITION, p.Team FROM pilot p"}
{"answer":"SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004","question":"List the campus that have between 600 and 1000 faculty lines in year 2004.","context":"CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (campus VARCHAR, faculty VARCHAR)","generation":"SELECT c.id FROM campuses c JOIN faculty f ON c.id = f.campus WHERE EXTRACT(YEAR FROM TO_DATE(f.faculty, 'YYYY')) = 2004 GROUP BY c.id HAVING COUNT(f.faculty) BETWEEN 600 AND 1000"}
{"answer":"SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004","question":"Show all artist names who didn't have an exhibition in 2004.","context":"CREATE TABLE exhibition (artist_id VARCHAR, year VARCHAR); CREATE TABLE artist (name VARCHAR); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)","generation":"SELECT a.name FROM artist a LEFT JOIN exhibition e ON a.artist_id = e.artist_id AND e.year = '2004' WHERE e.artist_id IS NULL"}
{"answer":"SELECT Nationality, COUNT(*) FROM pilot GROUP BY Nationality","question":"What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.","context":"CREATE TABLE pilot (Nationality VARCHAR)","generation":"SELECT p.Nationality, COUNT(p.Nationality) AS COUNT FROM pilot p GROUP BY p.Nationality ORDER BY COUNT DESC NULLS LAST"}
{"answer":"SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1","question":"Show the apartment numbers of apartments with unit status availability of both 0 and 1.","context":"CREATE TABLE View_Unit_Status (apt_id VARCHAR, available_yn VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)","generation":"SELECT a.apt_number FROM Apartments a JOIN View_Unit_Status v ON a.apt_id = v.apt_id WHERE v.available_yn IN ('0', '1') ORDER BY a.apt_number NULLS LAST"}
{"answer":"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1","question":"which course has most number of registered students?","context":"CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)","generation":"SELECT c.course_name, COUNT(sc.course_id) AS number_of_students FROM courses c JOIN student_course_registrations sc ON c.course_id = sc.course_id GROUP BY c.course_name ORDER BY number_of_students DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common location of performances.","context":"CREATE TABLE performance (LOCATION VARCHAR)","generation":"SELECT p.LOCATION FROM performance p GROUP BY p.LOCATION ORDER BY COUNT(p.LOCATION) DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM building","question":"How many buildings are there?","context":"CREATE TABLE building (Id VARCHAR)","generation":"SELECT COUNT(b.id) FROM building b"}
{"answer":"SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'","question":"Find the names of customers who are not living in the state of California.","context":"CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)","generation":"SELECT c.customer_name FROM customers c JOIN customer_addresses ca ON c.customer_id = ca.customer_id JOIN addresses a ON ca.address_id = a.address_id WHERE a.state_province_county != 'California' ORDER BY c.customer_name NULLS LAST"}
{"answer":"SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC","question":"Show the ages of gymnasts in descending order of total points.","context":"CREATE TABLE people (Age VARCHAR, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points VARCHAR)","generation":"SELECT p.age FROM gymnast g JOIN people p ON g.gymnast_id = p.people_id ORDER BY CAST(g.total_points AS INTEGER) DESC"}
{"answer":"SELECT MAX(capacity), AVG(capacity), building FROM classroom GROUP BY building","question":"Find the maximum and average capacity among rooms in each building.","context":"CREATE TABLE classroom (building VARCHAR, capacity INTEGER)","generation":"SELECT c.building, MAX(c.capacity) AS max_capacity, AVG(c.capacity) AS average_capacity FROM classroom c GROUP BY c.building ORDER BY max_capacity DESC, average_capacity DESC NULLS LAST"}
{"answer":"SELECT T1.fault_log_entry_id, T1.fault_description, T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which fault log included the most number of faulty parts? List the fault log id, description and record time.","context":"CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR, fault_description VARCHAR, fault_log_entry_datetime VARCHAR); CREATE TABLE Fault_Log_Parts (fault_log_entry_id VARCHAR)","generation":"SELECT fl.fault_log_entry_id, fl.fault_description, fl.fault_log_entry_datetime FROM Fault_Log fl JOIN Fault_Log_Parts flp ON fl.fault_log_entry_id = flp.fault_log_entry_id GROUP BY fl.fault_log_entry_id, fl.fault_description, fl.fault_log_entry_datetime ORDER BY COUNT(flp.fault_log_entry_id) DESC LIMIT 1"}
{"answer":"SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\"","question":"Show the date valid from and the date valid to for the card with card number '4560596484842'.","context":"CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)","generation":"SELECT cc.date_valid_from, cc.date_valid_to FROM Customers_cards cc WHERE cc.card_number = '4560596484842'"}
{"answer":"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4","question":"What are the names of movies that get 3 star and 4 star?","context":"CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT m.title FROM Movie m JOIN Rating r ON m.mID = r.mID WHERE r.stars IN ('3', '4') ORDER BY m.title NULLS LAST"}
{"answer":"SELECT T1.id, T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","question":"What are the ids and names of the web accelerators that are compatible with two or more browsers?","context":"CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, Name VARCHAR)","generation":"SELECT a.id, a.name FROM web_client_accelerator a JOIN accelerator_compatible_browser b ON a.id = b.accelerator_id GROUP BY a.id, a.name HAVING COUNT(b.accelerator_id) >= 2"}
{"answer":"SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'","question":"How many professors who are from either Accounting or Biology department?","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (dept_code VARCHAR)","generation":"SELECT COUNT(DISTINCT p.prof_id) FROM professor p JOIN department d ON p.dept_code = d.dept_code WHERE d.dept_name IN ('Accounting', 'Biology')"}
{"answer":"SELECT T2.name, SUM(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id","question":"What is total number of show times per dat for each cinema?","context":"CREATE TABLE schedule (show_times_per_day INTEGER, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR)","generation":"SELECT c.name, SUM(s.show_times_per_day) AS total_show_times FROM schedule s JOIN cinema c ON s.cinema_id = c.cinema_id GROUP BY c.name ORDER BY total_show_times DESC NULLS LAST"}
{"answer":"SELECT AVG(UnitPrice) FROM TRACK","question":"What is the average unit price of all the tracks?","context":"CREATE TABLE TRACK (UnitPrice INTEGER)","generation":"SELECT AVG(t.UnitPrice) AS average_unit_price FROM TRACK t"}
{"answer":"SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'","question":"Which movies have 'Deleted Scenes' as a substring in the special feature?","context":"CREATE TABLE film (title VARCHAR, special_features VARCHAR)","generation":"SELECT f.title FROM film f WHERE f.special_features ilike '%Deleted Scenes%'"}
{"answer":"SELECT DISTINCT last_name FROM Maintenance_Engineers","question":"What are all the distinct last names of all the engineers?","context":"CREATE TABLE Maintenance_Engineers (last_name VARCHAR)","generation":"SELECT DISTINCT me.last_name FROM Maintenance_Engineers me"}
{"answer":"SELECT eid FROM Employee WHERE salary > 100000","question":"Show ids for all employees with at least 100000 salary.","context":"CREATE TABLE Employee (eid VARCHAR, salary INTEGER)","generation":"SELECT e.eid FROM Employee e WHERE e.salary >= 100000"}
{"answer":"SELECT COUNT(DISTINCT school_id) FROM basketball_match","question":"How many schools are in the basketball match?","context":"CREATE TABLE basketball_match (school_id VARCHAR)","generation":"SELECT COUNT(DISTINCT school_id) FROM basketball_match"}
{"answer":"SELECT Gender, Occupation FROM player","question":"What are the gender and occupation of players?","context":"CREATE TABLE player (Gender VARCHAR, Occupation VARCHAR)","generation":"SELECT p.Gender, p.Occupation FROM player p"}
{"answer":"SELECT Competition_type, COUNT(*) FROM competition GROUP BY Competition_type","question":"List the types of competition and the number of competitions of each type.","context":"CREATE TABLE competition (Competition_type VARCHAR)","generation":"SELECT c.competition_type, COUNT(c.competition_type) AS number_of_competitions FROM competition c GROUP BY c.competition_type ORDER BY number_of_competitions DESC NULLS LAST"}
{"answer":"SELECT COUNT(DISTINCT dept_address), school_code FROM department GROUP BY school_code","question":"How many different locations does each school have?","context":"CREATE TABLE department (school_code VARCHAR, dept_address VARCHAR)","generation":"SELECT d.school_code, COUNT(DISTINCT d.dept_address) AS num_locations FROM department d GROUP BY d.school_code ORDER BY num_locations DESC NULLS LAST"}
{"answer":"SELECT MIN(low_temperature), MAX(wind_speed_mph) FROM weekly_weather","question":"show the lowest low temperature and highest wind speed in miles per hour.","context":"CREATE TABLE weekly_weather (low_temperature INTEGER, wind_speed_mph INTEGER)","generation":"SELECT MIN(w.low_temperature) AS lowest_low_temperature, MAX(w.wind_speed_mph) AS highest_wind_speed FROM weekly_weather w"}
{"answer":"SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus","question":"report the total number of degrees granted between 1998 and 2002.","context":"CREATE TABLE campuses (campus VARCHAR, id VARCHAR); CREATE TABLE degrees (degrees INTEGER, campus VARCHAR, year VARCHAR)","generation":"SELECT SUM(d.degrees) AS total_degrees FROM degrees d WHERE d.year BETWEEN '1998' AND '2002'"}
{"answer":"SELECT circuitid, LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"","question":"Find the id and location of circuits that belong to France or Belgium?","context":"CREATE TABLE circuits (circuitid VARCHAR, LOCATION VARCHAR, country VARCHAR)","generation":"SELECT c.circuitid, c.location FROM circuits c WHERE c.country IN ('France', 'Belgium')"}
{"answer":"SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the location with the most cinemas opened in year 2010 or later?","context":"CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)","generation":"SELECT c.LOCATION, COUNT(*) AS number_of_cinemas FROM cinema c WHERE c.openning_year >= '2010' GROUP BY c.LOCATION ORDER BY number_of_cinemas DESC LIMIT 1"}
{"answer":"SELECT * FROM chip_model","question":"Find the details for all chip models.","context":"CREATE TABLE chip_model (Id VARCHAR)","generation":"SELECT * FROM chip_model"}
{"answer":"SELECT Name FROM phone WHERE NOT Phone_id IN (SELECT Phone_ID FROM phone_market)","question":"List the names of phones that are not on any market.","context":"CREATE TABLE phone (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR)","generation":"SELECT p.Name FROM phone p LEFT JOIN phone_market pm ON p.Phone_id = pm.Phone_id WHERE pm.Phone_id IS NULL"}
{"answer":"SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\"","question":"Show the short names of the buildings managed by \"Emma\".","context":"CREATE TABLE Apartment_Buildings (building_short_name VARCHAR, building_manager VARCHAR)","generation":"SELECT ab.building_short_name FROM Apartment_Buildings ab WHERE ab.building_manager ilike '%Emma%'"}
{"answer":"SELECT name, LOCATION FROM cinema WHERE capacity > (SELECT AVG(capacity) FROM cinema)","question":"Show the cinema name and location for cinemas with capacity above average.","context":"CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT c.name, c.location FROM cinema c WHERE c.capacity > (SELECT AVG(c2.capacity) FROM cinema c2)"}
{"answer":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING COUNT(*) = 1","question":"Find the first names of students who took exactly one class.","context":"CREATE TABLE enroll (stu_num VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)","generation":"SELECT s.stu_fname FROM student s JOIN (SELECT e.stu_num FROM enroll e GROUP BY e.stu_num HAVING COUNT(e.stu_num) = 1) AS one_class ON s.stu_num = one_class.stu_num"}
{"answer":"SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0","question":"Find the name and attribute ID of the attribute definitions with attribute value 0.","context":"CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)","generation":"SELECT a.attribute_name, a.attribute_id FROM Attribute_Definitions a JOIN Catalog_Contents_Additional_Attributes c ON a.attribute_id = c.attribute_id WHERE c.attribute_value = '0'"}
{"answer":"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\"","question":"Which players are from Indonesia?","context":"CREATE TABLE country (Country_id VARCHAR, Country_name VARCHAR); CREATE TABLE match_season (Player VARCHAR, Country VARCHAR)","generation":"SELECT DISTINCT m.Player FROM match_season m JOIN country c ON m.Country = c.Country_id WHERE c.Country_name = 'Indonesia'"}
{"answer":"SELECT T1.booking_id, T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What are the id and the amount of refund of the booking that incurred the most times of payments?","context":"CREATE TABLE Payments (booking_id VARCHAR); CREATE TABLE Bookings (booking_id VARCHAR, amount_of_refund VARCHAR)","generation":"SELECT b.booking_id, b.amount_of_refund FROM Bookings b JOIN Payments p ON b.booking_id = p.booking_id GROUP BY b.booking_id, b.amount_of_refund ORDER BY COUNT(p.booking_id) DESC LIMIT 1"}
{"answer":"SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type","question":"Find the number of phones for each accreditation type.","context":"CREATE TABLE phone (Accreditation_type VARCHAR)","generation":"SELECT p.accreditation_type, COUNT(p.accreditation_type) AS number_of_phones FROM phone p GROUP BY p.accreditation_type ORDER BY number_of_phones DESC NULLS LAST"}
{"answer":"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"","question":"List the name of tracks belongs to genre Rock or media type is MPEG audio file.","context":"CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)","generation":"SELECT t.name FROM tracks t JOIN genres g ON t.genre_id = g.id JOIN media_types m ON t.media_type_id = m.id WHERE g.name = 'Rock' AND m.name = 'MPEG audio file'"}
{"answer":"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\"","question":"Find the names of customers who either have an deputy policy or uniformed policy.","context":"CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)","generation":"SELECT c.customer_details, c.customer_id FROM customers c JOIN policies p ON c.customer_id = p.customer_id WHERE p.policy_type_code ilike '%deputy%' OR p.policy_type_code ilike '%uniformed%' ORDER BY c.customer_details NULLS LAST"}
{"answer":"SELECT T1.skill_id, T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which skill is used in fixing the most number of faults? List the skill id and description.","context":"CREATE TABLE Skills (skill_id VARCHAR, skill_description VARCHAR); CREATE TABLE Skills_Required_To_Fix (skill_id VARCHAR)","generation":"SELECT s.skill_id, s.skill_description FROM Skills s JOIN (SELECT sr.skill_id, COUNT(*) AS fault_count FROM Skills_Required_To_Fix sr GROUP BY sr.skill_id) AS f ON s.skill_id = f.skill_id ORDER BY f.fault_count DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM item WHERE NOT i_id IN (SELECT i_id FROM review)","question":"Find the number of items that did not receive any review.","context":"CREATE TABLE review (i_id VARCHAR); CREATE TABLE item (i_id VARCHAR)","generation":"SELECT COUNT(DISTINCT(i.i_id)) AS num_items FROM item i LEFT JOIN review r ON i.i_id = r.i_id WHERE r.i_id IS NULL"}
{"answer":"SELECT COUNT(DISTINCT bedType) FROM Rooms","question":"How many different types of beds are there?","context":"CREATE TABLE Rooms (bedType VARCHAR)","generation":"SELECT COUNT(DISTINCT r.bedType) FROM Rooms r"}
{"answer":"SELECT MAX(Cows), MIN(Cows) FROM farm","question":"What are the maximum and minimum number of cows across all farms.","context":"CREATE TABLE farm (Cows INTEGER)","generation":"SELECT MAX(f.cows) AS max_cows, MIN(f.cows) AS min_cows FROM farm f"}
{"answer":"SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id","question":"Show all customer ids and the number of cards owned by each customer.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR)","generation":"SELECT c.customer_id, COUNT(cc.customer_id) AS number_of_cards FROM Customers_cards cc JOIN Customers c ON cc.customer_id = c.customer_id GROUP BY c.customer_id ORDER BY number_of_cards DESC NULLS LAST"}
{"answer":"SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM member_attendance)","question":"List the names of members who did not attend any performance.","context":"CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Name VARCHAR, Member_ID VARCHAR)","generation":"SELECT m.name FROM member m LEFT JOIN member_attendance ma ON m.member_id = ma.member_id WHERE ma.member_id IS NULL"}
{"answer":"SELECT origin FROM train GROUP BY origin HAVING COUNT(*) > 1","question":"Find the origins from which more than 1 train starts.","context":"CREATE TABLE train (origin VARCHAR)","generation":"SELECT t.origin FROM train t GROUP BY t.origin HAVING COUNT(t.origin) > 1"}
{"answer":"SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\"","question":"What is the shipping agent code of shipping agent UPS?","context":"CREATE TABLE Ref_Shipping_Agents (shipping_agent_code VARCHAR, shipping_agent_name VARCHAR)","generation":"SELECT ra.shipping_agent_code FROM Ref_Shipping_Agents ra WHERE ra.shipping_agent_name ILIKE '%UPS%'"}
{"answer":"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\"","question":"Which committees have delegates from both democratic party and liberal party?","context":"CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)","generation":"SELECT DISTINCT e.Committee FROM election e JOIN party p1 ON e.Party = p1.Party_ID JOIN party p2 ON p1.Party_ID = p2.Party_ID WHERE p1.Party = 'Democratic Party' AND p2.Party = 'Liberal Party'"}
{"answer":"SELECT Nationality, Age FROM journalist","question":"What are the nationalities and ages of journalists?","context":"CREATE TABLE journalist (Nationality VARCHAR, Age VARCHAR)","generation":"SELECT j.Nationality, j.Age FROM journalist j"}
{"answer":"SELECT AVG(no_of_customers) FROM bank WHERE state = 'Utah'","question":"Find the average number of customers in all banks of Utah state.","context":"CREATE TABLE bank (no_of_customers INTEGER, state VARCHAR)","generation":"SELECT AVG(b.no_of_customers) FROM bank b WHERE b.state = 'Utah'"}
{"answer":"SELECT main_industry, SUM(market_value) FROM company GROUP BY main_industry","question":"Show all main industry and total market value in each industry.","context":"CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)","generation":"SELECT c.main_industry, SUM(c.market_value) AS total_market_value FROM company c GROUP BY c.main_industry ORDER BY total_market_value DESC NULLS LAST"}
{"answer":"SELECT T1.student_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and first name of the student that has the most number of assessment notes?","context":"CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Assessment_Notes (student_id VARCHAR)","generation":"SELECT s.student_id, s.first_name FROM Students s JOIN Assessment_Notes a ON s.student_id = a.student_id GROUP BY s.student_id, s.first_name ORDER BY COUNT(a.student_id) DESC LIMIT 1"}
{"answer":"SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')","question":"Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".","context":"CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"WITH user_followers AS (SELECT uid FROM follows WHERE f1 = 'Tyler Swift'), user_info AS (SELECT name, uid FROM user_profiles) SELECT name FROM user_info WHERE uid IN (SELECT uid FROM user_followers) ORDER BY name NULLS LAST"}
{"answer":"SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1","question":"Show the names of journalists that have reported more than one event.","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)","generation":"SELECT j.name FROM journalist j JOIN news_report nr ON j.journalist_id = nr.journalist_id GROUP BY j.name HAVING COUNT(nr.event_id) > 1"}
{"answer":"SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20","question":"Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.","context":"CREATE TABLE perpetrator (Country VARCHAR, Injured INTEGER)","generation":"SELECT p.country FROM perpetrator p WHERE p.injured > 50 AND p.injured < 20 GROUP BY p.country"}
{"answer":"SELECT COUNT(DISTINCT eid) FROM Certificate","question":"How many employees have certificate.","context":"CREATE TABLE Certificate (eid VARCHAR)","generation":"SELECT COUNT(DISTINCT c.eid) AS number_of_employees FROM Certificate c"}
{"answer":"SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1","question":"What are the clean and jerk score of the body builder with the highest total score?","context":"CREATE TABLE body_builder (Clean_Jerk VARCHAR, Total VARCHAR)","generation":"SELECT b.Clean_Jerk, b.Total FROM body_builder b ORDER BY b.Total DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT T1.institution, COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id","question":"Show institution names along with the number of proteins for each institution.","context":"CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (institution_id VARCHAR)","generation":"SELECT i.institution, COUNT(p.institution_id) AS protein_count FROM institution i JOIN protein p ON i.institution_id = p.institution_id GROUP BY i.institution ORDER BY protein_count DESC NULLS LAST"}
{"answer":"SELECT fname, lname FROM authors ORDER BY lname","question":"Retrieve all the first and last names of authors in the alphabetical order of last names.","context":"CREATE TABLE authors (fname VARCHAR, lname VARCHAR)","generation":"SELECT a.fname, a.lname FROM authors a ORDER BY a.lname ASC"}
{"answer":"SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most popular first name of the actors?","context":"CREATE TABLE actor (first_name VARCHAR)","generation":"SELECT a.first_name FROM actor a ORDER BY a.first_name DESC LIMIT 1"}
{"answer":"SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000","question":"Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.","context":"CREATE TABLE institution (TYPE VARCHAR, founded VARCHAR, enrollment VARCHAR)","generation":"SELECT i.type FROM institution i WHERE i.founded > '1990-01-01' AND CAST(i.enrollment AS INTEGER) >= 1000"}
{"answer":"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"","question":"How many faculty lines are there in \"San Francisco State University\" in year 2004?","context":"CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)","generation":"SELECT COUNT(f.id) FROM faculty f WHERE f.campus = 'San Francisco State University' AND f.year = '2004'"}
{"answer":"SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY COUNT(*) LIMIT 1","question":"Find the semester and year which has the least number of student taking any class.","context":"CREATE TABLE takes (semester VARCHAR, YEAR VARCHAR)","generation":"SELECT t.semester, t.year FROM takes t GROUP BY t.semester, t.year ORDER BY COUNT(t.semester) ASC, COUNT(t.year) ASC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"","question":"How many times has the student Linda Smith visited Subway?","context":"CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Student (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Visits_Restaurant v JOIN Student s ON v.Id = s.Id JOIN Restaurant r ON v.Id = r.Id WHERE s.FirstName = 'Linda' AND s.LastName = 'Smith' AND r.Name = 'Subway'"}
{"answer":"SELECT COUNT(*) FROM rooms WHERE NOT roomid IN (SELECT DISTINCT room FROM reservations)","question":"Find the number of rooms that do not have any reservation.","context":"CREATE TABLE rooms (roomid VARCHAR, room VARCHAR); CREATE TABLE reservations (roomid VARCHAR, room VARCHAR)","generation":"SELECT COUNT(DISTINCT r.roomid) AS unreserved_rooms FROM rooms r LEFT JOIN reservations re ON r.roomid = re.roomid WHERE re.roomid IS NULL"}
{"answer":"SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE \"8\/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1","question":"Which start station had the most trips starting from August? Give me the name and id of the station.","context":"CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)","generation":"SELECT t.start_station_name, t.start_station_id FROM trip t WHERE EXTRACT(MONTH FROM t.start_date::DATE) = 8 ORDER BY COUNT(t.start_station_id) DESC LIMIT 1"}
{"answer":"SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age LIMIT 1","question":"What is the total point count of the youngest gymnast?","context":"CREATE TABLE people (People_ID VARCHAR, Age VARCHAR); CREATE TABLE gymnast (Total_Points VARCHAR, Gymnast_ID VARCHAR)","generation":"SELECT g.total_points FROM gymnast g ORDER BY CAST(g.total_points AS INT) ASC LIMIT 1"}
{"answer":"SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'","question":"Which language does the film AIRPORT POLLOCK use? List the language name.","context":"CREATE TABLE film (language_id VARCHAR, title VARCHAR); CREATE TABLE LANGUAGE (name VARCHAR, language_id VARCHAR)","generation":"SELECT l.name FROM film f JOIN LANGUAGE l ON f.language_id = l.language_id WHERE f.title = 'AIRPORT POLLOCK'"}
{"answer":"SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000","question":"What is the campus fee of \"San Francisco State University\" in year 2000?","context":"CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)","generation":"SELECT csu_fees.campusfee FROM csu_fees JOIN campuses ON csu_fees.campus = campuses.id WHERE campuses.campus = 'San Francisco State University' AND csu_fees.year = '2000'"}
{"answer":"SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION","question":"Show the position of players and the corresponding number of players.","context":"CREATE TABLE match_season (POSITION VARCHAR)","generation":"SELECT m.POSITION, COUNT(*) AS COUNT FROM match_season m GROUP BY m.POSITION ORDER BY COUNT DESC NULLS LAST"}
{"answer":"SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5","question":"List the names of 5 users followed by the largest number of other users.","context":"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)","generation":"SELECT u.name, COUNT(u.followers) AS follower_count FROM user_profiles u GROUP BY u.name ORDER BY follower_count DESC NULLS LAST LIMIT 5"}
{"answer":"SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT AVG(enrollment) FROM university)","question":"Find the team names of the universities whose enrollments are smaller than the average enrollment size.","context":"CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, school_id VARCHAR); CREATE TABLE university (enrollment INTEGER)","generation":"SELECT u.school_id, b.team_name FROM university u JOIN basketball_match b ON u.school_id = b.school_id WHERE u.enrollment < (SELECT AVG(enrollment) FROM university) ORDER BY u.enrollment NULLS LAST"}
{"answer":"SELECT Name FROM wrestler WHERE Days_held < 100","question":"What are the names of wrestlers days held less than 100?","context":"CREATE TABLE wrestler (Name VARCHAR, Days_held INTEGER)","generation":"SELECT w.name FROM wrestler w WHERE w.days_held < 100"}
{"answer":"SELECT gender FROM staff GROUP BY gender ORDER BY COUNT(*) DESC LIMIT 1","question":"Which gender makes up the majority of the staff?","context":"CREATE TABLE staff (gender VARCHAR)","generation":"SELECT s.gender, COUNT(*)::FLOAT \/ (SELECT COUNT(*) FROM staff) AS proportion FROM staff s GROUP BY s.gender ORDER BY proportion DESC LIMIT 1"}
{"answer":"SELECT DISTINCT Region FROM club ORDER BY Region","question":"List the distinct region of clubs in ascending alphabetical order.","context":"CREATE TABLE club (Region VARCHAR)","generation":"SELECT DISTINCT c.Region FROM club c ORDER BY c.Region ASC"}
{"answer":"SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = \"Defender\"","question":"Show the draft pick numbers and draft classes of players whose positions are defenders.","context":"CREATE TABLE match_season (Draft_Pick_Number VARCHAR, Draft_Class VARCHAR, POSITION VARCHAR)","generation":"SELECT m.Draft_Pick_Number, m.Draft_Class FROM match_season m WHERE m.POSITION = 'defender'"}
{"answer":"SELECT destination, COUNT(*) FROM Flight GROUP BY destination","question":"Show all destinations and the number of flights to each destination.","context":"CREATE TABLE Flight (destination VARCHAR)","generation":"SELECT f.destination, COUNT(f.destination) AS flight_count FROM Flight f GROUP BY f.destination ORDER BY flight_count DESC NULLS LAST"}
{"answer":"SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996","question":"What is the campus fee of \"San Jose State University\" in year 1996?","context":"CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)","generation":"SELECT csu_fees.year FROM csu_fees JOIN campuses ON csu_fees.campus_id = campuses.id WHERE campuses.name = 'San Jose State University' AND csu_fees.year = '1996'"}
{"answer":"SELECT name, average_attendance, total_attendance FROM stadium EXCEPT SELECT T2.name, T2.average_attendance, T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id","question":"Show the name, average attendance, total attendance for stadiums where no accidents happened.","context":"CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR, id VARCHAR); CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)","generation":"SELECT s.name, s.average_attendance, s.total_attendance FROM stadium s WHERE s.id NOT IN (SELECT g.stadium_id FROM game g JOIN injury_accident i ON g.id = i.game_id) ORDER BY s.name NULLS LAST"}
{"answer":"SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20","question":"List the names of buildings with at least 200 feet of height and with at least 20 floors.","context":"CREATE TABLE building (name VARCHAR, height_feet VARCHAR, floors VARCHAR)","generation":"SELECT b.name FROM building b WHERE CAST(b.height_feet AS INTEGER) >= 200 AND CAST(b.floors AS INTEGER) >= 20"}
{"answer":"SELECT MAX(Enrollment) FROM university","question":"What is the maximum enrollment across all schools?","context":"CREATE TABLE university (Enrollment INTEGER)","generation":"SELECT MAX(u.enrollment) AS max_enrollment FROM university u"}
{"answer":"SELECT directed_by, COUNT(*) FROM film GROUP BY directed_by","question":"List all directors along with the number of films directed by each director.","context":"CREATE TABLE film (directed_by VARCHAR)","generation":"SELECT f.directed_by, COUNT(f.directed_by) AS number_of_films FROM film f GROUP BY f.directed_by ORDER BY number_of_films DESC NULLS LAST"}
{"answer":"SELECT MAX(OMIM) FROM enzyme","question":"What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?","context":"CREATE TABLE enzyme (OMIM INTEGER)","generation":"SELECT MAX(e.OMIM) FROM enzyme e"}
{"answer":"SELECT name, operating_system FROM web_client_accelerator EXCEPT SELECT T1.name, T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'","question":"Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.","context":"CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, id VARCHAR)","generation":"SELECT DISTINCT a.name AS accelerator_name, a.operating_system FROM web_client_accelerator a JOIN accelerator_compatible_browser b ON a.id = b.accelerator_id JOIN browser c ON b.browser_id = c.id WHERE c.name = 'Opera'"}
{"answer":"SELECT minister, took_office, left_office FROM party ORDER BY left_office","question":"Show the ministers and the time they took and left office, listed by the time they left office.","context":"CREATE TABLE party (minister VARCHAR, took_office VARCHAR, left_office VARCHAR)","generation":"SELECT p.minister, p.took_office, p.left_office FROM party p ORDER BY p.left_office NULLS LAST"}
{"answer":"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000","question":"Please show the themes of competitions with host cities having populations larger than 1000.","context":"CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)","generation":"SELECT fc.theme FROM farm_competition fc JOIN city c ON fc.host_city_id = c.city_id WHERE c.population > 1000"}
{"answer":"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Susan\"","question":"Find the id of users who are followed by Mary and Susan.","context":"CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)","generation":"SELECT DISTINCT u.uid FROM user_profiles u JOIN follows f ON u.uid = f.f1 OR u.uid = f.f2 WHERE (u.name = 'Mary' OR u.name = 'Susan')"}
{"answer":"SELECT COUNT(*), dept_name FROM student GROUP BY dept_name","question":"Find the total number of students in each department.","context":"CREATE TABLE student (dept_name VARCHAR)","generation":"SELECT s.dept_name, COUNT(s.dept_name) AS total_students FROM student s GROUP BY s.dept_name"}
{"answer":"SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)","question":"Find the average number of followers for the users who had some tweets.","context":"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)","generation":"SELECT AVG(t.followers) AS average_followers FROM tweets t"}
{"answer":"SELECT season, home_team, away_team FROM game","question":"List the season, home team, away team of all the games.","context":"CREATE TABLE game (season VARCHAR, home_team VARCHAR, away_team VARCHAR)","generation":"SELECT g.season, g.home_team, g.away_team FROM game g"}
{"answer":"SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"","question":"How many customers have email that contains \"gmail.com\"?","context":"CREATE TABLE CUSTOMER (Email VARCHAR)","generation":"SELECT COUNT(*) FROM CUSTOMER c WHERE c.EMAIL ILIKE '%gmail.com%'"}
{"answer":"SELECT Name, Party FROM representative","question":"What are the names and parties of representatives?","context":"CREATE TABLE representative (Name VARCHAR, Party VARCHAR)","generation":"SELECT r.name, r.party FROM representative r"}
{"answer":"SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'","question":"Find the names of all instructors in computer science department","context":"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR)","generation":"SELECT i.name FROM instructor i WHERE i.dept_name = 'computer science'"}
{"answer":"SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name","question":"What are the first name, last name, and gender of all the good customers? Order by their last name.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, gender_mf VARCHAR, good_or_bad_customer VARCHAR)","generation":"SELECT c.first_name, c.last_name, c.gender_mf FROM customers c WHERE c.good_or_bad_customer = 'good' ORDER BY c.last_name NULLS LAST"}
{"answer":"SELECT T2.first_name, T2.last_name, T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which film actor (actress) starred the most films? List his or her first name, last name and actor id.","context":"CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)","generation":"SELECT a.\"first_name\", a.\"last_name\", a.actor_id FROM actor a JOIN (SELECT actor_id, COUNT(*) AS film_count FROM film_actor GROUP BY actor_id ORDER BY film_count DESC LIMIT 1) AS m ON a.actor_id = m.actor_id"}
{"answer":"SELECT T2.title, T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3","question":"What are the names and years of the movies that has the top 3 highest rating star?","context":"CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, mID VARCHAR)","generation":"SELECT m.title, m.year, r.stars FROM Rating r JOIN Movie m ON r.mID = m.mID ORDER BY r.stars DESC NULLS LAST LIMIT 3"}
{"answer":"SELECT T3.booking_start_date, T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'","question":"What are the start date and end date of the booking that has booked the product named 'Book collection A'?","context":"CREATE TABLE bookings (booking_start_date VARCHAR, booking_end_date VARCHAR, booking_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booking_id VARCHAR); CREATE TABLE Products_for_hire (product_id VARCHAR, product_name VARCHAR)","generation":"SELECT b.booking_start_date, b.booking_end_date FROM bookings b JOIN products_booked pb ON b.booking_id = pb.booking_id JOIN Products_for_hire pfh ON pb.product_id = pfh.product_id WHERE pfh.product_name = 'Book collection A'"}
{"answer":"SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY COUNT(*) DESC LIMIT 1","question":"Which poll resource provided the most number of candidate information?","context":"CREATE TABLE candidate (poll_source VARCHAR)","generation":"SELECT c.poll_source, COUNT(c.poll_source) AS COUNT FROM candidate c GROUP BY c.poll_source ORDER BY COUNT DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)","question":"Show the number of cities in counties that have a population more than 20000.","context":"CREATE TABLE county_public_safety (county_ID VARCHAR, population INTEGER); CREATE TABLE city (county_ID VARCHAR, population INTEGER)","generation":"SELECT COUNT(*) FROM city c WHERE c.population > 20000"}
{"answer":"SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid","question":"Show aircraft names and number of flights for each aircraft.","context":"CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)","generation":"SELECT a.name, COUNT(f.aid) AS flight_count FROM Aircraft a JOIN Flight f ON a.aid = f.aid GROUP BY a.name ORDER BY flight_count DESC NULLS LAST"}
{"answer":"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5","question":"What are the titles of all movies that have rating star is between 3 and 5?","context":"CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT m.title FROM Rating r JOIN Movie m ON r.mID = m.mID WHERE r.stars BETWEEN 3 AND 5"}
{"answer":"SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1","question":"In which year were most departments established?","context":"CREATE TABLE department (creation VARCHAR)","generation":"SELECT EXTRACT(YEAR FROM CURRENT_DATE) - CAST(d.creation AS INTEGER) AS years_established, COUNT(*) FROM department d GROUP BY years_established ORDER BY years_established DESC LIMIT 1"}
{"answer":"SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\"","question":"What is the zip code of the address where the teacher with first name \"Lyla\" lives?","context":"CREATE TABLE Teachers (address_id VARCHAR, first_name VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)","generation":"SELECT a.zip_postcode FROM Teachers t JOIN Addresses a ON t.address_id = a.address_id WHERE t.first_name = 'Lyla'"}
{"answer":"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of the user who gives the most reviews.","context":"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)","generation":"SELECT u.name, COUNT(r.u_id) AS review_count FROM useracct u JOIN review r ON u.u_id = r.u_id GROUP BY u.name ORDER BY review_count DESC LIMIT 1"}
{"answer":"SELECT DISTINCT asset_model FROM Assets","question":"What are all the distinct asset models?","context":"CREATE TABLE Assets (asset_model VARCHAR)","generation":"SELECT DISTINCT a.asset_model FROM Assets a"}
{"answer":"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy","question":"What are the student ids of students who don't have any allergies?","context":"CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)","generation":"SELECT s.stuid FROM student s LEFT JOIN has_allergy h ON s.stuid = h.stuid WHERE h.stuid IS NULL"}
{"answer":"SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35","question":"Show the nations that have both hosts older than 45 and hosts younger than 35.","context":"CREATE TABLE HOST (Nationality VARCHAR, Age INTEGER)","generation":"SELECT h.Nationality FROM HOST h WHERE h.Age > 45 AND h.Age < 35 GROUP BY h.Nationality"}
{"answer":"SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000","question":"Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.","context":"CREATE TABLE performance (LOCATION VARCHAR, Attendance INTEGER)","generation":"SELECT p.LOCATION FROM performance p WHERE p.Attendance > 2000 AND p.LOCATION IN (SELECT p.LOCATION FROM performance p WHERE p.Attendance < 1000) ORDER BY p.LOCATION NULLS LAST"}
{"answer":"SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id","question":"List the id of students who registered some courses and the number of their registered courses?","context":"CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT s.student_id, COUNT(scr.student_id) AS number_of_courses FROM students s JOIN student_course_registrations scr ON s.student_id = scr.student_id GROUP BY s.student_id ORDER BY number_of_courses DESC NULLS LAST"}
{"answer":"SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id","question":"Show invoice dates and order id and details for all invoices.","context":"CREATE TABLE Invoices (invoice_date VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_details VARCHAR, order_id VARCHAR)","generation":"SELECT i.invoice_date, i.order_id, o.order_details FROM Invoices i JOIN Orders o ON i.order_id = o.order_id"}
{"answer":"SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy","question":"Show all allergies with number of students affected.","context":"CREATE TABLE Has_allergy (Allergy VARCHAR)","generation":"SELECT h.allergy, COUNT(DISTINCT s.id) AS number_of_students FROM Has_allergy h JOIN Student_allergy sa ON h.allergy = sa.allergy JOIN Student s ON sa.student_id = s.id GROUP BY h.allergy ORDER BY number_of_students DESC NULLS LAST"}
{"answer":"SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the name of the party that has the most delegates.","context":"CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT p.Party FROM party p ORDER BY p.Party_ID DESC LIMIT 1"}
{"answer":"SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\"","question":"What is the incident type description for the incident type with code \"VIOLENCE\"?","context":"CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR)","generation":"SELECT r.incident_type_description FROM Ref_Incident_Type r WHERE r.incident_type_code = 'VIOLENCE'"}
{"answer":"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171","question":"How many courses do the student whose id is 171 attend?","context":"CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)","generation":"SELECT COUNT(DISTINCT(sca.course_id)) AS number_of_courses FROM student_course_attendance sca WHERE sca.student_id = '171'"}
{"answer":"SELECT MAX(stars), MIN(stars) FROM Rating","question":"What is the lowest and highest rating star?","context":"CREATE TABLE Rating (stars INTEGER)","generation":"SELECT MIN(r.stars) AS lowest_rating, MAX(r.stars) AS highest_rating FROM Rating r"}
{"answer":"SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10","question":"Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)","generation":"SELECT c.first_name, c.last_name, COUNT(i.customer_id) AS total_orders FROM customers c JOIN invoices i ON c.id = i.customer_id GROUP BY c.first_name, c.last_name ORDER BY total_orders DESC LIMIT 10"}
{"answer":"SELECT COUNT(*) FROM Aircraft","question":"How many aircrafts do we have?","context":"CREATE TABLE Aircraft (Id VARCHAR)","generation":"SELECT COUNT(a.id) FROM aircraft a"}
{"answer":"SELECT Restaurant.ResName, SUM(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY SUM(Visits_Restaurant.Spent) LIMIT 1","question":"At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.","context":"CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)","generation":"SELECT r.Id, SUM(v.Time_Spent) AS total_time_spent FROM Visits_Restaurant v JOIN Restaurant r ON v.Id = r.Id GROUP BY r.Id ORDER BY total_time_spent ASC LIMIT 1"}
{"answer":"SELECT SUM(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\"","question":"Show the total number of rooms of all apartments with facility code \"Gym\".","context":"CREATE TABLE Apartments (room_count INTEGER, apt_id VARCHAR); CREATE TABLE Apartment_Facilities (apt_id VARCHAR, facility_code VARCHAR)","generation":"SELECT SUM(a.room_count) AS total_rooms FROM Apartments a JOIN Apartment_Facilities f ON a.apt_id = f.apt_id WHERE f.facility_code = 'Gym'"}
{"answer":"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1","question":"Show the official names of the cities that have hosted more than one competition.","context":"CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)","generation":"SELECT c.Official_Name FROM city c JOIN farm_competition f ON c.City_ID = f.Host_city_ID GROUP BY c.Official_Name HAVING COUNT(f.Host_city_ID) > 1"}
{"answer":"SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1","question":"Find the name and building of the department with the highest budget.","context":"CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)","generation":"SELECT d.dept_name, d.building, d.budget FROM department d ORDER BY d.budget DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT Name FROM People ORDER BY Weight","question":"What are the names of people in ascending order of weight?","context":"CREATE TABLE People (Name VARCHAR, Weight VARCHAR)","generation":"SELECT p.Name FROM People p ORDER BY CAST(p.Weight AS INT) ASC"}
{"answer":"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id","question":"Find the names of customers who have no policies associated.","context":"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)","generation":"SELECT c.customer_details FROM customers c LEFT JOIN policies p ON c.customer_id = p.customer_id WHERE p.customer_id IS NULL"}
{"answer":"SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50","question":"How many rooms whose capacity is less than 50 does the Lamberton building have?","context":"CREATE TABLE classroom (building VARCHAR, capacity VARCHAR)","generation":"SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND CAST(capacity AS INT) < 50"}
{"answer":"SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id of the event with the most participants?","context":"CREATE TABLE Participants_in_Events (Event_ID VARCHAR)","generation":"SELECT pe.Event_ID FROM Participants_in_Events pe GROUP BY pe.Event_ID ORDER BY COUNT(pe.Event_ID) DESC LIMIT 1"}
{"answer":"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\"","question":"What are the distinct positions of the players from a country whose capital is Dublin?","context":"CREATE TABLE country (Country_id VARCHAR, Capital VARCHAR); CREATE TABLE match_season (Position VARCHAR, Country VARCHAR)","generation":"SELECT DISTINCT m.Position FROM country c JOIN match_season m ON c.Country_id = m.Country WHERE c.Capital = 'Dublin'"}
{"answer":"SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\"","question":"What is the average unit price of tracks that belong to Jazz genre?","context":"CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)","generation":"SELECT AVG(t.UnitPrice) FROM TRACK t JOIN GENRE g ON t.GenreId = g.GenreId WHERE g.Name = 'Jazz'"}
{"answer":"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000","question":"Show writers who have published a book with price more than 4000000.","context":"CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)","generation":"SELECT DISTINCT b.Writer FROM book b JOIN publication p ON b.Book_ID = p.Book_ID WHERE p.Price > 4000000"}
{"answer":"SELECT guest_first_name, guest_last_name FROM Guests","question":"Return the first names and last names of all guests","context":"CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR)","generation":"SELECT g.guest_first_name, g.guest_last_name FROM Guests g"}
{"answer":"SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1","question":"What is the carrier of the most expensive phone?","context":"CREATE TABLE phone (Carrier VARCHAR, Price VARCHAR)","generation":"SELECT p.Carrier FROM phone p ORDER BY CAST(p.Price AS FLOAT) DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT Name FROM technician WHERE NOT technician_id IN (SELECT technician_id FROM repair_assignment)","question":"List the names of technicians who have not been assigned to repair machines.","context":"CREATE TABLE technician (Name VARCHAR, technician_id VARCHAR); CREATE TABLE repair_assignment (Name VARCHAR, technician_id VARCHAR)","generation":"SELECT t.name FROM technician t WHERE t.technician_id NOT IN (SELECT r.technician_id FROM repair_assignment r) ORDER BY t.name NULLS LAST"}
{"answer":"SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1","question":"Find the saving balance of the account with the highest checking balance.","context":"CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (custid VARCHAR)","generation":"SELECT s.balance FROM savings s JOIN checking c ON s.custid = c.custid ORDER BY c.balance DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT roomName FROM Rooms ORDER BY basePrice","question":"List the name of all rooms sorted by their prices.","context":"CREATE TABLE Rooms (roomName VARCHAR, basePrice VARCHAR)","generation":"SELECT r.roomName FROM Rooms r ORDER BY CAST(r.basePrice AS FLOAT) ASC"}
{"answer":"SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1","question":"Show the id and name of the aircraft with the maximum distance.","context":"CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)","generation":"SELECT a.aid, a.name FROM Aircraft a WHERE a.distance = (SELECT MAX(a.distance) FROM Aircraft)"}
{"answer":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?","context":"CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)","generation":"SELECT e.name, COUNT(c.aid) AS certificate_count FROM Employee e JOIN Certificate c ON e.eid = c.eid JOIN Aircraft a ON c.aid = a.aid WHERE a.distance > 5000 GROUP BY e.name ORDER BY certificate_count DESC LIMIT 1"}
{"answer":"SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1","question":"What is the name of the student who has the highest total credits in the History department.","context":"CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)","generation":"SELECT s.name FROM student s WHERE s.dept_name = 'History' ORDER BY s.tot_cred DESC NULLS LAST LIMIT 1"}
{"answer":"SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID","question":"Show the years and the official names of the host cities of competitions.","context":"CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)","generation":"SELECT f.year, c.official_name FROM farm_competition f JOIN city c ON f.host_city_id = c.city_id"}
{"answer":"SELECT document_type_code FROM Documents WHERE document_id = 2","question":"List the document type code for the document with the id 2.","context":"CREATE TABLE Documents (document_type_code VARCHAR, document_id VARCHAR)","generation":"SELECT d.document_type_code FROM Documents d WHERE d.document_id = '2'"}
{"answer":"SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\"","question":"Show the residences that have both a player of gender \"M\" and a player of gender \"F\".","context":"CREATE TABLE player (Residence VARCHAR, gender VARCHAR)","generation":"SELECT DISTINCT p.Residence FROM player p WHERE p.gender = 'M' AND EXISTS (SELECT 1 FROM player q WHERE q.Residence = p.Residence AND q.gender = 'F')"}
{"answer":"SELECT COUNT(*) FROM phone WHERE Company_name = \"Nokia Corporation\"","question":"How many phone hardware models are produced by the company named \"Nokia Corporation\"?","context":"CREATE TABLE phone (Company_name VARCHAR)","generation":"SELECT COUNT(DISTINCT p.Model) FROM phone p WHERE p.Company_name ILIKE '%Nokia Corporation%'"}
{"answer":"SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common participant type?","context":"CREATE TABLE participants (participant_type_code VARCHAR)","generation":"SELECT p.participant_type_code FROM participants p GROUP BY p.participant_type_code ORDER BY COUNT(p.participant_type_code) DESC LIMIT 1"}
{"answer":"SELECT T2.address_id, T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1","question":"What are the id and zip code of the address with the highest monthly rental?","context":"CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)","generation":"SELECT sa.address_id, a.zip_postcode FROM Student_Addresses sa JOIN Addresses a ON sa.address_id = a.address_id ORDER BY sa.address_id NULLS LAST"}
{"answer":"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001","question":"What are the degrees conferred in \"San Francisco State University\" in 2001.","context":"CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)","generation":"SELECT d.Id FROM degrees d JOIN campuses c ON d.CampusId = c.Id WHERE c.Name = 'San Francisco State University' AND EXTRACT(YEAR FROM d.GraduationDate) = 2001"}
{"answer":"SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1","question":"Which campus has the most degrees conferred in all times?","context":"CREATE TABLE degrees (campus VARCHAR, degrees INTEGER)","generation":"SELECT d.campus, SUM(d.degrees) AS total_degrees FROM degrees d GROUP BY d.campus ORDER BY total_degrees DESC LIMIT 1"}
{"answer":"SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id","question":"Show the season, the player, and the name of the team that players belong to.","context":"CREATE TABLE team (Name VARCHAR, Team_id VARCHAR); CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Team VARCHAR)","generation":"SELECT m.season, m.player, t.name AS team_name FROM match_season m JOIN team t ON m.team = t.team_id"}
{"answer":"SELECT COUNT(*) FROM Has_allergy WHERE Allergy = \"Cat\"","question":"How many students have cat allergies?","context":"CREATE TABLE Has_allergy (Allergy VARCHAR)","generation":"SELECT COUNT(DISTINCT h.Student_id) AS number_of_students FROM Has_allergy h WHERE h.Allergy = 'cat'"}
{"answer":"SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC","question":"Find all information about student addresses, and sort by monthly rental in descending order.","context":"CREATE TABLE Student_Addresses (monthly_rental VARCHAR)","generation":"SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC"}
{"answer":"SELECT T1.datetime_detention_start, datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schultz\"","question":"Find the start and end dates of detentions of teachers with last name \"Schultz\".","context":"CREATE TABLE Detention (datetime_detention_start VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)","generation":"SELECT d.datetime_detention_start, d.datetime_detention_end FROM Detention d JOIN Teachers t ON d.teacher_id = t.teacher_id WHERE t.last_name = 'Schultz'"}
{"answer":"SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING COUNT(*) > 60","question":"Find the names of rooms that have been reserved for more than 60 times.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT r.roomName FROM Reservations r GROUP BY r.roomName HAVING COUNT(r.room) > 60"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\"","question":"Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)","generation":"SELECT p.title FROM papers p JOIN authorship a ON p.paperid = a.paperid JOIN authors a2 ON a.authid = a2.authid JOIN inst i ON a.instid = i.instid WHERE a2.lname = 'Turon' AND i.country = 'USA' ORDER BY p.title NULLS LAST"}
{"answer":"SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"What are the id and name of the stadium where the most injury accidents happened?","context":"CREATE TABLE stadium (id VARCHAR, name VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR)","generation":"SELECT s.id, s.name FROM stadium s JOIN (SELECT g.stadium_id, COUNT(ia.game_id) AS accident_count FROM game g JOIN injury_accident ia ON g.id = ia.game_id GROUP BY g.stadium_id) AS subquery ON s.id = subquery.stadium_id ORDER BY subquery.accident_count DESC LIMIT 1"}
{"answer":"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\"","question":"What is the booking status code of the apartment with apartment number \"Suite 634\"?","context":"CREATE TABLE Apartments (apt_id VARCHAR, apt_number VARCHAR); CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR, apt_id VARCHAR)","generation":"SELECT ab.booking_status_code FROM Apartments a JOIN Apartment_Bookings ab ON a.apt_id = ab.apt_id WHERE a.apt_number = 'Suite 634'"}
{"answer":"SELECT COUNT(DISTINCT advisor) FROM Student","question":"How many different advisors are listed?","context":"CREATE TABLE Student (advisor VARCHAR)","generation":"SELECT COUNT(DISTINCT s.advisor) AS number_of_advisors FROM Student s"}
{"answer":"SELECT T2.name, AVG(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name","question":"What is the average rating star for each reviewer?","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (stars INTEGER, rID VARCHAR)","generation":"SELECT r.name, AVG(r.stars) AS average_rating FROM Rating r GROUP BY r.name ORDER BY average_rating DESC NULLS LAST"}
{"answer":"SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'","question":"List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.","context":"CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)","generation":"SELECT m.name, m.trade_name FROM medicine m JOIN medicine_enzyme_interaction mei ON m.id = mei.medicine_id WHERE mei.interaction_type IN ('inhibitor', 'activator') GROUP BY m.name, m.trade_name HAVING COUNT(DISTINCT mei.interaction_type) = 2"}
{"answer":"SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5","question":"What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?","context":"CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)","generation":"SELECT d.forename, d.surname, d.driverid FROM drivers d JOIN (SELECT r.driverid FROM results r GROUP BY r.driverid HAVING COUNT(r.driverid) > 5) AS mr ON d.driverid = mr.driverid JOIN (SELECT p.driverid FROM pitstops p GROUP BY p.driverid HAVING COUNT(p.driverid) > 8) AS mp ON d.driverid = mp.driverid"}
{"answer":"SELECT COUNT(*) FROM people WHERE NOT people_id IN (SELECT People_ID FROM body_builder)","question":"How many persons are not body builders?","context":"CREATE TABLE body_builder (people_id VARCHAR, People_ID VARCHAR); CREATE TABLE people (people_id VARCHAR, People_ID VARCHAR)","generation":"SELECT COUNT(DISTINCT p.people_id) FROM people p LEFT JOIN body_builder b ON p.people_id = b.people_id WHERE b.people_id IS NULL"}
{"answer":"SELECT Player, Years_Played FROM player","question":"Show the players and the years played.","context":"CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR)","generation":"SELECT p.player, p.years_played FROM player p"}
{"answer":"SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING COUNT(*) > 30","question":"Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.","context":"CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)","generation":"SELECT a.\"first_name\", a.\"last_name\" FROM actor a JOIN film_actor f ON a.actor_id = f.actor_id GROUP BY a.\"first_name\", a.\"last_name\" HAVING COUNT(f.actor_id) > 30"}
{"answer":"SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID","question":"Show the names of editors and the theme of journals for which they serve on committees.","context":"CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)","generation":"SELECT e.name, j.theme FROM editor e JOIN journal_committee jc ON e.editor_id = jc.editor_id JOIN journal j ON jc.journal_id = j.journal_id"}
{"answer":"SELECT POSITION FROM player GROUP BY name HAVING AVG(Points) >= 20","question":"List the position of players with average number of points scored by players of that position bigger than 20.","context":"CREATE TABLE player (POSITION VARCHAR, name VARCHAR, Points INTEGER)","generation":"SELECT p.POSITION, AVG(p.Points) AS average_points FROM player p GROUP BY p.POSITION HAVING AVG(p.Points) > 20 ORDER BY average_points DESC NULLS LAST"}
{"answer":"SELECT Ref_Shipping_Agents.shipping_agent_name, COUNT(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY COUNT(Documents.document_id) DESC LIMIT 1","question":"Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.","context":"CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)","generation":"SELECT sa.Name, COUNT(d.Id) AS Document_Count FROM Documents d JOIN Ref_Shipping_Agents sa ON d.Shipping_Agent_Id = sa.Id GROUP BY sa.Name ORDER BY Document_Count DESC LIMIT 1"}
{"answer":"SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1","question":"Find the state which has the most number of customers.","context":"CREATE TABLE bank (state VARCHAR, no_of_customers INTEGER)","generation":"SELECT b.state, b.no_of_customers FROM bank b ORDER BY b.no_of_customers DESC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM inst","question":"How many institutions are there?","context":"CREATE TABLE inst (Id VARCHAR)","generation":"SELECT COUNT(DISTINCT i.id) FROM inst i"}
{"answer":"SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"","question":"What are the booking start and end dates of the apartments with type code \"Duplex\"?","context":"CREATE TABLE Apartments (apt_id VARCHAR, apt_type_code VARCHAR); CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR)","generation":"SELECT ab.booking_start_date, lag(ab.booking_start_date) OVER (PARTITION BY ab.apt_id ORDER BY ab.booking_start_date) AS previous_booking_start_date, lead(ab.booking_start_date) OVER (PARTITION BY ab.apt_id ORDER BY ab.booking_start_date) AS next_booking_start_date FROM Apartment_Bookings ab JOIN Apartments a ON a.apt_id = ab.apt_id WHERE a.apt_type_code = 'Duplex'"}
{"answer":"SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1","question":"What is the department name of the students with lowest gpa belongs to?","context":"CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT d.dept_name FROM department d JOIN student s ON d.dept_code = s.dept_code ORDER BY s.gpa ASC LIMIT 1"}
{"answer":"SELECT COUNT(*) FROM election","question":"How many elections are there?","context":"CREATE TABLE election (Id VARCHAR)","generation":"SELECT COUNT(e.id) FROM election e"}
{"answer":"SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the team that has the most number of technicians.","context":"CREATE TABLE technician (Team VARCHAR)","generation":"SELECT t.team, COUNT(t.team) AS number_of_technicians FROM technician t GROUP BY t.team ORDER BY number_of_technicians DESC LIMIT 1"}
{"answer":"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"","question":"Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.","context":"CREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)","generation":"SELECT i.InvoiceDate FROM INVOICE i JOIN CUSTOMER c ON i.CustomerId = c.CustomerId WHERE c.FirstName = 'Astrid' AND c.LastName = 'Gruber'"}
{"answer":"SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating","question":"Show names and seatings, ordered by seating for all tracks opened after 2000.","context":"CREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)","generation":"SELECT t.name, t.seating FROM track t WHERE t.year_opened > 2000 ORDER BY t.seating NULLS LAST"}
{"answer":"SELECT COUNT(*), sex FROM employee WHERE salary < 50000 GROUP BY sex","question":"Find the number of employees of each gender whose salary is lower than 50000.","context":"CREATE TABLE employee (sex VARCHAR, salary INTEGER)","generation":"SELECT e.sex, COUNT(*) FROM employee e WHERE e.salary < 50000 GROUP BY e.sex"}
{"answer":"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname, t1.lname ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the last name of the author that has published the most papers?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT a.\"lname\" FROM authors a JOIN (SELECT authid, COUNT(paperid) AS paper_count FROM authorship GROUP BY authid ORDER BY paper_count DESC LIMIT 1) AS m ON a.authid = m.authid"}
{"answer":"SELECT * FROM people","question":"List all info about all people.","context":"CREATE TABLE people (Id VARCHAR)","generation":"SELECT * FROM people p"}
{"answer":"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\"","question":"Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".","context":"CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)","generation":"SELECT DISTINCT a.apt_number FROM Apartments a JOIN Apartment_Bookings b ON a.apt_id = b.apt_id WHERE b.booking_status_code = 'Confirmed'"}
{"answer":"SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID","question":"Show names of musicals and the number of actors who have appeared in the musicals.","context":"CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT m.name, COUNT(a.musical_id) AS number_of_actors FROM musical m JOIN actor a ON m.musical_id = a.musical_id GROUP BY m.name ORDER BY number_of_actors DESC NULLS LAST"}
{"answer":"SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*)","question":"Please show the different statuses, ordered by the number of cities that have each.","context":"CREATE TABLE city (Status VARCHAR)","generation":"SELECT c.status, COUNT(c.status) AS COUNT FROM city c GROUP BY c.status ORDER BY COUNT DESC NULLS LAST"}
{"answer":"SELECT text FROM tweets ORDER BY createdate","question":"List the text of all tweets in the order of date.","context":"CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)","generation":"SELECT t.text FROM tweets t ORDER BY t.createdate NULLS LAST"}
{"answer":"SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname","question":"Find the first names and offices of all professors sorted by alphabetical order of their first name.","context":"CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT p.emp_fname, p.prof_office FROM professor p ORDER BY p.emp_fname ASC"}
{"answer":"SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title","question":"List every album whose title starts with A in alphabetical order.","context":"CREATE TABLE albums (title VARCHAR)","generation":"SELECT a.title FROM albums a WHERE a.title ilike 'A%' ORDER BY a.title NULLS LAST"}
{"answer":"SELECT order_id, COUNT(*) FROM Invoices GROUP BY order_id","question":"Show the order ids and the number of invoices for each order.","context":"CREATE TABLE Invoices (order_id VARCHAR)","generation":"SELECT i.order_id, COUNT(i.order_id) AS number_of_invoices FROM Invoices i GROUP BY i.order_id ORDER BY number_of_invoices DESC NULLS LAST"}
{"answer":"SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10","question":"A list of the top 10 countries by average invoice size. List country name and average invoice size.","context":"CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)","generation":"SELECT i.billing_country, AVG(i.total) AS average_invoice_size FROM invoices i GROUP BY i.billing_country ORDER BY average_invoice_size DESC NULLS LAST LIMIT 10"}
