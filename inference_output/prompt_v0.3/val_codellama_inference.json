{"answer":"SELECT T3.Location, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age","question":"Show the locations of parties and the names of the party hosts in ascending order of the age of the host.","context":"CREATE TABLE party (Location VARCHAR, Party_ID VARCHAR); CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR, Age VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR)","generation":"SELECT p.Location, h.Name\nFROM party p\nJOIN party_host ph ON p.Party_ID = ph.Party_ID\nJOIN HOST h ON ph.Host_ID = h.Host_ID\nORDER BY h.Age ASC"}
{"answer":"SELECT name FROM accounts ORDER BY name","question":"List all customers\u2019 names in the alphabetical order.","context":"CREATE TABLE accounts (name VARCHAR)","generation":"SELECT name\nFROM accounts\nORDER BY name"}
{"answer":"SELECT Name FROM Team","question":"Show all team names.","context":"CREATE TABLE Team (Name VARCHAR)","generation":"SELECT Name\nFROM Team"}
{"answer":"SELECT cust_name FROM customer ORDER BY acc_bal","question":"List the name of all customers sorted by their account balance in ascending order.","context":"CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)","generation":"SELECT cust_name\nFROM customer\nORDER BY acc_bal ASC"}
{"answer":"SELECT COUNT(*) FROM train WHERE name LIKE \"%Express%\"","question":"How many trains have 'Express' in their names?","context":"CREATE TABLE train (name VARCHAR)","generation":"SELECT COUNT(*)\nFROM train\nWHERE name LIKE '%Express%'"}
{"answer":"SELECT COUNT(*) FROM game WHERE season > 2007","question":"How many games are held after season 2007?","context":"CREATE TABLE game (season INTEGER)","generation":"SELECT COUNT(*)\nFROM game\nWHERE season > 2007"}
{"answer":"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id and last name of the driver who participated in the most races after 2010?","context":"CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR, year INTEGER); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)","generation":"SELECT DISTINCT drivers.driverid, drivers.surname\nFROM drivers\nJOIN results ON drivers.driverid = results.driverid\nJOIN races ON results.raceid = races.raceid\nWHERE races.year > 2010\nORDER BY COUNT(results.raceid) DESC\nLIMIT 1"}
{"answer":"SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the name of the department that has the largest number of students enrolled?","context":"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT department.dept_name\nFROM department\nJOIN course ON department.dept_code = course.dept_code\nJOIN enroll ON course.crs_code = enroll.crs_code\nGROUP BY department.dept_name\nORDER BY COUNT(enroll.class_code) DESC\nLIMIT 1"}
{"answer":"SELECT school, LOCATION FROM university WHERE affiliation = 'Public'","question":"List all public schools and their locations.","context":"CREATE TABLE university (school VARCHAR, LOCATION VARCHAR, affiliation VARCHAR)","generation":"SELECT school, location\nFROM university\nWHERE affiliation = 'public'"}
{"answer":"SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'","question":"Show all headquarters with both a company in banking industry and a company in Oil and gas.","context":"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)","generation":"SELECT DISTINCT headquarters\nFROM company\nWHERE main_industry = 'banking'\nINTERSECT\nSELECT DISTINCT headquarters\nFROM company\nWHERE main_industry = 'Oil and gas'"}
{"answer":"SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"","question":"How much is the track Fast As a Shark?","context":"CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)","generation":"SELECT unit_price\nFROM tracks\nWHERE name = 'Fast As a Shark'"}
{"answer":"SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1","question":"Which allergy type has least number of allergies?","context":"CREATE TABLE Allergy_type (allergytype VARCHAR)","generation":"SELECT allergytype\nFROM Allergy_type\nORDER BY COUNT(*)\nLIMIT 1"}
{"answer":"SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration < (SELECT MAX(duration) FROM pitstops WHERE raceid = 841)","question":"Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.","context":"CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)","generation":"SELECT DISTINCT driverid, stop\nFROM pitstops\nWHERE duration < (SELECT MIN(duration)\n                 FROM pitstops\n                 WHERE raceid = '841')"}
{"answer":"SELECT customer_email, customer_name FROM customers WHERE payment_method = 'Visa'","question":"List the names and emails of customers who payed by Visa card.","context":"CREATE TABLE customers (customer_email VARCHAR, customer_name VARCHAR, payment_method VARCHAR)","generation":"SELECT customer_name, customer_email\nFROM customers\nWHERE payment_method = 'Visa'"}
{"answer":"SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the people that have been governor the most times.","context":"CREATE TABLE party (Governor VARCHAR)","generation":"SELECT Governor\nFROM party\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM storm WHERE Number_Deaths > 0","question":"How many storms had death records?","context":"CREATE TABLE storm (Number_Deaths INTEGER)","generation":"SELECT Number_Deaths\nFROM storm\nWHERE Number_Deaths > 0"}
{"answer":"SELECT COUNT(*) FROM county","question":"How many counties are there in total?","context":"CREATE TABLE county (Id VARCHAR)","generation":"SELECT COUNT(*) FROM county"}
{"answer":"SELECT Police_force FROM county_public_safety WHERE LOCATION = \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = \"West\"","question":"Show the police force shared by counties with location on the east and west.","context":"CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)","generation":"SELECT Police_force\nFROM county_public_safety\nWHERE LOCATION IN ('East', 'West')"}
{"answer":"SELECT customer_details FROM customers UNION SELECT staff_details FROM staff","question":"Find the names of all the customers and staff members.","context":"CREATE TABLE staff (customer_details VARCHAR, staff_details VARCHAR); CREATE TABLE customers (customer_details VARCHAR, staff_details VARCHAR)","generation":"SELECT customer_details, staff_details\nFROM customers\nUNION\nSELECT customer_details, staff_details\nFROM staff"}
{"answer":"SELECT T3.name, T2.title, T1.stars, T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name, T2.title, T1.stars","question":"Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.","context":"CREATE TABLE Rating (stars VARCHAR, ratingDate VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT r.name, m.title, r.stars, r.ratingDate\nFROM Rating r\nJOIN Movie m ON r.mID = m.mID\nORDER BY r.name, m.title, r.stars"}
{"answer":"SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING COUNT(*) >= 2","question":"What are the names of parties with at least 2 events?","context":"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE party_events (party_id VARCHAR)","generation":"SELECT party_name\nFROM party\nWHERE party_id IN (\n  SELECT party_id\n  FROM party_events\n  GROUP BY party_id\n  HAVING COUNT(*) >= 2\n)"}
{"answer":"SELECT Address FROM Restaurant WHERE ResName = \"Subway\"","question":"What is the address of the restaurant Subway?","context":"CREATE TABLE Restaurant (Address VARCHAR, ResName VARCHAR)","generation":"SELECT Address\nFROM Restaurant\nWHERE ResName = 'Subway'"}
{"answer":"SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the manager name with most number of gas stations opened after 2000.","context":"CREATE TABLE gas_station (manager_name VARCHAR, open_year INTEGER)","generation":"SELECT manager_name\nFROM gas_station\nWHERE open_year > 2000\nORDER BY open_year DESC\nLIMIT 1"}
{"answer":"SELECT SUM(crs_credit), dept_code FROM course GROUP BY dept_code","question":"What is the total credit does each department offer?","context":"CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER)","generation":"SELECT dept_code, SUM(crs_credit) AS total_credit\nFROM course\nGROUP BY dept_code"}
{"answer":"SELECT T1.name, COUNT(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id","question":"List the name for storms and the number of affected regions for each storm.","context":"CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)","generation":"SELECT storm.name, COUNT(affected_region.storm_id)\nFROM storm\nLEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id\nGROUP BY storm.name\n[\/SQL]"}
{"answer":"SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"","question":"Find the names of customers whose name contains \"Diana\".","context":"CREATE TABLE customers (customer_details VARCHAR)","generation":"SELECT customer_details\nFROM customers\nWHERE customer_details LIKE '%Diana%'"}
{"answer":"SELECT AVG(Horizontal_Bar_Points) FROM gymnast","question":"What is the average horizontal bar points for all gymnasts?","context":"CREATE TABLE gymnast (Horizontal_Bar_Points INTEGER)","generation":"SELECT AVG(Horizontal_Bar_Points)\nFROM gymnast"}
{"answer":"SELECT document_id, receipt_date FROM Documents","question":"List all document ids and receipt dates of documents.","context":"CREATE TABLE Documents (document_id VARCHAR, receipt_date VARCHAR)","generation":"SELECT document_id, receipt_date\nFROM Documents"}
{"answer":"SELECT Date, Vote_Percent FROM election","question":"List the dates and vote percents of elections.","context":"CREATE TABLE election (Date VARCHAR, Vote_Percent VARCHAR)","generation":"SELECT Date, Vote_Percent\nFROM election"}
{"answer":"SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\"","question":"Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"","context":"CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)","generation":"SELECT Price\nFROM publication\nWHERE Publisher = 'Person' OR Publisher = 'Wiley'"}
{"answer":"SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents","question":"What are the average and minimum price (in Euro) of all products?","context":"CREATE TABLE catalog_contents (price_in_euros INTEGER)","generation":"SELECT AVG(price_in_euros), MIN(price_in_euros)\nFROM catalog_contents"}
{"answer":"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"","question":"What is title of album which track Balls to the Wall belongs to?","context":"CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)","generation":"SELECT title\nFROM albums\nJOIN tracks ON albums.id = tracks.genre_id\nWHERE tracks.name = 'Balls to the Wall'"}
{"answer":"SELECT DISTINCT LOCATION FROM track","question":"What are distinct locations where tracks are located?","context":"CREATE TABLE track (LOCATION VARCHAR)","generation":"SELECT DISTINCT LOCATION\nFROM track"}
{"answer":"SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING COUNT(*) >= 3","question":"Which countries have at least 3 cities?","context":"CREATE TABLE country (country VARCHAR, country_id VARCHAR); CREATE TABLE city (country_id VARCHAR)","generation":"SELECT country\nFROM country\nWHERE country_id IN (\n  SELECT country_id\n  FROM city\n  GROUP BY country_id\n  HAVING COUNT(*) >= 3\n)"}
{"answer":"SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'","question":"Find the names of the chip models that are not used by any phone with full accreditation type.","context":"CREATE TABLE chip_model (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR); CREATE TABLE phone (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR)","generation":"SELECT chip_model.model_name\nFROM chip_model\nLEFT JOIN phone ON chip_model.model_name = phone.chip_model\nWHERE phone.accreditation_type != 'full'"}
{"answer":"SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'","question":"Find the first names of teachers whose email address contains the word \"man\".","context":"CREATE TABLE Teachers (first_name VARCHAR, email_address VARCHAR)","generation":"SELECT first_name\nFROM Teachers\nWHERE email_address LIKE '%man%'"}
{"answer":"SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60","question":"Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.","context":"CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)","generation":"SELECT trip.id\nFROM trip\nJOIN weather ON trip.zip_code = weather.zip_code\nWHERE weather.mean_temperature_f > 60"}
{"answer":"SELECT DISTINCT building FROM classroom WHERE capacity > 50","question":"Find the buildings which have rooms with capacity more than 50.","context":"CREATE TABLE classroom (building VARCHAR, capacity INTEGER)","generation":"SELECT DISTINCT building\nFROM classroom\nWHERE capacity > 50"}
{"answer":"SELECT COUNT(*) FROM Student WHERE Advisor = 1121","question":"Advisor 1121 has how many students?","context":"CREATE TABLE Student (Advisor VARCHAR)","generation":"SELECT COUNT(*) FROM Student WHERE Advisor = '1121'"}
{"answer":"SELECT TIME FROM elimination WHERE Eliminated_By = \"Punk\" OR Eliminated_By = \"Orton\"","question":"Show the times of elimination by \"Punk\" or \"Orton\".","context":"CREATE TABLE elimination (TIME VARCHAR, Eliminated_By VARCHAR)","generation":"SELECT TIME\nFROM elimination\nWHERE Eliminated_By IN ('Punk', 'Orton')"}
{"answer":"SELECT AVG(salary), MAX(salary) FROM Employee","question":"What is average and maximum salary of all employees.","context":"CREATE TABLE Employee (salary INTEGER)","generation":"SELECT AVG(salary), MAX(salary) FROM Employee"}
{"answer":"SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100","question":"Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.","context":"CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)","generation":"SELECT weather.zip_code\nFROM weather\nJOIN trip ON weather.zip_code = trip.zip_code\nWHERE weather.mean_humidity < 70\nAND trip.mean_humidity >= 100"}
{"answer":"SELECT title FROM papers WHERE title LIKE \"%ML%\"","question":"Find the titles of the papers that contain the word \"ML\".","context":"CREATE TABLE papers (title VARCHAR)","generation":"SELECT title\nFROM papers\nWHERE title LIKE '%ML%'"}
{"answer":"SELECT AVG(enrollment) FROM university WHERE founded < 1850","question":"What are the average enrollment size of the universities that are founded before 1850?","context":"CREATE TABLE university (enrollment INTEGER, founded INTEGER)","generation":"SELECT AVG(enrollment)\nFROM university\nWHERE founded < 1850"}
{"answer":"SELECT AVG(Attendance) FROM performance","question":"What is the average number of attendees for performances?","context":"CREATE TABLE performance (Attendance INTEGER)","generation":"SELECT AVG(Attendance)\nFROM performance"}
{"answer":"SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\")","question":"Find the number of students who are older than 18 and do not have allergy to either food or animal.","context":"CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)","generation":"SELECT COUNT(*)\nFROM Student\nWHERE age > 18\nAND NOT EXISTS (\n    SELECT *\n    FROM Has_allergy\n    WHERE Has_allergy.Allergy = Student.StuID\n    AND Has_allergy.Allergy IN (\n        SELECT Allergy\n        FROM Allergy_Type\n        WHERE allergytype IN ('food', 'animal')\n    )\n)"}
{"answer":"SELECT decor, COUNT(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor","question":"Find the number of rooms with price higher than 120 for different decor.","context":"CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)","generation":"SELECT COUNT(*)\nFROM Rooms\nWHERE basePrice > 120"}
{"answer":"SELECT class_code FROM CLASS WHERE class_room = 'KLR209'","question":"List the codes of all courses that take place in room KLR209.","context":"CREATE TABLE CLASS (class_code VARCHAR, class_room VARCHAR)","generation":"SELECT class_code\nFROM CLASS\nWHERE class_room = 'KLR209'"}
{"answer":"SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100","question":"List the name of playlist which has number of tracks greater than 100.","context":"CREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)","generation":"SELECT name\nFROM playlists\nWHERE id IN (\n  SELECT playlist_id\n  FROM playlist_tracks\n  GROUP BY playlist_id\n  HAVING COUNT(*) > 100\n)"}
{"answer":"SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING COUNT(*) > 1","question":"Find the name of instructors who are advising more than one student.","context":"CREATE TABLE advisor (i_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE id IN (\n    SELECT i_id\n    FROM advisor\n    GROUP BY i_id\n    HAVING COUNT(*) > 1\n)"}
{"answer":"SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = \"Debit\"","question":"How many debit cards do we have?","context":"CREATE TABLE Customers_cards (card_type_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM Customers_cards\nWHERE card_type_code = 'DEBIT'"}
{"answer":"SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\"","question":"What is the attribute data type of the attribute with name \"Green\"?","context":"CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)","generation":"SELECT attribute_data_type\nFROM Attribute_Definitions\nWHERE attribute_name = 'Green'"}
{"answer":"SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"","question":"Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".","context":"CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)","generation":"SELECT customers.customer_name\nFROM customers\nJOIN first_notification_of_loss ON customers.customer_id = first_notification_of_loss.customer_id\nJOIN services ON first_notification_of_loss.service_id = services.service_id\nWHERE services.service_name = 'Close a policy'\nAND services.service_name = 'New policy application'"}
{"answer":"SELECT title FROM course GROUP BY title HAVING COUNT(*) > 1","question":"Find the title of the course that is offered by more than one department.","context":"CREATE TABLE course (title VARCHAR)","generation":"SELECT title\nFROM course\nGROUP BY title\nHAVING COUNT(*) > 1"}
{"answer":"SELECT name FROM Reviewer UNION SELECT title FROM Movie","question":"Return all reviewer names and movie names together in a single list.","context":"CREATE TABLE Reviewer (name VARCHAR, title VARCHAR); CREATE TABLE Movie (name VARCHAR, title VARCHAR)","generation":"SELECT Reviewer.name, Movie.name\nFROM Reviewer\nJOIN Movie\nON Reviewer.name = Movie.name"}
{"answer":"SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1","question":"What is the team name and acc regular season score of the school that was founded for the longest time?","context":"CREATE TABLE university (school_id VARCHAR, founded VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, ACC_Regular_Season VARCHAR, school_id VARCHAR)","generation":"SELECT basketball_match.team_name, basketball_match.ACC_Regular_Season FROM basketball_match INNER JOIN university ON basketball_match.school_id = university.school_id WHERE university.founded = (SELECT MIN(founded) FROM university)"}
{"answer":"SELECT COUNT(*), address FROM member GROUP BY address","question":"Find the number of members living in each address.","context":"CREATE TABLE member (address VARCHAR)","generation":"SELECT address, COUNT(*) AS num_members\nFROM member\nGROUP BY address"}
{"answer":"SELECT T2.name, T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014","question":"Show the pair of male and female names in all weddings after year 2014","context":"CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, year INTEGER); CREATE TABLE people (name VARCHAR, people_id VARCHAR)","generation":"SELECT p1.name AS male_name, p2.name AS female_name\nFROM people AS p1\nJOIN people AS p2\nJOIN wedding AS w\nON p1.people_id = w.male_id\nAND p2.people_id = w.female_id\nWHERE w.year > 2014"}
{"answer":"SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton'","question":"How many rooms does the Lamberton building have?","context":"CREATE TABLE classroom (building VARCHAR)","generation":"SELECT COUNT(*)\nFROM classroom\nWHERE building = 'Lamberton'"}
{"answer":"SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the most common publication date.","context":"CREATE TABLE publication (Publication_Date VARCHAR)","generation":"SELECT Publication_Date\nFROM publication\nORDER BY Publication_Date\nLIMIT 1"}
{"answer":"SELECT AVG(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"","question":"Show the average room count of the apartments that have booking status code \"Provisional\".","context":"CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)","generation":"SELECT AVG(room_count)\nFROM Apartments\nJOIN Apartment_Bookings\nON Apartments.apt_id = Apartment_Bookings.apt_id\nWHERE booking_status_code = 'Provisional'"}
{"answer":"SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30","question":"Show the church names for the weddings of all people older than 30.","context":"CREATE TABLE church (name VARCHAR, church_id VARCHAR); CREATE TABLE people (people_id VARCHAR, age VARCHAR); CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, church_id VARCHAR)","generation":"SELECT church.name\nFROM church\nJOIN wedding ON church.church_id = wedding.church_id\nJOIN people ON wedding.male_id = people.people_id\nWHERE people.age > 30"}
{"answer":"SELECT DISTINCT directed_by FROM film","question":"Show all directors.","context":"CREATE TABLE film (directed_by VARCHAR)","generation":"SELECT directed_by\nFROM film"}
{"answer":"SELECT DISTINCT T1.EMP_FNAME, T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"","question":"What are the first names and date of birth of professors teaching course ACCT-211?","context":"CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_DOB VARCHAR, EMP_NUM VARCHAR)","generation":"SELECT EMP_FNAME, EMP_DOB\nFROM employee\nWHERE EMP_NUM IN (SELECT PROF_NUM\n                  FROM CLASS\n                  WHERE CLASS_NUM = 'ACCT-211')"}
{"answer":"SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)","question":"What is the last name of the youngest student?","context":"CREATE TABLE Student (LName VARCHAR, age INTEGER)","generation":"SELECT LName\nFROM Student\nORDER BY age\nLIMIT 1"}
{"answer":"SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"","question":"Who is the composer of track Fast As a Shark?","context":"CREATE TABLE tracks (composer VARCHAR, name VARCHAR)","generation":"SELECT composer\nFROM tracks\nWHERE name = 'Fast As a Shark'"}
{"answer":"SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common nationality of hosts.","context":"CREATE TABLE HOST (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(*) AS \"Number of Hosts\"\nFROM HOST\nGROUP BY Nationality\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1","question":"Which advisor has most number of students?","context":"CREATE TABLE Student (advisor VARCHAR)","generation":"SELECT advisor\nFROM Student\nGROUP BY advisor\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT POSITION, Team FROM pilot","question":"What are the positions and teams of pilots?","context":"CREATE TABLE pilot (POSITION VARCHAR, Team VARCHAR)","generation":"SELECT POSITION, Team\nFROM pilot"}
{"answer":"SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004","question":"List the campus that have between 600 and 1000 faculty lines in year 2004.","context":"CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (campus VARCHAR, faculty VARCHAR)","generation":"SELECT campus\nFROM faculty\nWHERE faculty BETWEEN 600 AND 1000\nAND year = 2004"}
{"answer":"SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004","question":"Show all artist names who didn't have an exhibition in 2004.","context":"CREATE TABLE exhibition (artist_id VARCHAR, year VARCHAR); CREATE TABLE artist (name VARCHAR); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)","generation":"SELECT artist.name\nFROM artist\nLEFT JOIN exhibition ON artist.artist_id = exhibition.artist_id\nWHERE exhibition.year IS NULL"}
{"answer":"SELECT Nationality, COUNT(*) FROM pilot GROUP BY Nationality","question":"What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.","context":"CREATE TABLE pilot (Nationality VARCHAR)","generation":"SELECT Nationality, COUNT(*)\nFROM pilot\nGROUP BY Nationality\nORDER BY Nationality"}
{"answer":"SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1","question":"Show the apartment numbers of apartments with unit status availability of both 0 and 1.","context":"CREATE TABLE View_Unit_Status (apt_id VARCHAR, available_yn VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)","generation":"SELECT Apartments.apt_number\nFROM Apartments\nINNER JOIN View_Unit_Status\nON Apartments.apt_id = View_Unit_Status.apt_id\nWHERE View_Unit_Status.available_yn = '0'\nAND View_Unit_Status.available_yn = '1'"}
{"answer":"SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1","question":"which course has most number of registered students?","context":"CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)","generation":"SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"answer":"SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the most common location of performances.","context":"CREATE TABLE performance (LOCATION VARCHAR)","generation":"SELECT LOCATION\nFROM performance\nGROUP BY LOCATION\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM building","question":"How many buildings are there?","context":"CREATE TABLE building (Id VARCHAR)","generation":"SELECT COUNT(*) FROM building"}
{"answer":"SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'","question":"Find the names of customers who are not living in the state of California.","context":"CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)","generation":"SELECT customer_name\nFROM customers\nWHERE customer_id NOT IN (\n  SELECT customer_id\n  FROM customer_addresses\n  JOIN addresses ON customer_addresses.address_id = addresses.address_id\n  WHERE addresses.state_province_county = 'California'\n)"}
{"answer":"SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC","question":"Show the ages of gymnasts in descending order of total points.","context":"CREATE TABLE people (Age VARCHAR, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points VARCHAR)","generation":"SELECT people.Age\nFROM people\nJOIN gymnast ON people.People_ID = gymnast.Gymnast_ID\nORDER BY gymnast.Total_Points DESC"}
{"answer":"SELECT MAX(capacity), AVG(capacity), building FROM classroom GROUP BY building","question":"Find the maximum and average capacity among rooms in each building.","context":"CREATE TABLE classroom (building VARCHAR, capacity INTEGER)","generation":"SELECT building, MAX(capacity) AS max_capacity, AVG(capacity) AS avg_capacity\nFROM classroom\nGROUP BY building"}
{"answer":"SELECT T1.fault_log_entry_id, T1.fault_description, T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which fault log included the most number of faulty parts? List the fault log id, description and record time.","context":"CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR, fault_description VARCHAR, fault_log_entry_datetime VARCHAR); CREATE TABLE Fault_Log_Parts (fault_log_entry_id VARCHAR)","generation":"SELECT fault_log_entry_id, fault_description, fault_log_entry_datetime\nFROM Fault_Log\nORDER BY COUNT(fault_log_entry_id) DESC\nLIMIT 1"}
{"answer":"SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\"","question":"Show the date valid from and the date valid to for the card with card number '4560596484842'.","context":"CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)","generation":"SELECT date_valid_from, date_valid_to\nFROM Customers_cards\nWHERE card_number = '4560596484842'"}
{"answer":"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4","question":"What are the names of movies that get 3 star and 4 star?","context":"CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT Movie.title\nFROM Movie\nJOIN Rating\nON Movie.mID = Rating.mID\nWHERE Rating.stars = '3'\nOR Rating.stars = '4'"}
{"answer":"SELECT T1.id, T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","question":"What are the ids and names of the web accelerators that are compatible with two or more browsers?","context":"CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, Name VARCHAR)","generation":"SELECT web_client_accelerator.id, web_client_accelerator.Name\nFROM web_client_accelerator\nWHERE web_client_accelerator.id IN (\n    SELECT accelerator_compatible_browser.accelerator_id\n    FROM accelerator_compatible_browser\n    GROUP BY accelerator_compatible_browser.accelerator_id\n    HAVING COUNT(*) > 1\n)"}
{"answer":"SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology'","question":"How many professors who are from either Accounting or Biology department?","context":"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (dept_code VARCHAR)","generation":"SELECT COUNT(*)\nFROM professor\nWHERE dept_code IN ('Accounting', 'Biology')"}
{"answer":"SELECT T2.name, SUM(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id","question":"What is total number of show times per dat for each cinema?","context":"CREATE TABLE schedule (show_times_per_day INTEGER, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR)","generation":"SELECT cinema.name, cinema.cinema_id, SUM(schedule.show_times_per_day) AS total_show_times_per_day FROM cinema INNER JOIN schedule ON cinema.cinema_id = schedule.cinema_id GROUP BY cinema.name, cinema.cinema_id"}
{"answer":"SELECT AVG(UnitPrice) FROM TRACK","question":"What is the average unit price of all the tracks?","context":"CREATE TABLE TRACK (UnitPrice INTEGER)","generation":"SELECT AVG(UnitPrice)\nFROM TRACK"}
{"answer":"SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'","question":"Which movies have 'Deleted Scenes' as a substring in the special feature?","context":"CREATE TABLE film (title VARCHAR, special_features VARCHAR)","generation":"SELECT title\nFROM film\nWHERE special_features LIKE '%Deleted Scenes%'"}
{"answer":"SELECT DISTINCT last_name FROM Maintenance_Engineers","question":"What are all the distinct last names of all the engineers?","context":"CREATE TABLE Maintenance_Engineers (last_name VARCHAR)","generation":"SELECT DISTINCT last_name\nFROM Maintenance_Engineers"}
{"answer":"SELECT eid FROM Employee WHERE salary > 100000","question":"Show ids for all employees with at least 100000 salary.","context":"CREATE TABLE Employee (eid VARCHAR, salary INTEGER)","generation":"SELECT eid\nFROM Employee\nWHERE salary >= 100000"}
{"answer":"SELECT COUNT(DISTINCT school_id) FROM basketball_match","question":"How many schools are in the basketball match?","context":"CREATE TABLE basketball_match (school_id VARCHAR)","generation":"SELECT COUNT(DISTINCT school_id)\nFROM basketball_match"}
{"answer":"SELECT Gender, Occupation FROM player","question":"What are the gender and occupation of players?","context":"CREATE TABLE player (Gender VARCHAR, Occupation VARCHAR)","generation":"SELECT Gender, Occupation\nFROM player"}
{"answer":"SELECT Competition_type, COUNT(*) FROM competition GROUP BY Competition_type","question":"List the types of competition and the number of competitions of each type.","context":"CREATE TABLE competition (Competition_type VARCHAR)","generation":"SELECT Competition_type, COUNT(*)\nFROM competition\nGROUP BY Competition_type\n[\/SQL]"}
{"answer":"SELECT COUNT(DISTINCT dept_address), school_code FROM department GROUP BY school_code","question":"How many different locations does each school have?","context":"CREATE TABLE department (school_code VARCHAR, dept_address VARCHAR)","generation":"SELECT school_code, COUNT(DISTINCT dept_address) AS num_locations\nFROM department\nGROUP BY school_code"}
{"answer":"SELECT MIN(low_temperature), MAX(wind_speed_mph) FROM weekly_weather","question":"show the lowest low temperature and highest wind speed in miles per hour.","context":"CREATE TABLE weekly_weather (low_temperature INTEGER, wind_speed_mph INTEGER)","generation":"SELECT\n  MIN(low_temperature) AS lowest_low_temperature,\n  MAX(wind_speed_mph) AS highest_wind_speed\nFROM weekly_weather"}
{"answer":"SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus","question":"report the total number of degrees granted between 1998 and 2002.","context":"CREATE TABLE campuses (campus VARCHAR, id VARCHAR); CREATE TABLE degrees (degrees INTEGER, campus VARCHAR, year VARCHAR)","generation":"SELECT SUM(degrees)\nFROM degrees\nWHERE year BETWEEN '1998' AND '2002'"}
{"answer":"SELECT circuitid, LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"","question":"Find the id and location of circuits that belong to France or Belgium?","context":"CREATE TABLE circuits (circuitid VARCHAR, LOCATION VARCHAR, country VARCHAR)","generation":"SELECT circuitid, location\nFROM circuits\nWHERE country IN ('France', 'Belgium')"}
{"answer":"SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the location with the most cinemas opened in year 2010 or later?","context":"CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)","generation":"SELECT LOCATION\nFROM cinema\nWHERE openning_year >= '2010'\nORDER BY openning_year DESC\nLIMIT 1"}
{"answer":"SELECT * FROM chip_model","question":"Find the details for all chip models.","context":"CREATE TABLE chip_model (Id VARCHAR)","generation":"SELECT * FROM chip_model"}
{"answer":"SELECT Name FROM phone WHERE NOT Phone_id IN (SELECT Phone_ID FROM phone_market)","question":"List the names of phones that are not on any market.","context":"CREATE TABLE phone (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR)","generation":"SELECT phone.Name\nFROM phone\nLEFT JOIN phone_market\nON phone.Phone_id = phone_market.Phone_id\nWHERE phone_market.Phone_id IS NULL"}
{"answer":"SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\"","question":"Show the short names of the buildings managed by \"Emma\".","context":"CREATE TABLE Apartment_Buildings (building_short_name VARCHAR, building_manager VARCHAR)","generation":"SELECT building_short_name\nFROM Apartment_Buildings\nWHERE building_manager = 'Emma'"}
{"answer":"SELECT name, LOCATION FROM cinema WHERE capacity > (SELECT AVG(capacity) FROM cinema)","question":"Show the cinema name and location for cinemas with capacity above average.","context":"CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity INTEGER)","generation":"SELECT name, location\nFROM cinema\nWHERE capacity > (SELECT AVG(capacity) FROM cinema)"}
{"answer":"SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING COUNT(*) = 1","question":"Find the first names of students who took exactly one class.","context":"CREATE TABLE enroll (stu_num VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)","generation":"SELECT student.stu_fname\nFROM student\nJOIN enroll\nON student.stu_num = enroll.stu_num\nGROUP BY student.stu_fname\nHAVING COUNT(enroll.stu_num) = 1"}
{"answer":"SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0","question":"Find the name and attribute ID of the attribute definitions with attribute value 0.","context":"CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)","generation":"SELECT attribute_name, attribute_id\nFROM Attribute_Definitions\nJOIN Catalog_Contents_Additional_Attributes\nON Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id\nWHERE Catalog_Contents_Additional_Attributes.attribute_value = '0'"}
{"answer":"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = \"Indonesia\"","question":"Which players are from Indonesia?","context":"CREATE TABLE country (Country_id VARCHAR, Country_name VARCHAR); CREATE TABLE match_season (Player VARCHAR, Country VARCHAR)","generation":"SELECT Player\nFROM match_season\nWHERE Country = 'Indonesia'"}
{"answer":"SELECT T1.booking_id, T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY COUNT(*) DESC LIMIT 1","question":"What are the id and the amount of refund of the booking that incurred the most times of payments?","context":"CREATE TABLE Payments (booking_id VARCHAR); CREATE TABLE Bookings (booking_id VARCHAR, amount_of_refund VARCHAR)","generation":"SELECT booking_id, amount_of_refund\nFROM Bookings\nORDER BY amount_of_refund DESC\nLIMIT 1"}
{"answer":"SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type","question":"Find the number of phones for each accreditation type.","context":"CREATE TABLE phone (Accreditation_type VARCHAR)","generation":"SELECT Accreditation_type, COUNT(*)\nFROM phone\nGROUP BY Accreditation_type"}
{"answer":"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"","question":"List the name of tracks belongs to genre Rock or media type is MPEG audio file.","context":"CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)","generation":"SELECT tracks.name\nFROM tracks\nINNER JOIN genres ON tracks.genre_id = genres.id\nINNER JOIN media_types ON tracks.media_type_id = media_types.id\nWHERE genres.name = 'Rock' OR media_types.name = 'MPEG audio file'"}
{"answer":"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\"","question":"Find the names of customers who either have an deputy policy or uniformed policy.","context":"CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)","generation":"SELECT customers.customer_details\nFROM customers\nJOIN policies ON customers.customer_id = policies.customer_id\nWHERE policies.policy_type_code = 'deputy' OR policies.policy_type_code = 'uniformed'"}
{"answer":"SELECT T1.skill_id, T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which skill is used in fixing the most number of faults? List the skill id and description.","context":"CREATE TABLE Skills (skill_id VARCHAR, skill_description VARCHAR); CREATE TABLE Skills_Required_To_Fix (skill_id VARCHAR)","generation":"SELECT skill_id, skill_description\nFROM Skills\nWHERE skill_id IN (\n    SELECT skill_id\n    FROM Skills_Required_To_Fix\n    GROUP BY skill_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"}
{"answer":"SELECT COUNT(*) FROM item WHERE NOT i_id IN (SELECT i_id FROM review)","question":"Find the number of items that did not receive any review.","context":"CREATE TABLE review (i_id VARCHAR); CREATE TABLE item (i_id VARCHAR)","generation":"SELECT COUNT(*)\nFROM item\nWHERE i_id NOT IN (SELECT i_id\n                  FROM review)"}
{"answer":"SELECT COUNT(DISTINCT bedType) FROM Rooms","question":"How many different types of beds are there?","context":"CREATE TABLE Rooms (bedType VARCHAR)","generation":"SELECT COUNT(DISTINCT bedType)\nFROM Rooms"}
{"answer":"SELECT MAX(Cows), MIN(Cows) FROM farm","question":"What are the maximum and minimum number of cows across all farms.","context":"CREATE TABLE farm (Cows INTEGER)","generation":"SELECT MIN(Cows), MAX(Cows) FROM farm"}
{"answer":"SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id","question":"Show all customer ids and the number of cards owned by each customer.","context":"CREATE TABLE Customers_cards (customer_id VARCHAR)","generation":"SELECT customer_id, COUNT(*) AS num_cards\nFROM Customers_cards\nGROUP BY customer_id"}
{"answer":"SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM member_attendance)","question":"List the names of members who did not attend any performance.","context":"CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Name VARCHAR, Member_ID VARCHAR)","generation":"SELECT member.Name\nFROM member\nLEFT JOIN member_attendance\nON member.Name = member_attendance.Name\nWHERE member_attendance.Name IS NULL"}
{"answer":"SELECT origin FROM train GROUP BY origin HAVING COUNT(*) > 1","question":"Find the origins from which more than 1 train starts.","context":"CREATE TABLE train (origin VARCHAR)","generation":"SELECT origin\nFROM train\nGROUP BY origin\nHAVING COUNT(*) > 1"}
{"answer":"SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\"","question":"What is the shipping agent code of shipping agent UPS?","context":"CREATE TABLE Ref_Shipping_Agents (shipping_agent_code VARCHAR, shipping_agent_name VARCHAR)","generation":"SELECT shipping_agent_code\nFROM Ref_Shipping_Agents\nWHERE shipping_agent_name = 'UPS'"}
{"answer":"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\"","question":"Which committees have delegates from both democratic party and liberal party?","context":"CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)","generation":"SELECT Committee FROM election WHERE Party = 'Democratic Party' AND Party = 'Liberal Party'"}
{"answer":"SELECT Nationality, Age FROM journalist","question":"What are the nationalities and ages of journalists?","context":"CREATE TABLE journalist (Nationality VARCHAR, Age VARCHAR)","generation":"SELECT Nationality, Age\nFROM journalist"}
{"answer":"SELECT AVG(no_of_customers) FROM bank WHERE state = 'Utah'","question":"Find the average number of customers in all banks of Utah state.","context":"CREATE TABLE bank (no_of_customers INTEGER, state VARCHAR)","generation":"SELECT AVG(no_of_customers)\nFROM bank\nWHERE state = 'Utah'"}
{"answer":"SELECT main_industry, SUM(market_value) FROM company GROUP BY main_industry","question":"Show all main industry and total market value in each industry.","context":"CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)","generation":"SELECT main_industry, SUM(market_value)\nFROM company\nGROUP BY main_industry\n[\/SQL]"}
{"answer":"SELECT T1.student_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the id and first name of the student that has the most number of assessment notes?","context":"CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Assessment_Notes (student_id VARCHAR)","generation":"SELECT student_id, first_name FROM Students WHERE student_id IN (SELECT student_id FROM Assessment_Notes GROUP BY student_id HAVING COUNT(student_id) = (SELECT MAX(COUNT(student_id)) FROM Assessment_Notes GROUP BY student_id))"}
{"answer":"SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')","question":"Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".","context":"CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)","generation":"SELECT name\nFROM user_profiles\nWHERE uid IN (\n  SELECT f1\n  FROM follows\n  WHERE f1 > (\n    SELECT uid\n    FROM user_profiles\n    WHERE name = 'Tyler Swift'\n  )\n)"}
{"answer":"SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1","question":"Show the names of journalists that have reported more than one event.","context":"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)","generation":"SELECT journalist.Name\nFROM journalist\nJOIN news_report ON journalist.journalist_ID = news_report.journalist_ID\nGROUP BY journalist.Name\nHAVING COUNT(news_report.Event_ID) > 1"}
{"answer":"SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20","question":"Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.","context":"CREATE TABLE perpetrator (Country VARCHAR, Injured INTEGER)","generation":"SELECT Country\nFROM perpetrator\nWHERE Injured > 50 AND Injured < 20"}
{"answer":"SELECT COUNT(DISTINCT eid) FROM Certificate","question":"How many employees have certificate.","context":"CREATE TABLE Certificate (eid VARCHAR)","generation":"SELECT COUNT(*)\nFROM Certificate"}
{"answer":"SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1","question":"What are the clean and jerk score of the body builder with the highest total score?","context":"CREATE TABLE body_builder (Clean_Jerk VARCHAR, Total VARCHAR)","generation":"SELECT Clean_Jerk\nFROM body_builder\nWHERE Total = (SELECT MAX(Total) FROM body_builder)"}
{"answer":"SELECT T1.institution, COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id","question":"Show institution names along with the number of proteins for each institution.","context":"CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (institution_id VARCHAR)","generation":"SELECT institution, COUNT(*)\nFROM institution\nJOIN protein\nON institution.institution_id = protein.institution_id\nGROUP BY institution\n[\/SQL]"}
{"answer":"SELECT fname, lname FROM authors ORDER BY lname","question":"Retrieve all the first and last names of authors in the alphabetical order of last names.","context":"CREATE TABLE authors (fname VARCHAR, lname VARCHAR)","generation":"SELECT fname, lname\nFROM authors\nORDER BY lname"}
{"answer":"SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most popular first name of the actors?","context":"CREATE TABLE actor (first_name VARCHAR)","generation":"SELECT first_name\nFROM actor\nORDER BY first_name\nLIMIT 1"}
{"answer":"SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000","question":"Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.","context":"CREATE TABLE institution (TYPE VARCHAR, founded VARCHAR, enrollment VARCHAR)","generation":"SELECT TYPE\nFROM institution\nWHERE founded > '1990'\nAND enrollment >= 1000"}
{"answer":"SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = \"San Francisco State University\"","question":"How many faculty lines are there in \"San Francisco State University\" in year 2004?","context":"CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)","generation":"SELECT COUNT(*) FROM faculty WHERE campus = 'San Francisco State University' AND year = '2004'"}
{"answer":"SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY COUNT(*) LIMIT 1","question":"Find the semester and year which has the least number of student taking any class.","context":"CREATE TABLE takes (semester VARCHAR, YEAR VARCHAR)","generation":"SELECT semester, YEAR\nFROM takes\nORDER BY COUNT(*) OVER (PARTITION BY semester, YEAR)\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"","question":"How many times has the student Linda Smith visited Subway?","context":"CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Student (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Visits_Restaurant WHERE Id = 'Linda Smith' AND Restaurant.Id = 'Subway'"}
{"answer":"SELECT COUNT(*) FROM rooms WHERE NOT roomid IN (SELECT DISTINCT room FROM reservations)","question":"Find the number of rooms that do not have any reservation.","context":"CREATE TABLE rooms (roomid VARCHAR, room VARCHAR); CREATE TABLE reservations (roomid VARCHAR, room VARCHAR)","generation":"SELECT COUNT(DISTINCT roomid)\nFROM rooms\nWHERE roomid NOT IN (SELECT roomid FROM reservations)"}
{"answer":"SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE \"8\/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1","question":"Which start station had the most trips starting from August? Give me the name and id of the station.","context":"CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)","generation":"SELECT start_station_name, start_station_id\nFROM trip\nWHERE start_date LIKE 'August%'\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age LIMIT 1","question":"What is the total point count of the youngest gymnast?","context":"CREATE TABLE people (People_ID VARCHAR, Age VARCHAR); CREATE TABLE gymnast (Total_Points VARCHAR, Gymnast_ID VARCHAR)","generation":"SELECT Total_Points\nFROM gymnast\nJOIN people\nON gymnast.Gymnast_ID = people.People_ID\nWHERE people.Age = (SELECT MIN(people.Age) FROM people)"}
{"answer":"SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK'","question":"Which language does the film AIRPORT POLLOCK use? List the language name.","context":"CREATE TABLE film (language_id VARCHAR, title VARCHAR); CREATE TABLE LANGUAGE (name VARCHAR, language_id VARCHAR)","generation":"SELECT name\nFROM LANGUAGE\nWHERE language_id = (\n    SELECT language_id\n    FROM film\n    WHERE title = 'AIRPORT POLLOCK'\n)"}
{"answer":"SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = \"San Francisco State University\" AND t1.year = 2000","question":"What is the campus fee of \"San Francisco State University\" in year 2000?","context":"CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)","generation":"SELECT campusfee FROM csu_fees WHERE campus = 'San Francisco State University' AND year = '2000'"}
{"answer":"SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION","question":"Show the position of players and the corresponding number of players.","context":"CREATE TABLE match_season (POSITION VARCHAR)","generation":"SELECT POSITION, COUNT(*)\nFROM match_season\nGROUP BY POSITION\n[\/SQL]"}
{"answer":"SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5","question":"List the names of 5 users followed by the largest number of other users.","context":"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)","generation":"SELECT name, followers\nFROM user_profiles\nORDER BY followers DESC\nLIMIT 5"}
{"answer":"SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT AVG(enrollment) FROM university)","question":"Find the team names of the universities whose enrollments are smaller than the average enrollment size.","context":"CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, school_id VARCHAR); CREATE TABLE university (enrollment INTEGER)","generation":"SELECT DISTINCT team_name\nFROM basketball_match\nJOIN university\nON basketball_match.school_id = university.school_id\nWHERE enrollment < (SELECT AVG(enrollment) FROM university)"}
{"answer":"SELECT Name FROM wrestler WHERE Days_held < 100","question":"What are the names of wrestlers days held less than 100?","context":"CREATE TABLE wrestler (Name VARCHAR, Days_held INTEGER)","generation":"SELECT Name\nFROM wrestler\nWHERE Days_held < 100"}
{"answer":"SELECT gender FROM staff GROUP BY gender ORDER BY COUNT(*) DESC LIMIT 1","question":"Which gender makes up the majority of the staff?","context":"CREATE TABLE staff (gender VARCHAR)","generation":"SELECT gender\nFROM staff\nGROUP BY gender\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT Region FROM club ORDER BY Region","question":"List the distinct region of clubs in ascending alphabetical order.","context":"CREATE TABLE club (Region VARCHAR)","generation":"SELECT DISTINCT Region\nFROM club\nORDER BY Region ASC"}
{"answer":"SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = \"Defender\"","question":"Show the draft pick numbers and draft classes of players whose positions are defenders.","context":"CREATE TABLE match_season (Draft_Pick_Number VARCHAR, Draft_Class VARCHAR, POSITION VARCHAR)","generation":"SELECT Draft_Pick_Number, Draft_Class\nFROM match_season\nWHERE POSITION = 'DEFENDER'"}
{"answer":"SELECT destination, COUNT(*) FROM Flight GROUP BY destination","question":"Show all destinations and the number of flights to each destination.","context":"CREATE TABLE Flight (destination VARCHAR)","generation":"SELECT destination, COUNT(*)\nFROM Flight\nGROUP BY destination"}
{"answer":"SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = \"San Jose State University\" AND T2.year = 1996","question":"What is the campus fee of \"San Jose State University\" in year 1996?","context":"CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)","generation":"SELECT csu_fees.year\nFROM csu_fees\nJOIN campuses ON csu_fees.id = campuses.id\nWHERE campuses.name = 'San Jose State University'\nAND csu_fees.year = '1996'"}
{"answer":"SELECT name, average_attendance, total_attendance FROM stadium EXCEPT SELECT T2.name, T2.average_attendance, T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id","question":"Show the name, average attendance, total attendance for stadiums where no accidents happened.","context":"CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR, id VARCHAR); CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)","generation":"SELECT name, average_attendance, total_attendance\nFROM stadium\nWHERE id NOT IN (\n  SELECT stadium_id\n  FROM game\n  WHERE id IN (\n    SELECT game_id\n    FROM injury_accident\n  )\n)"}
{"answer":"SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20","question":"List the names of buildings with at least 200 feet of height and with at least 20 floors.","context":"CREATE TABLE building (name VARCHAR, height_feet VARCHAR, floors VARCHAR)","generation":"SELECT name\nFROM building\nWHERE height_feet >= 200 AND floors >= 20"}
{"answer":"SELECT MAX(Enrollment) FROM university","question":"What is the maximum enrollment across all schools?","context":"CREATE TABLE university (Enrollment INTEGER)","generation":"SELECT MAX(Enrollment)\nFROM university"}
{"answer":"SELECT directed_by, COUNT(*) FROM film GROUP BY directed_by","question":"List all directors along with the number of films directed by each director.","context":"CREATE TABLE film (directed_by VARCHAR)","generation":"SELECT directed_by, COUNT(*)\nFROM film\nGROUP BY directed_by"}
{"answer":"SELECT MAX(OMIM) FROM enzyme","question":"What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?","context":"CREATE TABLE enzyme (OMIM INTEGER)","generation":"SELECT MAX(OMIM)\nFROM enzyme"}
{"answer":"SELECT name, operating_system FROM web_client_accelerator EXCEPT SELECT T1.name, T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'","question":"Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.","context":"CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, id VARCHAR)","generation":"SELECT web_client_accelerator.name, web_client_accelerator.operating_system\nFROM web_client_accelerator\nLEFT JOIN accelerator_compatible_browser ON web_client_accelerator.id = accelerator_compatible_browser.accelerator_id\nLEFT JOIN browser ON accelerator_compatible_browser.browser_id = browser.id\nWHERE browser.name = 'Opera'"}
{"answer":"SELECT minister, took_office, left_office FROM party ORDER BY left_office","question":"Show the ministers and the time they took and left office, listed by the time they left office.","context":"CREATE TABLE party (minister VARCHAR, took_office VARCHAR, left_office VARCHAR)","generation":"SELECT minister, left_office\nFROM party\nORDER BY left_office"}
{"answer":"SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000","question":"Please show the themes of competitions with host cities having populations larger than 1000.","context":"CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)","generation":"SELECT DISTINCT Theme\nFROM farm_competition\nINNER JOIN city\nON farm_competition.Host_city_ID = city.City_ID\nWHERE city.Population > 1000"}
{"answer":"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Susan\"","question":"Find the id of users who are followed by Mary and Susan.","context":"CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)","generation":"SELECT uid\nFROM user_profiles\nWHERE uid IN (\n  SELECT f2\n  FROM follows\n  WHERE f1 = 'Mary'\n  UNION\n  SELECT f2\n  FROM follows\n  WHERE f1 = 'Susan'\n)"}
{"answer":"SELECT COUNT(*), dept_name FROM student GROUP BY dept_name","question":"Find the total number of students in each department.","context":"CREATE TABLE student (dept_name VARCHAR)","generation":"SELECT dept_name, COUNT(*) AS num_students\nFROM student\nGROUP BY dept_name"}
{"answer":"SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)","question":"Find the average number of followers for the users who had some tweets.","context":"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)","generation":"SELECT AVG(followers)\nFROM user_profiles\nWHERE UID IN (SELECT UID\n              FROM tweets)"}
{"answer":"SELECT season, home_team, away_team FROM game","question":"List the season, home team, away team of all the games.","context":"CREATE TABLE game (season VARCHAR, home_team VARCHAR, away_team VARCHAR)","generation":"SELECT season, home_team, away_team\nFROM game"}
{"answer":"SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"","question":"How many customers have email that contains \"gmail.com\"?","context":"CREATE TABLE CUSTOMER (Email VARCHAR)","generation":"SELECT COUNT(*)\nFROM CUSTOMER\nWHERE Email LIKE '%gmail.com'"}
{"answer":"SELECT Name, Party FROM representative","question":"What are the names and parties of representatives?","context":"CREATE TABLE representative (Name VARCHAR, Party VARCHAR)","generation":"SELECT Name, Party\nFROM representative"}
{"answer":"SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.'","question":"Find the names of all instructors in computer science department","context":"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR)","generation":"SELECT name\nFROM instructor\nWHERE dept_name = 'computer science'"}
{"answer":"SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name","question":"What are the first name, last name, and gender of all the good customers? Order by their last name.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, gender_mf VARCHAR, good_or_bad_customer VARCHAR)","generation":"SELECT first_name, last_name, gender_mf\nFROM customers\nWHERE good_or_bad_customer = 'good'\nORDER BY last_name"}
{"answer":"SELECT T2.first_name, T2.last_name, T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Which film actor (actress) starred the most films? List his or her first name, last name and actor id.","context":"CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)","generation":"SELECT first_name, last_name, actor_id\nFROM actor\nORDER BY actor_id DESC\nLIMIT 1"}
{"answer":"SELECT T2.title, T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3","question":"What are the names and years of the movies that has the top 3 highest rating star?","context":"CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, mID VARCHAR)","generation":"SELECT title, year\nFROM Movie\nINNER JOIN Rating\nON Movie.mID = Rating.mID\nWHERE Rating.stars IN (SELECT MAX(Rating.stars)\nFROM Rating\nGROUP BY Rating.mID\nORDER BY Rating.stars DESC\nLIMIT 3)"}
{"answer":"SELECT T3.booking_start_date, T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'","question":"What are the start date and end date of the booking that has booked the product named 'Book collection A'?","context":"CREATE TABLE bookings (booking_start_date VARCHAR, booking_end_date VARCHAR, booking_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booking_id VARCHAR); CREATE TABLE Products_for_hire (product_id VARCHAR, product_name VARCHAR)","generation":"SELECT booking_start_date, booking_end_date\nFROM bookings\nWHERE booking_id IN (\n    SELECT booking_id\n    FROM products_booked\n    WHERE product_id IN (\n        SELECT product_id\n        FROM Products_for_hire\n        WHERE product_name = 'Book collection A'\n    )\n)"}
{"answer":"SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY COUNT(*) DESC LIMIT 1","question":"Which poll resource provided the most number of candidate information?","context":"CREATE TABLE candidate (poll_source VARCHAR)","generation":"SELECT poll_source\nFROM candidate\nGROUP BY poll_source\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000)","question":"Show the number of cities in counties that have a population more than 20000.","context":"CREATE TABLE county_public_safety (county_ID VARCHAR, population INTEGER); CREATE TABLE city (county_ID VARCHAR, population INTEGER)","generation":"SELECT COUNT(*)\nFROM city\nWHERE county_ID IN (SELECT county_ID\n                   FROM county_public_safety\n                   WHERE population > 20000)"}
{"answer":"SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid","question":"Show aircraft names and number of flights for each aircraft.","context":"CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)","generation":"SELECT Aircraft.name, COUNT(Flight.aid)\nFROM Aircraft\nLEFT JOIN Flight ON Aircraft.aid = Flight.aid\nGROUP BY Aircraft.name"}
{"answer":"SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5","question":"What are the titles of all movies that have rating star is between 3 and 5?","context":"CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)","generation":"SELECT title FROM Movie, Rating WHERE Movie.mID = Rating.mID AND stars BETWEEN 3 AND 5"}
{"answer":"SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1","question":"In which year were most departments established?","context":"CREATE TABLE department (creation VARCHAR)","generation":"SELECT creation\nFROM department\nORDER BY creation DESC\nLIMIT 1"}
{"answer":"SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = \"Lyla\"","question":"What is the zip code of the address where the teacher with first name \"Lyla\" lives?","context":"CREATE TABLE Teachers (address_id VARCHAR, first_name VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)","generation":"SELECT zip_postcode FROM Addresses WHERE address_id = (SELECT address_id FROM Teachers WHERE first_name = 'Lyla')"}
{"answer":"SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY COUNT(*) DESC LIMIT 1","question":"Find the name of the user who gives the most reviews.","context":"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)","generation":"SELECT name\nFROM useracct\nWHERE u_id IN (\n    SELECT u_id\n    FROM review\n    GROUP BY u_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"}
{"answer":"SELECT DISTINCT asset_model FROM Assets","question":"What are all the distinct asset models?","context":"CREATE TABLE Assets (asset_model VARCHAR)","generation":"SELECT DISTINCT asset_model\nFROM Assets"}
{"answer":"SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy","question":"What are the student ids of students who don't have any allergies?","context":"CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)","generation":"SELECT Student.StuID\nFROM Student\nLEFT JOIN Has_allergy\nON Student.StuID = Has_allergy.StuID\nWHERE Has_allergy.StuID IS NULL"}
{"answer":"SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35","question":"Show the nations that have both hosts older than 45 and hosts younger than 35.","context":"CREATE TABLE HOST (Nationality VARCHAR, Age INTEGER)","generation":"SELECT Nationality\nFROM HOST\nWHERE Age > 45 AND Age < 35"}
{"answer":"SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000","question":"Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.","context":"CREATE TABLE performance (LOCATION VARCHAR, Attendance INTEGER)","generation":"SELECT DISTINCT location\nFROM performance\nWHERE attendance > 2000 AND attendance < 1000"}
{"answer":"SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id","question":"List the id of students who registered some courses and the number of their registered courses?","context":"CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)","generation":"SELECT student_id, COUNT(student_id) AS num_courses\nFROM student_course_registrations\nGROUP BY student_id\nHAVING COUNT(student_id) > 0"}
{"answer":"SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id","question":"Show invoice dates and order id and details for all invoices.","context":"CREATE TABLE Invoices (invoice_date VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_details VARCHAR, order_id VARCHAR)","generation":"SELECT Invoices.invoice_date, Invoices.order_id, Orders.order_details\nFROM Invoices\nJOIN Orders ON Invoices.order_id = Orders.order_id"}
{"answer":"SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy","question":"Show all allergies with number of students affected.","context":"CREATE TABLE Has_allergy (Allergy VARCHAR)","generation":"SELECT Allergy, COUNT(*) AS \"Number of Students Affected\"\nFROM Has_allergy\nGROUP BY Allergy"}
{"answer":"SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1","question":"Show the name of the party that has the most delegates.","context":"CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)","generation":"SELECT Party\nFROM party\nORDER BY Party_ID DESC\nLIMIT 1"}
{"answer":"SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = \"VIOLENCE\"","question":"What is the incident type description for the incident type with code \"VIOLENCE\"?","context":"CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR)","generation":"SELECT incident_type_description\nFROM Ref_Incident_Type\nWHERE incident_type_code = 'VIOLENCE'"}
{"answer":"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171","question":"How many courses do the student whose id is 171 attend?","context":"CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)","generation":"SELECT COUNT(course_id)\nFROM student_course_attendance\nWHERE student_id = '171'"}
{"answer":"SELECT MAX(stars), MIN(stars) FROM Rating","question":"What is the lowest and highest rating star?","context":"CREATE TABLE Rating (stars INTEGER)","generation":"SELECT MIN(stars) AS lowest_rating, MAX(stars) AS highest_rating\nFROM Rating"}
{"answer":"SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10","question":"Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.","context":"CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)","generation":"SELECT first_name, last_name, COUNT(customer_id) AS total_orders\nFROM customers\nJOIN invoices ON customers.id = invoices.customer_id\nGROUP BY first_name, last_name\nORDER BY total_orders DESC\nLIMIT 10"}
{"answer":"SELECT COUNT(*) FROM Aircraft","question":"How many aircrafts do we have?","context":"CREATE TABLE Aircraft (Id VARCHAR)","generation":"SELECT COUNT(*) FROM Aircraft"}
{"answer":"SELECT Restaurant.ResName, SUM(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY SUM(Visits_Restaurant.Spent) LIMIT 1","question":"At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.","context":"CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)","generation":"SELECT Restaurant.Id, SUM(Visits_Restaurant.Id) AS Total_Time\nFROM Visits_Restaurant\nJOIN Restaurant ON Visits_Restaurant.Id = Restaurant.Id\nGROUP BY Restaurant.Id\nORDER BY Total_Time ASC\nLIMIT 1"}
{"answer":"SELECT SUM(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\"","question":"Show the total number of rooms of all apartments with facility code \"Gym\".","context":"CREATE TABLE Apartments (room_count INTEGER, apt_id VARCHAR); CREATE TABLE Apartment_Facilities (apt_id VARCHAR, facility_code VARCHAR)","generation":"SELECT SUM(room_count)\nFROM Apartments\nWHERE apt_id IN (\n  SELECT apt_id\n  FROM Apartment_Facilities\n  WHERE facility_code = 'Gym'\n)"}
{"answer":"SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1","question":"Show the official names of the cities that have hosted more than one competition.","context":"CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)","generation":"SELECT c.Official_Name\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nGROUP BY c.Official_Name\nHAVING COUNT(fc.Host_city_ID) > 1"}
{"answer":"SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1","question":"Find the name and building of the department with the highest budget.","context":"CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)","generation":"SELECT dept_name, building\nFROM department\nORDER BY budget DESC\nLIMIT 1"}
{"answer":"SELECT Name FROM People ORDER BY Weight","question":"What are the names of people in ascending order of weight?","context":"CREATE TABLE People (Name VARCHAR, Weight VARCHAR)","generation":"SELECT Name\nFROM People\nORDER BY Weight ASC"}
{"answer":"SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id","question":"Find the names of customers who have no policies associated.","context":"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)","generation":"SELECT customer_details\nFROM customers\nWHERE customer_id NOT IN (SELECT customer_id FROM policies)"}
{"answer":"SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50","question":"How many rooms whose capacity is less than 50 does the Lamberton building have?","context":"CREATE TABLE classroom (building VARCHAR, capacity VARCHAR)","generation":"SELECT COUNT(*)\nFROM classroom\nWHERE building = 'Lamberton'\nAND capacity < 50"}
{"answer":"SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the id of the event with the most participants?","context":"CREATE TABLE Participants_in_Events (Event_ID VARCHAR)","generation":"SELECT Event_ID\nFROM Participants_in_Events\nGROUP BY Event_ID\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\"","question":"What are the distinct positions of the players from a country whose capital is Dublin?","context":"CREATE TABLE country (Country_id VARCHAR, Capital VARCHAR); CREATE TABLE match_season (Position VARCHAR, Country VARCHAR)","generation":"SELECT DISTINCT Position\nFROM match_season\nWHERE Country IN (SELECT Country\n                  FROM country\n                  WHERE Capital = 'Dublin')"}
{"answer":"SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\"","question":"What is the average unit price of tracks that belong to Jazz genre?","context":"CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)","generation":"SELECT AVG(TRACK.UnitPrice)\nFROM TRACK\nJOIN GENRE ON TRACK.GenreId = GENRE.GenreId\nWHERE GENRE.Name = 'Jazz'"}
{"answer":"SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000","question":"Show writers who have published a book with price more than 4000000.","context":"CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)","generation":"SELECT DISTINCT book.Writer\nFROM book\nINNER JOIN publication\nON book.Book_ID = publication.Book_ID\nWHERE publication.Price > 4000000"}
{"answer":"SELECT guest_first_name, guest_last_name FROM Guests","question":"Return the first names and last names of all guests","context":"CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR)","generation":"SELECT guest_first_name, guest_last_name\nFROM Guests"}
{"answer":"SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1","question":"What is the carrier of the most expensive phone?","context":"CREATE TABLE phone (Carrier VARCHAR, Price VARCHAR)","generation":"SELECT Carrier\nFROM phone\nORDER BY Price DESC\nLIMIT 1"}
{"answer":"SELECT Name FROM technician WHERE NOT technician_id IN (SELECT technician_id FROM repair_assignment)","question":"List the names of technicians who have not been assigned to repair machines.","context":"CREATE TABLE technician (Name VARCHAR, technician_id VARCHAR); CREATE TABLE repair_assignment (Name VARCHAR, technician_id VARCHAR)","generation":"SELECT technician.Name\nFROM technician\nWHERE technician.technician_id NOT IN (\n  SELECT repair_assignment.technician_id\n  FROM repair_assignment\n)"}
{"answer":"SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1","question":"Find the saving balance of the account with the highest checking balance.","context":"CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (custid VARCHAR)","generation":"SELECT savings.balance\nFROM savings\nJOIN checking ON savings.custid = checking.custid\nWHERE checking.balance = (\n    SELECT MAX(balance)\n    FROM checking\n)"}
{"answer":"SELECT roomName FROM Rooms ORDER BY basePrice","question":"List the name of all rooms sorted by their prices.","context":"CREATE TABLE Rooms (roomName VARCHAR, basePrice VARCHAR)","generation":"SELECT roomName\nFROM Rooms\nORDER BY basePrice"}
{"answer":"SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1","question":"Show the id and name of the aircraft with the maximum distance.","context":"CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)","generation":"SELECT aid, name\nFROM Aircraft\nWHERE distance = (SELECT MAX(distance) FROM Aircraft)"}
{"answer":"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?","context":"CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)","generation":"SELECT e.name, e.salary\nFROM Employee e\nJOIN Certificate c ON e.eid = c.eid\nJOIN Aircraft a ON c.aid = a.aid\nWHERE a.distance > 5000\nGROUP BY e.name, e.salary\nORDER BY COUNT(c.aid) DESC\nLIMIT 1"}
{"answer":"SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1","question":"What is the name of the student who has the highest total credits in the History department.","context":"CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)","generation":"SELECT name\nFROM student\nWHERE dept_name = 'History'\nORDER BY tot_cred DESC\nLIMIT 1"}
{"answer":"SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID","question":"Show the years and the official names of the host cities of competitions.","context":"CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)","generation":"SELECT DISTINCT farm_competition.Year, city.Official_Name\nFROM farm_competition\nJOIN city ON farm_competition.Host_city_ID = city.City_ID"}
{"answer":"SELECT document_type_code FROM Documents WHERE document_id = 2","question":"List the document type code for the document with the id 2.","context":"CREATE TABLE Documents (document_type_code VARCHAR, document_id VARCHAR)","generation":"SELECT document_type_code\nFROM Documents\nWHERE document_id = 2"}
{"answer":"SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\"","question":"Show the residences that have both a player of gender \"M\" and a player of gender \"F\".","context":"CREATE TABLE player (Residence VARCHAR, gender VARCHAR)","generation":"SELECT DISTINCT residence\nFROM player\nWHERE gender = 'M'\nINTERSECT\nSELECT DISTINCT residence\nFROM player\nWHERE gender = 'F'"}
{"answer":"SELECT COUNT(*) FROM phone WHERE Company_name = \"Nokia Corporation\"","question":"How many phone hardware models are produced by the company named \"Nokia Corporation\"?","context":"CREATE TABLE phone (Company_name VARCHAR)","generation":"SELECT COUNT(*)\nFROM phone\nWHERE Company_name = 'Nokia Corporation'"}
{"answer":"SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the most common participant type?","context":"CREATE TABLE participants (participant_type_code VARCHAR)","generation":"SELECT participant_type_code\nFROM participants\nGROUP BY participant_type_code\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T2.address_id, T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1","question":"What are the id and zip code of the address with the highest monthly rental?","context":"CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)","generation":"SELECT Addresses.zip_postcode, Addresses.address_id FROM Addresses INNER JOIN Student_Addresses ON Addresses.address_id = Student_Addresses.address_id ORDER BY Addresses.zip_postcode DESC LIMIT 1"}
{"answer":"SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001","question":"What are the degrees conferred in \"San Francisco State University\" in 2001.","context":"CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)","generation":"SELECT degrees.Id\nFROM degrees\nJOIN campuses ON degrees.CampusId = campuses.Id\nWHERE campuses.Name = 'San Francisco State University'\nAND degrees.GraduationYear = 2001"}
{"answer":"SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1","question":"Which campus has the most degrees conferred in all times?","context":"CREATE TABLE degrees (campus VARCHAR, degrees INTEGER)","generation":"SELECT campus\nFROM degrees\nORDER BY degrees DESC\nLIMIT 1"}
{"answer":"SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id","question":"Show the season, the player, and the name of the team that players belong to.","context":"CREATE TABLE team (Name VARCHAR, Team_id VARCHAR); CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Team VARCHAR)","generation":"SELECT Season, Player, Team.Name\nFROM match_season\nJOIN team ON match_season.Team = team.Team_id"}
{"answer":"SELECT COUNT(*) FROM Has_allergy WHERE Allergy = \"Cat\"","question":"How many students have cat allergies?","context":"CREATE TABLE Has_allergy (Allergy VARCHAR)","generation":"SELECT COUNT(*)\nFROM Has_allergy\nWHERE Allergy = 'cat'"}
{"answer":"SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC","question":"Find all information about student addresses, and sort by monthly rental in descending order.","context":"CREATE TABLE Student_Addresses (monthly_rental VARCHAR)","generation":"SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC"}
{"answer":"SELECT T1.datetime_detention_start, datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = \"Schultz\"","question":"Find the start and end dates of detentions of teachers with last name \"Schultz\".","context":"CREATE TABLE Detention (datetime_detention_start VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)","generation":"SELECT datetime_detention_start, datetime_detention_end\nFROM Detention\nJOIN Teachers\nON Detention.teacher_id = Teachers.teacher_id\nWHERE Teachers.last_name = 'Schultz'"}
{"answer":"SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING COUNT(*) > 60","question":"Find the names of rooms that have been reserved for more than 60 times.","context":"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)","generation":"SELECT Rooms.roomName\nFROM Rooms\nJOIN Reservations\nON Rooms.RoomId = Reservations.Room\nGROUP BY Rooms.roomName\nHAVING COUNT(Reservations.Room) > 60"}
{"answer":"SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = \"USA\" AND t2.authorder = 2 AND t1.lname = \"Turon\"","question":"Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)","generation":"SELECT title\nFROM papers\nJOIN authorship ON papers.paperid = authorship.paperid\nJOIN authors ON authorship.authid = authors.authid\nJOIN inst ON authorship.instid = inst.instid\nWHERE inst.country = 'USA'\nAND authors.lname = 'Turon'\nAND authorship.authorder = 2"}
{"answer":"SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","question":"What are the id and name of the stadium where the most injury accidents happened?","context":"CREATE TABLE stadium (id VARCHAR, name VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR)","generation":"SELECT s.id, s.name\nFROM stadium s\nJOIN game g ON s.id = g.stadium_id\nJOIN injury_accident ia ON g.id = ia.game_id\nGROUP BY s.id, s.name\nORDER BY COUNT(ia.game_id) DESC\nLIMIT 1"}
{"answer":"SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\"","question":"What is the booking status code of the apartment with apartment number \"Suite 634\"?","context":"CREATE TABLE Apartments (apt_id VARCHAR, apt_number VARCHAR); CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR, apt_id VARCHAR)","generation":"SELECT booking_status_code\nFROM Apartment_Bookings\nWHERE apt_id = (SELECT apt_id\n                FROM Apartments\n                WHERE apt_number = 'Suite 634')"}
{"answer":"SELECT COUNT(DISTINCT advisor) FROM Student","question":"How many different advisors are listed?","context":"CREATE TABLE Student (advisor VARCHAR)","generation":"SELECT COUNT(DISTINCT advisor)\nFROM Student"}
{"answer":"SELECT T2.name, AVG(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name","question":"What is the average rating star for each reviewer?","context":"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (stars INTEGER, rID VARCHAR)","generation":"SELECT r.name, AVG(r.stars) AS avg_stars\nFROM Reviewer r\nJOIN Rating rt ON r.rID = rt.rID\nGROUP BY r.name"}
{"answer":"SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'","question":"List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.","context":"CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)","generation":"SELECT medicine.name, medicine.trade_name\nFROM medicine\nJOIN medicine_enzyme_interaction ON medicine.id = medicine_enzyme_interaction.medicine_id\nWHERE medicine_enzyme_interaction.medicine_id IN (\n    SELECT medicine_id\n    FROM medicine_enzyme_interaction\n    WHERE enzyme_interaction_type = 'inhibitor'\n)\nAND medicine_enzyme_interaction.medicine_id IN (\n    SELECT medicine_id\n    FROM medicine_enzyme_interaction\n    WHERE enzyme_interaction_type = 'activator'\n)"}
{"answer":"SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5","question":"What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?","context":"CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)","generation":"SELECT DISTINCT drivers.forename, drivers.surname, drivers.driverid\nFROM drivers\nJOIN results ON drivers.driverid = results.driverid\nJOIN pitstops ON drivers.driverid = pitstops.driverid\nWHERE (SELECT COUNT(driverid) FROM pitstops WHERE pitstops.driverid = drivers.driverid) > 8\nOR (SELECT COUNT(driverid) FROM results WHERE results.driverid = drivers.driverid) > 5"}
{"answer":"SELECT COUNT(*) FROM people WHERE NOT people_id IN (SELECT People_ID FROM body_builder)","question":"How many persons are not body builders?","context":"CREATE TABLE body_builder (people_id VARCHAR, People_ID VARCHAR); CREATE TABLE people (people_id VARCHAR, People_ID VARCHAR)","generation":"SELECT COUNT(*)\nFROM people\nWHERE people_id NOT IN (SELECT people_id\n                        FROM body_builder)"}
{"answer":"SELECT Player, Years_Played FROM player","question":"Show the players and the years played.","context":"CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR)","generation":"SELECT player, years_played\nFROM player"}
{"answer":"SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING COUNT(*) > 30","question":"Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.","context":"CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)","generation":"SELECT first_name, last_name\nFROM actor\nJOIN film_actor ON actor.actor_id = film_actor.actor_id\nGROUP BY first_name, last_name\nHAVING COUNT(*) > 30"}
{"answer":"SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID","question":"Show the names of editors and the theme of journals for which they serve on committees.","context":"CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)","generation":"SELECT editor.Name, journal.Theme\nFROM editor\nJOIN journal_committee ON editor.Editor_ID = journal_committee.Editor_ID\nJOIN journal ON journal_committee.Journal_ID = journal.Journal_ID"}
{"answer":"SELECT POSITION FROM player GROUP BY name HAVING AVG(Points) >= 20","question":"List the position of players with average number of points scored by players of that position bigger than 20.","context":"CREATE TABLE player (POSITION VARCHAR, name VARCHAR, Points INTEGER)","generation":"SELECT POSITION\nFROM player\nWHERE Points > (SELECT AVG(Points) FROM player WHERE POSITION = player.POSITION)"}
{"answer":"SELECT Ref_Shipping_Agents.shipping_agent_name, COUNT(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY COUNT(Documents.document_id) DESC LIMIT 1","question":"Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.","context":"CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)","generation":"SELECT Ref_Shipping_Agents.Id, COUNT(Documents.Id)\nFROM Ref_Shipping_Agents\nLEFT JOIN Documents ON Ref_Shipping_Agents.Id = Documents.Id\nGROUP BY Ref_Shipping_Agents.Id\nORDER BY COUNT(Documents.Id) DESC\nLIMIT 1"}
{"answer":"SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1","question":"Find the state which has the most number of customers.","context":"CREATE TABLE bank (state VARCHAR, no_of_customers INTEGER)","generation":"SELECT state\nFROM bank\nORDER BY no_of_customers DESC\nLIMIT 1"}
{"answer":"SELECT COUNT(*) FROM inst","question":"How many institutions are there?","context":"CREATE TABLE inst (Id VARCHAR)","generation":"SELECT COUNT(*) FROM inst"}
{"answer":"SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = \"Duplex\"","question":"What are the booking start and end dates of the apartments with type code \"Duplex\"?","context":"CREATE TABLE Apartments (apt_id VARCHAR, apt_type_code VARCHAR); CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR)","generation":"SELECT booking_start_date, booking_end_date\nFROM Apartment_Bookings\nJOIN Apartments ON Apartment_Bookings.apt_id = Apartments.apt_id\nWHERE Apartments.apt_type_code = 'Duplex'"}
{"answer":"SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1","question":"What is the department name of the students with lowest gpa belongs to?","context":"CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)","generation":"SELECT department.dept_name\nFROM student\nJOIN department ON student.dept_code = department.dept_code\nWHERE student.gpa = (SELECT MIN(gpa) FROM student)"}
{"answer":"SELECT COUNT(*) FROM election","question":"How many elections are there?","context":"CREATE TABLE election (Id VARCHAR)","generation":"SELECT COUNT(*) FROM election"}
{"answer":"SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1","question":"Please show the team that has the most number of technicians.","context":"CREATE TABLE technician (Team VARCHAR)","generation":"SELECT Team\nFROM technician\nORDER BY COUNT(*) DESC\nLIMIT 1"}
{"answer":"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"","question":"Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.","context":"CREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)","generation":"SELECT InvoiceDate\nFROM INVOICE\nJOIN CUSTOMER ON INVOICE.CustomerId = CUSTOMER.CustomerId\nWHERE CUSTOMER.FirstName = 'Astrid' AND CUSTOMER.LastName = 'Gruber'"}
{"answer":"SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating","question":"Show names and seatings, ordered by seating for all tracks opened after 2000.","context":"CREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)","generation":"SELECT name, seating\nFROM track\nWHERE year_opened > 2000\nORDER BY seating"}
{"answer":"SELECT COUNT(*), sex FROM employee WHERE salary < 50000 GROUP BY sex","question":"Find the number of employees of each gender whose salary is lower than 50000.","context":"CREATE TABLE employee (sex VARCHAR, salary INTEGER)","generation":"SELECT sex, COUNT(*)\nFROM employee\nWHERE salary < 50000\nGROUP BY sex"}
{"answer":"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname, t1.lname ORDER BY COUNT(*) DESC LIMIT 1","question":"What is the last name of the author that has published the most papers?","context":"CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR)","generation":"SELECT lname\nFROM authors\nWHERE authid IN (\n    SELECT authid\n    FROM authorship\n    GROUP BY authid\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"}
{"answer":"SELECT * FROM people","question":"List all info about all people.","context":"CREATE TABLE people (Id VARCHAR)","generation":"SELECT * FROM people"}
{"answer":"SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\"","question":"Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".","context":"CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)","generation":"SELECT DISTINCT apt_number\nFROM Apartments\nJOIN Apartment_Bookings\nON Apartments.apt_id = Apartment_Bookings.apt_id\nWHERE booking_status_code = 'Confirmed'"}
{"answer":"SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID","question":"Show names of musicals and the number of actors who have appeared in the musicals.","context":"CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)","generation":"SELECT musical.name, COUNT(actor.musical_id)\nFROM actor\nJOIN musical ON actor.musical_id = musical.musical_id\nGROUP BY musical.name\n[\/SQL]"}
{"answer":"SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*)","question":"Please show the different statuses, ordered by the number of cities that have each.","context":"CREATE TABLE city (Status VARCHAR)","generation":"SELECT Status, COUNT(*) AS \"Number of Cities\"\nFROM city\nGROUP BY Status\nORDER BY COUNT(*) DESC"}
{"answer":"SELECT text FROM tweets ORDER BY createdate","question":"List the text of all tweets in the order of date.","context":"CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)","generation":"SELECT text\nFROM tweets\nORDER BY createdate"}
{"answer":"SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname","question":"Find the first names and offices of all professors sorted by alphabetical order of their first name.","context":"CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)","generation":"SELECT emp_fname, prof_office\nFROM professor\nJOIN employee ON professor.emp_num = employee.emp_num\nORDER BY emp_fname"}
{"answer":"SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title","question":"List every album whose title starts with A in alphabetical order.","context":"CREATE TABLE albums (title VARCHAR)","generation":"SELECT title\nFROM albums\nWHERE title LIKE 'A%'\nORDER BY title"}
{"answer":"SELECT order_id, COUNT(*) FROM Invoices GROUP BY order_id","question":"Show the order ids and the number of invoices for each order.","context":"CREATE TABLE Invoices (order_id VARCHAR)","generation":"SELECT order_id, COUNT(*)\nFROM Invoices\nGROUP BY order_id"}
{"answer":"SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10","question":"A list of the top 10 countries by average invoice size. List country name and average invoice size.","context":"CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)","generation":"SELECT billing_country, AVG(total) AS average_invoice_size\nFROM invoices\nGROUP BY billing_country\nORDER BY average_invoice_size DESC\nLIMIT 10"}
