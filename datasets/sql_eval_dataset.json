[
    {
        "question": "Which authors have written publications in both the domain \"Machine Learning\" and the domain \"Data Science\"?",
        "answer": "SELECT {author.name,author.aid} FROM author WHERE author.aid IN (SELECT domain_author.aid FROM domain_author WHERE domain_author.did IN (SELECT domain.did FROM DOMAIN WHERE domain.name IN ('Machine Learning', 'Data Science') ) GROUP BY 1 HAVING COUNT(DISTINCT domain_author.did) = 2);",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "group_by"
    },
    {
        "question": "What is the total number of citations received by each author?",
        "answer": "SELECT {author.name, author.aid}, sum(publication.citation_num) AS total_citations FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid GROUP BY {} ORDER BY total_citations DESC NULLS LAST;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "group_by"
    },
    {
        "question": "What is the total number of publications published in each year?",
        "answer": "SELECT publication.year, COUNT(DISTINCT publication.pid) AS total_publications FROM publication GROUP BY publication.year ORDER BY publication.year;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "group_by"
    },
    {
        "question": "What is the average number of references cited by publications in each domain name?",
        "answer": "SELECT {domain.name,domain.did}, AVG(publication.reference_num) AS average_references FROM domain_publication JOIN publication ON domain_publication.pid = publication.pid JOIN domain ON domain.did = domain_publication.did GROUP BY {};",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "group_by"
    },
    {
        "question": "What is the average number of citations received by publications in each year?",
        "answer": "SELECT publication.year, AVG(publication.citation_num) AS average_citations FROM publication GROUP BY publication.year ORDER BY publication.year NULLS LAST;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "group_by"
    },
    {
        "question": "What is the title of the publication that has received the highest number of citations?",
        "answer": "SELECT publication.title FROM publication ORDER BY publication.citation_num DESC NULLS LAST LIMIT 1;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "order_by"
    },
    {
        "question": "What are the top 5 domains with the highest number of authors associated with them?",
        "answer": "SELECT {d.name, d.did}, COUNT(DISTINCT a.aid) AS author_count FROM author a JOIN domain_author da ON a.aid = da.aid JOIN domain d ON da.did = d.did GROUP BY {} ORDER BY author_count DESC LIMIT 5;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "order_by"
    },
    {
        "question": "What are the top 3 titles of the publications that have the highest number of references cited, ordered by the number of references cited in descending order?",
        "answer": "SELECT publication.title FROM publication ORDER BY publication.reference_num DESC LIMIT 3;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "order_by"
    },
    {
        "question": "What are the top 3 publications with the highest number of citations?",
        "answer": "SELECT {publication.title, publication.pid}, publication.citation_num FROM publication ORDER BY publication.citation_num DESC LIMIT 3;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "order_by"
    },
    {
        "question": "What are the titles of all publications ordered alphabetically?",
        "answer": "SELECT DISTINCT publication.title FROM publication ORDER BY publication.title ASC NULLS LAST;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "order_by"
    },
    {
        "question": "What is the ratio of publications to authors in the database?",
        "answer": "SELECT CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT author.aid), 0) AS publication_to_author_ratio FROM publication, author;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of publications presented in conferences to publications published in journals?",
        "answer": "SELECT CAST(COUNT(DISTINCT CASE WHEN cid IS NOT NULL THEN pid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN jid IS NOT NULL THEN pid END), 0) AS ratio FROM publication;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of the total number of publications to the total number of keywords within each domain ID? Show all domain IDs.",
        "answer": "SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_publication LEFT JOIN domain_keyword ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT domain_publication.did, CAST(COUNT(DISTINCT domain_publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT domain_keyword.kid), 0) AS publication_to_keyword_ratio FROM domain_keyword LEFT JOIN domain_publication ON domain_publication.did = domain_keyword.did GROUP BY domain_publication.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;SELECT d.did, COALESCE(CAST(COUNT(DISTINCT dp.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT dk.kid), 0), 0) AS publication_to_keyword_ratio FROM domain d LEFT JOIN domain_publication dp ON d.did = dp.did LEFT JOIN domain_keyword dk ON d.did = dk.did GROUP BY d.did ORDER BY publication_to_keyword_ratio DESC NULLS LAST;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "ratio"
    },
    {
        "question": "How does the ratio of publications to journals change over the years? Return the annual numbers of publications and journals as well.",
        "answer": "SELECT publication.year, COUNT(DISTINCT publication.pid) AS num_publications, COUNT(DISTINCT publication.jid) AS num_journals, CAST(COUNT(DISTINCT publication.pid) AS FLOAT) / NULLIF(COUNT(DISTINCT publication.jid), 0) AS ratio FROM publication GROUP BY publication.year ORDER BY publication.year;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "ratio"
    },
    {
        "question": "How does the ratio of authors to organizations differ by continent?",
        "answer": "SELECT organization.continent, COUNT(DISTINCT author.aid)::float / NULLIF(COUNT(DISTINCT organization.oid), 0) AS ratio FROM organization LEFT JOIN author ON author.oid = organization.oid GROUP BY organization.continent ORDER BY ratio DESC NULLS LAST;WITH author_counts AS (SELECT o.continent, COUNT(DISTINCT a.aid) AS author_count FROM author AS a JOIN organization AS o ON a.oid = o.oid GROUP BY o.continent), organization_counts AS (SELECT o.continent, COUNT(DISTINCT o.oid) AS organization_count FROM organization AS o GROUP BY o.continent) SELECT ac.continent, CAST(ac.author_count AS FLOAT) / NULLIF(oc.organization_count, 0) AS author_to_organization_ratio FROM author_counts AS ac JOIN organization_counts AS oc ON ac.continent = oc.continent ORDER BY author_to_organization_ratio DESC;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "ratio"
    },
    {
        "question": "Which author had the most publications in the year 2021 and how many publications did he/she have that year?",
        "answer": "SELECT {author.name, author.aid}, COUNT(publication.pid) AS publication_count FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE publication.year = 2021 GROUP BY {} ORDER BY publication_count DESC NULLS LAST LIMIT 1;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of publications presented in each conference?",
        "answer": "SELECT {conference.name, conference.cid}, COUNT(publication.pid) AS total_publications FROM publication JOIN conference ON publication.cid = conference.cid GROUP BY {} ORDER BY total_publications DESC;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of publications in each journal, ordered by the number of publications in descending order?",
        "answer": "SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM publication JOIN journal ON publication.jid=journal.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;SELECT {journal.name, journal.jid}, COUNT(publication.pid) AS total_publications FROM journal LEFT JOIN publication ON journal.jid=publication.jid GROUP BY {} ORDER BY total_publications DESC NULLS LAST;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "table_join"
    },
    {
        "question": "How many publications were presented at each conference, ordered by the number of publications in descending order? Give the names of the conferences and their corresponding number of publications.",
        "answer": "SELECT conference.name, COUNT(publication.pid) AS num_publications FROM publication JOIN conference ON publication.cid=conference.cid GROUP BY conference.name, conference.cid ORDER BY num_publications DESC NULLS LAST;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "table_join"
    },
    {
        "question": "How many publications were published in journals whose names start with the letter \"J\"?",
        "answer": "SELECT count(DISTINCT publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name ilike 'J%'",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "table_join"
    },
    {
        "question": "Which organizations have authors who have written publications in the domain \"Machine Learning\"?",
        "answer": "SELECT DISTINCT {organization.name, organization.oid} FROM organization JOIN author ON organization.oid = author.oid JOIN writes ON author.aid = writes.aid JOIN domain_publication ON writes.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Machine Learning';",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "instruct"
    },
    {
        "question": "Which authors belong to the same domain as Martin?",
        "answer": "SELECT DISTINCT {a2.name, a2.aid} FROM author a1 JOIN domain_author da1 ON a1.aid = da1.aid JOIN domain_author da2 ON da1.did = da2.did JOIN author a2 ON da2.aid = a2.aid WHERE LOWER(a1.name) ILIKE '%martin%';",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "instruct"
    },
    {
        "question": "Which authors are not part of any organization?",
        "answer": "SELECT DISTINCT {name, aid} FROM author WHERE oid IS NULL",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "instruct"
    },
    {
        "question": "What are the publications written by authors from the 'Sociology' domain and presented at conferences in the year 2020?",
        "answer": "SELECT DISTINCT {publication.title, publication.pid} FROM DOMAIN JOIN domain_author ON domain.did = domain_author.did JOIN writes ON domain_author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_conference ON domain.did = domain_conference.did WHERE domain.name ILIKE '%Sociology%' AND publication.year = 2020 AND publication.cid = domain_conference.cid;",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "instruct"
    },
    {
        "question": "What are the names of the authors who have written publications in the domain \"Computer Science\"?",
        "answer": "SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name ilike '%computer%science%';",
        "db_name": "academic",
        "context": "CREATE TABLE public.author (aid BIGINT NOT NULL, homepage TEXT, name TEXT, oid BIGINT);\nCREATE TABLE public.cite (cited BIGINT, citing BIGINT);\nCREATE TABLE public.conference (cid BIGINT NOT NULL, homepage TEXT, name TEXT);\nCREATE TABLE public.domain (did BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.domain_author (aid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_conference (cid BIGINT NOT NULL, did BIGINT NOT NULL);\nCREATE TABLE public.domain_journal (did BIGINT NOT NULL, jid BIGINT NOT NULL);\nCREATE TABLE public.domain_keyword (did BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.domain_publication (did BIGINT NOT NULL, pid BIGINT NOT NULL);\nCREATE TABLE public.journal (homepage TEXT, jid BIGINT NOT NULL, name TEXT);\nCREATE TABLE public.keyword (keyword TEXT, kid BIGINT NOT NULL);\nCREATE TABLE public.organization (continent TEXT, homepage TEXT, name TEXT, oid BIGINT NOT NULL);\nCREATE TABLE public.publication (abstract TEXT, cid BIGINT, citation_num BIGINT, jid BIGINT, pid BIGINT NOT NULL, reference_num BIGINT, title TEXT, year BIGINT);\nCREATE TABLE public.publication_keyword (pid BIGINT NOT NULL, kid BIGINT NOT NULL);\nCREATE TABLE public.writes (aid BIGINT NOT NULL, pid BIGINT NOT NULL);",
        "query_category": "instruct"
    },
    {
        "question": "What month were most students admitted? Return the no. of students and the month as a date",
        "answer": "SELECT date_trunc('month', s.admit_term) AS month, COUNT(*) AS total_students FROM student s GROUP BY MONTH ORDER BY total_students DESC LIMIT 1;SELECT TO_CHAR(DATE_TRUNC('month', s.admit_term), 'YYYY-MM') AS month, COUNT(*) AS total_students FROM student s GROUP BY month ORDER BY total_students DESC LIMIT 1;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "What's the average predicted time to graduation since admission in no. of days?",
        "answer": "SELECT avg(predicted_graduation_semester - admit_term) AS average_predicted_time_to_graduation FROM student;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "How many students were predicted to graduate in the last 10 years?",
        "answer": "SELECT count(*) AS num_students_graduated FROM student WHERE predicted_graduation_semester >= DATE_TRUNC('year', CURRENT_DATE) - interval '10 year';",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "How long has it been in days since the last admitted student? Give the answer as an integer.",
        "answer": "SELECT CURRENT_DATE - max(admit_term) AS duration_since_last_admitted_student FROM student;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "Return the course id's that are offered in either semesters 1 or 2 and ends before 1pm and had an instructor on thursday.",
        "answer": "SELECT DISTINCT co.course_id FROM course_offering co JOIN offering_instructor oi ON co.offering_id = oi.offering_id WHERE (co.semester = 1 OR co.semester = 2) AND co.end_time < '13:00:00' AND co.thursday IS NOT NULL;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "What is the total number of students who found the instructor to be hilarious per course id?",
        "answer": "SELECT course_tags_count.course_id, SUM(course_tags_count.hilarious) AS total_hilarious FROM course_tags_count GROUP BY course_tags_count.course_id;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "What is the average clarity score for each instructor who taught a course?",
        "answer": "SELECT {i.name, i.instructor_id}, AVG(c.clarity_score) FROM course c JOIN course_offering co ON c.course_id = co.course_id JOIN offering_instructor oi ON co.offering_id = oi.offering_id JOIN instructor i ON oi.instructor_id = i.instructor_id GROUP BY {};",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "How many course offerings have a final exam and how many do not?",
        "answer": "SELECT course_offering.has_final_exam, COUNT(offering_id) AS num_courses FROM course_offering GROUP BY course_offering.has_final_exam;SELECT COUNT(CASE WHEN co.has_final_exam THEN 1 END) AS num_with_final_exam, COUNT(CASE WHEN NOT co.has_final_exam THEN 1 END) AS num_without_final_exam FROM course_offering co;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "How many courses does each department offer?",
        "answer": "SELECT course.department, COUNT(DISTINCT course.course_id) AS num_courses FROM course GROUP BY course.department ORDER BY num_courses DESC NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "How many courses are offered for each semester id?",
        "answer": "SELECT course_offering.semester, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM course_offering GROUP BY course_offering.semester ORDER BY course_offering.semester;SELECT semester.semester_id, COUNT(DISTINCT course_offering.course_id) AS num_courses FROM semester LEFT JOIN course_offering ON semester.semester_id = course_offering.semester GROUP BY semester.semester_id;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "Which course has the highest number of enrolled students, and what is the enrollment number?",
        "answer": "SELECT {course.name, course.course_id, course.number}, course.num_enrolled FROM course ORDER BY course.num_enrolled DESC NULLS LAST LIMIT 1;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "What is the total number of students who participated actively for each course id, ordered from highest to lowest participants?",
        "answer": "SELECT course_tags_count.course_id, course_tags_count.participation FROM course_tags_count ORDER BY course_tags_count.participation DESC NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "What is the total number of students enrolled in each course, ordered from highest to lowest?",
        "answer": "SELECT {course.course_id, course.name, course.number}, SUM(course.num_enrolled) AS total_students FROM course GROUP BY {} ORDER BY total_students DESC NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "What is the total number of credits earned by each student, ordered from highest to lowest? Give the student id and the total number of credits.",
        "answer": "SELECT student.student_id, student.total_credit FROM student ORDER BY student.total_credit DESC NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "What is the name of the instructor who has taught the most courses, and how many courses have they taught?",
        "answer": "SELECT instructor.name, count(offering_instructor.offering_id) AS num_courses FROM offering_instructor JOIN instructor ON offering_instructor.instructor_id = instructor.instructor_id GROUP BY instructor.name ORDER BY num_courses DESC LIMIT 1;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "What is the ratio of the total number of students enrolled in courses with exams to the total number of students enrolled in courses without exams?",
        "answer": "SELECT SUM(CASE WHEN c.has_exams THEN c.num_enrolled ELSE 0 END)::FLOAT / SUM(CASE WHEN NOT c.has_exams THEN c.num_enrolled ELSE 0 END) AS ratio FROM course c;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of the number of students who found the grading criteria clear and easy to understand to the number of students who received good feedback from the instructor for each course id?",
        "answer": "SELECT course_tags_count.course_id, CAST(course_tags_count.clear_grading AS FLOAT) / NULLIF(course_tags_count.good_feedback, 0) AS ratio FROM course_tags_count ORDER BY course_tags_count.course_id NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of the number of courses with projects to the number of courses with exams in each semester id?",
        "answer": "SELECT course_offering.semester, CAST(SUM(CASE WHEN course.has_projects THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN course.has_exams THEN 1 ELSE 0 END), 0) AS ratio FROM course JOIN course_offering ON course.course_id = course_offering.course_id GROUP BY course_offering.semester ORDER BY course_offering.semester NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of helpfulness scores to clarity scores for each course ID?",
        "answer": "SELECT course.course_id, CAST(course.helpfulness_score AS FLOAT) / NULLIF(course.clarity_score, 0) AS ratio FROM course;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "How does the ratio of enrolled students to the number of reviews vary across different courses?",
        "answer": "SELECT {course.course_id, course.name, course.number}, CAST(course.num_enrolled AS FLOAT) / NULLIF(course.num_reviews, 0) AS student_review_ratio FROM course ORDER BY student_review_ratio NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "Which courses have been taken by students in the Computer Science program?",
        "answer": "SELECT DISTINCT {course.name, course.course_id, course.number} AS course_name FROM student JOIN student_record ON student.student_id = student_record.student_id JOIN program ON student.program_id = program.program_id JOIN course ON student_record.course_id = course.course_id WHERE program.name ILIKE '%Computer Science%';",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "Which courses have a final project and a final exam?",
        "answer": "SELECT DISTINCT {course.name, course.course_id, course.number} FROM course_offering JOIN course ON course_offering.course_id = course.course_id WHERE course_offering.has_final_project = true AND course_offering.has_final_exam = true;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of students who have taken a course with a final project or exam?",
        "answer": "SELECT COUNT(DISTINCT student_record.student_id) AS total_students FROM student_record JOIN course_offering ON student_record.course_id = course_offering.course_id WHERE course_offering.has_final_project = true OR course_offering.has_final_exam = true;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of credits earned by students in each program?",
        "answer": "SELECT {program.name, program.program_id}, SUM(student.total_credit) AS total_credits FROM student JOIN program ON student.program_id = program.program_id GROUP BY {};",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "How many students have declared a major in each program?",
        "answer": "SELECT {program.name, program.program_id}, COUNT(student.student_id) AS number_of_students FROM student JOIN program ON student.program_id = program.program_id WHERE student.declare_major IS NOT NULL GROUP BY {} ORDER BY number_of_students DESC;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "Which students have declared a minor program? List their firstname and lastname. Order the results by the students' last names.",
        "answer": "SELECT student.firstname, student.lastname FROM student WHERE student.minor IS NOT NULL ORDER BY student.lastname NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "What is the average GPA of students in the program mathematics?",
        "answer": "SELECT AVG(student.total_gpa) FROM student JOIN program ON student.program_id = program.program_id WHERE LOWER(program.name) = 'mathematics';",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "What are the names of all the courses offered by the department of Computer Science?",
        "answer": "SELECT course.name FROM course WHERE course.department ILIKE '%Computer Science%' ORDER BY course.name ASC NULLS LAST;",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "What are the easiness scores for courses in the \"Computer Science\" department? Show both courses and scores.",
        "answer": "SELECT {course.name, course.course_id, course.number}, course.easiness_score FROM course WHERE course.department = 'Computer Science';",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "Return the student IDs who have taken an in-person course and have gotten a grade of A or C.",
        "answer": "SELECT DISTINCT student_id FROM student_record WHERE student_record.how = 'in-person' AND student_record.grade IN ('A', 'C');",
        "db_name": "advising",
        "context": "CREATE TABLE public.area (course_id BIGINT, area TEXT);\nCREATE TABLE public.comment_instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, student_id BIGINT DEFAULT '0'::BIGINT NOT NULL, score BIGINT, comment_text TEXT);\nCREATE TABLE public.course (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, department TEXT, number TEXT, credits TEXT, advisory_requirement TEXT, enforced_requirement TEXT, description TEXT, num_semesters BIGINT, num_enrolled BIGINT, has_discussion BOOLEAN, has_lab BOOLEAN, has_projects BOOLEAN, has_exams BOOLEAN, num_reviews BIGINT, clarity_score BIGINT, easiness_score BIGINT, helpfulness_score BIGINT);\nCREATE TABLE public.course_offering (offering_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT, semester BIGINT, section_number BIGINT, start_time TIME, end_time TIME, monday TEXT, tuesday TEXT, wednesday TEXT, thursday TEXT, friday TEXT, saturday TEXT, sunday TEXT, has_final_project BOOLEAN, has_final_exam BOOLEAN, textbook TEXT, class_address TEXT, allow_audit TEXT DEFAULT 'false'::TEXT);\nCREATE TABLE public.course_prerequisite (pre_course_id BIGINT NOT NULL, course_id BIGINT NOT NULL);\nCREATE TABLE public.course_tags_count (course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, clear_grading BIGINT DEFAULT '0'::BIGINT, pop_quiz BIGINT DEFAULT '0'::BIGINT, group_projects BIGINT DEFAULT '0'::BIGINT, inspirational BIGINT DEFAULT '0'::BIGINT, long_lectures BIGINT DEFAULT '0'::BIGINT, extra_credit BIGINT DEFAULT '0'::BIGINT, few_tests BIGINT DEFAULT '0'::BIGINT, good_feedback BIGINT DEFAULT '0'::BIGINT, tough_tests BIGINT DEFAULT '0'::BIGINT, heavy_papers BIGINT DEFAULT '0'::BIGINT, cares_for_students BIGINT DEFAULT '0'::BIGINT, heavy_assignments BIGINT DEFAULT '0'::BIGINT, respected BIGINT DEFAULT '0'::BIGINT, participation BIGINT DEFAULT '0'::BIGINT, heavy_reading BIGINT DEFAULT '0'::BIGINT, tough_grader BIGINT DEFAULT '0'::BIGINT, hilarious BIGINT DEFAULT '0'::BIGINT, would_take_again BIGINT DEFAULT '0'::BIGINT, good_lecture BIGINT DEFAULT '0'::BIGINT, no_skip BIGINT DEFAULT '0'::BIGINT);\nCREATE TABLE public.instructor (instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, name TEXT, uniqname TEXT);\nCREATE TABLE public.offering_instructor (offering_instructor_id BIGINT DEFAULT '0'::BIGINT NOT NULL, offering_id BIGINT, instructor_id BIGINT);\nCREATE TABLE public.program (program_id BIGINT NOT NULL, name TEXT, college TEXT, introduction TEXT);\nCREATE TABLE public.program_course (program_id BIGINT DEFAULT '0'::BIGINT NOT NULL, course_id BIGINT DEFAULT '0'::BIGINT NOT NULL, workload BIGINT, category TEXT DEFAULT ''::TEXT NOT NULL);\nCREATE TABLE public.program_requirement (program_id BIGINT NOT NULL, category TEXT NOT NULL, min_credit BIGINT, additional_req TEXT);\nCREATE TABLE public.semester (semester_id BIGINT NOT NULL, semester TEXT, year BIGINT);\nCREATE TABLE public.student (student_id BIGINT NOT NULL, lastname TEXT, firstname TEXT, program_id BIGINT, declare_major TEXT, total_credit BIGINT, total_gpa NUMERIC, entered_as TEXT DEFAULT 'firstyear'::TEXT, admit_term DATE, predicted_graduation_semester DATE, degree TEXT, minor TEXT, internship TEXT);\nCREATE TABLE public.student_record (student_id BIGINT NOT NULL, course_id BIGINT NOT NULL, semester BIGINT NOT NULL, grade TEXT, how TEXT, transfer_source TEXT, earn_credit TEXT DEFAULT 'y'::TEXT NOT NULL, repeat_term TEXT, test_id TEXT, offering_id BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "Which flight has the shortest duration between departure and arrival times? Convert to integer minutes.",
        "answer": "SELECT {flight.flight_number, flight.flight_id}, (arrival_time - departure_time) / 60 AS duration_minutes FROM flight ORDER BY duration_minutes LIMIT 1;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "What's the average duration between departure and arrival times minus 34 minutes? Convert from UNIX to regular datetime, and return the answer in minutes",
        "answer": "SELECT avg(to_timestamp(arrival_time) - to_timestamp(departure_time) - interval '34 minutes') AS average_duration FROM flight;SELECT AVG(arrival_time - departure_time)/60 - 34 AS average_duration FROM flight;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "Count the number of flight departures for each month?",
        "answer": "SELECT month.month_name, count(*) AS departure_count FROM flight JOIN month ON extract(MONTH FROM to_timestamp(flight.departure_time)) = month.month_number GROUP BY month.month_name, month.month_number ORDER BY month.month_number;SELECT date_trunc('month', to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY MONTH ORDER BY MONTH;SELECT EXTRACT(MONTH FROM to_timestamp(flight.departure_time)) AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;SELECT TO_CHAR(TO_TIMESTAMP(flight.departure_time), 'YYYY-MM') AS month, COUNT(*) AS num_departures FROM flight GROUP BY month ORDER BY month;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "What's the earliest flight departure time in the day in HH:MM?",
        "answer": "SELECT to_char(to_timestamp(departure_time)::TIME, 'HH24:MI') AS earliest_departure_time FROM flight ORDER BY earliest_departure_time LIMIT 1;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "What's the absolute difference in time in days between today and the earliest flight departure? Give the answer as an integer.",
        "answer": "SELECT date_part('day', CURRENT_DATE - to_timestamp(departure_time)) AS difference_in_days FROM flight ORDER BY departure_time LIMIT 1;SELECT (CURRENT_DATE - TO_TIMESTAMP(MIN(f.departure_time))) AS days_difference FROM flight f;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "date_functions"
    },
    {
        "question": "What is the total cost of round-trip fares for each airline code?",
        "answer": "SELECT fare.fare_airline, SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare GROUP BY fare.fare_airline ORDER BY total_round_trip_cost DESC;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "What is the average cost of round-trip fares from Los Angeles (LAX) to Chicago (ORD) for each airline, sorted in descending order by average cost?",
        "answer": "SELECT fare.fare_airline, AVG(fare.round_trip_cost) AS average_cost FROM fare WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY fare.fare_airline ORDER BY average_cost DESC NULLS LAST;SELECT airline.airline_name, AVG(fare.round_trip_cost) AS avg_round_trip_cost FROM fare JOIN airline ON fare.fare_airline = airline.airline_code WHERE fare.from_airport = 'LAX' AND fare.to_airport = 'ORD' GROUP BY airline.airline_name ORDER BY avg_round_trip_cost DESC;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "What is the average cost of a one-way trip for each airport pair in the fare table?",
        "answer": "SELECT f.from_airport, f.to_airport, AVG(f.one_direction_cost) AS average_cost FROM fare f GROUP BY f.from_airport, f.to_airport ORDER BY f.from_airport, f.to_airport NULLS LAST;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "How many meals are served in each compartment, sorted by the number of meals in descending order?",
        "answer": "SELECT food_service.compartment, COUNT(food_service.meal_number) AS number_of_meals FROM food_service GROUP BY food_service.compartment ORDER BY number_of_meals DESC NULLS LAST;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "How many flights depart from each airport code, excluding departures with connections?",
        "answer": "SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport LEFT JOIN flight ON airport.airport_code = flight.from_airport AND flight.connections=0 GROUP BY airport.airport_code;SELECT airport.airport_code, COUNT(flight.from_airport) AS num_departures FROM airport JOIN flight ON airport.airport_code = flight.from_airport WHERE flight.connections=0 GROUP BY airport.airport_code;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "group_by"
    },
    {
        "question": "Which flight ids to Chicago (ORD) have the longest duration from departure to arrival, sorted in ascending order?",
        "answer": "SELECT flight.flight_id, (flight.arrival_time - flight.departure_time) AS duration FROM flight WHERE to_airport = 'ORD' ORDER BY duration ASC NULLS LAST;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "Which airports have the shortest minimum connect time, sorted in ascending order? Show the minimum connect time.",
        "answer": "SELECT {airport.airport_name, airport.airport_code}, airport.minimum_connect_time FROM airport ORDER BY airport.minimum_connect_time ASC NULLS LAST;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "Which aircraft code can carry the highest weight of cargo that any aircraft can carry?",
        "answer": "SELECT aircraft.aircraft_code FROM aircraft ORDER BY pay_load DESC NULLS LAST LIMIT 1;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "What are the top 2 airlines with the most flights?",
        "answer": "SELECT {airline.airline_name, airline.airline_code}, COUNT(flight.flight_id) AS number_of_flights FROM flight JOIN airline ON flight.airline_code = airline.airline_code GROUP BY {} ORDER BY number_of_flights DESC NULLS LAST LIMIT 2;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "What are the aircraft codes for all aircraft with a cruising speed of over 200 mph? sort the aircraft codes in ascending order.",
        "answer": "SELECT aircraft.aircraft_code FROM aircraft WHERE aircraft.cruising_speed > 200 ORDER BY aircraft.aircraft_code ASC NULLS LAST;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "order_by"
    },
    {
        "question": "Calculate the ratio of the maximum range to the maximum payload for each aircraft",
        "answer": "SELECT aircraft.range_miles::float / NULLIF(aircraft.pay_load, 0) AS range_to_payload_ratio FROM aircraft;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of one-way trip costs to round-trip costs for each fare?",
        "answer": "SELECT fare.fare_id, fare.one_direction_cost::float / NULLIF(fare.round_trip_cost, 0) AS cost_ratio FROM fare ORDER BY cost_ratio;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of aircraft capacity to its range in miles for each aircraft code?",
        "answer": "SELECT aircraft.aircraft_code, CAST(aircraft.capacity AS FLOAT) / NULLIF(aircraft.range_miles, 0) AS capacity_range_ratio FROM aircraft;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "What is the proportion of flights with stops out of all flights for each airline code?",
        "answer": "SELECT flight.airline_code, CAST(SUM(CASE WHEN flight.stops > 0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(COUNT(*), 0) AS ratio FROM flight GROUP BY flight.airline_code;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "How does the average ratio of the cruising speed to the payload of an aircraft vary across different aircraft manufacturers?",
        "answer": "SELECT aircraft.manufacturer, AVG(CAST(aircraft.cruising_speed AS FLOAT) / NULLIF(aircraft.pay_load, 0)) AS speed_payload_ratio FROM aircraft GROUP BY aircraft.manufacturer ORDER BY speed_payload_ratio DESC NULLS LAST;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "ratio"
    },
    {
        "question": "Which flights serve meals in first class? Give me the flight id and meal description.",
        "answer": "SELECT flight.flight_id, food_service.meal_description FROM flight JOIN food_service ON flight.meal_code = food_service.meal_code WHERE LOWER(food_service.compartment) LIKE '%first class%';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "Which airlines offer flights with a stopover in Dallas?",
        "answer": "SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight_stop JOIN airport ON flight_stop.stop_airport = airport.airport_code JOIN flight ON flight_stop.flight_id = flight.flight_id JOIN airline ON flight.airline_code = airline.airline_code WHERE airport.airport_location ILIKE '%Dallas%';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "Which airlines offer flights from LAX to ORD?",
        "answer": "SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'LAX' AND flight.to_airport = 'ORD';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "Which airlines offer flights from Chicago (ORD) to New York (JFK), and how many stops do they have, sorted by number of stops in ascending order?",
        "answer": "SELECT {airline.airline_name, airline.airline_code}, flight.stops FROM flight JOIN airline ON flight.airline_code = airline.airline_code WHERE flight.from_airport = 'ORD' AND flight.to_airport = 'JFK' ORDER BY flight.stops NULLS LAST;",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "Which airlines do not have any flights that either depart from/arrive at JFK, or have one or more stops?",
        "answer": "SELECT DISTINCT {airline.airline_name, airline.airline_code} FROM airline WHERE airline.airline_code NOT IN (SELECT flight.airline_code FROM flight WHERE flight.from_airport = 'JFK' OR flight.to_airport = 'JFK' OR flight.stops > 0);",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "table_join"
    },
    {
        "question": "Which state code is Orlando International Airport in?",
        "answer": "SELECT state_code FROM airport WHERE airport_name ILIKE '%Orlando International Airport%';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "Which flights operate on Mondays and Wednesdays? Give me the relevant flight numbers",
        "answer": "SELECT {flight.flight_number, flight.flight_id} FROM flight WHERE LOWER(flight.flight_days) LIKE '%mon%' AND LOWER(flight.flight_days) LIKE '%wed%';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "What is the total cost of all round-trip fares from New York (JFK) to Los Angeles?",
        "answer": "SELECT SUM(fare.round_trip_cost) AS total_round_trip_cost FROM fare WHERE fare.from_airport = 'JFK' AND fare.to_airport = 'LAX';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "What is the minimum amount of time required for a connecting flight at JFK Airport?",
        "answer": "SELECT minimum_connect_time FROM airport WHERE airport_code = 'JFK';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "How many flights require a round-trip to purchase the fare?",
        "answer": "SELECT COUNT(DISTINCT flight_fare.flight_id) FROM flight_fare JOIN fare ON flight_fare.fare_id = fare.fare_id WHERE fare.round_trip_required = 'Yes';",
        "db_name": "atis",
        "context": "CREATE TABLE public.aircraft (aircraft_code TEXT, aircraft_description TEXT, manufacturer TEXT, basic_type TEXT, engines BIGINT, propulsion TEXT, wide_body TEXT, wing_span BIGINT, length BIGINT, weight BIGINT, capacity BIGINT, pay_load BIGINT, cruising_speed BIGINT, range_miles BIGINT, pressurized TEXT);\nCREATE TABLE public.airline (airline_code TEXT, airline_name TEXT, note TEXT);\nCREATE TABLE public.airport (airport_code TEXT, airport_name TEXT, airport_location TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT, minimum_connect_time BIGINT);\nCREATE TABLE public.airport_service (city_code TEXT, airport_code TEXT, miles_distant BIGINT, direction TEXT, minutes_distant BIGINT);\nCREATE TABLE public.city (city_code TEXT, city_name TEXT, state_code TEXT, country_name TEXT, time_zone_code TEXT);\nCREATE TABLE public.class_of_service (booking_class TEXT DEFAULT ''::TEXT NOT NULL, rank BIGINT, class_description TEXT);\nCREATE TABLE public.code_description (code TEXT DEFAULT ''::TEXT NOT NULL, description TEXT);\nCREATE TABLE public.compartment_class (compartment TEXT, class_type TEXT);\nCREATE TABLE public.days (days_code TEXT, day_name TEXT);\nCREATE TABLE public.dual_carrier (main_airline TEXT, low_flight_number BIGINT, high_flight_number BIGINT, dual_airline TEXT, service_name TEXT);\nCREATE TABLE public.equipment_sequence (aircraft_code_sequence TEXT, aircraft_code TEXT);\nCREATE TABLE public.fare (fare_id BIGINT DEFAULT '0'::BIGINT NOT NULL, from_airport TEXT, to_airport TEXT, fare_basis_code TEXT, fare_airline TEXT, restriction_code TEXT, one_direction_cost BIGINT, round_trip_cost BIGINT, round_trip_required TEXT);\nCREATE TABLE public.fare_basis (fare_basis_code TEXT, booking_class TEXT, class_type TEXT, premium TEXT, economy TEXT, discounted TEXT, night TEXT, season TEXT, basis_days TEXT);\nCREATE TABLE public.flight (flight_id BIGINT DEFAULT '0'::BIGINT NOT NULL, flight_days TEXT, from_airport TEXT, to_airport TEXT, departure_time BIGINT, arrival_time BIGINT, airline_flight TEXT, airline_code TEXT, flight_number TEXT, aircraft_code_sequence TEXT, meal_code TEXT, stops BIGINT, connections BIGINT, dual_carrier TEXT, time_elapsed BIGINT);\nCREATE TABLE public.flight_fare (flight_id BIGINT, fare_id BIGINT);\nCREATE TABLE public.flight_leg (flight_id BIGINT, leg_number BIGINT, leg_flight BIGINT);\nCREATE TABLE public.flight_stop (flight_id BIGINT, stop_number BIGINT, stop_days TEXT, stop_airport TEXT, arrival_time BIGINT, arrival_airline TEXT, arrival_flight_number TEXT, departure_time BIGINT, departure_airline TEXT, departure_flight_number TEXT, stop_time BIGINT);\nCREATE TABLE public.food_service (meal_code TEXT, meal_number BIGINT, compartment TEXT, meal_description TEXT);\nCREATE TABLE public.ground_service (city_code TEXT, airport_code TEXT, transport_type TEXT, ground_fare BIGINT);\nCREATE TABLE public.month (month_number BIGINT, month_name TEXT);\nCREATE TABLE public.restriction (restriction_code TEXT, advance_purchase BIGINT, stopovers TEXT, saturday_stay_required TEXT, minimum_stay BIGINT, maximum_stay BIGINT, application TEXT, no_discounts TEXT);\nCREATE TABLE public.state (state_code TEXT, state_name TEXT, country_name TEXT);\nCREATE TABLE public.time_interval (period TEXT, begin_time BIGINT, end_time BIGINT);\nCREATE TABLE public.time_zone (time_zone_code TEXT, time_zone_name TEXT, hours_from_gmt BIGINT);",
        "query_category": "instruct"
    },
    {
        "question": "What is the total population in cities by country?",
        "answer": "SELECT city.country_name, SUM(city.population) AS total_population FROM city GROUP BY city.country_name ORDER BY total_population DESC NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "group_by"
    },
    {
        "question": "What is the average length of rivers in each country?",
        "answer": "SELECT river.country_name, AVG(river.length) AS average_length FROM river GROUP BY river.country_name ORDER BY average_length DESC NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "group_by"
    },
    {
        "question": "How many rivers flow through each country?",
        "answer": "SELECT river.country_name, COUNT(DISTINCT river.river_name) AS number_of_rivers FROM river GROUP BY river.country_name ORDER BY number_of_rivers DESC;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "group_by"
    },
    {
        "question": "How many mountains are there in each country?",
        "answer": "SELECT mountain.country_name, COUNT(mountain.mountain_name) AS number_of_mountains FROM mountain GROUP BY mountain.country_name ORDER BY number_of_mountains DESC;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "group_by"
    },
    {
        "question": "How many lakes are there in each state?",
        "answer": "SELECT lake.state_name, COUNT(lake.lake_name) AS lake_count FROM lake GROUP BY lake.state_name ORDER BY lake_count DESC;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "group_by"
    },
    {
        "question": "Which states have the highest population density in people per square kilometer, ordered from highest to lowest?",
        "answer": "SELECT state.state_name, state.density FROM state ORDER BY state.density DESC NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "order_by"
    },
    {
        "question": "Which lakes have the largest areas in square kilometers, ordered from largest to smallest?",
        "answer": "SELECT lake.lake_name, lake.area FROM lake ORDER BY lake.area DESC NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "order_by"
    },
    {
        "question": "What are the top 5 cities with the highest population? Give both city names and the population.",
        "answer": "SELECT city.city_name, city.population FROM city ORDER BY city.population DESC NULLS LAST LIMIT 5;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "order_by"
    },
    {
        "question": "What are the longest rivers in meters, ordered from longest to shortest?",
        "answer": "SELECT river.river_name, river.length FROM river ORDER BY river.length DESC NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "order_by"
    },
    {
        "question": "What are the highest mountains in meters, ordered from highest to lowest altitude?",
        "answer": "SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain ORDER BY mountain.mountain_altitude DESC NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "order_by"
    },
    {
        "question": "What is the ratio of the population of the United States to the population of California?",
        "answer": "SELECT CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.country_name) LIKE '%united states%') AS FLOAT) / CAST(SUM(NULLIF(state.population, 0)) FILTER (WHERE LOWER(state.state_name) LIKE '%california%') AS FLOAT) AS population_ratio FROM state;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of the length of the Mississippi River to the length of the Rhine River?",
        "answer": "SELECT CAST((SELECT length FROM river WHERE LOWER(river_name) LIKE '%mississippi%') AS FLOAT) / NULLIF((SELECT length FROM river WHERE LOWER(river_name) LIKE '%rhine%'), 0) AS ratio ;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of the altitude of 'Mount Everest' to the altitude of 'Dhaulagiri'? Match strings exactly",
        "answer": "SELECT (CAST(everest.mountain_altitude AS FLOAT) / NULLIF(dhaulagiri.mountain_altitude, 0)) AS altitude_ratio FROM (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Mount Everest') AS everest, (SELECT mountain_altitude FROM mountain WHERE mountain_name = 'Dhaulagiri') AS dhaulagiri;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "ratio"
    },
    {
        "question": "How does the population of each city vary in relation to the population of its corresponding state? Return the city name, and the proportion of each city's population relative to the state.",
        "answer": "SELECT city.city_name, CAST(city.population AS float) / NULLIF(state.population, 0) AS population_ratio FROM city JOIN state ON city.state_name = state.state_name ORDER BY population_ratio DESC NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "ratio"
    },
    {
        "question": "Get the ratio of population per area for each state",
        "answer": "SELECT state_name, population / NULLIF(area, 0) AS population_density FROM state;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "ratio"
    },
    {
        "question": "Which countries have both lakes and rivers?",
        "answer": "SELECT DISTINCT lake.country_name FROM lake JOIN river ON lake.country_name = river.country_name;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "table_join"
    },
    {
        "question": "Which states border the state where lake ontario is?",
        "answer": "SELECT border_info.border FROM border_info JOIN lake ON border_info.state_name = lake.state_name WHERE lake.lake_name ilike '%Ontario%';",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "table_join"
    },
    {
        "question": "Which lakes have a name that starts with \"Lake\"? They should be located in states with an area greater than 1000 square kilometers.",
        "answer": "SELECT lake.lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.area > 1000 AND lake.lake_name ilike 'Lake%' ORDER BY lake.lake_name NULLS LAST;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "table_join"
    },
    {
        "question": "What is the highest point in each state and what is the population density of that state?",
        "answer": "SELECT highlow.state_name, highlow.highest_point, state.density FROM highlow JOIN state ON highlow.state_name = state.state_name;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "table_join"
    },
    {
        "question": "What is the average length of rivers per country in countries with a lake?",
        "answer": "SELECT l.country_name, AVG(r.length) AS average_length FROM river r JOIN lake l ON r.country_name = l.country_name GROUP BY 1;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "table_join"
    },
    {
        "question": "Which states have fewer than a hundred thousand people?",
        "answer": "SELECT state_name FROM state WHERE population < 100000;",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "instruct"
    },
    {
        "question": "Which rivers traverse at least 3 cities/landmarks?",
        "answer": "SELECT river_name FROM river WHERE traverse LIKE '%,%,%';",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "instruct"
    },
    {
        "question": "What are the names and areas of the lakes in Michigan?",
        "answer": "SELECT lake_name, area FROM lake WHERE state_name ILIKE '%Michigan%';",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "instruct"
    },
    {
        "question": "What are the names and altitudes of the mountains in Nepal?",
        "answer": "SELECT mountain_name, mountain_altitude FROM mountain WHERE country_name ILIKE '%Nepal%';",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "instruct"
    },
    {
        "question": "Get the cities in the United States and their population",
        "answer": "SELECT city_name, population FROM city WHERE country_name ILIKE '%United States%';",
        "db_name": "geography",
        "context": "CREATE TABLE public.border_info (state_name text, border text);\n\nCREATE TABLE public.city (city_name text, population bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.highlow (state_name text, highest_elevation text, lowest_point text, highest_point text, lowest_elevation text);\n\nCREATE TABLE public.lake (lake_name text, area double precision, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.mountain (mountain_name text, mountain_altitude bigint, country_name text DEFAULT ''::text NOT NULL, state_name text);\n\nCREATE TABLE public.river (river_name text, length bigint, country_name text DEFAULT ''::text NOT NULL, traverse text);\n\nCREATE TABLE public.state (state_name text, population bigint, area double precision, country_name text DEFAULT ''::text NOT NULL, capital text, density double precision);",
        "query_category": "instruct"
    },
    {
        "question": "What is the total number of restaurants serving each type of food?",
        "answer": "SELECT restaurant.food_type, COUNT(DISTINCT restaurant.id) AS total_number_of_restaurants FROM restaurant GROUP BY restaurant.food_type;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "group_by"
    },
    {
        "question": "What is the total count of restaurants in each city?",
        "answer": "SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS total_count FROM LOCATION GROUP BY location.city_name;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "group_by"
    },
    {
        "question": "What is the average rating of restaurants serving each type of food?",
        "answer": "SELECT restaurant.food_type, AVG(restaurant.rating) AS average_rating FROM restaurant GROUP BY restaurant.food_type ORDER BY average_rating DESC NULLS LAST;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "group_by"
    },
    {
        "question": "How many restaurants serve Italian food in each city?",
        "answer": "SELECT restaurant.city_name, COUNT(*) AS number_of_restaurants FROM restaurant WHERE restaurant.food_type ILIKE '%Italian%' GROUP BY restaurant.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "group_by"
    },
    {
        "question": "How many restaurants are there in each city? Order the results by the number of restaurants in descending order.",
        "answer": "SELECT location.city_name, COUNT(DISTINCT location.restaurant_id) AS number_of_restaurants FROM LOCATION GROUP BY location.city_name ORDER BY number_of_restaurants DESC NULLS LAST;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "group_by"
    },
    {
        "question": "Which street has the most number of restaurants?",
        "answer": "SELECT street_name FROM location GROUP BY street_name ORDER BY COUNT(restaurant_id) DESC LIMIT 1;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "order_by"
    },
    {
        "question": "Which restaurants serve Italian cuisine or are located in New York? Order the results by the restaurant name.",
        "answer": "SELECT name FROM restaurant WHERE food_type ILIKE '%Italian%' OR city_name ILIKE '%New York%' ORDER BY name NULLS LAST;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "order_by"
    },
    {
        "question": "What is the average rating of restaurants in each region? Order the results by the region name.",
        "answer": "SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name GROUP BY geographic.region ORDER BY geographic.region NULLS LAST;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "order_by"
    },
    {
        "question": "What are the names of the top 3 restaurants with the highest ratings?",
        "answer": "SELECT restaurant.name FROM restaurant ORDER BY restaurant.rating DESC NULLS LAST LIMIT 3;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "order_by"
    },
    {
        "question": "List the restaurants starting from the best ratings to the lowest",
        "answer": "SELECT {name, id}, rating FROM restaurant ORDER BY rating DESC;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "order_by"
    },
    {
        "question": "What is the ratio of restaurants with rating > 4.5 to the total number of restaurants in the database.",
        "answer": "SELECT COUNT(*)::float / NULLIF((SELECT COUNT(*) FROM restaurant), 0) AS rating_ratio FROM restaurant WHERE rating > 4.5;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of restaurants with a rating above 4.0 to restaurants with a rating below 4.0 overall?",
        "answer": "SELECT CAST(SUM(CASE WHEN restaurant.rating > 4.0 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN restaurant.rating < 4.0 THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of restaurants with a rating above 4 to restaurants with a rating below 4 in New York?",
        "answer": "SELECT CAST(COUNT(CASE WHEN rating > 4 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN rating < 4 THEN 1 END), 0) AS ratio FROM restaurant WHERE city_name ILIKE 'New York';",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of restaurants serving vegan food to restaurants serving non-vegan food in San Francisco? Match food_type case insensitively",
        "answer": "SELECT CAST(SUM(CASE WHEN LOWER(restaurant.food_type) LIKE '%vegan%' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN LOWER(restaurant.food_type) NOT LIKE '%vegan%' THEN 1 ELSE 0 END), 0) AS ratio FROM restaurant WHERE LOWER(restaurant.city_name) ILIKE '%san francisco%';",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of Italian restaurants out of all restaurants in Los Angeles?",
        "answer": "SELECT CAST(COUNT(CASE WHEN food_type ILIKE '%Italian%' THEN 1 END) AS FLOAT) / NULLIF(COUNT(food_type), 0) AS ratio FROM restaurant WHERE city_name ILIKE '%Los Angeles%';",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "ratio"
    },
    {
        "question": "What cities have more than one restaurants with the same name, and how many of them are there? Return the city name, restaurant name, and restaurant count",
        "answer": "SELECT r.city_name, r.name, COUNT(r.id) AS restaurant_count FROM restaurant r GROUP BY r.city_name, r.name HAVING COUNT(r.id) > 1;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "table_join"
    },
    {
        "question": "What is the average rating of restaurants that serve Mexican food in each city?",
        "answer": "SELECT location.city_name, AVG(restaurant.rating) AS average_rating FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE LOWER(restaurant.food_type) LIKE '%mexican%' GROUP BY location.city_name;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "table_join"
    },
    {
        "question": "What is the average rating of restaurants in each region?",
        "answer": "SELECT geographic.region, AVG(restaurant.rating) AS average_rating FROM geographic JOIN restaurant ON geographic.city_name=restaurant.city_name GROUP BY 1;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "table_join"
    },
    {
        "question": "How many restaurants serve Italian food in each region?",
        "answer": "SELECT geographic.region, COUNT(restaurant.id) AS number_of_restaurants FROM restaurant JOIN geographic ON restaurant.city_name = geographic.city_name WHERE LOWER(restaurant.food_type) LIKE '%italian%' GROUP BY geographic.region ORDER BY number_of_restaurants DESC NULLS LAST;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "table_join"
    },
    {
        "question": "How many restaurants are there in each region?",
        "answer": "SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;SELECT geographic.region, COUNT(DISTINCT restaurant.id) AS number_of_restaurants FROM geographic LEFT JOIN restaurant ON geographic.city_name = restaurant.city_name GROUP BY geographic.region ORDER BY number_of_restaurants DESC;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "table_join"
    },
    {
        "question": "Which city has the highest-rated restaurant?",
        "answer": "SELECT DISTINCT restaurant.city_name FROM restaurant WHERE rating=(SELECT MAX(rating) FROM restaurant);",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "instruct"
    },
    {
        "question": "What's the name and rating of all the restaurants that have a rating greater than 4 and are located in the city of New York?",
        "answer": "SELECT restaurant.name, restaurant.rating FROM restaurant WHERE restaurant.rating > 4 AND restaurant.city_name ILIKE '%New York%';",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "instruct"
    },
    {
        "question": "What's the name and food type of all the restaurants located on Market St in San Francisco?",
        "answer": "SELECT restaurant.name, restaurant.food_type FROM restaurant JOIN LOCATION ON restaurant.id = location.restaurant_id WHERE location.street_name ILIKE '%Market St%' AND location.city_name ILIKE '%San Francisco%';",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "instruct"
    },
    {
        "question": "What are the names of the restaurants that serve Italian food?",
        "answer": "SELECT restaurant.name FROM restaurant WHERE LOWER(restaurant.food_type) ILIKE '%italian%';",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "instruct"
    },
    {
        "question": "What are the names of the restaurants in Los Angeles that have a rating higher than 4?",
        "answer": "SELECT DISTINCT restaurant.name FROM restaurant WHERE restaurant.city_name ILIKE '%Los Angeles%' AND restaurant.rating > 4 ORDER BY restaurant.name NULLS LAST;",
        "db_name": "restaurants",
        "context": "CREATE TABLE public.geographic (city_name text, county text, region text);\n\nCREATE TABLE public.location (restaurant_id bigint, house_number bigint, street_name text, city_name text);\n\nCREATE TABLE public.restaurant (id bigint, name text, food_type text, city_name text, rating real);",
        "query_category": "instruct"
    },
    {
        "question": "What is the total number of papers published per year?",
        "answer": "SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "group_by"
    },
    {
        "question": "What is the total number of papers published in each year?",
        "answer": "SELECT paper.year, COUNT(paper.paperid) AS total_papers FROM paper GROUP BY paper.year ORDER BY paper.year;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "group_by"
    },
    {
        "question": "What is the total number of papers associated with each dataset?",
        "answer": "SELECT paperdataset.datasetid, COUNT(DISTINCT paperdataset.paperid) AS total_papers FROM paperdataset GROUP BY paperdataset.datasetid;SELECT dataset.datasetname, COUNT(paperdataset.paperid) AS total_papers FROM paperdataset JOIN dataset ON paperdataset.datasetid = dataset.datasetid GROUP BY dataset.datasetname;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "group_by"
    },
    {
        "question": "How many keyphrases are associated with each paper?",
        "answer": "SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY keyphrase_count DESC NULLS LAST;SELECT p.title, COUNT(pk.keyphraseid) AS num_keyphrases FROM paper p JOIN paperkeyphrase pk ON p.paperid = pk.paperid GROUP BY p.title ORDER BY num_keyphrases DESC NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "group_by"
    },
    {
        "question": "How many authors have published more than 2 papers?",
        "answer": "SELECT COUNT(*) AS number_of_authors FROM (SELECT writes.authorid FROM writes GROUP BY writes.authorid HAVING COUNT(writes.paperid) > 2) AS subquery;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "group_by"
    },
    {
        "question": "Which papers have the highest number of authors, ordered by the number of authors in descending order?",
        "answer": "SELECT {paper.paperid, paper.title}, COUNT(DISTINCT writes.authorid) AS num_authors FROM paper JOIN writes ON paper.paperid = writes.paperid GROUP BY {} ORDER BY num_authors DESC;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "order_by"
    },
    {
        "question": "What is the total number of keyphrases associated with each paper, ordered by the paper ID in ascending order?",
        "answer": "SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS total_keyphrases FROM paperkeyphrase GROUP BY paperkeyphrase.paperid ORDER BY paperkeyphrase.paperid ASC NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "order_by"
    },
    {
        "question": "What are the titles of the papers published in the year 2020, ordered alphabetically?",
        "answer": "SELECT paper.title FROM paper WHERE paper.year = 2020 ORDER BY paper.title ASC NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "order_by"
    },
    {
        "question": "What are the names of the journals in the database, ordered by the length of the journal name from shortest to longest?",
        "answer": "SELECT journal.journalname FROM journal ORDER BY LENGTH(journal.journalname) ASC NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "order_by"
    },
    {
        "question": "For each paper that cites other papers, how many other papers does it cite? Sort by the number of papers cited in descending order",
        "answer": "SELECT cite.citingpaperid, COUNT(*) AS citation_count FROM cite GROUP BY cite.citingpaperid ORDER BY citation_count DESC NULLS LAST;SELECT p.paperid, p.numciting FROM paper p WHERE p.numciting > 0 ORDER BY p.numciting DESC;SELECT p.title, COUNT(c.citedpaperid) AS num_cited_papers FROM paper p JOIN cite c ON p.paperid = c.citingpaperid GROUP BY p.title ORDER BY num_cited_papers DESC;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "order_by"
    },
    {
        "question": "What is the ratio of papers that have more than 1 keyphrases to papers that have 1 keyphrase?",
        "answer": "SELECT CAST(COUNT(DISTINCT CASE WHEN keyphrase_count > 1 THEN subquery.paperid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN keyphrase_count =1 THEN subquery.paperid END), 0) AS ratio FROM (SELECT paperkeyphrase.paperid, COUNT(paperkeyphrase.keyphraseid) AS keyphrase_count FROM paperkeyphrase GROUP BY paperkeyphrase.paperid) AS subquery;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of papers that have been cited by 2 or more papers to papers that have been cited by less than 2 papers?",
        "answer": "SELECT CAST(COUNT(CASE WHEN paper.numcitedby > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN paper.numcitedby < 2 THEN 1 END), 0) AS ratio FROM paper;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of papers published in the year 2020 to the total number of papers in the database?",
        "answer": "SELECT CAST(COUNT(CASE WHEN paper.year = 2020 THEN 1 END) AS FLOAT) / NULLIF(COUNT(paper.paperid), 0) AS ratio FROM paper;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of authors who have written 3 or more papers to authors who have written less than 3 papers?",
        "answer": "SELECT CAST(COUNT(DISTINCT CASE WHEN paper_count >= 3 THEN subquery.authorid END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN paper_count < 3 THEN subquery.authorid END), 0) AS ratio FROM (SELECT writes.authorid, COUNT(writes.paperid) AS paper_count FROM writes GROUP BY writes.authorid) AS subquery;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "ratio"
    },
    {
        "question": "What is the proportion of papers that belong to more than 1 dataset to papers that belong to 1 dataset?",
        "answer": "SELECT CAST(COUNT(CASE WHEN dataset_count > 1 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN dataset_count = 1 THEN 1 END), 0) AS ratio FROM (SELECT paperdataset.paperid, COUNT(paperdataset.datasetid) AS dataset_count FROM paperdataset GROUP BY paperdataset.paperid) AS subquery;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "ratio"
    },
    {
        "question": "Which papers are associated with the keyphrase \"Machine Learning\"?",
        "answer": "SELECT {paper.title,paper.paperid} FROM paper JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%Machine Learning%';",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "table_join"
    },
    {
        "question": "Which authors have published the most papers, ordered by the number of papers they have published in descending order?",
        "answer": "SELECT {author.authorname, author.authorid}, COUNT(DISTINCT writes.paperid) AS number_of_papers FROM author JOIN writes ON author.authorid = writes.authorid GROUP BY {} ORDER BY number_of_papers DESC NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of unique keyphrases associated with papers published in the journal with \"IEEE Transactions\" in its name?",
        "answer": "SELECT COUNT(DISTINCT paperkeyphrase.keyphraseid) AS total_keyphrases FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid WHERE journal.journalname ILIKE '%IEEE Transactions%';",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of papers published in each journal, ordered by the journal name?",
        "answer": "SELECT journal.journalname, COUNT(DISTINCT paper.paperid) AS total_papers FROM paper JOIN journal ON paper.journalid = journal.journalid GROUP BY journal.journalname ORDER BY journal.journalname NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "table_join"
    },
    {
        "question": "How many papers cite each paper in the dataset named \"COVID-19 Research\"?",
        "answer": "SELECT paperdataset.paperid, COUNT(cite.citedpaperid) AS citation_count FROM paperdataset JOIN cite ON paperdataset.paperid = cite.citedpaperid WHERE paperdataset.datasetid = (SELECT datasetid FROM dataset WHERE datasetname ILIKE '%COVID-19 Research%') GROUP BY paperdataset.paperid ORDER BY citation_count DESC;SELECT p.title, COUNT(c.citingpaperid) AS num_citing_papers FROM paper p JOIN paperdataset pd ON p.paperid = pd.paperid JOIN cite c ON p.paperid = c.citedpaperid JOIN dataset d ON pd.datasetid = d.datasetid WHERE d.datasetname = 'COVID-19 Research' GROUP BY p.title ORDER BY num_citing_papers DESC NULLS LAST;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "table_join"
    },
    {
        "question": "What is the name of the venue where the paper with paper ID 2 was published, and how many papers were published in total in that venue?",
        "answer": "SELECT venue.venuename, COUNT(DISTINCT paper.paperid) FROM paper JOIN venue ON paper.venueid = venue.venueid WHERE paper.venueid = (SELECT venueid FROM paper WHERE paperid = 2 ) GROUP BY venue.venuename;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "instruct"
    },
    {
        "question": "What are the names of the authors who wrote the paper with the title \"The Effects of Climate Change on Agriculture\"?",
        "answer": "SELECT author.authorname FROM author JOIN writes ON author.authorid = writes.authorid JOIN paper ON writes.paperid = paper.paperid WHERE paper.title = 'The Effects of Climate Change on Agriculture';",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "instruct"
    },
    {
        "question": "How many papers were published in the journal \"nature\" in the year 2020?",
        "answer": "SELECT COUNT(paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid WHERE paper.year = 2020 AND journal.journalname ILIKE '%nature%';",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "instruct"
    },
    {
        "question": "How many papers are associated with the keyphrase \"machine learning\" and were published in the journal named \"IEEE Transactions on Pattern Analysis and Machine Intelligence\"?",
        "answer": "SELECT COUNT(DISTINCT paper.paperid) FROM paper JOIN journal ON paper.journalid = journal.journalid JOIN paperkeyphrase ON paper.paperid = paperkeyphrase.paperid JOIN keyphrase ON paperkeyphrase.keyphraseid = keyphrase.keyphraseid WHERE keyphrase.keyphrasename ILIKE '%machine learning%' AND journal.journalname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence';",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "instruct"
    },
    {
        "question": "How many authors wrote papers that were published in the journal \"Science\" in the year 2020?",
        "answer": "SELECT COUNT(DISTINCT writes.authorid) AS number_of_authors FROM writes JOIN paper ON writes.paperid = paper.paperid JOIN journal ON paper.journalid = journal.journalid WHERE journal.journalname ILIKE '%Science%' AND paper.year = 2020;",
        "db_name": "scholar",
        "context": "CREATE TABLE public.author (authorid bigint NOT NULL, authorname text);\n\nCREATE TABLE public.cite (citingpaperid bigint NOT NULL, citedpaperid bigint NOT NULL);\n\nCREATE TABLE public.dataset (datasetid bigint NOT NULL, datasetname text);\n\nCREATE TABLE public.field (fieldid bigint);\n\nCREATE TABLE public.journal (journalid bigint NOT NULL, journalname text);\n\nCREATE TABLE public.keyphrase (keyphraseid bigint NOT NULL, keyphrasename text);\n\nCREATE TABLE public.paper (paperid bigint NOT NULL, title text, venueid bigint, year bigint, numciting bigint, numcitedby bigint, journalid bigint);\n\nCREATE TABLE public.paperdataset (paperid bigint, datasetid bigint);\n\nCREATE TABLE public.paperfield (fieldid bigint, paperid bigint);\n\nCREATE TABLE public.paperkeyphrase (paperid bigint, keyphraseid bigint);\n\nCREATE TABLE public.venue (venueid bigint NOT NULL, venuename text);\n\nCREATE TABLE public.writes (paperid bigint, authorid bigint);",
        "query_category": "instruct"
    },
    {
        "question": "How many reviews were written for businesses located in California in the last 10 months?",
        "answer": "SELECT count(*) AS review_count FROM review r JOIN business b ON r.business_id = b.business_id WHERE b.state = 'CA' AND (r.year * 12 + extract(MONTH FROM to_date(r.month, 'Month'))) >= (extract(YEAR FROM CURRENT_DATE) * 12 + extract(MONTH FROM CURRENT_DATE) - 10);",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "date_functions"
    },
    {
        "question": "What is the total number of check-ins on the 2 days before Saturday?",
        "answer": "SELECT sum(COUNT) AS total_checkins FROM checkin WHERE DAY IN ('Thursday', 'Friday') ;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "date_functions"
    },
    {
        "question": "How many reviews were there 2 months before the review with id 3?",
        "answer": "SELECT COUNT(*) AS review_count FROM review WHERE TO_DATE(CAST(review.year AS TEXT) || '-' || CASE review.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') = (SELECT TO_DATE(CAST(r.year AS TEXT) || '-' || CASE r.month WHEN 'January' THEN '01' WHEN 'February' THEN '02' WHEN 'March' THEN '03' WHEN 'April' THEN '04' WHEN 'May' THEN '05' WHEN 'June' THEN '06' WHEN 'July' THEN '07' WHEN 'August' THEN '08' WHEN 'September' THEN '09' WHEN 'October' THEN '10' WHEN 'November' THEN '11' WHEN 'December' THEN '12' END || '-01', 'YYYY-MM-DD') - INTERVAL '2 months' FROM review r WHERE r.rid = 3);",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "date_functions"
    },
    {
        "question": "What was the message that came with the tip made exactly 2 months after March 2021?",
        "answer": "SELECT text AS message FROM tip WHERE MONTH ILIKE '%May%' AND YEAR = 2021 LIMIT 1;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "date_functions"
    },
    {
        "question": "How many months between June 2021 and December 2021 had reviews?",
        "answer": "SELECT COUNT(DISTINCT MONTH) AS num_months FROM review WHERE YEAR = 2021 AND CASE MONTH WHEN 'January' THEN 1 WHEN 'February' THEN 2 WHEN 'March' THEN 3 WHEN 'April' THEN 4 WHEN 'May' THEN 5 WHEN 'June' THEN 6 WHEN 'July' THEN 7 WHEN 'August' THEN 8 WHEN 'September' THEN 9 WHEN 'October' THEN 10 WHEN 'November' THEN 11 WHEN 'December' THEN 12 END BETWEEN 6 AND 12;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "date_functions"
    },
    {
        "question": "Which neighbourhoods have the highest number of businesses, and how many businesses are located in each neighbourhood?",
        "answer": "SELECT {neighbourhood.neighbourhood_name, neighbourhood.id}, COUNT(DISTINCT neighbourhood.business_id) AS business_count FROM neighbourhood GROUP BY {} ORDER BY business_count DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "group_by"
    },
    {
        "question": "What is the total number of check-ins for each day of the week for the business with ID \"abc123\"?",
        "answer": "SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin WHERE checkin.business_id = 'abc123' GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "group_by"
    },
    {
        "question": "What is the total count of check-ins for each business id?",
        "answer": "SELECT checkin.business_id, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.business_id ORDER BY total_checkins DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "group_by"
    },
    {
        "question": "Return the name and average rating for each business in new york",
        "answer": "SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%NEW YORK%' GROUP BY business.name;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "group_by"
    },
    {
        "question": "How many check-ins occurred on each day of the week?",
        "answer": "SELECT checkin.day, SUM(checkin.count) AS total_checkins FROM checkin GROUP BY checkin.day ORDER BY total_checkins DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "group_by"
    },
    {
        "question": "Please provide a list of business names in New York and their average ratings ordered by the highest average rating first.",
        "answer": "SELECT business.name, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE business.city ILIKE '%New York%' GROUP BY business.name, business.business_id ORDER BY average_rating DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "order_by"
    },
    {
        "question": "What is the latitude and longitude of the business with the highest rating?",
        "answer": "SELECT business.latitude, business.longitude FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id, business.latitude, business.longitude ORDER BY AVG(review.rating) DESC LIMIT 1;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "order_by"
    },
    {
        "question": "What are the top 3 businesses in terms of review count?",
        "answer": "SELECT {business.name, business.business_id, business.bid}, business.review_count FROM business ORDER BY business.review_count DESC NULLS LAST LIMIT 3;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "order_by"
    },
    {
        "question": "What are the names of the businesses in the database, ordered alphabetically?",
        "answer": "SELECT business.name FROM business ORDER BY business.name ASC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "order_by"
    },
    {
        "question": "How many reviews were posted in each month of the year 2021, ordered by the month?",
        "answer": "SELECT review.month, COUNT(review.rid) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.month ORDER BY TO_DATE(review.month, 'Month') NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "order_by"
    },
    {
        "question": "What is the ratio of the number of businesses in each state to the total number of businesses in the database?",
        "answer": "SELECT business.state, COUNT(business.business_id) / NULLIF(CAST((SELECT COUNT(*) FROM business) AS FLOAT), 0) AS ratio FROM business GROUP BY business.state;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of open businesses to closed businesses in the city of San Francisco?",
        "answer": "SELECT CAST(SUM(CASE WHEN business.is_open = 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN business.is_open = 0 THEN 1 ELSE 0 END), 0) AS ratio FROM business WHERE LOWER(business.city) ILIKE '%san francisco%';",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of check-ins on weekends to check-ins on weekdays for the business named \"Mark's Bistro\"?",
        "answer": "SELECT CAST(SUM(CASE WHEN checkin.day IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN checkin.day NOT IN ('Saturday', 'Sunday') THEN checkin.count ELSE 0 END), 0) AS ratio FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.name ILIKE '%Mark''s Bistro%';",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "ratio"
    },
    {
        "question": "What is the ratio of businesses in the state of California to businesses in the state of New York?",
        "answer": "SELECT CAST(COUNT(CASE WHEN business.state = 'CA' THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN business.state = 'NY' THEN 1 END), 0) AS ratio FROM business;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "ratio"
    },
    {
        "question": "How does the ratio of positive reviews (rating > 3) to negative reviews (rating < 3) vary across different categories of businesses, ordered by descending ratio?",
        "answer": "SELECT {category.category_name, category.id}, CAST(COUNT(CASE WHEN review.rating > 3 THEN 1 END) AS FLOAT) / NULLIF(COUNT(CASE WHEN review.rating < 3 THEN 1 END), 0) AS ratio FROM review JOIN category ON review.business_id = category.business_id GROUP BY {} ORDER BY ratio DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "ratio"
    },
    {
        "question": "Which users have posted reviews for businesses located in the neighbourhood of \"Downtown\" and how many reviews have they posted?",
        "answer": "SELECT {users.name, users.user_id}, COUNT(review.rid) AS review_count FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id JOIN users ON review.user_id = users.user_id WHERE neighbourhood.neighbourhood_name ILIKE '%Downtown%' GROUP BY {} ORDER BY review_count DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of reviews for each category in the state of \"California\"?",
        "answer": "SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of reviews for each business category?",
        "answer": "SELECT {category.category_name, category.id}, SUM(business.review_count) AS total_reviews FROM business JOIN category ON business.business_id = category.business_id GROUP BY {} ORDER BY total_reviews DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of check-ins for each business in the state of California?",
        "answer": "SELECT {business.business_id, business.name, business.bid}, SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' GROUP BY {} ORDER BY total_checkins DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "table_join"
    },
    {
        "question": "What are the top 2 categories of businesses with the highest average rating?",
        "answer": "SELECT {category.category_name, category.id} FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.business_id) AS business_rating JOIN category ON business_rating.business_id = category.business_id GROUP BY {} ORDER BY AVG(business_rating.average_rating) DESC NULLS LAST LIMIT 2;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "table_join"
    },
    {
        "question": "What is the total number of reviews posted in the year 2021 for businesses in the category \"Cafe\"?",
        "answer": "SELECT COUNT(review.rid) AS total_reviews FROM review JOIN category ON review.business_id = category.business_id WHERE review.year = 2021 AND category.category_name ILIKE '%Cafe%';",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "instruct"
    },
    {
        "question": "What is the average rating of businesses in the city of San Francisco?",
        "answer": "SELECT AVG(sf.average_rating) AS sf_average_rating FROM (SELECT business.business_id, AVG(review.rating) AS average_rating FROM business JOIN review ON business.business_id = review.business_id WHERE LOWER(business.city) ILIKE '%san francisco%' GROUP BY business.business_id) AS sf;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "instruct"
    },
    {
        "question": "How many reviews were posted for each business id in the year 2021?",
        "answer": "SELECT review.business_id, COUNT(*) AS review_count FROM review WHERE review.year = 2021 GROUP BY review.business_id ORDER BY review_count DESC NULLS LAST;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "instruct"
    },
    {
        "question": "How many reviews were posted by users with the name \"Sarah Williams\" in the month of April 2021?",
        "answer": "SELECT COUNT(*) FROM review JOIN users ON review.user_id = users.user_id WHERE users.name ILIKE '%Sarah Williams%' AND review.month = 'April' AND review.year = 2021;",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "instruct"
    },
    {
        "question": "How many check-ins occurred on Mondays at businesses in the state of California?",
        "answer": "SELECT SUM(checkin.count) AS total_checkins FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.state = 'CA' AND checkin.day ILIKE '%Monday%';",
        "db_name": "yelp",
        "context": "CREATE TABLE public.business (bid bigint, business_id text, name text, full_address text, city text, latitude text, longitude text, review_count bigint, is_open bigint, state text);\n\nCREATE TABLE public.category (id bigint, business_id text, category_name text);\n\nCREATE TABLE public.checkin (cid bigint, business_id text, count bigint, day text);\n\nCREATE TABLE public.neighbourhood (id bigint, business_id text, neighbourhood_name text);\n\nCREATE TABLE public.review (rid bigint, business_id text, user_id text, rating real, text text, year bigint, month text);\n\nCREATE TABLE public.tip (tip_id bigint, business_id text, text text, user_id text, likes bigint, year bigint, month text);\n\nCREATE TABLE public.users (uid bigint, user_id text, name text);",
        "query_category": "instruct"
    },
    {
        "question": "Return the customer who made the most sell transactions on 2023-04-01. Return the id, name and number of transactions.",
        "answer": "WITH SellTransactions AS (SELECT sbTxCustId, COUNT(*) AS num_tx FROM sbTransaction WHERE sbTxDateTime::date = '2023-04-01' AND sbTxType = 'sell' GROUP BY sbTxCustId) SELECT c.sbCustId, c.sbCustName, st.num_tx FROM sbCustomer c JOIN SellTransactions st ON c.sbCustId = st.sbTxCustId ORDER BY st.num_tx DESC LIMIT 1;",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "date_functions"
    },
    {
        "question": "What is the monthly average transaction price for successful transactions in the 1st quarter of 2023?",
        "answer": "SELECT DATE_TRUNC('month', sbTxDateTime) AS MONTH, AVG(sbTxPrice) AS avg_price FROM sbTransaction WHERE sbTxStatus = 'success' AND sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY MONTH ORDER BY MONTH;",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "date_functions"
    },
    {
        "question": "Lowest daily closest price for symbol `VTI` in the past 7 days",
        "answer": "SELECT MIN(sdp.sbDpClose) AS lowest_price FROM sbDailyPrice AS sdp JOIN sbTicker AS st ON sdp.sbDpTickerId = st.sbTickerId WHERE st.sbTickerSymbol = 'VTI' AND sdp.sbDpDate >= CURRENT_DATE - INTERVAL '7 days';",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "date_functions"
    },
    {
        "question": "Return the customer id and the difference between their time from joining to their first transaction. Ignore customers who haven't made any transactions.",
        "answer": "SELECT c.sbCustId, MIN(t.sbTxDateTime) - c.sbCustJoinDate AS DaysFromJoinToFirstTransaction FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId GROUP BY c.sbCustId",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "date_functions"
    },
    {
        "question": "number of transactions by users who joined in the past 70 days",
        "answer": "SELECT COUNT(t.sbTxCustId) AS transaction_count FROM sbTransaction t JOIN sbCustomer c ON t.sbTxCustId = c.sbCustId WHERE c.sbCustJoinDate >= CURRENT_DATE - INTERVAL '70' DAY;",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "date_functions"
    },
    {
        "question": "Return the treatment id, treatment start date, adverse event date and description of all adverse events that occured within 10 days after starting treatment",
        "answer": "SELECT t.treatment_id, t.start_dt, ae.reported_dt, ae.description FROM adverse_events ae JOIN treatments t ON ae.treatment_id = t.treatment_id WHERE ae.reported_dt BETWEEN t.start_dt AND t.start_dt + INTERVAL '10 days';",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "date_functions"
    },
    {
        "question": "List the last name, year of registration, and first treatment (date and id) by doctors who were registered 2 years ago.",
        "answer": "WITH doc_first_treatment AS (SELECT d.doc_id, d.last_name, d.year_reg, t.treatment_id, t.start_dt, ROW_NUMBER() OVER (PARTITION BY d.doc_id ORDER BY t.start_dt ASC) AS rn FROM doctors d JOIN treatments t ON d.doc_id = t.doc_id WHERE d.year_reg = EXTRACT(YEAR FROM CURRENT_DATE) - 2 ) SELECT last_name, year_reg, start_dt AS first_treatment_date, treatment_id AS first_treatment_id FROM doc_first_treatment WHERE rn = 1;",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "date_functions"
    },
    {
        "question": "what is average age of all registered male patients with private insurance currently?",
        "answer": "SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, date_of_birth))) AS avg_age FROM patients WHERE gender = 'Male' AND ins_type = 'private';",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "date_functions"
    },
    {
        "question": "show all placebo treatment id, start and end date, where there concomitant_meds were started within 2 weeks of starting the treatment. also return the start and end dates of all concomitant drug usage.",
        "answer": "SELECT t.treatment_id, t.start_dt AS treatment_start_date, t.end_dt AS treatment_end_date, cm.start_dt AS concomitant_med_start_date, cm.end_dt AS concomitant_med_end_date FROM treatments t JOIN concomitant_meds cm ON t.treatment_id = cm.treatment_id WHERE t.is_placebo = TRUE AND TO_DATE(cm.start_dt, 'YYYY-MM-DD') BETWEEN t.start_dt AND t.start_dt + INTERVAL '2 WEEK' ORDER BY t.treatment_id;",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "date_functions"
    },
    {
        "question": "How many treatments for diagnoses containing 'psoriasis' (match with wildcards case-insensitively) involve drugs that have been FDA-approved and the treatments have ended within the last 6 months from today?",
        "answer": "SELECT COUNT(*) FROM treatments t JOIN diagnoses d ON t.diag_id = d.diag_id JOIN drugs dr ON t.drug_id = dr.drug_id WHERE d.diag_name ILIKE '%psoriasis%' AND dr.fda_appr_dt IS NOT NULL AND t.end_dt >= CURRENT_DATE - INTERVAL '6 months';",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "date_functions"
    },
    {
        "question": "What was the average transaction daily and monthly limit for the earliest setting snapshot in 2023?",
        "answer": "SELECT AVG(tx_limit_daily) AS avg_daily_limit, AVG(tx_limit_monthly) AS avg_monthly_limit FROM consumer_div.user_setting_snapshot WHERE snapshot_date = (SELECT MIN(snapshot_date) FROM consumer_div.user_setting_snapshot WHERE snapshot_date >= '2023-01-01' AND snapshot_date < '2024-01-01' );",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "date_functions"
    },
    {
        "question": "Which users did not get a notification within the first year of signing up? Return their usernames, emails and signup dates.",
        "answer": "SELECT u.username, u.email, u.created_at FROM consumer_div.users u LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id AND n.created_at BETWEEN u.created_at AND u.created_at + INTERVAL '1 year' WHERE n.user_id IS NULL;",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "date_functions"
    },
    {
        "question": "what was the average user session duration in seconds split by device_type?",
        "answer": "SELECT device_type, AVG(EXTRACT(EPOCH FROM (session_end_ts - session_start_ts))) AS avg_session_duration_seconds FROM consumer_div.user_sessions WHERE session_end_ts IS NOT NULL GROUP BY device_type;",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "date_functions"
    },
    {
        "question": "Give me today's median merchant wallet balance for all active merchants whose category contains 'retail'",
        "answer": "WITH retail_merchants AS (SELECT mid FROM consumer_div.merchants WHERE category ILIKE '%retail%' AND status = 'active' ), merchant_balances AS (SELECT balance FROM consumer_div.wallet_merchant_balance_daily wmbd JOIN retail_merchants rm ON wmbd.merchant_id = rm.mid WHERE DATE(wmbd.updated_at) = CURRENT_DATE ) SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY balance) AS median_balance FROM merchant_balances;",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "date_functions"
    },
    {
        "question": "Which merchants earliest coupon start date was within a year of the merchant's registration? Return the merchant id, registration date, and earliest coupon id and start date",
        "answer": "WITH earliest_coupons AS (SELECT c.merchant_id, MIN(c.start_date) AS earliest_coupon_start_date FROM consumer_div.coupons c GROUP BY c.merchant_id) SELECT m.mid AS merchant_id, m.created_at AS merchant_registration_date, ec.earliest_coupon_start_date, c.cid AS earliest_coupon_id FROM consumer_div.merchants m JOIN earliest_coupons ec ON m.mid = ec.merchant_id JOIN consumer_div.coupons c ON ec.merchant_id = c.merchant_id AND ec.earliest_coupon_start_date = c.start_date WHERE ec.earliest_coupon_start_date <= m.created_at + INTERVAL '1 year';",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "date_functions"
    },
    {
        "question": "Return the name and phone number of the salesperson with the shortest time from being hired to getting fired. Return the number of days he/she was employed for.",
        "answer": "SELECT s.first_name, s.last_name, s.phone, s.termination_date - s.hire_date AS days_employed FROM salespersons s ORDER BY days_employed ASC LIMIT 1;",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "date_functions"
    },
    {
        "question": "Return the number of payments made on weekends to the vendor named 'Utility Company'",
        "answer": "SELECT COUNT(*) AS weekend_payments FROM payments_made WHERE vendor_name = 'Utility Company' AND EXTRACT(DOW FROM payment_date) IN (0, 6);",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "date_functions"
    },
    {
        "question": "show me the daily total amount of payments received in the whole of the previous ISO week not including the current week, split by the payment_method",
        "answer": "SELECT payment_date, payment_method, SUM(payment_amount) AS total_amount FROM payments_received WHERE payment_date >= DATE_TRUNC('WEEK', CURRENT_DATE) - INTERVAL '1 week' AND payment_date < DATE_TRUNC('WEEK', CURRENT_DATE) GROUP BY payment_date, payment_method ORDER BY payment_date DESC, payment_method ASC;",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "date_functions"
    },
    {
        "question": "Which cars were in inventory in the latest snapshot for march 2023? Return the car id, make, model, and year. Cars are considered to be in inventory\" if is_in_inventory is True.\"",
        "answer": "WITH latest_snapshot AS (SELECT MAX(snapshot_date) AS snapshot_date FROM inventory_snapshots WHERE snapshot_date BETWEEN '2023-03-01' AND '2023-03-31' ), latest_snapshot_data AS (SELECT inv.car_id FROM inventory_snapshots inv JOIN latest_snapshot ls ON inv.snapshot_date = ls.snapshot_date WHERE inv.is_in_inventory = TRUE ) SELECT c.id, c.make, c.model, c.year FROM cars c JOIN latest_snapshot_data lsd ON c.id = lsd.car_id;",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "date_functions"
    },
    {
        "question": "What were the total quarterly sales in 2023 grouped by customer's state? Represent each quarter as the first date in the quarter.",
        "answer": "SELECT DATE_TRUNC('QUARTER', s.sale_date) AS QUARTER, c.state, SUM(s.sale_price) AS total_sales FROM sales s JOIN customers c ON s.customer_id = c.id WHERE EXTRACT(YEAR FROM s.sale_date) = 2023 GROUP BY c.state, QUARTER HAVING SUM(s.sale_price) > 0 ORDER BY QUARTER, c.state;",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "date_functions"
    },
    {
        "question": "What are the top 5 countries by total transaction amount in the past 30 days, inclusive of 30 days ago? Return the country name, number of transactions and total transaction amount.",
        "answer": "SELECT c.sbCustCountry, COUNT(t.sbTxId) AS num_transactions, SUM(t.sbTxAmount) AS total_amount FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxDateTime >= CURRENT_DATE - INTERVAL '30 days' GROUP BY c.sbCustCountry ORDER BY total_amount DESC LIMIT 5",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "How many distinct customers made each type of transaction between Jan 1, 2023 and Mar 31, 2023 (inclusive of start and end dates)? Return the transaction type, number of distinct customers and average number of shares, for the top 3 transaction types by number of customers.",
        "answer": "SELECT t.sbTxType, COUNT(DISTINCT t.sbTxCustId) AS num_customers, AVG(t.sbTxShares) AS avg_shares FROM sbTransaction t WHERE t.sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31 23:59:59' GROUP BY t.sbTxType ORDER BY num_customers DESC LIMIT 3",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "What are the top 10 ticker symbols by total transaction amount? Return the ticker symbol, number of transactions and total transaction amount.",
        "answer": "SELECT tk.sbTickerSymbol, COUNT(tx.sbTxId) AS num_transactions, SUM(tx.sbTxAmount) AS total_amount FROM sbTicker tk JOIN sbTransaction tx ON tk.sbTickerId = tx.sbTxTickerId GROUP BY tk.sbTickerSymbol ORDER BY total_amount DESC LIMIT 10",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "What are the top 5 combinations of customer state and ticker type by number of transactions? Return the customer state, ticker type and number of transactions.",
        "answer": "SELECT c.sbCustState, t.sbTickerType, COUNT(*) AS num_transactions FROM sbTransaction tx JOIN sbCustomer c ON tx.sbTxCustId = c.sbCustId JOIN sbTicker t ON tx.sbTxTickerId = t.sbTickerId GROUP BY c.sbCustState, t.sbTickerType ORDER BY num_transactions DESC LIMIT 5",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "Return the distinct list of customer IDs who have made a 'buy' transaction.",
        "answer": "SELECT DISTINCT c.sbCustId FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxType = 'buy'",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "Return the distinct list of ticker IDs that have daily price records on or after Apr 1, 2023.",
        "answer": "SELECT DISTINCT tk.sbTickerId FROM sbTicker tk JOIN sbDailyPrice dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpDate >= '2023-04-01'",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "What are the top 3 transaction statuses by number of transactions? Return the status and number of transactions.",
        "answer": "SELECT sbTxStatus, COUNT(*) AS num_transactions FROM sbTransaction GROUP BY sbTxStatus ORDER BY num_transactions DESC LIMIT 3",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "What are the top 5 countries by number of customers? Return the country name and number of customers.",
        "answer": "SELECT sbCustCountry, COUNT(*) AS num_customers FROM sbCustomer GROUP BY sbCustCountry ORDER BY num_customers DESC LIMIT 5",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "Return the customer ID and name of customers who have not made any transactions.",
        "answer": "SELECT c.sbCustId, c.sbCustName FROM sbCustomer c LEFT JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxCustId IS NULL",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_left_join"
    },
    {
        "question": "Return the ticker ID and symbol of tickers that do not have any daily price records.",
        "answer": "SELECT tk.sbTickerId, tk.sbTickerSymbol FROM sbTicker tk LEFT JOIN sbDailyPrice dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpTickerId IS NULL",
        "db_name": "broker_context",
        "context": "CREATE TABLE sbCustomer (sbCustId VARCHAR(20) PRIMARY KEY, sbCustName VARCHAR(100) NOT NULL, sbCustEmail VARCHAR(100) NOT NULL, sbCustPhone VARCHAR(20), sbCustAddress1 VARCHAR(200), sbCustAddress2 VARCHAR(200), sbCustCity VARCHAR(50), sbCustState VARCHAR(20), sbCustCountry VARCHAR(50), sbCustPostalCode VARCHAR(20), sbCustJoinDate DATE NOT NULL, sbCustStatus VARCHAR(20) NOT NULL);\nCREATE TABLE sbTicker (sbTickerId VARCHAR(20) PRIMARY KEY, sbTickerSymbol VARCHAR(10) NOT NULL, sbTickerName VARCHAR(100) NOT NULL, sbTickerType VARCHAR(20) NOT NULL, sbTickerExchange VARCHAR(50) NOT NULL, sbTickerCurrency VARCHAR(10) NOT NULL, sbTickerDb2x VARCHAR(20), sbTickerIsActive BOOLEAN NOT NULL);\nCREATE TABLE sbDailyPrice (sbDpTickerId VARCHAR(20) NOT NULL, sbDpDate DATE NOT NULL, sbDpOpen NUMERIC(10,2) NOT NULL, sbDpHigh NUMERIC(10,2) NOT NULL, sbDpLow NUMERIC(10,2) NOT NULL, sbDpClose NUMERIC(10,2) NOT NULL, sbDpVolume BIGINT NOT NULL, sbDpEpochMs BIGINT NOT NULL, sbDpSource VARCHAR(50));\nCREATE TABLE sbTransaction (sbTxId VARCHAR(50) PRIMARY KEY, sbTxCustId VARCHAR(20) NOT NULL, sbTxTickerId VARCHAR(20) NOT NULL, sbTxDateTime TIMESTAMP NOT NULL, sbTxType VARCHAR(20) NOT NULL, sbTxShares NUMERIC(10,2) NOT NULL, sbTxPrice NUMERIC(10,2) NOT NULL, sbTxAmount NUMERIC(10,2) NOT NULL, sbTxCcy VARCHAR(10), sbTxTax NUMERIC(10,2) NOT NULL, sbTxCommission NUMERIC(10,2) NOT NULL, sbTxKpx VARCHAR(10), sbTxSettlementDateStr VARCHAR(25), sbTxStatus VARCHAR(10) NOT NULL);",
        "query_category": "basic_left_join"
    },
    {
        "question": "Who were the top 3 sales representatives by total revenue in the past 3 months, inclusive of today's date? Return their first name, last name, total number of sales and total revenue. Note that revenue refers to the sum of sale_price in the sales table.",
        "answer": "SELECT c.first_name, c.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales s JOIN salespersons c ON s.salesperson_id = c.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY c.first_name, c.last_name ORDER BY total_revenue DESC LIMIT 3",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "Return the top 5 salespersons by number of sales in the past 30 days? Return their first and last name, total sales count and total revenue amount.",
        "answer": "SELECT sp.first_name, sp.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales s JOIN salespersons sp ON s.salesperson_id = sp.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY sp.first_name, sp.last_name, sp.id ORDER BY total_sales DESC LIMIT 5",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "Return the top 5 states by total revenue, showing the number of unique customers and total revenue (based on sale price) for each state.",
        "answer": "SELECT c.state, COUNT(DISTINCT s.customer_id) AS unique_customers, SUM(s.sale_price) AS total_revenue FROM sales s JOIN customers c ON s.customer_id = c.id GROUP BY c.state ORDER BY total_revenue DESC LIMIT 5",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "What are the top 5 best selling car models by total revenue? Return the make, model, total number of sales and total revenue.",
        "answer": "SELECT c.make, c.model, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales s JOIN cars c ON s.car_id = c.id GROUP BY c.make, c.model ORDER BY total_revenue DESC LIMIT 5",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "Return the distinct list of customer IDs that have made a purchase, based on joining the customers and sales tables.",
        "answer": "SELECT DISTINCT c.id AS customer_id FROM customers c JOIN sales s ON c.id = s.customer_id",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "Return the distinct list of salesperson IDs that have received a cash payment, based on joining the salespersons, sales and payments_received tables.",
        "answer": "SELECT DISTINCT s.id AS salesperson_id FROM salespersons s JOIN sales sa ON s.id = sa.salesperson_id JOIN payments_received p ON sa.id = p.sale_id WHERE p.payment_method = 'cash'",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "What are the top 3 payment methods by total payment amount received? Return the payment method, total number of payments and total amount.",
        "answer": "SELECT payment_method, COUNT(*) AS total_payments, SUM(payment_amount) AS total_amount FROM payments_received GROUP BY payment_method ORDER BY total_amount DESC LIMIT 3",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "What are the total number of customer signups for the top 2 states? Return the state and total signups, starting from the top.",
        "answer": "SELECT state, COUNT(*) AS total_signups FROM customers GROUP BY state ORDER BY total_signups DESC LIMIT 2",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "Return the car ID, make, model and year for cars that have no sales records, by doing a left join from the cars to sales table.",
        "answer": "SELECT c.id AS car_id, c.make, c.model, c.year FROM cars c LEFT JOIN sales s ON c.id = s.car_id WHERE s.car_id IS NULL",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_left_join"
    },
    {
        "question": "Return the salesperson ID, first name and last name for salespersons that have no sales records, by doing a left join from the salespersons to sales table.",
        "answer": "SELECT s.id AS salesperson_id, s.first_name, s.last_name FROM salespersons s LEFT JOIN sales sa ON s.id = sa.salesperson_id WHERE sa.salesperson_id IS NULL",
        "db_name": "car_dealership",
        "context": "CREATE TABLE cars (id SERIAL PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER NOT NULL, color TEXT NOT NULL, vin_number VARCHAR(17) NOT NULL UNIQUE, engine_type TEXT NOT NULL, transmission TEXT NOT NULL, cost NUMERIC(10, 2) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE salespersons (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, hire_date DATE NOT NULL, termination_date DATE, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE customers (id SERIAL PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL, address TEXT NOT NULL, city TEXT NOT NULL, state TEXT NOT NULL, zip_code VARCHAR(10) NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE sales (id SERIAL PRIMARY KEY, car_id INTEGER NOT NULL REFERENCES cars(id), salesperson_id INTEGER NOT NULL REFERENCES salespersons(id), customer_id INTEGER NOT NULL REFERENCES customers(id), sale_price NUMERIC(10, 2) NOT NULL, sale_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE inventory_snapshots (id SERIAL PRIMARY KEY, snapshot_date DATE NOT NULL, car_id INTEGER NOT NULL REFERENCES cars(id), is_in_inventory BOOLEAN NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_received (id SERIAL PRIMARY KEY, sale_id INTEGER NOT NULL REFERENCES sales(id), payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());\nCREATE TABLE payments_made (id SERIAL PRIMARY KEY, vendor_name TEXT NOT NULL, payment_date DATE NOT NULL, payment_amount NUMERIC(10, 2) NOT NULL, payment_method TEXT NOT NULL, invoice_number VARCHAR(50) NOT NULL, invoice_date DATE NOT NULL, due_date DATE NOT NULL, crtd_ts TIMESTAMP NOT NULL DEFAULT NOW());",
        "query_category": "basic_left_join"
    },
    {
        "question": "What are the top 3 doctor specialties by total drug amount prescribed for treatments started in the past 6 calendar months? Return the specialty, number of treatments, and total drug amount.",
        "answer": "SELECT d.specialty, COUNT(*) AS num_treatments, SUM(t.tot_drug_amt) AS total_drug_amt FROM treatments t JOIN doctors d ON t.doc_id = d.doc_id WHERE t.start_dt >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '6 months') GROUP BY d.specialty ORDER BY total_drug_amt DESC LIMIT 3",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "For treatments that ended in the year 2022 (from Jan 1st to Dec 31st inclusive), what is the average PASI score at day 100 and number of distinct patients per insurance type? Return the top 5 insurance types sorted by lowest average PASI score first.",
        "answer": "SELECT p.ins_type, COUNT(DISTINCT t.patient_id) AS num_patients, AVG(o.day100_pasi_score) AS avg_pasi_score FROM treatments t JOIN patients p ON t.patient_id = p.patient_id JOIN outcomes o ON t.treatment_id = o.treatment_id WHERE t.end_dt BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.ins_type ORDER BY avg_pasi_score LIMIT 5",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "What are the top 5 drugs by number of treatments and average drug amount per treatment? Return the drug name, number of treatments, and average drug amount.",
        "answer": "SELECT d.drug_name, COUNT(*) AS num_treatments, AVG(t.tot_drug_amt) AS avg_drug_amt FROM treatments t JOIN drugs d ON t.drug_id = d.drug_id GROUP BY d.drug_name ORDER BY num_treatments DESC, avg_drug_amt DESC LIMIT 5",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "What are the top 3 diagnoses by maximum itch VAS score at day 100 and number of distinct patients? Return the diagnosis name, number of patients, and maximum itch score.",
        "answer": "SELECT di.diag_name, COUNT(DISTINCT t.patient_id) AS num_patients, MAX(o.day100_itch_vas) AS max_itch_score FROM treatments t JOIN diagnoses di ON t.diag_id = di.diag_id JOIN outcomes o ON t.treatment_id = o.treatment_id GROUP BY di.diag_name ORDER BY max_itch_score DESC, num_patients DESC LIMIT 3",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "Return the distinct list of doctor IDs, first names and last names that have prescribed treatments.",
        "answer": "SELECT DISTINCT d.doc_id, d.first_name, d.last_name FROM treatments t JOIN doctors d ON t.doc_id = d.doc_id",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "Return the distinct list of patient IDs, first names and last names that have outcome assessments.",
        "answer": "SELECT DISTINCT p.patient_id, p.first_name, p.last_name FROM outcomes o JOIN treatments t ON o.treatment_id = t.treatment_id JOIN patients p ON t.patient_id = p.patient_id",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "What are the top 3 insurance types by average patient height in cm? Return the insurance type, average height and average weight.",
        "answer": "SELECT ins_type, AVG(height_cm) AS avg_height, AVG(weight_kg) AS avg_weight FROM patients GROUP BY ins_type ORDER BY avg_height DESC LIMIT 3",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "What are the top 2 specialties by number of doctors? Return the specialty and number of doctors.",
        "answer": "SELECT specialty, COUNT(*) AS num_doctors FROM doctors GROUP BY specialty ORDER BY num_doctors DESC LIMIT 2",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "Return the patient IDs, first names and last names of patients who have not received any treatments.",
        "answer": "SELECT p.patient_id, p.first_name, p.last_name FROM patients p LEFT JOIN treatments t ON p.patient_id = t.patient_id WHERE t.patient_id IS NULL",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_left_join"
    },
    {
        "question": "Return the drug IDs and names of drugs that have not been used in any treatments.",
        "answer": "SELECT d.drug_id, d.drug_name FROM drugs d LEFT JOIN treatments t ON d.drug_id = t.drug_id WHERE t.drug_id IS NULL",
        "db_name": "derm_treatment",
        "context": "CREATE TABLE doctors (doc_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), specialty TEXT, year_reg INT, med_school_name VARCHAR(100), loc_city VARCHAR(50), loc_state CHAR(2), loc_zip VARCHAR(10), bd_cert_num VARCHAR(20));\nCREATE TABLE patients (patient_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, date_of_registration DATE, gender VARCHAR(10), email VARCHAR(100), phone VARCHAR(20), addr_street VARCHAR(100), addr_city VARCHAR(50), addr_state CHAR(2), addr_zip VARCHAR(10), ins_type TEXT, ins_policy_num VARCHAR(20), height_cm FLOAT, weight_kg FLOAT);\nCREATE TABLE drugs (drug_id SERIAL PRIMARY KEY, drug_name VARCHAR(100), manufacturer VARCHAR(100), drug_type TEXT, moa TEXT, fda_appr_dt DATE, admin_route TEXT, dos_amt DECIMAL(10,2), dos_unit VARCHAR(20), dos_freq_hrs INT, ndc VARCHAR(20));\nCREATE TABLE diagnoses (diag_id SERIAL PRIMARY KEY, diag_code VARCHAR(10), diag_name VARCHAR(100), diag_desc TEXT);\nCREATE TABLE treatments (treatment_id SERIAL PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), doc_id INT REFERENCES doctors(doc_id), drug_id INT REFERENCES drugs(drug_id), diag_id INT REFERENCES diagnoses(diag_id), start_dt DATE, end_dt DATE, is_placebo BOOLEAN, tot_drug_amt DECIMAL(10,2), drug_unit TEXT);\nCREATE TABLE outcomes (outcome_id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), assess_dt DATE, day7_lesion_cnt INT, day30_lesion_cnt INT, day100_lesion_cnt INT, day7_pasi_score DECIMAL(4,1), day30_pasi_score DECIMAL(4,1), day100_pasi_score DECIMAL(4,1), day7_tewl DECIMAL(5,2), day30_tewl DECIMAL(5,2), day100_tewl DECIMAL(5,2), day7_itch_vas INT, day30_itch_vas INT, day100_itch_vas INT, day7_hfg DECIMAL(4,1), day30_hfg DECIMAL(4,1), day100_hfg DECIMAL(4,1));\nCREATE TABLE adverse_events (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), reported_dt DATE, description TEXT);\nCREATE TABLE concomitant_meds (id SERIAL PRIMARY KEY, treatment_id INT REFERENCES treatments(treatment_id), med_name VARCHAR(100), start_dt TEXT, end_dt TEXT, dose_amt DECIMAL(10,2), dose_unit TEXT, freq_hrs INT);",
        "query_category": "basic_left_join"
    },
    {
        "question": "Who are the top 2 merchants (receiver type 1) by total transaction amount in the past 150 days (inclusive of 150 days ago)? Return the merchant name, total number of transactions, and total transaction amount.",
        "answer": "SELECT m.name AS merchant_name, COUNT(t.txid) AS total_transactions, SUM(t.amount) AS total_amount FROM consumer_div.merchants m JOIN consumer_div.wallet_transactions_daily t ON m.mid = t.receiver_id WHERE t.receiver_type = 1 AND t.created_at >= CURRENT_DATE - INTERVAL '150 days' GROUP BY m.name ORDER BY total_amount DESC LIMIT 2",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "How many distinct active users sent money per month in 2023? Return the number of active users per month (as a date), starting from the earliest date. Do not include merchants in the query. Only include successful transactions.",
        "answer": "SELECT DATE_TRUNC('month', t.created_at) AS MONTH, COUNT(DISTINCT t.sender_id) AS active_users FROM consumer_div.wallet_transactions_daily t JOIN consumer_div.users u ON t.sender_id = u.uid WHERE t.sender_type = 0 AND t.status = 'success' AND u.status = 'active' AND t.created_at >= '2023-01-01' AND t.created_at < '2024-01-01' GROUP BY MONTH ORDER BY MONTH",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_join_date_group_order_limit"
    },
    {
        "question": "What are the top 3 most frequently used coupon codes? Return the coupon code, total number of redemptions, and total amount redeemed.",
        "answer": "SELECT c.code AS coupon_code, COUNT(t.txid) AS redemption_count, SUM(t.amount) AS total_discount FROM consumer_div.coupons c JOIN consumer_div.wallet_transactions_daily t ON c.cid = t.coupon_id GROUP BY c.code ORDER BY redemption_count DESC LIMIT 3",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "Which are the top 5 countries by total transaction amount sent by users, sender_type = 0? Return the country, number of distinct users who sent, and total transaction amount.",
        "answer": "SELECT u.country, COUNT(DISTINCT t.sender_id) AS user_count, SUM(t.amount) AS total_amount FROM consumer_div.users u JOIN consumer_div.wallet_transactions_daily t ON u.uid = t.sender_id WHERE t.sender_type = 0 GROUP BY u.country ORDER BY total_amount DESC LIMIT 5",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_join_group_order_limit"
    },
    {
        "question": "Return the distinct list of merchant IDs that have received money from a transaction. Consider all transaction types in the results you return, but only include the merchant ids in your final answer.",
        "answer": "SELECT DISTINCT m.mid AS merchant_id FROM consumer_div.merchants m JOIN consumer_div.wallet_transactions_daily t ON m.mid = t.receiver_id WHERE t.receiver_type = 1",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "Return the distinct list of user IDs who have received transaction notifications.",
        "answer": "SELECT DISTINCT user_id FROM consumer_div.notifications WHERE type = 'transaction'",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_join_distinct"
    },
    {
        "question": "What are the top 3 most common transaction statuses and their respective counts?",
        "answer": "SELECT status, COUNT(*) AS COUNT FROM consumer_div.wallet_transactions_daily GROUP BY status ORDER BY COUNT DESC LIMIT 3",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "What are the top 2 most frequently used device types for user sessions and their respective counts?",
        "answer": "SELECT device_type, COUNT(*) AS COUNT FROM consumer_div.user_sessions GROUP BY device_type ORDER BY COUNT DESC LIMIT 2",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_group_order_limit"
    },
    {
        "question": "Return users (user ID and username) who have not received any notifications",
        "answer": "SELECT u.uid, u.username FROM consumer_div.users u LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id WHERE n.id IS NULL",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_left_join"
    },
    {
        "question": "Return merchants (merchant ID and name) who have not issued any coupons.",
        "answer": "SELECT m.mid AS merchant_id, m.name AS merchant_name FROM consumer_div.merchants m LEFT JOIN consumer_div.coupons c ON m.mid = c.merchant_id WHERE c.cid IS NULL",
        "db_name": "ewallet",
        "context": "CREATE SCHEMA IF NOT EXISTS consumer_div;\n\nCREATE TABLE consumer_div.users (uid BIGINT PRIMARY KEY, username VARCHAR(50) NOT NULL, email VARCHAR(100) NOT NULL, phone_number VARCHAR(20), created_at TIMESTAMP NOT NULL, last_login_at TIMESTAMP, user_type VARCHAR(20) NOT NULL, status VARCHAR(20) NOT NULL, country VARCHAR(2), address_billing TEXT, address_delivery TEXT, kyc_status VARCHAR(20), kyc_verified_at TIMESTAMP);\n\nCREATE TABLE consumer_div.merchants (mid BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL, description TEXT, website_url VARCHAR(200), logo_url VARCHAR(200), created_at TIMESTAMP NOT NULL, country VARCHAR(2), state VARCHAR(50), city VARCHAR(50), postal_code VARCHAR(20), address TEXT, status VARCHAR(20) NOT NULL, category VARCHAR(50), sub_category VARCHAR(50), mcc INT, contact_name VARCHAR(100), contact_email VARCHAR(100), contact_phone VARCHAR(20));\n\nCREATE TABLE consumer_div.coupons (cid BIGINT PRIMARY KEY, merchant_id BIGINT NOT NULL REFERENCES consumer_div.merchants(mid), code VARCHAR(20) NOT NULL, description TEXT, start_date DATE NOT NULL, end_date DATE NOT NULL, discount_type VARCHAR(20) NOT NULL, discount_value DECIMAL(10,2) NOT NULL, min_purchase_amount DECIMAL(10,2), max_discount_amount DECIMAL(10,2), redemption_limit INT, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, updated_at TIMESTAMP);\n\nCREATE TABLE consumer_div.wallet_transactions_daily (txid SERIAL PRIMARY KEY, sender_id BIGINT NOT NULL, sender_type INT NOT NULL, receiver_id BIGINT NOT NULL, receiver_type INT NOT NULL, amount DECIMAL(10,2) NOT NULL, status VARCHAR(20) NOT NULL, type VARCHAR(20) NOT NULL, description TEXT, coupon_id BIGINT, created_at TIMESTAMP NOT NULL, completed_at TIMESTAMP, transaction_ref VARCHAR(36) NOT NULL, gateway_name VARCHAR(50), gateway_ref VARCHAR(50), device_id VARCHAR(50), ip_address VARCHAR(50), user_agent TEXT);\n\nCREATE TABLE consumer_div.wallet_user_balance_daily (user_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.wallet_merchant_balance_daily (merchant_id BIGINT, balance DECIMAL(10,2) NOT NULL, updated_at TIMESTAMP NOT NULL);\n\nCREATE TABLE consumer_div.notifications (id SERIAL PRIMARY KEY, user_id INT NOT NULL REFERENCES consumer_div.users(uid), message TEXT NOT NULL, type VARCHAR(50) NOT NULL, status VARCHAR(20) NOT NULL, created_at TIMESTAMP NOT NULL, read_at TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36), action_url TEXT);\n\nCREATE TABLE consumer_div.user_sessions (user_id BIGINT NOT NULL, session_start_ts TIMESTAMP NOT NULL, session_end_ts TIMESTAMP, device_type VARCHAR(10), device_id VARCHAR(36));\n\nCREATE TABLE consumer_div.user_setting_snapshot (user_id BIGINT NOT NULL, snapshot_date DATE NOT NULL, tx_limit_daily DECIMAL(10,2), tx_limit_monthly DECIMAL(10,2), membership_status INTEGER, password_hash VARCHAR(255), api_key VARCHAR(255), verified_devices TEXT, verified_ips TEXT, mfa_enabled BOOLEAN, marketing_opt_in BOOLEAN, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, snapshot_date));",
        "query_category": "basic_left_join"
    }
]